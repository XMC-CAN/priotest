   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "can_node.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_CAN_NODE_SetEventNodePointer,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_CAN_NODE_SetEventNodePointer:
  25              	.LFB155:
  26              	 .file 1 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest\\Libraries\\XMCLib\\inc/xmc_can.h"
   1:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
   2:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @file xmc_can.h
   3:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @date 2016-01-12
   4:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
   5:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @cond
   6:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  **************************************************************************************************
   7:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMClib v2.1.4 - XMC Peripheral Driver Library 
   8:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
   9:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * All rights reserved.                        
  11:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *                                             
  12:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * following conditions are met:   
  14:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *                                                                              
  15:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * disclaimer.                        
  17:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * 
  18:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * 
  21:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * products derived from this software without specific prior written permission.                  
  23:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *                                                                              
  24:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *                                                                              
  32:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  **************************************************************************************************
  35:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
  36:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Change History
  37:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * --------------
  38:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
  39:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * 2015-02-20:
  40:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *     - Initial <br>
  41:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *     - Documentation improved <br>
  42:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
  43:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * 2015-05-20:
  44:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *     - New elements have added in XMC_CAN_MO_t data structure <br>
  45:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  46:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *     - XMC_CAN_STATUS_t enum structure has updated. <br>
  47:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
  48:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * 2015-06-20:
  49:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *     - New APIs added: XMC_CAN_NODE_ClearStatus(),XMC_CAN_MO_ReceiveData(), XMC_CAN_GATEWAY_InitD
  50:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  51:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *      
  52:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * 2015-07-09:
  53:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *     - New API added: XMC_CAN_NODE_Enable. <br>
  54:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
  55:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * 2015-09-01:
  56:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *     - Removed fCANB clock support <br>
  57:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
  58:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * 2015-09-15:
  59:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *     - Added "xmc_can_map.h" include <br>
  60:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * <b>Details of use for node configuration related APIs</b><br>
  61:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Please use the XMC_CAN_NODE_SetInitBit() and XMC_CAN_NODE_EnableConfigurationChange() before cal
  62:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * related APIs.
  63:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange() and  XMC_CAN_NODE_ResetInitBit() can be called for dis
  64:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * change and enable the node for communication afterwards.
  65:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Do not use this when configuring the nominal bit time with XMC_CAN_NODE_NominalBitTimeConfigure(
  66:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Enable/Disable node configuration change is taken in account.
  67:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
  68:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * <b>Example Usage:</b>
  69:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @code
  70:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * //disabling the Node
  71:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_SetInitBit(CAN_NODE0)
  72:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * //allowing the configuration change
  73:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0)
  74:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * //Node configuration
  75:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_FrameCounterConfigure(CAN_NODE0,&can_node_frame_counter);
  76:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack(CAN_NODE0)
  77:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * //disable configuration
  78:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0)
  79:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * //Enabling node for communication
  80:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_ResetInitBit(CAN_NODE0)
  81:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @endcode
  82:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
  83:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @endcond
  84:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
  85:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
  86:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
  87:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #ifndef XMC_CAN_H
  88:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #define XMC_CAN_H
  89:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
  90:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**************************************************************************************************
  91:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * HEADER FILES
  92:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  **************************************************************************************************
  93:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #include "xmc_common.h"
  94:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
  95:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #if defined(CAN)
  96:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
  97:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #include "xmc_scu.h"
  98:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #include "xmc_can_map.h"
  99:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #include <string.h>
 100:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 101:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 102:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @addtogroup XMClib XMC Peripheral Library
 103:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @{
 104:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 105:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 106:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 107:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @addtogroup CAN
 108:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @brief Controller Area Network Controller (CAN) driver for the XMC microcontroller family.
 109:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 110:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * CAN driver provides transfer of CAN frames in accordance with CAN specificetion V2.0 B (active).
 111:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * can receive and transmit standard frames with 11-bit identifiers as well as extended frames with
 112:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * All CAN nodes share a common set of message objects. Each message object can be individually all
 113:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * CAN nodes. 
 114:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Besides serving as a storage container for incoming and outgoing frames, message objects can be 
 115:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * gateways between 
 116:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * the CAN nodes or to setup a FIFO buffer. The CAN module provides Analyzer mode,Loop-back mode an
 117:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * node analysis.
 118:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * 
 119:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * The driver is divided into five sections:
 120:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par CAN Global features:
 121:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * -# Allows to configure module frequency using function XMC_CAN_Init().
 122:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * -# Allows to configure Module interrupt using configuration structure XMC_CAN_NODE_INTERRUPT_TRI
 123:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *    XMC_CAN_EventTrigger().
 124:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * 
 125:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par CAN_NODE features:
 126:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * -# Allows to set baud rate by configuration structure XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t and
 127:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *    function XMC_CAN_NODE_NominalBitTimeConfigure().
 128:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * -# Allows to configure loop-back mode using fuction XMC_CAN_NODE_EnableLoopBack().
 129:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * -# Allows to configure CAN Node analyzer using function XMC_CAN_NODE_SetAnalyzerMode().
 130:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * -# Allows CAN node events enable/ disable by enum structure XMC_CAN_NODE_EVENT_t and functions X
 131:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *    and XMC_CAN_NODE_DisableEvent().
 132:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * -# Provides bit timming analysis, configuration structure XMC_CAN_NODE_FRAME_COUNTER_t and funct
 133:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *    XMC_CAN_NODE_FrameCounterConfigure(). 
 134:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 135:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par CAN_MO features:
 136:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * -# Allows message object initialization by configuration structure XMC_CAN_MO_t and function XMC
 137:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * -# Allows transfer of message objects using functions XMC_CAN_MO_Transmit() and XMC_CAN_MO_Recei
 138:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * -# Allows to configure Single Data Transfer and Single Transmit Trial using functions 
 139:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_MO_EnableSingleTransmitTrial() and XMC_CAN_MO_EnableSingleTransmitTrial().
 140:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * -# Allows to configure MO events using function XMC_CAN_MO_EnableEvent(). 
 141:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 142:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par CAN_FIFO features:
 143:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * -# Allows message object FIFO structure by configuration structure XMC_CAN_FIFO_CONFIG_t and fun
 144:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_TXFIFO_ConfigMOBaseObject() , XMC_CAN_RXFIFO_ConfigMOBaseObject() and XMC_CAN_TXFIFO_Tra
 145:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 146:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par CAN_GATEWAY features:
 147:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * -# Provides Gateway mode, configuration structure XMC_CAN_GATEWAY_CONFIG_t and function XMC_CAN_
 148:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 149:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @{
 150:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 151:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 152:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**************************************************************************************************
 153:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * MACROS
 154:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  **************************************************************************************************
 155:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Pos (18U)		/**< Standard Identifier bitposition */
 156:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 157:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Msk ((0x000007FFUL) << XMC_CAN_MO_MOAR_STDID_Pos) /**< Standard Ident
 158:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 159:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #define CAN_NODE_NIPR_Msk         (0x7UL)	/**< Node event mask */
 160:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 161:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #define CAN_MO_MOIPR_Msk          (0x7U)	/**< Message Object event mask */
 162:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 163:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**************************************************************************************************
 164:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * ENUMS
 165:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  **************************************************************************************************
 166:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 167:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  Defines the status of CAN, to verify the CAN related API calls. Use type \a XMC_CAN_STATUS_t fo
 168:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** */
 169:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_STATUS
 170:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 171:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_STATUS_SUCCESS,           /**< Driver accepted application request*/
 172:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_STATUS_ERROR,             /**< Returned when unknown error occurred */
 173:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_STATUS_BUSY,              /**< Driver is busy and can not handle request*/
 174:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_STATUS_MO_NOT_ACCEPTABLE, /**< Message object type not allowed*/
 175:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_STATUS_MO_DISABLED       /**< Returned if Message object is disabled */
 176:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_STATUS_t;
 177:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 178:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 179:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** * Defines CAN module Panel Commands . Use type \a XMC_CAN_PANCMD_t for this enum.
 180:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** */
 181:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_PANCMD
 182:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 183:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_PANCMD_INIT_LIST = 1U,              /**< Command to initialize a list */
 184:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_ALLOCATE = 2U,        /**< Command to activate static allocation */
 185:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_ALLOCATE = 3U,       /**< Command to activate dynamic allocation */
 186:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 187:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEFORE = 4U,	  /**< Remove a message object from the list and insert
 188:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEFORE = 5U,  /**< Command to activate dynamic allocation */
 189:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEHIND = 6U,   /**< Command to activate dynamic allocation */
 190:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEHIND = 7U   /**< Command to activate dynamic allocation */
 191:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_PANCMD_t;
 192:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 193:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 194:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** * Defines loop Back Mode, to enable/disable an in-system test of the MultiCAN module .
 195:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** * Use type \a XMC_CAN_LOOKBACKMODE_t for this enum.
 196:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** */
 197:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_LOOKBACKMODE
 198:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 199:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_ENABLED,   /**< Each CAN node can be connected to the internal CAN bus  */
 200:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_DISABLED   /**< Each CAN node can be connected to the external CAN bus */
 201:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_LOOKBACKMODE_t;
 202:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 203:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 204:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Defines Message Object direction. Use type \a XMC_CAN_MO_TYPE_t for this enum.
 205:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 206:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_MO_TYPE
 207:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 208:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_TYPE_RECMSGOBJ,   /**< Receive Message Object selected */
 209:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_TYPE_TRANSMSGOBJ  /**< Transmit Message Object selected */
 210:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_MO_TYPE_t;
 211:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 212:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 213:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Defines Data frame types. Use type \a XMC_CAN_FRAME_TYPE_t for this enum.
 214:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 215:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_TYPE
 216:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 217:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_STANDARD_11BITS, /**< Standard type identifier*/
 218:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_EXTENDED_29BITS  /**< Extended type identifier*/
 219:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_FRAME_TYPE_t;
 220:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 221:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 222:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 223:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Defines arbitration mode for transmit acceptance filtering. Use type \a XMC_CAN_ARBITRATION_MODE
 224:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 225:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_ARBITRATION_MODE
 226:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 227:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_1 = 1U,   /**< Transmit acceptance based in the order(p
 228:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_IDE_DIR_BASED_PRIO_2 = 2U, /**< Transmit acceptance filtering is based o
 229:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_3 = 3U    /**< Transmit acceptance based in the order *
 230:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_ARBITRATION_MODE_t;
 231:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 232:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 233:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Defines the operation mode of the frame counter. Use type \a XMC_CAN_FRAME_COUNT_MODE_t for this
 234:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 235:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_COUNT_MODE
 236:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 237:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE = 0U, 			 /**< Frame Count Mode */
 238:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_TIME_STAMP = 1U,  /**< The frame counter is incremented with the beginni
 239:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_BIT_TIMING = 2U   /**< Used for baud rate detection and analysis of the 
 240:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_FRAME_COUNT_MODE_t;
 241:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 242:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 243:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Defines the Divider Modes. Use type \a XMC_CAN_DM_t for this enum.
 244:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 245:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_DM
 246:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 247:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_DM_NORMAL = 1U,      /**< Normal divider mode */
 248:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_DM_FRACTIONAL = 2U,  /**< Fractional divider mode */
 249:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_DM_OFF = 3U          /**< Divider Mode in off-state*/
 250:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_DM_t;
 251:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 252:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 253:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Defines mask value for CAN Message Object set status. Use type \a XMC_CAN_MO_SET_STATUS_t for th
 254:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 255:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_MO_SET_STATUS
 256:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 257:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_PENDING = CAN_MO_MOCTR_SETRXPND_Msk,     /**< Set receive pending */
 258:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_PENDING = CAN_MO_MOCTR_SETTXPND_Msk,     /**< Set transmit pending */
 259:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_UPDATING = CAN_MO_MOCTR_SETRXUPD_Msk,    /**< Set receive updating */
 260:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_NEW_DATA = CAN_MO_MOCTR_SETNEWDAT_Msk,      /**< Set new data */
 261:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_SETMSGLST_Msk,  /**< Set message lost */
 262:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_SETMSGVAL_Msk, /**< Set message valid */
 263:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_SETRTSEL_Msk, /**< Set transmit/receive selec
 264:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_ENABLE = CAN_MO_MOCTR_SETRXEN_Msk,       /**< Set receive enable */
 265:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_REQUEST = CAN_MO_MOCTR_SETTXRQ_Msk,      /**< Set transmit request */
 266:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_SETTXEN0_Msk,     /**< Set transmit enable 0 */
 267:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_SETTXEN1_Msk,     /**< Set transmit enable 1 */
 268:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_SETDIR_Msk /**< Set message direction */
 269:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_MO_SET_STATUS_t;
 270:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 271:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 272:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Defines mask value for CAN Message Object reset status. Use type \a XMC_CAN_MO_RESET_STATUS_t fo
 273:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 274:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_MO_RESET_STATUS
 275:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 276:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_PENDING = CAN_MO_MOCTR_RESRXPND_Msk,     /**< Reset receive pending */
 277:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_PENDING = CAN_MO_MOCTR_RESTXPND_Msk,     /**< Reset transmit pending *
 278:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_UPDATING = CAN_MO_MOCTR_RESRXUPD_Msk,    /**< Reset receive updating *
 279:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_NEW_DATA = CAN_MO_MOCTR_RESNEWDAT_Msk,      /**< Reset new data */
 280:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_RESMSGLST_Msk,  /**< Reset message lost */
 281:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_RESMSGVAL_Msk, /**< Reset message valid */
 282:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_RESRTSEL_Msk, /**< Reset transmit/receive s
 283:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_ENABLE = CAN_MO_MOCTR_RESRXEN_Msk,       /**< Reset receive enable */
 284:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_REQUEST = CAN_MO_MOCTR_RESTXRQ_Msk,      /**< Reset transmit request *
 285:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_RESTXEN0_Msk,     /**< Reset transmit enable 0 
 286:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_RESTXEN1_Msk,     /**< Reset transmit enable 1 
 287:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_RESDIR_Msk /**< Reset message direction 
 288:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_MO_RESET_STATUS_t;
 289:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 290:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 291:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Defines mask value for CAN Message Object status. Use type \a XMC_CAN_MO_STATUS_t for this enum.
 292:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 293:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_MO_STATUS
 294:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 295:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_PENDING = CAN_MO_MOSTAT_RXPND_Msk,                   /**< Defines message ha
 296:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_PENDING = CAN_MO_MOSTAT_TXPND_Msk,                   /**< Defines message ha
 297:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_UPDATING = CAN_MO_MOSTAT_RXUPD_Msk,                  /**< Defines Message id
 298:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_NEW_DATA = CAN_MO_MOSTAT_NEWDAT_Msk,                    /**< Defines no update 
 299:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_LOST = CAN_MO_MOSTAT_MSGLST_Msk,                /**< CAN message is los
 300:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_VALID = CAN_MO_MOSTAT_MSGVAL_Msk,               /**< Message valid */
 301:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_TX_SELECTED = CAN_MO_MOSTAT_RTSEL_Msk,               /**< Transmit/Receive s
 302:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_ENABLE = CAN_MO_MOSTAT_RXEN_Msk,                     /**< Receive enable */
 303:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_REQUEST = CAN_MO_MOSTAT_TXRQ_Msk,                    /**< Transmit request *
 304:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE0 = CAN_MO_MOSTAT_TXEN0_Msk,                   /**< Transmit enable 0 
 305:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE1 = CAN_MO_MOSTAT_TXEN1_Msk,                   /**< Transmit enable 1 
 306:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_DIRECTION = CAN_MO_MOSTAT_DIR_Msk,              /**< Message direction 
 307:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_LIST = CAN_MO_MOSTAT_LIST_Msk,                          /**< List allocation */
 308:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_PREVIOUS_MO = CAN_MO_MOSTAT_PPREV_Msk,    	/**< Pointer to previous 
 309:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_NEXT_MO = (int32_t)CAN_MO_MOSTAT_PNEXT_Msk   /**< Pointer to next Me
 310:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_MO_STATUS_t;
 311:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 312:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 313:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Defines mask value for CAN Node status. Use type \a XMC_CAN_NODE_STATUS_t for this enum.
 314:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 315:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_NODE_STATUS
 316:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 317:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LAST_ERROR_CODE = CAN_NODE_NSR_LEC_Msk,       /**< Last Error Code */
 318:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_TX_OK = CAN_NODE_NSR_TXOK_Msk,                /**< Message transmitted succes
 319:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_RX_OK = CAN_NODE_NSR_RXOK_Msk,                /**< Message received successfu
 320:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ALERT_WARNING = CAN_NODE_NSR_ALERT_Msk,       /**< Alert warning */
 321:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ERROR_WARNING_STATUS = CAN_NODE_NSR_EWRN_Msk, /**< Error warning status */
 322:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_BUS_OFF= CAN_NODE_NSR_BOFF_Msk,				/**< Bus-off status */
 323:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_LENGTH_ERROR = CAN_NODE_NSR_LLE_Msk,     /**< List length error */
 324:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_OBJECT_ERROR = CAN_NODE_NSR_LOE_Msk,     /**< List object error */
 325:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 326:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_SUSPENDED_ACK = CAN_NODE_NSR_SUSACK_Msk       /**< Suspend Acknowledge */
 327:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #endif
 328:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_NODE_STATUS_t;
 329:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 330:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 331:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Defines mask value for CAN Node control like initialization, node disable and analyzer mode .
 332:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Use type \a XMC_CAN_NODE_CONTROL_t for this enum.
 333:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 334:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_NODE_CONTROL
 335:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 336:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_NODE_INIT = CAN_NODE_NCR_INIT_Msk,            /**< Node initialization */
 337:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_TX_INT_ENABLE = CAN_NODE_NCR_TRIE_Msk,        /**< Transfer event enable */
 338:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_LEC_INT_ENABLE = CAN_NODE_NCR_LECIE_Msk,      /**< LEC Indicated Error Event
 339:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_ALERT_INT_ENABLE = CAN_NODE_NCR_ALIE_Msk,     /**< Alert Event Enable */
 340:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_DISABLE = CAN_NODE_NCR_CANDIS_Msk,        /**< CAN disable */
 341:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CONF_CHANGE_ENABLE= CAN_NODE_NCR_CCE_Msk,     /**< Configuration change enab
 342:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_ANALYZER_NODEDE = CAN_NODE_NCR_CALM_Msk,  /**< CAN Analyzer mode */
 343:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 344:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_SUSPENDED_ENABLE = CAN_NODE_NCR_SUSEN_Msk     /**< Suspend Enable */
 345:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #endif
 346:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_NODE_CONTROL_t;
 347:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 348:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 349:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Defines mask value for CAN Node events. Use type \a XMC_CAN_NODE_EVENT_t for this enum.
 350:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 351:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_NODE_EVENT
 352:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 353:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_TX_INT = CAN_NODE_NCR_TRIE_Msk,   /**< Node Transfer OK Event */
 354:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_ALERT = CAN_NODE_NCR_ALIE_Msk,    /**< Node Alert Event */
 355:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_LEC = CAN_NODE_NCR_LECIE_Msk,     /**< Last Error code Event */
 356:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_CFCIE = CAN_NODE_NFCR_CFCIE_Msk   /**< CAN Frame Count Event  */
 357:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_NODE_EVENT_t;
 358:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 359:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 360:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Defines mask value for CAN node pointer events position. Use type \a XMC_CAN_NODE_POINTER_EVENT_
 361:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 362:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_NODE_POINTER_EVENT
 363:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 364:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_ALERT = CAN_NODE_NIPR_ALINP_Pos,           /**< Node Alert Event node 
 365:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_LEC = CAN_NODE_NIPR_LECINP_Pos,            /**< Last Error code Event 
 366:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK = CAN_NODE_NIPR_TRINP_Pos,     /**< Transmit Event node po
 367:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER = CAN_NODE_NIPR_CFCINP_Pos   /**< CAN Frame Count Event 
 368:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_NODE_POINTER_EVENT_t;
 369:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 370:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 371:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Defines CAN Message Object event node pointer position. Use type \a XMC_CAN_MO_POINTER_EVENT_t f
 372:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 373:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_MO_POINTER_EVENT
 374:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 375:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_TRANSMIT = CAN_MO_MOIPR_TXINP_Pos,     /**< Transmit Event node pointer 
 376:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_RECEIVE = CAN_MO_MOIPR_RXINP_Pos       /**< Receive Event node pointer *
 377:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_MO_POINTER_EVENT_t;
 378:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 379:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 380:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Defines mask value for CAN Message Object event type. Use type \a XMC_CAN_MO_EVENT_t for this en
 381:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 382:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_MO_EVENT
 383:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 384:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_EVENT_TRANSMIT = CAN_MO_MOFCR_TXIE_Msk,  /**< Message Object transmit event */
 385:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_EVENT_RECEIVE = CAN_MO_MOFCR_RXIE_Msk,   /**< Message Object receive event */
 386:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_EVENT_OVERFLOW = CAN_MO_MOFCR_OVIE_Msk,  /**< Message Object overflow event */
 387:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_MO_EVENT_t;
 388:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 389:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 390:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Defines the possible receive inputs. Use type \a XMC_CAN_NODE_RECEIVE_INPUT_t for this enum.
 391:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 392:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_NODE_RECEIVE_INPUT
 393:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 394:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCA, 	/**< CAN Receive Input A */
 395:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCB,		/**< CAN Receive Input B */
 396:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCC,		/**< CAN Receive Input C */
 397:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCD,		/**< CAN Receive Input D */
 398:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCE,		/**< CAN Receive Input E */
 399:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCF,		/**< CAN Receive Input F */
 400:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCG,		/**< CAN Receive Input G */
 401:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCH		/**< CAN Receive Input H */
 402:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_NODE_RECEIVE_INPUT_t;
 403:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 404:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 405:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Defines last error transfer direction. Use type \a XMC_CAN_NODE_LAST_ERROR_DIR_t for this enum.
 406:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 407:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_DIR
 408:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 409:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_RECEPCION,    /**< The last error occurred while the CAN n
 410:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_TRANSMISSION  /**< The last error occurred while the CAN n
 411:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_DIR_t;
 412:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 413:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 414:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 415:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Defines last error increment. Use type \a XMC_CAN_NODE_LAST_ERROR_INC_t for this enum.
 416:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 417:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_INC
 418:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 419:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_1, /**< The last error led to an error counter increment of 1. */
 420:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_8  /**< The last error led to an error counter increment of 8. */
 421:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_INC_t;
 422:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 423:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 424:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Defines interrupt request on interrupt output line INT_O[n]. Use type \a XMC_CAN_NODE_INTERRUPT_
 425:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 426:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_NODE_INTERRUPT_TRIGGER
 427:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 428:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_0 = 0x1U,
 429:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_1 = 0x2U,
 430:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_2 = 0x4U,
 431:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_3 = 0x8U,
 432:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_4 = 0x16U,
 433:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_5 = 0x32U,
 434:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_6 = 0x64U,
 435:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_7 = 0x128U,
 436:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_NODE_INTERRUPT_TRIGGER_t;
 437:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 438:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 439:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 440:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Defines the Clock source used for the MCAN peripheral. @note Only available for XMC1400, XMC4800
 441:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 442:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_CANCLKSRC
 443:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 444:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #if UC_FAMILY == XMC4
 445:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U,
 446:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FOHP = 0x2U,
 447:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #else
 448:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_MCLK = 0x1U,
 449:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FOHP = 0x2U
 450:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #endif
 451:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_CANCLKSRC_t;
 452:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #endif
 453:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 454:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**************************************************************************************************
 455:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * DATA STRUCTURES
 456:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  **************************************************************************************************
 457:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 458:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Defines CAN node Nominal Bit Time. Use type \a XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t for this s
 459:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** */
 460:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef struct XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG
 461:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 462:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   uint32_t can_frequency;       /**< Frequency of the CAN module(fCAN). \a can_frequency shall be r
 463:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   uint32_t baudrate;        	/**< Specifies the node baud rate. Unit: baud \a baudrate shall be ran
 464:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   uint16_t sample_point;    	/**< Sample point is used to compensate mismatch between transmitter a
 465:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 									 the synchronization segment. Sample point. Range = [0, 10000] with respect [0%, 100%] of 
 466:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   uint16_t sjw;             	/**< (Re) Synchronization Jump Width. Range:0-3 */
 467:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t;
 468:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 469:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 470:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Defines base, top and bottom of CAN Message Object FIFO Structure. Use type \a XMC_CAN_FIFO_CONF
 471:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * A FIFO consists of one base object and n slave objects.
 472:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 473:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef struct XMC_CAN_FIFO_CONFIG
 474:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 475:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   uint8_t fifo_bottom;		/**< points to the first element(slave object) in a FIFO structure.Range :0
 476:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   uint8_t fifo_top;			/**< points to the last element(slave object) in a FIFO structure. Range :0-6
 477:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   uint8_t fifo_base;		/**< points to the actual target object(Base object) within a FIFO/Gateway st
 478:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_FIFO_CONFIG_t;
 479:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 480:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 481:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Defines CAN Gateway FIFO structure and provides additional options for gateway destination objec
 482:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Use type \a XMC_CAN_GATEWAY_CONFIG_t for this structure.
 483:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 484:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef struct XMC_CAN_GATEWAY_CONFIG
 485:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 486:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   uint8_t gateway_bottom; 			/**< points to the first element(gateway destination object) in a FIFO
 487:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   uint8_t gateway_top;				/**< points to the last element(gateway destination object) in a FIFO str
 488:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   uint8_t gateway_base;				/**< points to the actual target object within a FIFO/Gateway structure.
 489:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   bool gateway_data_frame_send;		/**< TXRQ updated in the gateway destination object after the inte
 490:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   	  	  	  	  	  	  	  	  	  	 to the gateway destination object */
 491:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   bool gateway_identifier_copy;		/**< The identifier of the gateway source object (after storing th
 492:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   	  	  	  	  	  	  	  	  	  	 to the gateway destination object. */
 493:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 494:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   bool gateway_data_length_code_copy; /**< Data length code of the gateway source object (after sto
 495:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   	  	  	  	  	  	  	  	  	  	   gateway destination object */
 496:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   bool gateway_data_copy;  /**< Data fields in registers MODATALn and MODATAHn of the gateway sourc
 497:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   	  	  	  	  	  	  	  	are copied to the gateway destination.*/
 498:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 499:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_GATEWAY_CONFIG_t;
 500:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 501:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 502:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** * Defines CAN Global Initialization structure
 503:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** */
 504:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef CAN_GLOBAL_TypeDef XMC_CAN_t;
 505:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 506:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /*Anonymous structure/union guard start*/
 507:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #if defined(__CC_ARM)
 508:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   #pragma push
 509:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   #pragma anon_unions
 510:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #elif defined(__TASKING__)
 511:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   #pragma warning 586
 512:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #endif
 513:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 514:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 515:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Defines frame counter configuration. Use type \a XMC_CAN_NODE_FRAME_COUNTER_t for this structure
 516:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * It provides configuration of frame counter that counts transmitted/received CAN frames or obtain
 517:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * when a frame has been started to transmit or be received by the CAN node.
 518:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** */
 519:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef struct XMC_CAN_NODE_FRAME_COUNTER
 520:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 521:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 522:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   union{
 523:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 	  struct{
 524:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 		  uint32_t : 16;
 525:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 		  uint32_t can_frame_count_selection:3;		/**<   Defines function of the frame counter  */
 526:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 		  uint32_t can_frame_count_mode:2;			/**<   Determines the operation mode of the frame counter */
 527:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 		  uint32_t : 11;
 528:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 	  };
 529:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 	  uint32_t nfcr;
 530:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 531:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   };
 532:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_NODE_FRAME_COUNTER_t;
 533:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 534:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 535:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *Defines Node Runtime structure.
 536:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** */
 537:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef CAN_NODE_TypeDef  XMC_CAN_NODE_t;            /**<  pointer to the Node CAN register */
 538:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 539:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 540:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Defines CAN Message Object runtime elements. Use type \a XMC_CAN_MO_t for this structure.
 541:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 542:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** typedef struct XMC_CAN_MO
 543:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 544:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 	CAN_MO_TypeDef *can_mo_ptr;                     /**< Pointer to the Message Object CAN register */
 545:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 	union{
 546:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 		struct{
 547:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 			uint32_t can_identifier:29;            /**< standard (11 bit)/Extended (29 bit) message identifi
 548:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 			uint32_t can_id_mode:1;                /**< Standard/Extended identifier support */
 549:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 			uint32_t can_priority:2;               /**< Arbitration Mode/Priority */
 550:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 		};
 551:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 		uint32_t mo_ar;
 552:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 	};
 553:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 	union{
 554:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 		struct{
 555:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 			uint32_t can_id_mask:29;              /**< CAN Identifier of Message Object */
 556:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 			uint32_t can_ide_mask:1;              /**< Identifier Extension Bit of Message Object */
 557:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 		};
 558:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 		uint32_t mo_amr;
 559:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 	};
 560:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   uint8_t can_data_length;                        /**< Message data length, Range:0-8 */
 561:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 562:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   union{
 563:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 564:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   		uint8_t can_data_byte[8];                 /**< Each position of the array represents a data byt
 565:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   		uint16_t can_data_word[4];                /**< Each position of the array represents a 16 bits 
 566:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   		uint32_t can_data[2];                     /**< can_data[0] lower 4 bytes of the data. can_data[
 567:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   		 	 	 	 	 	 	 	 	 	 	    of the data */
 568:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   		uint64_t can_data_long;                   /** Data of the Message Object*/
 569:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   	  };
 570:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 571:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_TYPE_t can_mo_type;                  /**<  Message Type */
 572:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 573:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_MO_t;
 574:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /*Anonymous structure/union guard end*/
 575:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #if defined(__CC_ARM)
 576:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   #pragma pop
 577:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #elif defined(__TASKING__)
 578:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   #pragma warning restore
 579:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #endif
 580:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**************************************************************************************************
 581:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * API Prototypes
 582:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  **************************************************************************************************
 583:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #ifdef __cplusplus
 584:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** extern "C" {
 585:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #endif
 586:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 587:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 588:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 589:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param obj	Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 590:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * 				for details.
 591:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 592:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 593:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 594:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 595:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  Disables CAN module. In disabled state, no registers of CAN module can be read or written excep
 596:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 597:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 598:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_Enable()\n\n\n
 599:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 600:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 601:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 602:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** void XMC_CAN_Disable(XMC_CAN_t *const obj);
 603:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 604:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 605:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 606:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 607:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * 			   for details.
 608:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 609:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 610:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 611:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 612:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  Enables CAN module and initializes all CAN registers to reset values. It is required to re-conf
 613:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  before any data transfer. It configures CAN_CLC.DISR bit.
 614:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 615:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 616:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  XMC_CAN_Disable()\n\n\n
 617:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 618:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 619:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 620:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** void XMC_CAN_Enable(XMC_CAN_t *const obj);
 621:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 622:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 623:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 624:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 625:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * 		   for details.
 626:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 627:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param node_num	CAN node number,Range : 0-2
 628:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param mo_num 	CAN Message Object number,Range : 0-63
 629:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 630:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 631:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 632:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 633:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  Allocates Message Object from free list to node list. Each \a node_num is linked to one unique 
 634:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  A CAN node performs message transfer only with the \a mo_num message objects that are allocated
 635:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  It configures PANCTR register.
 636:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 637:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 638:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  None
 639:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 640:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 641:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 642:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 643:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 644:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 645:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 646:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 647:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * 			  for details.
 648:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 649:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param pancmd panal command selection. Refer @ref XMC_CAN_PANCMD_t for valid values.
 650:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param arg1	 Panel Argument 1,Range : 0-2
 651:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param arg2 	 Panel Argument 2, Range : 0-63
 652:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 653:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 654:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 655:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 656:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  Configures the panel command and panel arguments. A panel operation consists of a command code 
 657:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  panel arguments (PANAR1, PANAR2). Commands that have a return value deliver it to the PANAR1 bi
 658:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  return an error flag deliver it to bit 31 of the Panel Control Register, this means bit 7 of PA
 659:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  panel argument PANAR1,\a arg2 represents panel argument PANAR2 and \a pancmd represents command
 660:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  register.
 661:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 662:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 663:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  None
 664:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 665:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 666:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 667:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
 668:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****                                           const XMC_CAN_PANCMD_t pancmd,
 669:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 		                                  const uint8_t arg1,
 670:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 		                                  const uint8_t arg2)
 671:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 672:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 673:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 		        (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 674:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 		        (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 675:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
 676:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 677:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 678:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 679:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 680:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 681:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * 			  for details.
 682:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 683:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param service_requestr	Interrupt trigger number selection. Refer @ref XMC_CAN_NODE_INTERRUPT_TR
 684:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * 							 Multiple interrupt trigger events can be ORed.
 685:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 686:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 687:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 688:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 689:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  Configures multiple interrupt requests with a single write operation. \a service_requestr repre
 690:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  request or multiple.It configures MITR register.
 691:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 692:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 693:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  None
 694:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 695:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 696:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 697:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_EventTrigger(XMC_CAN_t *const obj,const XMC_CAN_NODE_INTERRUPT_TRIGGER
 698:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 699:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   obj->MITR = ((uint32_t)service_requestr << CAN_MITR_IT_Pos) & (uint32_t)CAN_MITR_IT_Msk;
 700:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
 701:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 702:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 703:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 704:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 								/*INIT APIs*/
 705:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 706:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 707:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 708:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 709:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * 			  for details.
 710:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 711:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_frequency	CAN module frequency(fCAN). Range : 5MHz to 120MHz
 712:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 713:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 714:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 715:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 716:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Configures clock rate of the module timer clock fCAN. Altering CAN module \a can_frequency shall
 717:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * call XMC_CAN_NODE_NominalBitTimeConfigure() to configure baud rate for current CAN frequency.It 
 718:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 719:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 720:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure()\n\n\n
 721:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 722:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 723:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 724:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 725:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #if defined(MULTICAN_PLUS)
 726:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 727:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 728:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 729:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 730:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj);
 731:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 732:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 733:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 734:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source);
 735:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 736:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 737:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 738:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj);
 739:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #else
 740:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency);
 741:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #endif
 742:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 743:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 744:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 745:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
 746:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 747:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 748:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 749:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 750:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Initializes CAN message object. Initialization includes configuring Message Object identifier ty
 751:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * identifier value, Message Object type, and transfer requests. It configures FDR register.
 752:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 753:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 754:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * None
 755:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 756:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 757:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 758:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo);
 759:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 760:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 761:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 	  /*NODE APIs*/
 762:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 763:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 764:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 765:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 766:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node  	  Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers.
 767:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param ptr_event		  CAN_NODE interrupt pointer position. Refer @ref XMC_CAN_NODE_POINTER_EVENT_t
 768:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param service_request Interrupt service request number. Range : 0-7
 769:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 770:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 771:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 772:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 773:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  Configures node interrupt pointer \a service_request for CAN Node events \a ptr_event. It confi
 774:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 775:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 776:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * None
 777:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 778:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 779:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 780:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
 781:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 		                                      const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
 782:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 		                                      const uint32_t service_request)
 783:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
  27              	 .loc 1 783 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 85B0     	 sub sp,sp,#20
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 24
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 F860     	 str r0,[r7,#12]
  43 0008 0B46     	 mov r3,r1
  44 000a 7A60     	 str r2,[r7,#4]
  45 000c FB72     	 strb r3,[r7,#11]
 784:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_eve
  46              	 .loc 1 784 0
  47 000e FB68     	 ldr r3,[r7,#12]
  48 0010 9A68     	 ldr r2,[r3,#8]
  49 0012 FB7A     	 ldrb r3,[r7,#11]
  50 0014 0721     	 movs r1,#7
  51 0016 01FA03F3 	 lsl r3,r1,r3
  52 001a DB43     	 mvns r3,r3
  53 001c 1A40     	 ands r2,r2,r3
  54 001e FB7A     	 ldrb r3,[r7,#11]
  55 0020 7968     	 ldr r1,[r7,#4]
  56 0022 01FA03F3 	 lsl r3,r1,r3
  57 0026 1A43     	 orrs r2,r2,r3
  58 0028 FB68     	 ldr r3,[r7,#12]
  59 002a 9A60     	 str r2,[r3,#8]
 785:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
  60              	 .loc 1 785 0
  61 002c 1437     	 adds r7,r7,#20
  62              	.LCFI3:
  63              	 .cfi_def_cfa_offset 4
  64 002e BD46     	 mov sp,r7
  65              	.LCFI4:
  66              	 .cfi_def_cfa_register 13
  67              	 
  68 0030 5DF8047B 	 ldr r7,[sp],#4
  69              	.LCFI5:
  70              	 .cfi_restore 7
  71              	 .cfi_def_cfa_offset 0
  72 0034 7047     	 bx lr
  73              	 .cfi_endproc
  74              	.LFE155:
  76 0036 00BF     	 .section .text.XMC_CAN_NODE_SetReceiveInput,"ax",%progbits
  77              	 .align 2
  78              	 .thumb
  79              	 .thumb_func
  81              	XMC_CAN_NODE_SetReceiveInput:
  82              	.LFB156:
 786:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 787:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 788:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 789:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 790:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node		Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CAN_
 791:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_bit_time	Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMIN
 792:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 793:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 794:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 795:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 796:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 797:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * It configures NBTR register.
 798:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 799:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 800:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * None
 801:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 802:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 803:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** void XMC_CAN_NODE_NominalBitTimeConfigure (XMC_CAN_NODE_t *const can_node,
 804:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****                                            const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_
 805:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 806:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 807:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 808:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param input    CAN receive input selection. Refer @ref XMC_CAN_NODE_RECEIVE_INPUT_t for details
 809:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 810:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 811:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 812:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 813:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \a input specifies CAN input receive pin. This API Configures NPCRx register,it is required to c
 814:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(), before configuring NPCRx register, call XMC_CAN_NODE_D
 815:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * API after configuring NPCRx register. CAN input receive pins which falls under analog port pins 
 816:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_GPIO_EnableDigitalInput(),to enable digital pad.
 817:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 818:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *\par<b>Related APIs:</b><BR>
 819:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * None
 820:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 821:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Note:</b><br>
 822:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 823:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 824:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 825:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 826:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
 827:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 		                                          const XMC_CAN_NODE_RECEIVE_INPUT_t input)
 828:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
  83              	 .loc 1 828 0
  84              	 .cfi_startproc
  85              	 
  86              	 
  87              	 
  88 0000 80B4     	 push {r7}
  89              	.LCFI6:
  90              	 .cfi_def_cfa_offset 4
  91              	 .cfi_offset 7,-4
  92 0002 83B0     	 sub sp,sp,#12
  93              	.LCFI7:
  94              	 .cfi_def_cfa_offset 16
  95 0004 00AF     	 add r7,sp,#0
  96              	.LCFI8:
  97              	 .cfi_def_cfa_register 7
  98 0006 7860     	 str r0,[r7,#4]
  99 0008 0B46     	 mov r3,r1
 100 000a FB70     	 strb r3,[r7,#3]
 829:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 101              	 .loc 1 829 0
 102 000c 7B68     	 ldr r3,[r7,#4]
 103 000e DB68     	 ldr r3,[r3,#12]
 104 0010 23F00702 	 bic r2,r3,#7
 830:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****                    (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Ms
 105              	 .loc 1 830 0
 106 0014 FB78     	 ldrb r3,[r7,#3]
 107 0016 03F00703 	 and r3,r3,#7
 829:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 108              	 .loc 1 829 0
 109 001a 1A43     	 orrs r2,r2,r3
 110 001c 7B68     	 ldr r3,[r7,#4]
 111 001e DA60     	 str r2,[r3,#12]
 831:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
 112              	 .loc 1 831 0
 113 0020 0C37     	 adds r7,r7,#12
 114              	.LCFI9:
 115              	 .cfi_def_cfa_offset 4
 116 0022 BD46     	 mov sp,r7
 117              	.LCFI10:
 118              	 .cfi_def_cfa_register 13
 119              	 
 120 0024 5DF8047B 	 ldr r7,[sp],#4
 121              	.LCFI11:
 122              	 .cfi_restore 7
 123              	 .cfi_def_cfa_offset 0
 124 0028 7047     	 bx lr
 125              	 .cfi_endproc
 126              	.LFE156:
 128 002a 00BF     	 .section .text.XMC_CAN_NODE_EnableLoopBack,"ax",%progbits
 129              	 .align 2
 130              	 .thumb
 131              	 .thumb_func
 133              	XMC_CAN_NODE_EnableLoopBack:
 134              	.LFB157:
 832:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 833:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 834:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 835:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node	Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 836:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 837:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 838:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 839:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 840:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Enable Node \a can_node in Loop-Back Mode. A Node is connected to an internal (virtual) loop-bac
 841:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * nodes which are in Loop- Back Mode are connected to this virtual CAN bus so that they can commun
 842:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * other internally. The external transmit line is forced recessive in Loop-Back Mode. This API Con
 843:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 844:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * API after NPCRx configuration configuration.
 845:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 846:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 847:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  XMC_CAN_NODE_DisableLoopBack().
 848:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 849:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  \par<b>Note:</b><br>
 850:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  NPCRx can be written only if bit NCRx.CCE is set.
 851:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 852:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 853:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 854:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
 855:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 135              	 .loc 1 855 0
 136              	 .cfi_startproc
 137              	 
 138              	 
 139              	 
 140 0000 80B4     	 push {r7}
 141              	.LCFI12:
 142              	 .cfi_def_cfa_offset 4
 143              	 .cfi_offset 7,-4
 144 0002 83B0     	 sub sp,sp,#12
 145              	.LCFI13:
 146              	 .cfi_def_cfa_offset 16
 147 0004 00AF     	 add r7,sp,#0
 148              	.LCFI14:
 149              	 .cfi_def_cfa_register 7
 150 0006 7860     	 str r0,[r7,#4]
 856:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 151              	 .loc 1 856 0
 152 0008 7B68     	 ldr r3,[r7,#4]
 153 000a DB68     	 ldr r3,[r3,#12]
 154 000c 43F48072 	 orr r2,r3,#256
 155 0010 7B68     	 ldr r3,[r7,#4]
 156 0012 DA60     	 str r2,[r3,#12]
 857:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
 157              	 .loc 1 857 0
 158 0014 0C37     	 adds r7,r7,#12
 159              	.LCFI15:
 160              	 .cfi_def_cfa_offset 4
 161 0016 BD46     	 mov sp,r7
 162              	.LCFI16:
 163              	 .cfi_def_cfa_register 13
 164              	 
 165 0018 5DF8047B 	 ldr r7,[sp],#4
 166              	.LCFI17:
 167              	 .cfi_restore 7
 168              	 .cfi_def_cfa_offset 0
 169 001c 7047     	 bx lr
 170              	 .cfi_endproc
 171              	.LFE157:
 173 001e 00BF     	 .section .text.XMC_CAN_NODE_GetStatus,"ax",%progbits
 174              	 .align 2
 175              	 .thumb
 176              	 .thumb_func
 178              	XMC_CAN_NODE_GetStatus:
 179              	.LFB167:
 858:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 859:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 860:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 861:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 862:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 863:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 864:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 865:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 866:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Disable Node Loop-Back Mode, disables internal (virtual) loop-back CAN bus. This API Configures 
 867:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 868:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * API after NPCRx configuration.
 869:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 870:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 871:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack()
 872:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 873:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 874:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Note:</b><br>
 875:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 876:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 877:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 878:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 879:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableLoopBack(XMC_CAN_NODE_t *const can_node)
 880:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 881:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   can_node->NPCR &= ~(uint32_t)CAN_NODE_NPCR_LBM_Msk;
 882:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
 883:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 884:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 885:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 886:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 887:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 888:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param event	   CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
 889:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * 				   multiple events can be ORed.
 890:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 891:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 892:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 893:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 894:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  Enable CAN Node events. It configures NFCR register.
 895:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 896:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 897:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_DisableEvent()
 898:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 899:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 900:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 901:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
 902:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 903:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 904:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 905:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 906:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 907:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param event	   CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
 908:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * 				   multiple events can be ORed.
 909:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 910:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 911:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 912:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 913:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  Disable CAN Node events. It configures NFCR register.
 914:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 915:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 916:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_EnableEvent()
 917:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 918:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 919:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 920:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
 921:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 922:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 923:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 924:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 925:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
 926:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 927:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_DIR_t Last error transfer direction. Refer @ref XMC_CAN_NODE_LAS
 928:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 929:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 930:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Returns NODE Last Error occurred during Transmit/receive direction. It returns value of NFCR reg
 931:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 932:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 933:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferInc()\n\n\n
 934:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 935:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 936:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 937:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_DIR_t XMC_CAN_NODE_GetLastErrTransferDir(XMC_CAN_NODE_t *co
 938:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 939:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_DIR_t)(((node->NECNT) & CAN_NODE_NECNT_LETD_Msk) >> CAN_NODE_NECN
 940:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
 941:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 942:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 943:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 944:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 945:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
 946:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 947:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_INC_t Last error transfer increment. Refer @ref XMC_CAN_NODE_LAS
 948:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 949:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 950:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  Returns NODE Last Error Transfer Increment. It returns value of NFCR register.
 951:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 952:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 953:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferDir()\n\n\n
 954:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 955:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 956:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 957:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_INC_t XMC_CAN_NODE_GetLastErrTransferInc(XMC_CAN_NODE_t *co
 958:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 959:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_INC_t)(((node->NECNT) & CAN_NODE_NECNT_LEINC_Msk)>> CAN_NODE_NECN
 960:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
 961:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 962:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 963:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 964:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 965:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 966:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param  error_warning_level	Error Warning level value. Range :0-255.
 967:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 968:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 969:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 970:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 971:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Configures error warning level in order to set the corresponding error warning bit EWRN. It conf
 972:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * into NECNT register. Before this configuration call XMC_CAN_NODE_EnableConfigurationChange() API
 973:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 974:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 975:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_GetErrorWarningLevel()\n\n\n
 976:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 977:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Note:</b><br>
 978:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
 979:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 980:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
 981:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 982:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetErrorWarningLevel(XMC_CAN_NODE_t *const can_node, uint8_t erro
 983:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 984:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_EWRNLVL_Msk)) |
 985:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****                     (((uint32_t)error_warning_level << CAN_NODE_NECNT_EWRNLVL_Pos) & (uint32_t)CAN_
 986:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
 987:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 988:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
 989:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
 990:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 991:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 992:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_tec  transmit error counter value. Range :0-255
 993:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 994:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 995:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
 996:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 997:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  Configures Transmit error counter. It configures \a can_tec into NECNT register. Before this co
 998:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  XMC_CAN_NODE_EnableConfigurationChange() API.
 999:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1000:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1001:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_GetTransmitErrorCounter()\n\n\n
1002:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1003:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  \par<b>Note:</b><br>
1004:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1005:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1006:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1007:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1008:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1009:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t c
1010:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
1011:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_TEC_Msk)) |
1012:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****                     (((uint32_t)can_tec << CAN_NODE_NECNT_TEC_Pos) & (uint32_t)CAN_NODE_NECNT_TEC_M
1013:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
1014:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1015:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1016:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1017:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1018:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1019:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_rec  receive error counter value. Range :0-255
1020:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1021:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
1022:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1023:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1024:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Configures Receive Error Counter. It configures \a can_rec into NECNT register. Before this conf
1025:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange() API.
1026:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1027:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1028:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_GetReceiveErrorCounter()\n\n\n
1029:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1030:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Note:</b><br>
1031:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1032:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1033:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1034:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1035:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t ca
1036:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
1037:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_REC_Msk)) |
1038:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****                    (((uint32_t)can_rec << CAN_NODE_NECNT_REC_Pos) & (uint32_t)CAN_NODE_NECNT_REC_Ms
1039:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
1040:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1041:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1042:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1043:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1044:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1045:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1046:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return uint8_t Error Warning Level. Range :0 - 255
1047:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1048:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1049:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *	Returns error warning level. This determines the threshold value (warning level, default 96) to 
1050:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *	to set the corresponding error warning bit EWRN. It reads NECNT register.
1051:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1052:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1053:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_SetErrorWarningLevel()\n\n\n
1054:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1055:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1056:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1057:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1058:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetErrorWarningLevel(XMC_CAN_NODE_t *const can_node)
1059:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
1060:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_EWRNLVL_Msk) >> CAN_NODE_NECNT_EWR
1061:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
1062:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1063:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1064:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1065:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1066:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1067:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1068:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return uint8_t transmit error counter value. Range :0 - 255
1069:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1070:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1071:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *	Returns Transmit Error Counter value. If the Bitstream Processor detects an error while a transm
1072:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *	running, the Transmit Error Counter is incremented by 8. An increment of 1 is used when the erro
1073:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *	reported by an external CAN node via an Error Frame generation. It reads NECNT register.
1074:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1075:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1076:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_SetTransmitErrorCounter()
1077:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1078:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Note:</b><br>
1079:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1080:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1081:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1082:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1083:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node)
1084:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
1085:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_TEC_Msk) >> CAN_NODE_NECNT_TEC_Po
1086:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
1087:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1088:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1089:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1090:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1091:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1092:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1093:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return uint8_t	receive error counter value.
1094:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1095:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1096:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *	Returns Receive Error Counter value. It reads NECNT register.
1097:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1098:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1099:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_SetReceiveErrorCounter()
1100:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1101:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1102:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1103:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node)
1104:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
1105:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_REC_Msk) >> CAN_NODE_NECNT_REC_Po
1106:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
1107:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1108:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1109:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1110:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1111:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1112:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1113:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return uint32_t Current status of the node.
1114:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1115:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1116:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Returns errors status as well as successfully transferred CAN frames status.
1117:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1118:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1119:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  XMC_CAN_NODE_ClearStatus()
1120:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1121:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1122:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1123:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE uint32_t XMC_CAN_NODE_GetStatus(XMC_CAN_NODE_t *const can_node)
1124:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 180              	 .loc 1 1124 0
 181              	 .cfi_startproc
 182              	 
 183              	 
 184              	 
 185 0000 80B4     	 push {r7}
 186              	.LCFI18:
 187              	 .cfi_def_cfa_offset 4
 188              	 .cfi_offset 7,-4
 189 0002 83B0     	 sub sp,sp,#12
 190              	.LCFI19:
 191              	 .cfi_def_cfa_offset 16
 192 0004 00AF     	 add r7,sp,#0
 193              	.LCFI20:
 194              	 .cfi_def_cfa_register 7
 195 0006 7860     	 str r0,[r7,#4]
1125:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   return ((can_node->NSR));
 196              	 .loc 1 1125 0
 197 0008 7B68     	 ldr r3,[r7,#4]
 198 000a 5B68     	 ldr r3,[r3,#4]
1126:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
 199              	 .loc 1 1126 0
 200 000c 1846     	 mov r0,r3
 201 000e 0C37     	 adds r7,r7,#12
 202              	.LCFI21:
 203              	 .cfi_def_cfa_offset 4
 204 0010 BD46     	 mov sp,r7
 205              	.LCFI22:
 206              	 .cfi_def_cfa_register 13
 207              	 
 208 0012 5DF8047B 	 ldr r7,[sp],#4
 209              	.LCFI23:
 210              	 .cfi_restore 7
 211              	 .cfi_def_cfa_offset 0
 212 0016 7047     	 bx lr
 213              	 .cfi_endproc
 214              	.LFE167:
 216              	 .section .text.XMC_CAN_NODE_ClearStatus,"ax",%progbits
 217              	 .align 2
 218              	 .thumb
 219              	 .thumb_func
 221              	XMC_CAN_NODE_ClearStatus:
 222              	.LFB168:
1127:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1128:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1129:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1130:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1131:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node_status Status to clear.Refer @ref XMC_CAN_NODE_STATUS_t for valid values.
1132:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1133:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
1134:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1135:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1136:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Clear errors status as well as successfully transferred CAN frames status.
1137:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1138:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1139:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_GetStatus()
1140:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1141:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1142:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1143:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ClearStatus(XMC_CAN_NODE_t *const can_node,XMC_CAN_NODE_STATUS_t 
1144:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 223              	 .loc 1 1144 0
 224              	 .cfi_startproc
 225              	 
 226              	 
 227              	 
 228 0000 80B4     	 push {r7}
 229              	.LCFI24:
 230              	 .cfi_def_cfa_offset 4
 231              	 .cfi_offset 7,-4
 232 0002 83B0     	 sub sp,sp,#12
 233              	.LCFI25:
 234              	 .cfi_def_cfa_offset 16
 235 0004 00AF     	 add r7,sp,#0
 236              	.LCFI26:
 237              	 .cfi_def_cfa_register 7
 238 0006 7860     	 str r0,[r7,#4]
 239 0008 0B46     	 mov r3,r1
 240 000a 7B80     	 strh r3,[r7,#2]
1145:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****    can_node->NSR &= ~(uint32_t)can_node_status;
 241              	 .loc 1 1145 0
 242 000c 7B68     	 ldr r3,[r7,#4]
 243 000e 5A68     	 ldr r2,[r3,#4]
 244 0010 7B88     	 ldrh r3,[r7,#2]
 245 0012 DB43     	 mvns r3,r3
 246 0014 1A40     	 ands r2,r2,r3
 247 0016 7B68     	 ldr r3,[r7,#4]
 248 0018 5A60     	 str r2,[r3,#4]
1146:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
 249              	 .loc 1 1146 0
 250 001a 0C37     	 adds r7,r7,#12
 251              	.LCFI27:
 252              	 .cfi_def_cfa_offset 4
 253 001c BD46     	 mov sp,r7
 254              	.LCFI28:
 255              	 .cfi_def_cfa_register 13
 256              	 
 257 001e 5DF8047B 	 ldr r7,[sp],#4
 258              	.LCFI29:
 259              	 .cfi_restore 7
 260              	 .cfi_def_cfa_offset 0
 261 0022 7047     	 bx lr
 262              	 .cfi_endproc
 263              	.LFE168:
 265              	 .section .text.XMC_CAN_NODE_EnableConfigurationChange,"ax",%progbits
 266              	 .align 2
 267              	 .thumb
 268              	 .thumb_func
 270              	XMC_CAN_NODE_EnableConfigurationChange:
 271              	.LFB169:
1147:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1148:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1149:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1150:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1151:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1152:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1153:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
1154:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1155:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1156:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Allow to change the configuration of the CAN node, like bit timing, CAN bus transmit/receive por
1157:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * counters read. It configures NCRx.CCE bit.
1158:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1159:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1160:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange()
1161:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1162:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1163:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1164:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1165:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 272              	 .loc 1 1165 0
 273              	 .cfi_startproc
 274              	 
 275              	 
 276              	 
 277 0000 80B4     	 push {r7}
 278              	.LCFI30:
 279              	 .cfi_def_cfa_offset 4
 280              	 .cfi_offset 7,-4
 281 0002 83B0     	 sub sp,sp,#12
 282              	.LCFI31:
 283              	 .cfi_def_cfa_offset 16
 284 0004 00AF     	 add r7,sp,#0
 285              	.LCFI32:
 286              	 .cfi_def_cfa_register 7
 287 0006 7860     	 str r0,[r7,#4]
1166:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 288              	 .loc 1 1166 0
 289 0008 7B68     	 ldr r3,[r7,#4]
 290 000a 1B68     	 ldr r3,[r3]
 291 000c 43F04002 	 orr r2,r3,#64
 292 0010 7B68     	 ldr r3,[r7,#4]
 293 0012 1A60     	 str r2,[r3]
1167:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
 294              	 .loc 1 1167 0
 295 0014 0C37     	 adds r7,r7,#12
 296              	.LCFI33:
 297              	 .cfi_def_cfa_offset 4
 298 0016 BD46     	 mov sp,r7
 299              	.LCFI34:
 300              	 .cfi_def_cfa_register 13
 301              	 
 302 0018 5DF8047B 	 ldr r7,[sp],#4
 303              	.LCFI35:
 304              	 .cfi_restore 7
 305              	 .cfi_def_cfa_offset 0
 306 001c 7047     	 bx lr
 307              	 .cfi_endproc
 308              	.LFE169:
 310 001e 00BF     	 .section .text.XMC_CAN_NODE_DisableConfigurationChange,"ax",%progbits
 311              	 .align 2
 312              	 .thumb
 313              	 .thumb_func
 315              	XMC_CAN_NODE_DisableConfigurationChange:
 316              	.LFB170:
1168:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1169:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1170:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1171:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1172:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1173:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1174:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
1175:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1176:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1177:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *	Forbid to change the configuration of the CAN node. It configures NCRx.CCE bit.
1178:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1179:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1180:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange()
1181:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1182:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1183:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1184:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1185:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 317              	 .loc 1 1185 0
 318              	 .cfi_startproc
 319              	 
 320              	 
 321              	 
 322 0000 80B4     	 push {r7}
 323              	.LCFI36:
 324              	 .cfi_def_cfa_offset 4
 325              	 .cfi_offset 7,-4
 326 0002 83B0     	 sub sp,sp,#12
 327              	.LCFI37:
 328              	 .cfi_def_cfa_offset 16
 329 0004 00AF     	 add r7,sp,#0
 330              	.LCFI38:
 331              	 .cfi_def_cfa_register 7
 332 0006 7860     	 str r0,[r7,#4]
1186:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 333              	 .loc 1 1186 0
 334 0008 7B68     	 ldr r3,[r7,#4]
 335 000a 1B68     	 ldr r3,[r3]
 336 000c 23F04002 	 bic r2,r3,#64
 337 0010 7B68     	 ldr r3,[r7,#4]
 338 0012 1A60     	 str r2,[r3]
1187:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
 339              	 .loc 1 1187 0
 340 0014 0C37     	 adds r7,r7,#12
 341              	.LCFI39:
 342              	 .cfi_def_cfa_offset 4
 343 0016 BD46     	 mov sp,r7
 344              	.LCFI40:
 345              	 .cfi_def_cfa_register 13
 346              	 
 347 0018 5DF8047B 	 ldr r7,[sp],#4
 348              	.LCFI41:
 349              	 .cfi_restore 7
 350              	 .cfi_def_cfa_offset 0
 351 001c 7047     	 bx lr
 352              	 .cfi_endproc
 353              	.LFE170:
 355 001e 00BF     	 .section .text.XMC_CAN_NODE_SetInitBit,"ax",%progbits
 356              	 .align 2
 357              	 .thumb
 358              	 .thumb_func
 360              	XMC_CAN_NODE_SetInitBit:
 361              	.LFB171:
1188:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1189:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1190:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1191:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1192:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1193:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1194:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1195:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
1196:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1197:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1198:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Disable CAN node participation in CAN traffic. Bit INIT is automatically set when the CAN node e
1199:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * state. It configures NCR.INIT bit.
1200:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1201:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1202:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_ResetInitBit()
1203:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1204:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1205:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1206:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
1207:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 362              	 .loc 1 1207 0
 363              	 .cfi_startproc
 364              	 
 365              	 
 366              	 
 367 0000 80B4     	 push {r7}
 368              	.LCFI42:
 369              	 .cfi_def_cfa_offset 4
 370              	 .cfi_offset 7,-4
 371 0002 83B0     	 sub sp,sp,#12
 372              	.LCFI43:
 373              	 .cfi_def_cfa_offset 16
 374 0004 00AF     	 add r7,sp,#0
 375              	.LCFI44:
 376              	 .cfi_def_cfa_register 7
 377 0006 7860     	 str r0,[r7,#4]
1208:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
 378              	 .loc 1 1208 0
 379 0008 7B68     	 ldr r3,[r7,#4]
 380 000a 1B68     	 ldr r3,[r3]
 381 000c 43F00102 	 orr r2,r3,#1
 382 0010 7B68     	 ldr r3,[r7,#4]
 383 0012 1A60     	 str r2,[r3]
1209:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
 384              	 .loc 1 1209 0
 385 0014 0C37     	 adds r7,r7,#12
 386              	.LCFI45:
 387              	 .cfi_def_cfa_offset 4
 388 0016 BD46     	 mov sp,r7
 389              	.LCFI46:
 390              	 .cfi_def_cfa_register 13
 391              	 
 392 0018 5DF8047B 	 ldr r7,[sp],#4
 393              	.LCFI47:
 394              	 .cfi_restore 7
 395              	 .cfi_def_cfa_offset 0
 396 001c 7047     	 bx lr
 397              	 .cfi_endproc
 398              	.LFE171:
 400 001e 00BF     	 .section .text.XMC_CAN_NODE_ResetInitBit,"ax",%progbits
 401              	 .align 2
 402              	 .thumb
 403              	 .thumb_func
 405              	XMC_CAN_NODE_ResetInitBit:
 406              	.LFB172:
1210:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1211:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1212:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1213:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1214:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1215:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
1216:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1217:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1218:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Enable CAN node participation in CAN traffic. Bit INIT is automatically set when the CAN node en
1219:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * state. It configures NCR.INIT bit.
1220:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1221:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1222:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_SetInitBit()
1223:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1224:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1225:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
1226:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 407              	 .loc 1 1226 0
 408              	 .cfi_startproc
 409              	 
 410              	 
 411              	 
 412 0000 80B4     	 push {r7}
 413              	.LCFI48:
 414              	 .cfi_def_cfa_offset 4
 415              	 .cfi_offset 7,-4
 416 0002 83B0     	 sub sp,sp,#12
 417              	.LCFI49:
 418              	 .cfi_def_cfa_offset 16
 419 0004 00AF     	 add r7,sp,#0
 420              	.LCFI50:
 421              	 .cfi_def_cfa_register 7
 422 0006 7860     	 str r0,[r7,#4]
1227:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 423              	 .loc 1 1227 0
 424 0008 7B68     	 ldr r3,[r7,#4]
 425 000a 1B68     	 ldr r3,[r3]
 426 000c 23F00102 	 bic r2,r3,#1
 427 0010 7B68     	 ldr r3,[r7,#4]
 428 0012 1A60     	 str r2,[r3]
1228:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
 429              	 .loc 1 1228 0
 430 0014 0C37     	 adds r7,r7,#12
 431              	.LCFI51:
 432              	 .cfi_def_cfa_offset 4
 433 0016 BD46     	 mov sp,r7
 434              	.LCFI52:
 435              	 .cfi_def_cfa_register 13
 436              	 
 437 0018 5DF8047B 	 ldr r7,[sp],#4
 438              	.LCFI53:
 439              	 .cfi_restore 7
 440              	 .cfi_def_cfa_offset 0
 441 001c 7047     	 bx lr
 442              	 .cfi_endproc
 443              	.LFE172:
 445 001e 00BF     	 .section .text.XMC_CAN_MO_SetEventNodePointer,"ax",%progbits
 446              	 .align 2
 447              	 .thumb
 448              	 .thumb_func
 450              	XMC_CAN_MO_SetEventNodePointer:
 451              	.LFB180:
1229:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1230:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1231:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1232:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1233:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1234:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
1235:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1236:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1237:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Enable the CAN node, starts the participation in CAN traffic. It configures NCR.CANDIS and the N
1238:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1239:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1240:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * None
1241:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1242:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1243:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_Enable(XMC_CAN_NODE_t *const can_node)
1244:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
1245:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CANDIS_Msk;
1246:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_ResetInitBit(can_node);
1247:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
1248:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1249:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1250:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1251:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1252:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1253:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
1254:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1255:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1256:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Disable the CAN node, terminates participation in CAN traffic. It configures NCR.CANDIS bit.
1257:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1258:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1259:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * None
1260:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1261:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1262:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_Disable(XMC_CAN_NODE_t *const can_node)
1263:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
1264:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CANDIS_Msk;
1265:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
1266:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1267:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1268:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1269:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1270:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
1271:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1272:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1273:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Configure CAN node in Analyzer Mode. This means that messages may be received, but not transmitt
1274:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * is sent on the CAN bus upon frame reception. Active-error flags are sent recessive instead of do
1275:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * The transmit line is continuously held at recessive (1) level. XMC_CAN_NODE_SetInitBit() should 
1276:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * set / reset AnalyzerMode. It configures NCR.CALM bit.
1277:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1278:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1279:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_ReSetAnalyzerMode()
1280:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1281:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1282:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1283:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1284:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
1285:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
1286:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CALM_Msk;
1287:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
1288:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1289:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1290:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1291:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1292:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1293:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
1294:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1295:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1296:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Reset the Analyzer mode. CAN node is no more in Analyzer Mode. Please refer XMC_CAN_NODE_SetAnal
1297:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * It configures NCR.CALM bit. XMC_CAN_NODE_SetInitBit() should be called before set / reset Analyz
1298:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1299:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1300:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_SetAnalyzerMode()
1301:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1302:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1303:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1304:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ReSetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
1305:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
1306:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CALM_Msk;
1307:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
1308:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1309:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
1310:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1311:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1312:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1313:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
1314:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1315:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1316:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Trigger the suspension of the CAN node. An OCDS(on chip debug support) suspend trigger disables 
1317:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * soon as the CAN node becomes bus-idle or bus-off, bit INIT is internally forced to 1 to disable 
1318:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * The actual value of bit INIT remains unchanged. It configures NCR.SUSEN bit
1319:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1320:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1321:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * None
1322:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1323:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *\par<b>Note:</b><br>
1324:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Bit SUSEN is reset via OCDS(on chip debug support) Reset.
1325:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1326:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1327:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1328:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableSuspend(XMC_CAN_NODE_t *const can_node)
1329:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
1330:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_SUSEN_Msk;
1331:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
1332:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #else
1333:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1334:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1335:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1336:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
1337:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1338:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1339:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Disables the transmission on CAN node x as soon as bus-idle is reached.
1340:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1341:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1342:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * None
1343:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1344:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @note Only available for XMC1400,XMC4800 and XMC4700 series
1345:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1346:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1347:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableTransmit(XMC_CAN_NODE_t *const can_node)
1348:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
1349:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_TXDIS_Msk;
1350:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
1351:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** #endif
1352:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1353:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1354:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1355:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1356:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1357:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node_init	frame counter mode selection. Refer @ref XMC_CAN_NODE_FRAME_COUNTER_t for v
1358:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1359:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
1360:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1361:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1362:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Configures frame counter functions. Each CAN \a can_node is equipped with a frame counter that c
1363:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * CAN frames or obtains information about the time when a frame has been started to transmit or be
1364:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * node. It configures NFCR register.
1365:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1366:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1367:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * None
1368:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1369:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1370:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1371:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_FrameCounterConfigure(XMC_CAN_NODE_t *const can_node,
1372:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****                                         const XMC_CAN_NODE_FRAME_COUNTER_t *const can_node_init)
1373:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
1374:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   can_node->NFCR = (can_node->NFCR & ~(uint32_t)(CAN_NODE_NFCR_CFMOD_Msk |
1375:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****                                        CAN_NODE_NFCR_CFSEL_Msk)) |
1376:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****                     can_node_init->nfcr;
1377:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
1378:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1379:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1380:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1381:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1382:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1383:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1384:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return uint16_t	current value of the CAN frame counter. Range :0-65535
1385:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1386:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1387:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  Returns the frame counter value \a can_node of the CAN node. In Frame Count Mode (CFMOD = 00B),
1388:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  count value. In Time Stamp Mode (CFMOD = 01B), this API returns the captured bit time count val
1389:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  the start of a new frame. In all Bit Timing Analysis Modes (CFMOD = 10B), this API always retur
1390:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  fCLC clock cycles (measurement result) minus 1.
1391:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1392:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1393:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * None
1394:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1395:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1396:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1397:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE uint16_t XMC_CAN_NODE_GetCANFrameCounter(XMC_CAN_NODE_t *const can_node)
1398:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
1399:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   return (uint16_t)(((uint32_t)(can_node->NFCR & CAN_NODE_NFCR_CFC_Msk) >> CAN_NODE_NFCR_CFC_Pos));
1400:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
1401:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1402:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****                                      /*MO APIs*/
1403:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1404:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1405:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1406:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1407:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1408:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return XMC_CAN_STATUS_t	CAN Node status. Refer @ref XMC_CAN_STATUS_t structure for details.
1409:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1410:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
1411:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1412:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1413:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Configures Data to be transmitted and data length code.
1414:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1415:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1416:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_MO_Config()\n\n\n
1417:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1418:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1419:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1420:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1421:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo);
1422:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1423:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1424:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1425:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1426:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1427:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return XMC_CAN_STATUS_t	CAN Node status. Refer @ref XMC_CAN_STATUS_t structure for details.
1428:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1429:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1430:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  Configures transmit request for sending data frame. It configures MOCTR register. Data shall be
1431:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  using XMC_CAN_MO_UpdateData() before calling this API.
1432:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1433:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1434:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_MO_UpdateData()\n\n\n
1435:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1436:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1437:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1438:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo);
1439:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1440:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1441:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1442:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1443:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1444:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return XMC_CAN_STATUS_t	CAN Node status. Refer @ref XMC_CAN_STATUS_t structure for details.
1445:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1446:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1447:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  Reads the Message Object data bytes, into message pointer passed as input parameter \a can_mo.
1448:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  can_data[0] of can_mo holds lower 4 bytes, can_data[1] of can_mo holds higher 4 bytes.
1449:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1450:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1451:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * None
1452:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1453:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1454:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1455:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** XMC_CAN_STATUS_t XMC_CAN_MO_Receive(XMC_CAN_MO_t *can_mo);
1456:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1457:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1458:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1459:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1460:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1461:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return XMC_CAN_STATUS_t	CAN Node status. Refer @ref XMC_CAN_STATUS_t structure for details.
1462:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1463:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1464:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  Reads the Message Object data bytes, into message pointer passed as input parameter \a can_mo.
1465:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  can_data[0] of can_mo holds lower 4 bytes, can_data[1] of can_mo holds higher 4 bytes.
1466:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1467:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1468:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * None
1469:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1470:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1471:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** XMC_CAN_STATUS_t XMC_CAN_MO_ReceiveData (XMC_CAN_MO_t *can_mo);
1472:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1473:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_mo 		 	 Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure f
1474:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_mo_ptr_int 	 Message Object event node pointer selection. Refer @ref XMC_CAN_MO_POINT
1475:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * 					 	    for valid values.
1476:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param service_request	interrupt output line of multiCAN module.
1477:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1478:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
1479:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1480:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1481:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Configures Message Object event node pointer with \a service_request number. It configures MOIPR
1482:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1483:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1484:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * None
1485:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1486:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1487:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1488:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
1489:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 		                                            const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
1490:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 		                                            const uint32_t service_request)
1491:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 452              	 .loc 1 1491 0
 453              	 .cfi_startproc
 454              	 
 455              	 
 456              	 
 457 0000 80B4     	 push {r7}
 458              	.LCFI54:
 459              	 .cfi_def_cfa_offset 4
 460              	 .cfi_offset 7,-4
 461 0002 85B0     	 sub sp,sp,#20
 462              	.LCFI55:
 463              	 .cfi_def_cfa_offset 24
 464 0004 00AF     	 add r7,sp,#0
 465              	.LCFI56:
 466              	 .cfi_def_cfa_register 7
 467 0006 F860     	 str r0,[r7,#12]
 468 0008 0B46     	 mov r3,r1
 469 000a 7A60     	 str r2,[r7,#4]
 470 000c FB72     	 strb r3,[r7,#11]
1492:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Ms
 471              	 .loc 1 1492 0
 472 000e FB68     	 ldr r3,[r7,#12]
 473 0010 1B68     	 ldr r3,[r3]
 474 0012 FA68     	 ldr r2,[r7,#12]
 475 0014 1268     	 ldr r2,[r2]
 476 0016 9168     	 ldr r1,[r2,#8]
 477 0018 FA7A     	 ldrb r2,[r7,#11]
 478 001a 0720     	 movs r0,#7
 479 001c 00FA02F2 	 lsl r2,r0,r2
 480 0020 D243     	 mvns r2,r2
 481 0022 1140     	 ands r1,r1,r2
1493:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 		                      (service_request << (uint32_t)can_mo_ptr_int);
 482              	 .loc 1 1493 0
 483 0024 FA7A     	 ldrb r2,[r7,#11]
 484 0026 7868     	 ldr r0,[r7,#4]
 485 0028 00FA02F2 	 lsl r2,r0,r2
1492:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Ms
 486              	 .loc 1 1492 0
 487 002c 0A43     	 orrs r2,r2,r1
 488 002e 9A60     	 str r2,[r3,#8]
1494:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
 489              	 .loc 1 1494 0
 490 0030 1437     	 adds r7,r7,#20
 491              	.LCFI57:
 492              	 .cfi_def_cfa_offset 4
 493 0032 BD46     	 mov sp,r7
 494              	.LCFI58:
 495              	 .cfi_def_cfa_register 13
 496              	 
 497 0034 5DF8047B 	 ldr r7,[sp],#4
 498              	.LCFI59:
 499              	 .cfi_restore 7
 500              	 .cfi_def_cfa_offset 0
 501 0038 7047     	 bx lr
 502              	 .cfi_endproc
 503              	.LFE180:
 505 003a 00BF     	 .section .text.XMC_CAN_MO_GetStatus,"ax",%progbits
 506              	 .align 2
 507              	 .thumb
 508              	 .thumb_func
 510              	XMC_CAN_MO_GetStatus:
 511              	.LFB181:
1495:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1496:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1497:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1498:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1499:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return uint32_t	Current Message Object status.
1500:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1501:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1502:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  Returns Message Object status, that indicates message object transfer status and message object
1503:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  information such as the number of the current message object predecessor and successor message 
1504:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  the list number to which the message object is assigned.
1505:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1506:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1507:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * None
1508:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1509:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1510:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1511:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE uint32_t XMC_CAN_MO_GetStatus(const XMC_CAN_MO_t *const can_mo)
1512:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 512              	 .loc 1 1512 0
 513              	 .cfi_startproc
 514              	 
 515              	 
 516              	 
 517 0000 80B4     	 push {r7}
 518              	.LCFI60:
 519              	 .cfi_def_cfa_offset 4
 520              	 .cfi_offset 7,-4
 521 0002 83B0     	 sub sp,sp,#12
 522              	.LCFI61:
 523              	 .cfi_def_cfa_offset 16
 524 0004 00AF     	 add r7,sp,#0
 525              	.LCFI62:
 526              	 .cfi_def_cfa_register 7
 527 0006 7860     	 str r0,[r7,#4]
1513:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   return ((can_mo->can_mo_ptr->MOSTAT));
 528              	 .loc 1 1513 0
 529 0008 7B68     	 ldr r3,[r7,#4]
 530 000a 1B68     	 ldr r3,[r3]
 531 000c DB69     	 ldr r3,[r3,#28]
1514:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
 532              	 .loc 1 1514 0
 533 000e 1846     	 mov r0,r3
 534 0010 0C37     	 adds r7,r7,#12
 535              	.LCFI63:
 536              	 .cfi_def_cfa_offset 4
 537 0012 BD46     	 mov sp,r7
 538              	.LCFI64:
 539              	 .cfi_def_cfa_register 13
 540              	 
 541 0014 5DF8047B 	 ldr r7,[sp],#4
 542              	.LCFI65:
 543              	 .cfi_restore 7
 544              	 .cfi_def_cfa_offset 0
 545 0018 7047     	 bx lr
 546              	 .cfi_endproc
 547              	.LFE181:
 549 001a 00BF     	 .section .text.XMC_CAN_MO_ResetStatus,"ax",%progbits
 550              	 .align 2
 551              	 .thumb
 552              	 .thumb_func
 554              	XMC_CAN_MO_ResetStatus:
 555              	.LFB183:
1515:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1516:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1517:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1518:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1519:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param mask   Message Object set status selection. Refer @ref XMC_CAN_MO_SET_STATUS_t for detail
1520:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * 				 Multiple enums can be ORed.
1521:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
1522:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1523:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1524:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  Configures Message Object set Status. It configures MOCTR register.
1525:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1526:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1527:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_MO_ResetStatus()\n\n\n
1528:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1529:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1530:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1531:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_MO_SetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
1532:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
1533:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   can_mo->can_mo_ptr->MOCTR = mask;
1534:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
1535:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1536:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1537:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1538:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1539:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param mask   Message Object set status selection. Refer @ref XMC_CAN_MO_RESET_STATUS_t for deta
1540:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * 						 Multiple enums can be ORed.
1541:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
1542:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1543:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1544:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  Clears Message Object interrupt events. It configures MOCTR register.
1545:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1546:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1547:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * None
1548:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1549:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1550:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1551:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo,const uint32_t mask)
1552:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 556              	 .loc 1 1552 0
 557              	 .cfi_startproc
 558              	 
 559              	 
 560              	 
 561 0000 80B4     	 push {r7}
 562              	.LCFI66:
 563              	 .cfi_def_cfa_offset 4
 564              	 .cfi_offset 7,-4
 565 0002 83B0     	 sub sp,sp,#12
 566              	.LCFI67:
 567              	 .cfi_def_cfa_offset 16
 568 0004 00AF     	 add r7,sp,#0
 569              	.LCFI68:
 570              	 .cfi_def_cfa_register 7
 571 0006 7860     	 str r0,[r7,#4]
 572 0008 3960     	 str r1,[r7]
1553:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   can_mo->can_mo_ptr->MOCTR = mask;
 573              	 .loc 1 1553 0
 574 000a 7B68     	 ldr r3,[r7,#4]
 575 000c 1B68     	 ldr r3,[r3]
 576 000e 3A68     	 ldr r2,[r7]
 577 0010 DA61     	 str r2,[r3,#28]
1554:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
 578              	 .loc 1 1554 0
 579 0012 0C37     	 adds r7,r7,#12
 580              	.LCFI69:
 581              	 .cfi_def_cfa_offset 4
 582 0014 BD46     	 mov sp,r7
 583              	.LCFI70:
 584              	 .cfi_def_cfa_register 13
 585              	 
 586 0016 5DF8047B 	 ldr r7,[sp],#4
 587              	.LCFI71:
 588              	 .cfi_restore 7
 589              	 .cfi_def_cfa_offset 0
 590 001a 7047     	 bx lr
 591              	 .cfi_endproc
 592              	.LFE183:
 594              	 .section .text.XMC_CAN_MO_EnableEvent,"ax",%progbits
 595              	 .align 2
 596              	 .thumb
 597              	 .thumb_func
 599              	XMC_CAN_MO_EnableEvent:
 600              	.LFB184:
1555:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1556:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1557:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1558:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** /**
1559:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1560:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @param event	 CAN node Message Object event selection. Refer @ref XMC_CAN_MO_EVENT_t for details
1561:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1562:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
1563:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1564:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1565:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * Enable CAN Message Object events. \a event can be ORed multiple Message Object events. It config
1566:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1567:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1568:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *  XMC_CAN_MO_DisableEvent()
1569:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  *
1570:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****  */
1571:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 
1572:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
1573:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** 		                                    const uint32_t event)
1574:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** {
 601              	 .loc 1 1574 0
 602              	 .cfi_startproc
 603              	 
 604              	 
 605              	 
 606 0000 80B4     	 push {r7}
 607              	.LCFI72:
 608              	 .cfi_def_cfa_offset 4
 609              	 .cfi_offset 7,-4
 610 0002 83B0     	 sub sp,sp,#12
 611              	.LCFI73:
 612              	 .cfi_def_cfa_offset 16
 613 0004 00AF     	 add r7,sp,#0
 614              	.LCFI74:
 615              	 .cfi_def_cfa_register 7
 616 0006 7860     	 str r0,[r7,#4]
 617 0008 3960     	 str r1,[r7]
1575:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h ****   can_mo->can_mo_ptr->MOFCR |= event;
 618              	 .loc 1 1575 0
 619 000a 7B68     	 ldr r3,[r7,#4]
 620 000c 1B68     	 ldr r3,[r3]
 621 000e 7A68     	 ldr r2,[r7,#4]
 622 0010 1268     	 ldr r2,[r2]
 623 0012 1168     	 ldr r1,[r2]
 624 0014 3A68     	 ldr r2,[r7]
 625 0016 0A43     	 orrs r2,r2,r1
 626 0018 1A60     	 str r2,[r3]
1576:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_can.h **** }
 627              	 .loc 1 1576 0
 628 001a 0C37     	 adds r7,r7,#12
 629              	.LCFI75:
 630              	 .cfi_def_cfa_offset 4
 631 001c BD46     	 mov sp,r7
 632              	.LCFI76:
 633              	 .cfi_def_cfa_register 13
 634              	 
 635 001e 5DF8047B 	 ldr r7,[sp],#4
 636              	.LCFI77:
 637              	 .cfi_restore 7
 638              	 .cfi_def_cfa_offset 0
 639 0022 7047     	 bx lr
 640              	 .cfi_endproc
 641              	.LFE184:
 643              	 .section .text.CAN_NODE_MO_EnableTxEvent,"ax",%progbits
 644              	 .align 2
 645              	 .thumb
 646              	 .thumb_func
 648              	CAN_NODE_MO_EnableTxEvent:
 649              	.LFB217:
 650              	 .file 2 "../Dave/Generated/CAN_NODE/can_node.h"
   1:../Dave/Generated/CAN_NODE/can_node.h **** /**
   2:../Dave/Generated/CAN_NODE/can_node.h ****  * @file can_node.h
   3:../Dave/Generated/CAN_NODE/can_node.h ****  * @date 2015-06-30
   4:../Dave/Generated/CAN_NODE/can_node.h ****  *
   5:../Dave/Generated/CAN_NODE/can_node.h ****  * NOTE:
   6:../Dave/Generated/CAN_NODE/can_node.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/CAN_NODE/can_node.h ****  *
   8:../Dave/Generated/CAN_NODE/can_node.h ****  * @cond
   9:../Dave/Generated/CAN_NODE/can_node.h ****  **************************************************************************************************
  10:../Dave/Generated/CAN_NODE/can_node.h ****  * CAN_NODE v4.1.6 - Configures a Node and MO registers of MultiCAN module. It provides a run-time 
  11:../Dave/Generated/CAN_NODE/can_node.h ****  *                   node baud rate and to enable/disable Node and MO events.
  12:../Dave/Generated/CAN_NODE/can_node.h ****  *
  13:../Dave/Generated/CAN_NODE/can_node.h ****  * Copyright (c) 2015, Infineon Technologies AG
  14:../Dave/Generated/CAN_NODE/can_node.h ****  * All rights reserved.
  15:../Dave/Generated/CAN_NODE/can_node.h ****  *
  16:../Dave/Generated/CAN_NODE/can_node.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:../Dave/Generated/CAN_NODE/can_node.h ****  * following conditions are met:
  18:../Dave/Generated/CAN_NODE/can_node.h ****  *
  19:../Dave/Generated/CAN_NODE/can_node.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:../Dave/Generated/CAN_NODE/can_node.h ****  *   disclaimer.
  21:../Dave/Generated/CAN_NODE/can_node.h ****  *
  22:../Dave/Generated/CAN_NODE/can_node.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:../Dave/Generated/CAN_NODE/can_node.h ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:../Dave/Generated/CAN_NODE/can_node.h ****  *
  25:../Dave/Generated/CAN_NODE/can_node.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:../Dave/Generated/CAN_NODE/can_node.h ****  *   products derived from this software without specific prior written permission.
  27:../Dave/Generated/CAN_NODE/can_node.h ****  *
  28:../Dave/Generated/CAN_NODE/can_node.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:../Dave/Generated/CAN_NODE/can_node.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:../Dave/Generated/CAN_NODE/can_node.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:../Dave/Generated/CAN_NODE/can_node.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:../Dave/Generated/CAN_NODE/can_node.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:../Dave/Generated/CAN_NODE/can_node.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:../Dave/Generated/CAN_NODE/can_node.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:../Dave/Generated/CAN_NODE/can_node.h ****  *
  36:../Dave/Generated/CAN_NODE/can_node.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:../Dave/Generated/CAN_NODE/can_node.h ****  * with Infineon Technologies AG (dave@infineon.com).
  38:../Dave/Generated/CAN_NODE/can_node.h ****  **************************************************************************************************
  39:../Dave/Generated/CAN_NODE/can_node.h ****  *
  40:../Dave/Generated/CAN_NODE/can_node.h ****  * Change History
  41:../Dave/Generated/CAN_NODE/can_node.h ****  * --------------
  42:../Dave/Generated/CAN_NODE/can_node.h ****  *
  43:../Dave/Generated/CAN_NODE/can_node.h ****  * 2015-02-16:
  44:../Dave/Generated/CAN_NODE/can_node.h ****  *     - Initial version<br>
  45:../Dave/Generated/CAN_NODE/can_node.h ****  *
  46:../Dave/Generated/CAN_NODE/can_node.h ****  * 2015-05-12:
  47:../Dave/Generated/CAN_NODE/can_node.h ****  *     - CAN_NODE_EnableEvent() and CAN_NODE_ConfigBaudrate() APIs are included with additional arg
  48:../Dave/Generated/CAN_NODE/can_node.h ****  *     - New APIs are added: CAN_NODE_MO_ReceiveData(),CAN_NODE_MO_ClearStatus(), CAN_NODE_ClearSta
  49:../Dave/Generated/CAN_NODE/can_node.h ****  *
  50:../Dave/Generated/CAN_NODE/can_node.h ****  * 2015-06-18:
  51:../Dave/Generated/CAN_NODE/can_node.h ****  *     - LLD version check is removed.<br>
  52:../Dave/Generated/CAN_NODE/can_node.h ****  *     - Version check added for XMCLib dependency.<br>
  53:../Dave/Generated/CAN_NODE/can_node.h ****  *
  54:../Dave/Generated/CAN_NODE/can_node.h ****  * 2015-06-30:
  55:../Dave/Generated/CAN_NODE/can_node.h ****  *     - New APIs are added: CAN_NODE_Enable() and CAN_NODE_Disable() to enable and disable CAN nod
  56:../Dave/Generated/CAN_NODE/can_node.h ****  *         from participating CAN traffic. <br>
  57:../Dave/Generated/CAN_NODE/can_node.h ****  *
  58:../Dave/Generated/CAN_NODE/can_node.h ****  * @endcond
  59:../Dave/Generated/CAN_NODE/can_node.h ****  *
  60:../Dave/Generated/CAN_NODE/can_node.h ****  */
  61:../Dave/Generated/CAN_NODE/can_node.h **** 
  62:../Dave/Generated/CAN_NODE/can_node.h **** /**************************************************************************************************
  63:../Dave/Generated/CAN_NODE/can_node.h ****  * HEADER FILES
  64:../Dave/Generated/CAN_NODE/can_node.h ****  **************************************************************************************************
  65:../Dave/Generated/CAN_NODE/can_node.h **** 
  66:../Dave/Generated/CAN_NODE/can_node.h **** #ifndef CAN_NODE_H
  67:../Dave/Generated/CAN_NODE/can_node.h **** #define CAN_NODE_H
  68:../Dave/Generated/CAN_NODE/can_node.h **** 
  69:../Dave/Generated/CAN_NODE/can_node.h **** #include <xmc_can.h>
  70:../Dave/Generated/CAN_NODE/can_node.h **** #include <xmc_gpio.h>
  71:../Dave/Generated/CAN_NODE/can_node.h **** #include "../GLOBAL_CAN/global_can.h"
  72:../Dave/Generated/CAN_NODE/can_node.h **** #include "can_node_conf.h"
  73:../Dave/Generated/CAN_NODE/can_node.h **** #include <DAVE_common.h>
  74:../Dave/Generated/CAN_NODE/can_node.h **** 
  75:../Dave/Generated/CAN_NODE/can_node.h ****  /*************************************************************************************************
  76:../Dave/Generated/CAN_NODE/can_node.h ****  * MACROS
  77:../Dave/Generated/CAN_NODE/can_node.h ****  **************************************************************************************************
  78:../Dave/Generated/CAN_NODE/can_node.h **** 
  79:../Dave/Generated/CAN_NODE/can_node.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  80:../Dave/Generated/CAN_NODE/can_node.h ****        (XMC_LIB_MINOR_VERSION >= 0U) && \
  81:../Dave/Generated/CAN_NODE/can_node.h ****        (XMC_LIB_PATCH_VERSION >= 0U)))
  82:../Dave/Generated/CAN_NODE/can_node.h **** #error "CAN_NODE requires XMC Peripheral Library v2.0.0 or higher"
  83:../Dave/Generated/CAN_NODE/can_node.h **** #endif
  84:../Dave/Generated/CAN_NODE/can_node.h **** 
  85:../Dave/Generated/CAN_NODE/can_node.h ****  /*************************************************************************************************
  86:../Dave/Generated/CAN_NODE/can_node.h ****  * ENUMS
  87:../Dave/Generated/CAN_NODE/can_node.h ****  **************************************************************************************************
  88:../Dave/Generated/CAN_NODE/can_node.h **** /**
  89:../Dave/Generated/CAN_NODE/can_node.h ****  * @ingroup CAN_NODE_enumerations
  90:../Dave/Generated/CAN_NODE/can_node.h ****  * @{
  91:../Dave/Generated/CAN_NODE/can_node.h ****  */
  92:../Dave/Generated/CAN_NODE/can_node.h **** 
  93:../Dave/Generated/CAN_NODE/can_node.h **** /**
  94:../Dave/Generated/CAN_NODE/can_node.h ****  *  Enum to describe the possible status values, returned
  95:../Dave/Generated/CAN_NODE/can_node.h ****  *  by CAN APIs.
  96:../Dave/Generated/CAN_NODE/can_node.h ****  */
  97:../Dave/Generated/CAN_NODE/can_node.h **** typedef enum CAN_NODE_STATUS
  98:../Dave/Generated/CAN_NODE/can_node.h **** {
  99:../Dave/Generated/CAN_NODE/can_node.h ****   CAN_NODE_STATUS_SUCCESS = 0, /**< APP success state */
 100:../Dave/Generated/CAN_NODE/can_node.h ****   CAN_NODE_STATUS_FAILURE,  /**< Returned when unknown error occurred */
 101:../Dave/Generated/CAN_NODE/can_node.h ****   CAN_NODE_STATUS_BUSY,      /**< CAN_NODE is busy and can not handle request*/
 102:../Dave/Generated/CAN_NODE/can_node.h ****   CAN_NODE_STATUS_MO_NOT_ACCEPTABLE,/**< Message object type not allowed*/
 103:../Dave/Generated/CAN_NODE/can_node.h ****   CAN_NODE_STATUS_MO_DISABLED  /**< Returned if Message object is disabled */
 104:../Dave/Generated/CAN_NODE/can_node.h **** } CAN_NODE_STATUS_t;
 105:../Dave/Generated/CAN_NODE/can_node.h **** 
 106:../Dave/Generated/CAN_NODE/can_node.h **** 
 107:../Dave/Generated/CAN_NODE/can_node.h **** /**
 108:../Dave/Generated/CAN_NODE/can_node.h ****  * @}
 109:../Dave/Generated/CAN_NODE/can_node.h ****  */
 110:../Dave/Generated/CAN_NODE/can_node.h **** 
 111:../Dave/Generated/CAN_NODE/can_node.h **** /**************************************************************************************************
 112:../Dave/Generated/CAN_NODE/can_node.h **** * DATA STRUCTURES
 113:../Dave/Generated/CAN_NODE/can_node.h **** ***************************************************************************************************
 114:../Dave/Generated/CAN_NODE/can_node.h **** 
 115:../Dave/Generated/CAN_NODE/can_node.h **** /**
 116:../Dave/Generated/CAN_NODE/can_node.h ****  * @ingroup CAN_NODE_datastructures
 117:../Dave/Generated/CAN_NODE/can_node.h ****  * @{
 118:../Dave/Generated/CAN_NODE/can_node.h ****  */
 119:../Dave/Generated/CAN_NODE/can_node.h **** 
 120:../Dave/Generated/CAN_NODE/can_node.h **** /**
 121:../Dave/Generated/CAN_NODE/can_node.h ****  * This is the data structure to hold the configured port and pin numbers for CAN_NODE.
 122:../Dave/Generated/CAN_NODE/can_node.h ****  *
 123:../Dave/Generated/CAN_NODE/can_node.h ****  */
 124:../Dave/Generated/CAN_NODE/can_node.h **** 
 125:../Dave/Generated/CAN_NODE/can_node.h **** typedef const struct CAN_NODE_GPIO
 126:../Dave/Generated/CAN_NODE/can_node.h **** {
 127:../Dave/Generated/CAN_NODE/can_node.h ****   XMC_GPIO_PORT_t  *const port; /**< Pointer to port hardware register to select for CAN communicat
 128:../Dave/Generated/CAN_NODE/can_node.h ****   uint8_t  pin;    /**< Configured CAN Tx/Rx pin number */
 129:../Dave/Generated/CAN_NODE/can_node.h **** } CAN_NODE_GPIO_t;
 130:../Dave/Generated/CAN_NODE/can_node.h **** 
 131:../Dave/Generated/CAN_NODE/can_node.h **** /**
 132:../Dave/Generated/CAN_NODE/can_node.h ****  *    Node events service request structure for CAN_NODE.
 133:../Dave/Generated/CAN_NODE/can_node.h ****  *    To enable the events user explicitly connect the signals to INTERUPT APP.
 134:../Dave/Generated/CAN_NODE/can_node.h ****  */
 135:../Dave/Generated/CAN_NODE/can_node.h **** typedef const struct CAN_NODE_SR
 136:../Dave/Generated/CAN_NODE/can_node.h **** {
 137:../Dave/Generated/CAN_NODE/can_node.h ****   uint8_t alert_event_sr;      /**< Alert event service request  */
 138:../Dave/Generated/CAN_NODE/can_node.h ****   uint8_t lec_event_sr;        /**< LEC event service request  */
 139:../Dave/Generated/CAN_NODE/can_node.h ****   uint8_t txok_event_sr;       /**< Transmit OK event service request  */
 140:../Dave/Generated/CAN_NODE/can_node.h ****   uint8_t framecount_event_sr; /**< Frame count event service request  */
 141:../Dave/Generated/CAN_NODE/can_node.h **** } CAN_NODE_SR_t;
 142:../Dave/Generated/CAN_NODE/can_node.h **** 
 143:../Dave/Generated/CAN_NODE/can_node.h **** /**
 144:../Dave/Generated/CAN_NODE/can_node.h ****  *   Message object structure for CAN_NODE APP
 145:../Dave/Generated/CAN_NODE/can_node.h ****  */
 146:../Dave/Generated/CAN_NODE/can_node.h **** typedef struct CAN_NODE_LMO
 147:../Dave/Generated/CAN_NODE/can_node.h **** {
 148:../Dave/Generated/CAN_NODE/can_node.h ****   XMC_CAN_MO_t *mo_ptr;        /**< CAN message object pointer */
 149:../Dave/Generated/CAN_NODE/can_node.h ****   uint8_t number;              /**< Consumed CAN message object number */
 150:../Dave/Generated/CAN_NODE/can_node.h ****   uint8_t tx_sr;               /**< CAN message object transmit service request */
 151:../Dave/Generated/CAN_NODE/can_node.h ****   uint8_t rx_sr;               /**< CAN message object receive service request */
 152:../Dave/Generated/CAN_NODE/can_node.h ****   const bool tx_event_enable;  /**< GUI configured value for CAN message object transmit event chec
 153:../Dave/Generated/CAN_NODE/can_node.h ****   const bool rx_event_enable;  /**< GUI configured value for CAN message object receive event check
 154:../Dave/Generated/CAN_NODE/can_node.h **** } CAN_NODE_LMO_t;
 155:../Dave/Generated/CAN_NODE/can_node.h **** 
 156:../Dave/Generated/CAN_NODE/can_node.h **** /**
 157:../Dave/Generated/CAN_NODE/can_node.h ****  *  Initialization data structure for CAN_NODE APP
 158:../Dave/Generated/CAN_NODE/can_node.h ****  */
 159:../Dave/Generated/CAN_NODE/can_node.h **** typedef struct CAN_NODE
 160:../Dave/Generated/CAN_NODE/can_node.h **** {
 161:../Dave/Generated/CAN_NODE/can_node.h ****   GLOBAL_CAN_t *const global_ptr;                    /**< Global CAN pointer */
 162:../Dave/Generated/CAN_NODE/can_node.h ****   XMC_CAN_NODE_t *const node_ptr;                    /**< Consumed CAN node pointer */
 163:../Dave/Generated/CAN_NODE/can_node.h ****   XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *baudrate_config; /**< Pointer to bit time configuration s
 164:../Dave/Generated/CAN_NODE/can_node.h ****   CAN_NODE_LMO_t *lmobj_ptr[32];                     /**< Array of pointer to logical message objec
 165:../Dave/Generated/CAN_NODE/can_node.h ****   CAN_NODE_SR_t *node_sr_ptr;                        /**< Node service request  */
 166:../Dave/Generated/CAN_NODE/can_node.h ****   const CAN_NODE_GPIO_t    *const gpio_out;          /**< GPIO structure for CAN transmit pin  */
 167:../Dave/Generated/CAN_NODE/can_node.h ****   const XMC_GPIO_CONFIG_t  *const gpio_out_config;   /**< GPIO configuration structure for CAN tran
 168:../Dave/Generated/CAN_NODE/can_node.h ****   const CAN_NODE_GPIO_t    *const gpio_in;           /**< GPIO structure for CAN receive pin  */
 169:../Dave/Generated/CAN_NODE/can_node.h ****   const XMC_GPIO_CONFIG_t  *const gpio_in_config;    /**< GPIO configuration structure for CAN rece
 170:../Dave/Generated/CAN_NODE/can_node.h ****   const XMC_CAN_NODE_RECEIVE_INPUT_t rx_signal;      /**< Possible input type for CAN receive pin *
 171:../Dave/Generated/CAN_NODE/can_node.h ****   uint8_t node_num;                                  /**< Consumed CAN node number */
 172:../Dave/Generated/CAN_NODE/can_node.h ****   uint8_t mo_count;                                  /**< GUI configured value Consumed CAN MO coun
 173:../Dave/Generated/CAN_NODE/can_node.h ****   bool lec_event_enable;                       /**< GUI configured value for LEC event check box  *
 174:../Dave/Generated/CAN_NODE/can_node.h ****   bool txok_event_enable;                      /**< GUI configured value for transmit OK event chec
 175:../Dave/Generated/CAN_NODE/can_node.h ****   bool alert_event_enable;                     /**< GUI configured value for alert event check box 
 176:../Dave/Generated/CAN_NODE/can_node.h ****   bool framecount_event_enable;                /**< GUI configured value for frame count event chec
 177:../Dave/Generated/CAN_NODE/can_node.h ****   bool loopback_enable;                        /**< GUI configured value for loop back enable check
 178:../Dave/Generated/CAN_NODE/can_node.h **** 
 179:../Dave/Generated/CAN_NODE/can_node.h **** } CAN_NODE_t;
 180:../Dave/Generated/CAN_NODE/can_node.h **** 
 181:../Dave/Generated/CAN_NODE/can_node.h **** /**
 182:../Dave/Generated/CAN_NODE/can_node.h ****  * @}
 183:../Dave/Generated/CAN_NODE/can_node.h ****  */
 184:../Dave/Generated/CAN_NODE/can_node.h **** 
 185:../Dave/Generated/CAN_NODE/can_node.h **** /**************************************************************************************************
 186:../Dave/Generated/CAN_NODE/can_node.h **** * API Prototypes
 187:../Dave/Generated/CAN_NODE/can_node.h **** ***************************************************************************************************
 188:../Dave/Generated/CAN_NODE/can_node.h **** /* Support for C++ codebase */
 189:../Dave/Generated/CAN_NODE/can_node.h **** #ifdef __cplusplus
 190:../Dave/Generated/CAN_NODE/can_node.h **** extern "C" {
 191:../Dave/Generated/CAN_NODE/can_node.h **** #endif
 192:../Dave/Generated/CAN_NODE/can_node.h **** 
 193:../Dave/Generated/CAN_NODE/can_node.h **** /**
 194:../Dave/Generated/CAN_NODE/can_node.h ****  * @ingroup CAN_NODE_apidoc
 195:../Dave/Generated/CAN_NODE/can_node.h ****  * @{
 196:../Dave/Generated/CAN_NODE/can_node.h ****  */
 197:../Dave/Generated/CAN_NODE/can_node.h **** 
 198:../Dave/Generated/CAN_NODE/can_node.h **** /**
 199:../Dave/Generated/CAN_NODE/can_node.h ****  * @brief Function to read the CAN_NODE APP version.
 200:../Dave/Generated/CAN_NODE/can_node.h ****  *
 201:../Dave/Generated/CAN_NODE/can_node.h ****  * @return DAVE_APP_VERSION_t Structure that contains the members
 202:../Dave/Generated/CAN_NODE/can_node.h ****  *         major, minor and patch values.
 203:../Dave/Generated/CAN_NODE/can_node.h ****  *
 204:../Dave/Generated/CAN_NODE/can_node.h ****  * \par<b>Description:</b><br>
 205:../Dave/Generated/CAN_NODE/can_node.h ****  * The function can be used to check application software compatibility with a
 206:../Dave/Generated/CAN_NODE/can_node.h ****  * specific version of the APP.
 207:../Dave/Generated/CAN_NODE/can_node.h ****  *
 208:../Dave/Generated/CAN_NODE/can_node.h ****  *
 209:../Dave/Generated/CAN_NODE/can_node.h ****  * Example Usage:
 210:../Dave/Generated/CAN_NODE/can_node.h ****  * @code
 211:../Dave/Generated/CAN_NODE/can_node.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 212:../Dave/Generated/CAN_NODE/can_node.h ****  *
 213:../Dave/Generated/CAN_NODE/can_node.h ****  *   int main(void)
 214:../Dave/Generated/CAN_NODE/can_node.h ****  *   {
 215:../Dave/Generated/CAN_NODE/can_node.h ****  *     DAVE_STATUS_t init_status;
 216:../Dave/Generated/CAN_NODE/can_node.h ****  *     DAVE_APP_VERSION_t can_version;
 217:../Dave/Generated/CAN_NODE/can_node.h ****  *     init_status = DAVE_Init();
 218:../Dave/Generated/CAN_NODE/can_node.h ****  *     if (init_status == DAVE_STATUS_SUCCESS)
 219:../Dave/Generated/CAN_NODE/can_node.h ****  *     {
 220:../Dave/Generated/CAN_NODE/can_node.h ****  *       can_version = CAN_NODE_GetAppVersion();
 221:../Dave/Generated/CAN_NODE/can_node.h ****  *       if ((can_version.major == 4U) &&
 222:../Dave/Generated/CAN_NODE/can_node.h ****  *          (can_version.minor == 1U))
 223:../Dave/Generated/CAN_NODE/can_node.h ****  *       {
 224:../Dave/Generated/CAN_NODE/can_node.h ****  *         // Application code
 225:../Dave/Generated/CAN_NODE/can_node.h ****  *       }
 226:../Dave/Generated/CAN_NODE/can_node.h ****  *       else
 227:../Dave/Generated/CAN_NODE/can_node.h ****  *       {
 228:../Dave/Generated/CAN_NODE/can_node.h ****  *         // Probably, not the right version.
 229:../Dave/Generated/CAN_NODE/can_node.h ****  *       }
 230:../Dave/Generated/CAN_NODE/can_node.h ****  *     }
 231:../Dave/Generated/CAN_NODE/can_node.h ****  *     // More code here
 232:../Dave/Generated/CAN_NODE/can_node.h ****  *     while(1)
 233:../Dave/Generated/CAN_NODE/can_node.h ****  *     {
 234:../Dave/Generated/CAN_NODE/can_node.h ****  *
 235:../Dave/Generated/CAN_NODE/can_node.h ****  *     }
 236:../Dave/Generated/CAN_NODE/can_node.h ****  *
 237:../Dave/Generated/CAN_NODE/can_node.h ****  *     return (1);
 238:../Dave/Generated/CAN_NODE/can_node.h ****  *  }
 239:../Dave/Generated/CAN_NODE/can_node.h ****  *  @endcode
 240:../Dave/Generated/CAN_NODE/can_node.h ****  */
 241:../Dave/Generated/CAN_NODE/can_node.h **** DAVE_APP_VERSION_t CAN_NODE_GetAppVersion(void);
 242:../Dave/Generated/CAN_NODE/can_node.h **** 
 243:../Dave/Generated/CAN_NODE/can_node.h **** /**
 244:../Dave/Generated/CAN_NODE/can_node.h ****  * @brief Function to initialize the CAN node by configuring the baud rate,
 245:../Dave/Generated/CAN_NODE/can_node.h ****  *        can bus type(External or internal) and message objects.
 246:../Dave/Generated/CAN_NODE/can_node.h ****  *
 247:../Dave/Generated/CAN_NODE/can_node.h ****  * @param handle  is a pointer pointing to APP data structure.@ref CAN_NODE_t
 248:../Dave/Generated/CAN_NODE/can_node.h ****  * @return CAN_NODE_STATUS_t CAN_NODE_STATUS_SUCCESS: if the initialization succeeds.<BR>
 249:../Dave/Generated/CAN_NODE/can_node.h ****  *                           CAN_NODE_STATUS_FAILURE  : for failure case.<BR>
 250:../Dave/Generated/CAN_NODE/can_node.h ****  *
 251:../Dave/Generated/CAN_NODE/can_node.h ****  * \par<b>Description:</b><br>
 252:../Dave/Generated/CAN_NODE/can_node.h ****  * This function internally calls GLOBAL_CAN_Init() API to configure peripheral frequency
 253:../Dave/Generated/CAN_NODE/can_node.h ****  * to enable CAN communication. API configures loop back mode or external CAN bus, message objects
 254:../Dave/Generated/CAN_NODE/can_node.h ****  *  based on the settings and enables configured event flags and service request values.
 255:../Dave/Generated/CAN_NODE/can_node.h ****  *
 256:../Dave/Generated/CAN_NODE/can_node.h ****  * <BR>
 257:../Dave/Generated/CAN_NODE/can_node.h ****  *
 258:../Dave/Generated/CAN_NODE/can_node.h ****  * Example Usage:
 259:../Dave/Generated/CAN_NODE/can_node.h ****  * @code
 260:../Dave/Generated/CAN_NODE/can_node.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 261:../Dave/Generated/CAN_NODE/can_node.h ****  *
 262:../Dave/Generated/CAN_NODE/can_node.h ****  *   int main(void)
 263:../Dave/Generated/CAN_NODE/can_node.h ****  *   {
 264:../Dave/Generated/CAN_NODE/can_node.h ****  *     CAN_NODE_STATUS_t init_status;
 265:../Dave/Generated/CAN_NODE/can_node.h ****  *      // DAVE_Init() internally calls CAN_NODE_Init()
 266:../Dave/Generated/CAN_NODE/can_node.h ****  *     init_status = CAN_NODE_Init(&CAN_NODE_0);
 267:../Dave/Generated/CAN_NODE/can_node.h ****  *     if (init_status == CAN_NODE_STATUS_SUCCESS)
 268:../Dave/Generated/CAN_NODE/can_node.h ****  *     {
 269:../Dave/Generated/CAN_NODE/can_node.h ****  *
 270:../Dave/Generated/CAN_NODE/can_node.h ****  *       // Application code
 271:../Dave/Generated/CAN_NODE/can_node.h ****  *
 272:../Dave/Generated/CAN_NODE/can_node.h ****  *     }
 273:../Dave/Generated/CAN_NODE/can_node.h ****  *     else
 274:../Dave/Generated/CAN_NODE/can_node.h ****  *     {
 275:../Dave/Generated/CAN_NODE/can_node.h ****  *
 276:../Dave/Generated/CAN_NODE/can_node.h ****  *      // Failed to initialize the CAN peripheral
 277:../Dave/Generated/CAN_NODE/can_node.h ****  *     }
 278:../Dave/Generated/CAN_NODE/can_node.h ****  *     // More code here
 279:../Dave/Generated/CAN_NODE/can_node.h ****  *     while(1)
 280:../Dave/Generated/CAN_NODE/can_node.h ****  *     {
 281:../Dave/Generated/CAN_NODE/can_node.h ****  *
 282:../Dave/Generated/CAN_NODE/can_node.h ****  *     }
 283:../Dave/Generated/CAN_NODE/can_node.h ****  *
 284:../Dave/Generated/CAN_NODE/can_node.h ****  *     return (1);
 285:../Dave/Generated/CAN_NODE/can_node.h ****  *  }
 286:../Dave/Generated/CAN_NODE/can_node.h ****  *  @endcode
 287:../Dave/Generated/CAN_NODE/can_node.h ****  */
 288:../Dave/Generated/CAN_NODE/can_node.h **** CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t *handle);
 289:../Dave/Generated/CAN_NODE/can_node.h **** 
 290:../Dave/Generated/CAN_NODE/can_node.h **** /**
 291:../Dave/Generated/CAN_NODE/can_node.h ****  * @brief Function to initialize the CAN message object. It configures message type,
 292:../Dave/Generated/CAN_NODE/can_node.h ****  *         message ID type, Identifier value, mask bits, required data length.<br>
 293:../Dave/Generated/CAN_NODE/can_node.h ****  *         It also configures the transmit and receive events for the message object.<br>
 294:../Dave/Generated/CAN_NODE/can_node.h ****  *
 295:../Dave/Generated/CAN_NODE/can_node.h ****  * @param lmo_ptr is a handle with pointers to static and dynamic content of message object.@ref CA
 296:../Dave/Generated/CAN_NODE/can_node.h ****  * @return None.
 297:../Dave/Generated/CAN_NODE/can_node.h ****  *
 298:../Dave/Generated/CAN_NODE/can_node.h ****  * \par<b>Description:</b><br>
 299:../Dave/Generated/CAN_NODE/can_node.h ****  *
 300:../Dave/Generated/CAN_NODE/can_node.h ****  *  It configures message type to transmit / receive message object, message ID type to standard / 
 301:../Dave/Generated/CAN_NODE/can_node.h ****  *         Identifier value, mask bits,required data length for the transmit message object.
 302:../Dave/Generated/CAN_NODE/can_node.h ****  *  It also enables configured event flags for message objects.
 303:../Dave/Generated/CAN_NODE/can_node.h ****  *  To achieve this functionality API calls XMC_CAN_MO_Config().
 304:../Dave/Generated/CAN_NODE/can_node.h ****  * <BR>
 305:../Dave/Generated/CAN_NODE/can_node.h ****  *
 306:../Dave/Generated/CAN_NODE/can_node.h ****  * Example Usage:
 307:../Dave/Generated/CAN_NODE/can_node.h ****  * @code
 308:../Dave/Generated/CAN_NODE/can_node.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 309:../Dave/Generated/CAN_NODE/can_node.h ****  *
 310:../Dave/Generated/CAN_NODE/can_node.h ****  *   int main(void)
 311:../Dave/Generated/CAN_NODE/can_node.h ****  *   {
 312:../Dave/Generated/CAN_NODE/can_node.h ****  *     DAVE_STATUS_t init_status;
 313:../Dave/Generated/CAN_NODE/can_node.h ****  *     const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 314:../Dave/Generated/CAN_NODE/can_node.h ****  *     XMC_CAN_MO_t *MO_Ptr;
 315:../Dave/Generated/CAN_NODE/can_node.h ****  *
 316:../Dave/Generated/CAN_NODE/can_node.h ****  *     MO_Ptr = HandlePtr1->lmobj_ptr[0]->mo_ptr;   //'0' refers to first message object configured
 317:../Dave/Generated/CAN_NODE/can_node.h ****  *                                                   // for the selected can node
 318:../Dave/Generated/CAN_NODE/can_node.h ****  *
 319:../Dave/Generated/CAN_NODE/can_node.h ****  *     init_status = DAVE_Init(); //CAN_NODE_Init();
 320:../Dave/Generated/CAN_NODE/can_node.h ****  *
 321:../Dave/Generated/CAN_NODE/can_node.h ****  *     if (init_status == DAVE_STATUS_SUCCESS)
 322:../Dave/Generated/CAN_NODE/can_node.h ****  *     {
 323:../Dave/Generated/CAN_NODE/can_node.h ****  *
 324:../Dave/Generated/CAN_NODE/can_node.h ****  *       //Application code.
 325:../Dave/Generated/CAN_NODE/can_node.h ****  *
 326:../Dave/Generated/CAN_NODE/can_node.h ****  *       MO_Ptr->can_mo_type = XMC_CAN_MO_TYPE_TRANSMSGOBJ;  //Configure message object type as tra
 327:../Dave/Generated/CAN_NODE/can_node.h ****  *       MO_Ptr->can_id_mode = XMC_CAN_FRAME_TYPE_STANDARD_11BITS; //configure MO identifier type
 328:../Dave/Generated/CAN_NODE/can_node.h ****  *       MO_Ptr->can_data_length = 8; // Configure CAN transmit MO data length field
 329:../Dave/Generated/CAN_NODE/can_node.h ****  *       MO_Ptr->can_data[1] = 0xAAAA5555;  // Configure Higher 4 bytes of Data
 330:../Dave/Generated/CAN_NODE/can_node.h ****  *       MO_Ptr->can_data[0] = 0xAAAA5555;  // Configure Lower 4 bytes of Data
 331:../Dave/Generated/CAN_NODE/can_node.h ****  *       // Runtime change the MO configuration
 332:../Dave/Generated/CAN_NODE/can_node.h ****  *       CAN_NODE_MO_Init(HandlePtr1->lmobj_ptr[0]);
 333:../Dave/Generated/CAN_NODE/can_node.h ****  *
 334:../Dave/Generated/CAN_NODE/can_node.h ****  *     }
 335:../Dave/Generated/CAN_NODE/can_node.h ****  *     else
 336:../Dave/Generated/CAN_NODE/can_node.h ****  *     {
 337:../Dave/Generated/CAN_NODE/can_node.h ****  *       // CAN initialization failed
 338:../Dave/Generated/CAN_NODE/can_node.h ****  *     }
 339:../Dave/Generated/CAN_NODE/can_node.h ****  *     // More code here
 340:../Dave/Generated/CAN_NODE/can_node.h ****  *     while(1)
 341:../Dave/Generated/CAN_NODE/can_node.h ****  *     {
 342:../Dave/Generated/CAN_NODE/can_node.h ****  *
 343:../Dave/Generated/CAN_NODE/can_node.h ****  *     }
 344:../Dave/Generated/CAN_NODE/can_node.h ****  *
 345:../Dave/Generated/CAN_NODE/can_node.h ****  *     return (1);
 346:../Dave/Generated/CAN_NODE/can_node.h ****  *  }
 347:../Dave/Generated/CAN_NODE/can_node.h ****  *  @endcode
 348:../Dave/Generated/CAN_NODE/can_node.h ****  */
 349:../Dave/Generated/CAN_NODE/can_node.h **** void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr);
 350:../Dave/Generated/CAN_NODE/can_node.h **** 
 351:../Dave/Generated/CAN_NODE/can_node.h **** /**
 352:../Dave/Generated/CAN_NODE/can_node.h ****  * @brief Function to configures the CAN bit time by using SJW, sample point and can frequency.<br>
 353:../Dave/Generated/CAN_NODE/can_node.h ****  *
 354:../Dave/Generated/CAN_NODE/can_node.h ****  * @param handle is a pointer pointing to APP data structure.@ref CAN_NODE_t
 355:../Dave/Generated/CAN_NODE/can_node.h ****  * @param baudrate  is the required baud rate for the CAN node.
 356:../Dave/Generated/CAN_NODE/can_node.h ****  * @param sample_point is the sample point for the bit time.<br>
 357:../Dave/Generated/CAN_NODE/can_node.h ****  *        \b Range: 0% to 100% of the total bit time.<br>
 358:../Dave/Generated/CAN_NODE/can_node.h ****  * @param sjw is the (synchronization jump width) time quanta for resynchronizations.<br>
 359:../Dave/Generated/CAN_NODE/can_node.h ****  *
 360:../Dave/Generated/CAN_NODE/can_node.h ****  * @return None.<BR>
 361:../Dave/Generated/CAN_NODE/can_node.h ****  *
 362:../Dave/Generated/CAN_NODE/can_node.h ****  * \par<b>Description:</b><br>
 363:../Dave/Generated/CAN_NODE/can_node.h ****  *
 364:../Dave/Generated/CAN_NODE/can_node.h ****  * This function configures the CAN node bit time by updating synchronous jump width,
 365:../Dave/Generated/CAN_NODE/can_node.h ****  *      baud rate prescaler(BRP),sample point, divider mode, and time segment values to
 366:../Dave/Generated/CAN_NODE/can_node.h ****  *      the node bit timing register(NBTR). To achieve this functionality
 367:../Dave/Generated/CAN_NODE/can_node.h ****  *      API calls XMC_CAN_NODE_NominalBitTimeConfigure().
 368:../Dave/Generated/CAN_NODE/can_node.h ****  * <BR>
 369:../Dave/Generated/CAN_NODE/can_node.h ****  *
 370:../Dave/Generated/CAN_NODE/can_node.h ****  * Example Usage:
 371:../Dave/Generated/CAN_NODE/can_node.h ****  * @code
 372:../Dave/Generated/CAN_NODE/can_node.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 373:../Dave/Generated/CAN_NODE/can_node.h ****  *
 374:../Dave/Generated/CAN_NODE/can_node.h ****  *   int main(void)
 375:../Dave/Generated/CAN_NODE/can_node.h ****  *   {
 376:../Dave/Generated/CAN_NODE/can_node.h ****  *     const CAN_NODE_t *HandlePtr1= &CAN_NODE_0;
 377:../Dave/Generated/CAN_NODE/can_node.h ****  *     DAVE_STATUS_t init_status;
 378:../Dave/Generated/CAN_NODE/can_node.h ****  *     uint32_t new_baudrate = 1000000;  // in Hz
 379:../Dave/Generated/CAN_NODE/can_node.h ****  *     uint16_t new_sampe_point = 80;
 380:../Dave/Generated/CAN_NODE/can_node.h ****  *     uint8_t new_sjw = 2;
 381:../Dave/Generated/CAN_NODE/can_node.h ****  *
 382:../Dave/Generated/CAN_NODE/can_node.h ****  *     init_status = DAVE_Init();
 383:../Dave/Generated/CAN_NODE/can_node.h ****  *     // DAVE_Init() internally calls CAN_NODE_Init()
 384:../Dave/Generated/CAN_NODE/can_node.h ****  *     //CAN_NODE_Init() internally calls CAN_NODE_ConfigBaudrate()
 385:../Dave/Generated/CAN_NODE/can_node.h ****  *     if (init_status == DAVE_STATUS_SUCCESS)
 386:../Dave/Generated/CAN_NODE/can_node.h ****  *     {
 387:../Dave/Generated/CAN_NODE/can_node.h ****  *       //  Application code ........
 388:../Dave/Generated/CAN_NODE/can_node.h ****  *
 389:../Dave/Generated/CAN_NODE/can_node.h ****  *       // For run time baud rate configuration change
 390:../Dave/Generated/CAN_NODE/can_node.h ****  *       // Configure new baud rate to 1MHz
 391:../Dave/Generated/CAN_NODE/can_node.h ****  *
 392:../Dave/Generated/CAN_NODE/can_node.h ****  *       XMC_CAN_NODE_SetInitBit(HandlePtr1->node_ptr);
 393:../Dave/Generated/CAN_NODE/can_node.h ****  *
 394:../Dave/Generated/CAN_NODE/can_node.h ****  *       CAN_NODE_ConfigBaudrate(HandlePtr1, new_baudrate, new_sampe_point,new_sjw);
 395:../Dave/Generated/CAN_NODE/can_node.h ****  *
 396:../Dave/Generated/CAN_NODE/can_node.h ****  *       XMC_CAN_NODE_ResetInitBit(HandlePtr1->node_ptr);
 397:../Dave/Generated/CAN_NODE/can_node.h ****  *
 398:../Dave/Generated/CAN_NODE/can_node.h ****  *     }
 399:../Dave/Generated/CAN_NODE/can_node.h ****  *     // More code here
 400:../Dave/Generated/CAN_NODE/can_node.h ****  *     while(1)
 401:../Dave/Generated/CAN_NODE/can_node.h ****  *     {
 402:../Dave/Generated/CAN_NODE/can_node.h ****  *
 403:../Dave/Generated/CAN_NODE/can_node.h ****  *     }
 404:../Dave/Generated/CAN_NODE/can_node.h ****  *
 405:../Dave/Generated/CAN_NODE/can_node.h ****  *     return (1);
 406:../Dave/Generated/CAN_NODE/can_node.h ****  *  }
 407:../Dave/Generated/CAN_NODE/can_node.h ****  *  @endcode
 408:../Dave/Generated/CAN_NODE/can_node.h ****  */
 409:../Dave/Generated/CAN_NODE/can_node.h **** void CAN_NODE_ConfigBaudrate(const CAN_NODE_t *handle, uint32_t baudrate, uint16_t sample_point, ui
 410:../Dave/Generated/CAN_NODE/can_node.h **** 
 411:../Dave/Generated/CAN_NODE/can_node.h **** 
 412:../Dave/Generated/CAN_NODE/can_node.h **** /**
 413:../Dave/Generated/CAN_NODE/can_node.h ****  * @brief Function to enable the node events like node alert, LEC, Transfer OK, frame counter overf
 414:../Dave/Generated/CAN_NODE/can_node.h ****  * @param handle is a pointer pointing to APP data structure.@ref CAN_NODE_t<br>
 415:../Dave/Generated/CAN_NODE/can_node.h ****  * @param  node_event is the required node event to enable. @ref XMC_CAN_NODE_EVENT_t <br>
 416:../Dave/Generated/CAN_NODE/can_node.h ****  *         \b Note:  Multiple events can not be combined using \a OR operation.
 417:../Dave/Generated/CAN_NODE/can_node.h ****  * @return None <BR>
 418:../Dave/Generated/CAN_NODE/can_node.h ****  *
 419:../Dave/Generated/CAN_NODE/can_node.h ****  * \par<b>Description:</b><br>
 420:../Dave/Generated/CAN_NODE/can_node.h ****  * This function check the node event flags which are enabled through GUI. If the flags are configu
 421:../Dave/Generated/CAN_NODE/can_node.h ****  * then API enables the related CAN node events.
 422:../Dave/Generated/CAN_NODE/can_node.h ****  * 1. XMC_CAN_NODE_EVENT_TX_INT
 423:../Dave/Generated/CAN_NODE/can_node.h ****  * 2. XMC_CAN_NODE_EVENT_LEC
 424:../Dave/Generated/CAN_NODE/can_node.h ****  * 3. XMC_CAN_NODE_EVENT_ALERT
 425:../Dave/Generated/CAN_NODE/can_node.h ****  * 4. XMC_CAN_NODE_EVENT_CFCIE
 426:../Dave/Generated/CAN_NODE/can_node.h ****  * This API enables the above events by configuring NCR register.
 427:../Dave/Generated/CAN_NODE/can_node.h ****  * To achieve this functionality API calls XMC_CAN_NODE_EnableEvent().
 428:../Dave/Generated/CAN_NODE/can_node.h ****  * <BR>
 429:../Dave/Generated/CAN_NODE/can_node.h ****  *
 430:../Dave/Generated/CAN_NODE/can_node.h ****  * Example Usage:
 431:../Dave/Generated/CAN_NODE/can_node.h ****  * @code
 432:../Dave/Generated/CAN_NODE/can_node.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 433:../Dave/Generated/CAN_NODE/can_node.h ****  *
 434:../Dave/Generated/CAN_NODE/can_node.h ****  *   int main(void)
 435:../Dave/Generated/CAN_NODE/can_node.h ****  *   {
 436:../Dave/Generated/CAN_NODE/can_node.h ****  *     DAVE_STATUS_t init_status;
 437:../Dave/Generated/CAN_NODE/can_node.h ****  *     const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 438:../Dave/Generated/CAN_NODE/can_node.h ****  *
 439:../Dave/Generated/CAN_NODE/can_node.h ****  *     init_status = DAVE_Init();
 440:../Dave/Generated/CAN_NODE/can_node.h ****  *     //DAVE_Init();   internally calls CAN_NODE_Init()
 441:../Dave/Generated/CAN_NODE/can_node.h ****  *     //CAN_NODE_Init() internally calls CAN_NODE_EnableEvent()
 442:../Dave/Generated/CAN_NODE/can_node.h ****  *     if (init_status == DAVE_STATUS_SUCCESS)
 443:../Dave/Generated/CAN_NODE/can_node.h ****  *     {
 444:../Dave/Generated/CAN_NODE/can_node.h ****  *
 445:../Dave/Generated/CAN_NODE/can_node.h ****  *       // Application code ..
 446:../Dave/Generated/CAN_NODE/can_node.h ****  *
 447:../Dave/Generated/CAN_NODE/can_node.h ****  *       // enable the events during run time....
 448:../Dave/Generated/CAN_NODE/can_node.h ****  *       //  enable LEC event
 449:../Dave/Generated/CAN_NODE/can_node.h ****  *        CAN_NODE_EnableEvent(HandlePtr1,XMC_CAN_NODE_EVENT_ALERT);
 450:../Dave/Generated/CAN_NODE/can_node.h ****  *        // enable Alert event
 451:../Dave/Generated/CAN_NODE/can_node.h ****  *        CAN_NODE_EnableEvent(HandlePtr1,XMC_CAN_NODE_EVENT_LEC);
 452:../Dave/Generated/CAN_NODE/can_node.h ****  *        // enable Transmit OK event
 453:../Dave/Generated/CAN_NODE/can_node.h ****  *        CAN_NODE_EnableEvent(HandlePtr1,XMC_CAN_NODE_EVENT_TX_INT);
 454:../Dave/Generated/CAN_NODE/can_node.h ****  *        // enable CFCIE event
 455:../Dave/Generated/CAN_NODE/can_node.h ****  *        CAN_NODE_EnableEvent(HandlePtr1,XMC_CAN_NODE_EVENT_CFCIE);
 456:../Dave/Generated/CAN_NODE/can_node.h ****  *
 457:../Dave/Generated/CAN_NODE/can_node.h ****  *        // Application code...
 458:../Dave/Generated/CAN_NODE/can_node.h ****  *
 459:../Dave/Generated/CAN_NODE/can_node.h ****  *
 460:../Dave/Generated/CAN_NODE/can_node.h ****  *
 461:../Dave/Generated/CAN_NODE/can_node.h ****  *        // disable the events by calling CAN_NODE_DisableEvent() API
 462:../Dave/Generated/CAN_NODE/can_node.h ****  *
 463:../Dave/Generated/CAN_NODE/can_node.h ****  *     }
 464:../Dave/Generated/CAN_NODE/can_node.h ****  *     // More code here
 465:../Dave/Generated/CAN_NODE/can_node.h ****  *     while (1)
 466:../Dave/Generated/CAN_NODE/can_node.h ****  *     {
 467:../Dave/Generated/CAN_NODE/can_node.h ****  *
 468:../Dave/Generated/CAN_NODE/can_node.h ****  *     }
 469:../Dave/Generated/CAN_NODE/can_node.h ****  *
 470:../Dave/Generated/CAN_NODE/can_node.h ****  *     return (1);
 471:../Dave/Generated/CAN_NODE/can_node.h ****  *  }
 472:../Dave/Generated/CAN_NODE/can_node.h ****  *  @endcode
 473:../Dave/Generated/CAN_NODE/can_node.h ****  */
 474:../Dave/Generated/CAN_NODE/can_node.h **** void CAN_NODE_EnableEvent(const CAN_NODE_t *handle, const XMC_CAN_NODE_EVENT_t node_event);
 475:../Dave/Generated/CAN_NODE/can_node.h **** 
 476:../Dave/Generated/CAN_NODE/can_node.h **** /**
 477:../Dave/Generated/CAN_NODE/can_node.h ****  * @brief Function to disable the selected node events like node alert, LEC, Transfer OK, frame cou
 478:../Dave/Generated/CAN_NODE/can_node.h ****  * @param handle is a pointer pointing to APP data structure.@ref CAN_NODE_t.<br>
 479:../Dave/Generated/CAN_NODE/can_node.h ****  * @param  node_event is the required node event to disable. @ref XMC_CAN_NODE_EVENT_t <br>
 480:../Dave/Generated/CAN_NODE/can_node.h ****  *         \b Note:  Multiple events can not be combined using \a OR operation.
 481:../Dave/Generated/CAN_NODE/can_node.h ****  * @return None.<BR>
 482:../Dave/Generated/CAN_NODE/can_node.h ****  *
 483:../Dave/Generated/CAN_NODE/can_node.h ****  * \par<b>Description:</b><br>
 484:../Dave/Generated/CAN_NODE/can_node.h ****  *
 485:../Dave/Generated/CAN_NODE/can_node.h ****  * This function disables the CAN node events. Using the API following node events can be disabled,
 486:../Dave/Generated/CAN_NODE/can_node.h ****  * 1. XMC_CAN_NODE_EVENT_TX_INT
 487:../Dave/Generated/CAN_NODE/can_node.h ****  * 2. XMC_CAN_NODE_EVENT_LEC
 488:../Dave/Generated/CAN_NODE/can_node.h ****  * 3. XMC_CAN_NODE_EVENT_ALERT
 489:../Dave/Generated/CAN_NODE/can_node.h ****  * 4. XMC_CAN_NODE_EVENT_CFCIE
 490:../Dave/Generated/CAN_NODE/can_node.h ****  * To achieve this functionality API calls XMC_CAN_NODE_DisableEvent().
 491:../Dave/Generated/CAN_NODE/can_node.h ****  * <BR>
 492:../Dave/Generated/CAN_NODE/can_node.h ****  *
 493:../Dave/Generated/CAN_NODE/can_node.h ****  * Example Usage:
 494:../Dave/Generated/CAN_NODE/can_node.h ****  * @code
 495:../Dave/Generated/CAN_NODE/can_node.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 496:../Dave/Generated/CAN_NODE/can_node.h ****  *
 497:../Dave/Generated/CAN_NODE/can_node.h ****  *   int main(void)
 498:../Dave/Generated/CAN_NODE/can_node.h ****  *   {
 499:../Dave/Generated/CAN_NODE/can_node.h ****  *     DAVE_STATUS_t init_status;
 500:../Dave/Generated/CAN_NODE/can_node.h ****  *     const CAN_NODE_t *HandlePtr1= &CAN_NODE_0;
 501:../Dave/Generated/CAN_NODE/can_node.h ****  *
 502:../Dave/Generated/CAN_NODE/can_node.h ****  *     init_status = DAVE_Init();
 503:../Dave/Generated/CAN_NODE/can_node.h ****  *     if (init_status == DAVE_STATUS_SUCCESS)
 504:../Dave/Generated/CAN_NODE/can_node.h ****  *     {
 505:../Dave/Generated/CAN_NODE/can_node.h ****  *
 506:../Dave/Generated/CAN_NODE/can_node.h ****  *        // Application code..
 507:../Dave/Generated/CAN_NODE/can_node.h ****  *
 508:../Dave/Generated/CAN_NODE/can_node.h ****  *        //  enable LEC event
 509:../Dave/Generated/CAN_NODE/can_node.h ****  *        CAN_NODE_EnableEvent(HandlePtr1,XMC_CAN_NODE_EVENT_ALERT);
 510:../Dave/Generated/CAN_NODE/can_node.h ****  *        // enable Alert event
 511:../Dave/Generated/CAN_NODE/can_node.h ****  *        CAN_NODE_EnableEvent(HandlePtr1,XMC_CAN_NODE_EVENT_LEC);
 512:../Dave/Generated/CAN_NODE/can_node.h ****  *        // enable Transmit OK event
 513:../Dave/Generated/CAN_NODE/can_node.h ****  *        CAN_NODE_EnableEvent(HandlePtr1,XMC_CAN_NODE_EVENT_TX_INT);
 514:../Dave/Generated/CAN_NODE/can_node.h ****  *        // enable CFCIE event
 515:../Dave/Generated/CAN_NODE/can_node.h ****  *        CAN_NODE_EnableEvent(HandlePtr1,XMC_CAN_NODE_EVENT_CFCIE);
 516:../Dave/Generated/CAN_NODE/can_node.h ****  *
 517:../Dave/Generated/CAN_NODE/can_node.h ****  *        // Application code
 518:../Dave/Generated/CAN_NODE/can_node.h ****  *
 519:../Dave/Generated/CAN_NODE/can_node.h ****  *
 520:../Dave/Generated/CAN_NODE/can_node.h ****  *        // For disabling LEC event
 521:../Dave/Generated/CAN_NODE/can_node.h ****  *        CAN_NODE_DisableEvent(HandlePtr1,XMC_CAN_NODE_EVENT_ALERT);
 522:../Dave/Generated/CAN_NODE/can_node.h ****  *        // For disabling Alert event
 523:../Dave/Generated/CAN_NODE/can_node.h ****  *        CAN_NODE_DisableEvent(HandlePtr1,XMC_CAN_NODE_EVENT_LEC);
 524:../Dave/Generated/CAN_NODE/can_node.h ****  *        // For disabling Transmit OK event
 525:../Dave/Generated/CAN_NODE/can_node.h ****  *        CAN_NODE_DisableEvent(HandlePtr1,XMC_CAN_NODE_EVENT_TX_INT);
 526:../Dave/Generated/CAN_NODE/can_node.h ****  *        // For disabling CFCIE event
 527:../Dave/Generated/CAN_NODE/can_node.h ****  *        CAN_NODE_DisableEvent(HandlePtr1,XMC_CAN_NODE_EVENT_CFCIE);
 528:../Dave/Generated/CAN_NODE/can_node.h ****  *
 529:../Dave/Generated/CAN_NODE/can_node.h ****  *     }
 530:../Dave/Generated/CAN_NODE/can_node.h ****  *     // More code here
 531:../Dave/Generated/CAN_NODE/can_node.h ****  *     while(1)
 532:../Dave/Generated/CAN_NODE/can_node.h ****  *     {
 533:../Dave/Generated/CAN_NODE/can_node.h ****  *
 534:../Dave/Generated/CAN_NODE/can_node.h ****  *     }
 535:../Dave/Generated/CAN_NODE/can_node.h ****  *
 536:../Dave/Generated/CAN_NODE/can_node.h ****  *     return (1);
 537:../Dave/Generated/CAN_NODE/can_node.h ****  *  }
 538:../Dave/Generated/CAN_NODE/can_node.h ****  *  @endcode
 539:../Dave/Generated/CAN_NODE/can_node.h ****  */
 540:../Dave/Generated/CAN_NODE/can_node.h **** void CAN_NODE_DisableEvent(const CAN_NODE_t *handle, const XMC_CAN_NODE_EVENT_t node_event);
 541:../Dave/Generated/CAN_NODE/can_node.h **** 
 542:../Dave/Generated/CAN_NODE/can_node.h **** /**
 543:../Dave/Generated/CAN_NODE/can_node.h ****  * @brief Function to retrieve the current status of the can node.
 544:../Dave/Generated/CAN_NODE/can_node.h ****  *        It contains error information as well as successfully transferred CAN frames status.
 545:../Dave/Generated/CAN_NODE/can_node.h ****  * @param handle  is a pointer pointing to APP data structure.@ref CAN_NODE_t
 546:../Dave/Generated/CAN_NODE/can_node.h ****  * @return status of type uint32_t.<BR>
 547:../Dave/Generated/CAN_NODE/can_node.h ****  *
 548:../Dave/Generated/CAN_NODE/can_node.h ****  * \par<b>Description:</b><br>
 549:../Dave/Generated/CAN_NODE/can_node.h ****  * Status provides an overview about the current state of the respective CAN node,
 550:../Dave/Generated/CAN_NODE/can_node.h ****  * comprising information about CAN transfers, CAN node status and error conditions.
 551:../Dave/Generated/CAN_NODE/can_node.h ****  * It reads NSR (node status register)register.
 552:../Dave/Generated/CAN_NODE/can_node.h ****  * To achieve this functionality API calls XMC_CAN_NODE_GetStatus().
 553:../Dave/Generated/CAN_NODE/can_node.h ****  *
 554:../Dave/Generated/CAN_NODE/can_node.h ****  * <BR>
 555:../Dave/Generated/CAN_NODE/can_node.h ****  *
 556:../Dave/Generated/CAN_NODE/can_node.h ****  * Example Usage:
 557:../Dave/Generated/CAN_NODE/can_node.h ****  * @code
 558:../Dave/Generated/CAN_NODE/can_node.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 559:../Dave/Generated/CAN_NODE/can_node.h ****  *
 560:../Dave/Generated/CAN_NODE/can_node.h ****  *   int main(void)
 561:../Dave/Generated/CAN_NODE/can_node.h ****  *   {
 562:../Dave/Generated/CAN_NODE/can_node.h ****  *     DAVE_STATUS_t init_status;
 563:../Dave/Generated/CAN_NODE/can_node.h ****  *     const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 564:../Dave/Generated/CAN_NODE/can_node.h ****  *     uint32_t status;
 565:../Dave/Generated/CAN_NODE/can_node.h ****  *
 566:../Dave/Generated/CAN_NODE/can_node.h ****  *     init_status = DAVE_Init();
 567:../Dave/Generated/CAN_NODE/can_node.h ****  *     if (init_status == DAVE_STATUS_SUCCESS)
 568:../Dave/Generated/CAN_NODE/can_node.h ****  *     {
 569:../Dave/Generated/CAN_NODE/can_node.h ****  *
 570:../Dave/Generated/CAN_NODE/can_node.h ****  *       //Transmit MO data
 571:../Dave/Generated/CAN_NODE/can_node.h ****  *       CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[0]);
 572:../Dave/Generated/CAN_NODE/can_node.h ****  *
 573:../Dave/Generated/CAN_NODE/can_node.h ****  *       status = CAN_NODE_GetStatus(HandlePtr1);
 574:../Dave/Generated/CAN_NODE/can_node.h ****  *       if (status & XMC_CAN_NODE_STATUS_TX_OK)
 575:../Dave/Generated/CAN_NODE/can_node.h ****  *       {
 576:../Dave/Generated/CAN_NODE/can_node.h ****  *         //Message transmitted successfully
 577:../Dave/Generated/CAN_NODE/can_node.h ****  *       }
 578:../Dave/Generated/CAN_NODE/can_node.h ****  *       else if (status & XMC_CAN_NODE_STATUS_ALERT_WARNING)
 579:../Dave/Generated/CAN_NODE/can_node.h ****  *       {
 580:../Dave/Generated/CAN_NODE/can_node.h ****  *         // node alert warning event enabled
 581:../Dave/Generated/CAN_NODE/can_node.h ****  *       }
 582:../Dave/Generated/CAN_NODE/can_node.h ****  *       else if (status & XMC_CAN_NODE_STATUS_BUS_OFF)
 583:../Dave/Generated/CAN_NODE/can_node.h ****  *       {
 584:../Dave/Generated/CAN_NODE/can_node.h ****  *         //Bus off error
 585:../Dave/Generated/CAN_NODE/can_node.h ****  *       }
 586:../Dave/Generated/CAN_NODE/can_node.h ****  *
 587:../Dave/Generated/CAN_NODE/can_node.h ****  *     }
 588:../Dave/Generated/CAN_NODE/can_node.h ****  *     // More code here
 589:../Dave/Generated/CAN_NODE/can_node.h ****  *     while(1)
 590:../Dave/Generated/CAN_NODE/can_node.h ****  *     {
 591:../Dave/Generated/CAN_NODE/can_node.h ****  *
 592:../Dave/Generated/CAN_NODE/can_node.h ****  *     }
 593:../Dave/Generated/CAN_NODE/can_node.h ****  *
 594:../Dave/Generated/CAN_NODE/can_node.h ****  *     return (1);
 595:../Dave/Generated/CAN_NODE/can_node.h ****  *  }
 596:../Dave/Generated/CAN_NODE/can_node.h ****  *  @endcode
 597:../Dave/Generated/CAN_NODE/can_node.h ****  */
 598:../Dave/Generated/CAN_NODE/can_node.h **** uint32_t CAN_NODE_GetStatus(const CAN_NODE_t *handle);
 599:../Dave/Generated/CAN_NODE/can_node.h **** 
 600:../Dave/Generated/CAN_NODE/can_node.h **** 
 601:../Dave/Generated/CAN_NODE/can_node.h **** /**
 602:../Dave/Generated/CAN_NODE/can_node.h ****  * @brief Function to reset / clear the specific status of the can node.
 603:../Dave/Generated/CAN_NODE/can_node.h ****  *        It contains error information as well as successfully transferred CAN frames status.<br>
 604:../Dave/Generated/CAN_NODE/can_node.h ****  * @param can_node_status  is a node status enum. @ref XMC_CAN_NODE_STATUS_t <br>
 605:../Dave/Generated/CAN_NODE/can_node.h ****  * @param handle  is a pointer pointing to APP data structure.@ref CAN_NODE_t <br>
 606:../Dave/Generated/CAN_NODE/can_node.h ****  * @return none.<BR>
 607:../Dave/Generated/CAN_NODE/can_node.h ****  *
 608:../Dave/Generated/CAN_NODE/can_node.h ****  * \par<b>Description:</b><br>
 609:../Dave/Generated/CAN_NODE/can_node.h ****  * Status provides an overview about the current state of the respective CAN node,
 610:../Dave/Generated/CAN_NODE/can_node.h ****  * comprising information about CAN transfers, CAN node status and error conditions.
 611:../Dave/Generated/CAN_NODE/can_node.h ****  * It reads NSR (node status register)register.
 612:../Dave/Generated/CAN_NODE/can_node.h ****  * To achieve this functionality API calls XMC_CAN_NODE_GetStatus().
 613:../Dave/Generated/CAN_NODE/can_node.h ****  *
 614:../Dave/Generated/CAN_NODE/can_node.h ****  * <BR>
 615:../Dave/Generated/CAN_NODE/can_node.h ****  *
 616:../Dave/Generated/CAN_NODE/can_node.h ****  * Example Usage:
 617:../Dave/Generated/CAN_NODE/can_node.h ****  * @code
 618:../Dave/Generated/CAN_NODE/can_node.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 619:../Dave/Generated/CAN_NODE/can_node.h ****  *
 620:../Dave/Generated/CAN_NODE/can_node.h ****  *   int main(void)
 621:../Dave/Generated/CAN_NODE/can_node.h ****  *   {
 622:../Dave/Generated/CAN_NODE/can_node.h ****  *     DAVE_STATUS_t init_status;
 623:../Dave/Generated/CAN_NODE/can_node.h ****  *     const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 624:../Dave/Generated/CAN_NODE/can_node.h ****  *     uint32_t status;
 625:../Dave/Generated/CAN_NODE/can_node.h ****  *
 626:../Dave/Generated/CAN_NODE/can_node.h ****  *     init_status = DAVE_Init();
 627:../Dave/Generated/CAN_NODE/can_node.h ****  *     if (init_status == DAVE_STATUS_SUCCESS)
 628:../Dave/Generated/CAN_NODE/can_node.h ****  *     {
 629:../Dave/Generated/CAN_NODE/can_node.h ****  *
 630:../Dave/Generated/CAN_NODE/can_node.h ****  *       //Transmit MO data
 631:../Dave/Generated/CAN_NODE/can_node.h ****  *       CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[0]);
 632:../Dave/Generated/CAN_NODE/can_node.h ****  *
 633:../Dave/Generated/CAN_NODE/can_node.h ****  *       status = CAN_NODE_GetStatus(HandlePtr1);
 634:../Dave/Generated/CAN_NODE/can_node.h ****  *       if (status & XMC_CAN_NODE_STATUS_TX_OK)
 635:../Dave/Generated/CAN_NODE/can_node.h ****  *       {
 636:../Dave/Generated/CAN_NODE/can_node.h ****  *         //Message transmitted successfully
 637:../Dave/Generated/CAN_NODE/can_node.h ****  *         CAN_NODE_ClearStatus(HandlePtr1,XMC_CAN_NODE_STATUS_TX_OK);
 638:../Dave/Generated/CAN_NODE/can_node.h ****  *         // Application code..
 639:../Dave/Generated/CAN_NODE/can_node.h ****  *       }
 640:../Dave/Generated/CAN_NODE/can_node.h ****  *       else if (status & XMC_CAN_NODE_STATUS_ALERT_WARNING)
 641:../Dave/Generated/CAN_NODE/can_node.h ****  *       {
 642:../Dave/Generated/CAN_NODE/can_node.h ****  *         // node alert warning event enabled
 643:../Dave/Generated/CAN_NODE/can_node.h ****  *         CAN_NODE_ClearStatus(HandlePtr1,XMC_CAN_NODE_STATUS_ALERT_WARNING);
 644:../Dave/Generated/CAN_NODE/can_node.h ****  *         // Application code..
 645:../Dave/Generated/CAN_NODE/can_node.h ****  *       }
 646:../Dave/Generated/CAN_NODE/can_node.h ****  *       else if (status & XMC_CAN_NODE_STATUS_BUS_OFF)
 647:../Dave/Generated/CAN_NODE/can_node.h ****  *       {
 648:../Dave/Generated/CAN_NODE/can_node.h ****  *         //Bus off error
 649:../Dave/Generated/CAN_NODE/can_node.h ****  *       }
 650:../Dave/Generated/CAN_NODE/can_node.h ****  *
 651:../Dave/Generated/CAN_NODE/can_node.h ****  *     }
 652:../Dave/Generated/CAN_NODE/can_node.h ****  *     // More code here
 653:../Dave/Generated/CAN_NODE/can_node.h ****  *     while(1)
 654:../Dave/Generated/CAN_NODE/can_node.h ****  *     {
 655:../Dave/Generated/CAN_NODE/can_node.h ****  *
 656:../Dave/Generated/CAN_NODE/can_node.h ****  *     }
 657:../Dave/Generated/CAN_NODE/can_node.h ****  *
 658:../Dave/Generated/CAN_NODE/can_node.h ****  *     return (1);
 659:../Dave/Generated/CAN_NODE/can_node.h ****  *  }
 660:../Dave/Generated/CAN_NODE/can_node.h ****  *  @endcode
 661:../Dave/Generated/CAN_NODE/can_node.h ****  */
 662:../Dave/Generated/CAN_NODE/can_node.h **** void CAN_NODE_ClearStatus(const CAN_NODE_t *handle, XMC_CAN_NODE_STATUS_t can_node_status);
 663:../Dave/Generated/CAN_NODE/can_node.h **** 
 664:../Dave/Generated/CAN_NODE/can_node.h **** /**
 665:../Dave/Generated/CAN_NODE/can_node.h ****  * @brief Function to enable CAN node for participation in CAN traffic.<br>
 666:../Dave/Generated/CAN_NODE/can_node.h ****  * @param handle is a pointer pointing to APP data structure.@ref CAN_NODE_t <br>
 667:../Dave/Generated/CAN_NODE/can_node.h ****  * @return none.<BR>
 668:../Dave/Generated/CAN_NODE/can_node.h ****  *
 669:../Dave/Generated/CAN_NODE/can_node.h ****  * \par<b>Description:</b><br>
 670:../Dave/Generated/CAN_NODE/can_node.h ****  * Enables the CAN node for participation in the CAN traffic by configuring NCR.INIT and NCR.CANDIS
 671:../Dave/Generated/CAN_NODE/can_node.h ****  * <BR>
 672:../Dave/Generated/CAN_NODE/can_node.h ****  *
 673:../Dave/Generated/CAN_NODE/can_node.h ****  * Example Usage:
 674:../Dave/Generated/CAN_NODE/can_node.h ****  * @code
 675:../Dave/Generated/CAN_NODE/can_node.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 676:../Dave/Generated/CAN_NODE/can_node.h ****  *
 677:../Dave/Generated/CAN_NODE/can_node.h ****  *   int main(void)
 678:../Dave/Generated/CAN_NODE/can_node.h ****  *   {
 679:../Dave/Generated/CAN_NODE/can_node.h ****  *     DAVE_STATUS_t init_status;
 680:../Dave/Generated/CAN_NODE/can_node.h ****  *     const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 681:../Dave/Generated/CAN_NODE/can_node.h ****  *
 682:../Dave/Generated/CAN_NODE/can_node.h ****  *     init_status = DAVE_Init();
 683:../Dave/Generated/CAN_NODE/can_node.h ****  *     if (init_status == DAVE_STATUS_SUCCESS)
 684:../Dave/Generated/CAN_NODE/can_node.h ****  *     {
 685:../Dave/Generated/CAN_NODE/can_node.h ****  *
 686:../Dave/Generated/CAN_NODE/can_node.h ****  *       // Application code..
 687:../Dave/Generated/CAN_NODE/can_node.h ****  *
 688:../Dave/Generated/CAN_NODE/can_node.h ****  *
 689:../Dave/Generated/CAN_NODE/can_node.h ****  *       // Disable CAN node from participating in CAN traffic.
 690:../Dave/Generated/CAN_NODE/can_node.h ****  *       CAN_NODE_Disable(HandlePtr1);
 691:../Dave/Generated/CAN_NODE/can_node.h ****  *
 692:../Dave/Generated/CAN_NODE/can_node.h ****  *       // Application code..
 693:../Dave/Generated/CAN_NODE/can_node.h ****  *
 694:../Dave/Generated/CAN_NODE/can_node.h ****  *
 695:../Dave/Generated/CAN_NODE/can_node.h ****  *       // Enable CAN node for participating in CAN traffic.
 696:../Dave/Generated/CAN_NODE/can_node.h ****  *       CAN_NODE_Enable(HandlePtr1);
 697:../Dave/Generated/CAN_NODE/can_node.h ****  *
 698:../Dave/Generated/CAN_NODE/can_node.h ****  *     }
 699:../Dave/Generated/CAN_NODE/can_node.h ****  *     // More code here
 700:../Dave/Generated/CAN_NODE/can_node.h ****  *     while(1)
 701:../Dave/Generated/CAN_NODE/can_node.h ****  *     {
 702:../Dave/Generated/CAN_NODE/can_node.h ****  *
 703:../Dave/Generated/CAN_NODE/can_node.h ****  *     }
 704:../Dave/Generated/CAN_NODE/can_node.h ****  *
 705:../Dave/Generated/CAN_NODE/can_node.h ****  *     return (1);
 706:../Dave/Generated/CAN_NODE/can_node.h ****  *  }
 707:../Dave/Generated/CAN_NODE/can_node.h ****  *  @endcode
 708:../Dave/Generated/CAN_NODE/can_node.h ****  */
 709:../Dave/Generated/CAN_NODE/can_node.h **** __STATIC_INLINE void CAN_NODE_Enable(const CAN_NODE_t *handle)
 710:../Dave/Generated/CAN_NODE/can_node.h **** {
 711:../Dave/Generated/CAN_NODE/can_node.h ****   XMC_ASSERT("CAN_NODE_Enable: null pointer", handle != NULL);
 712:../Dave/Generated/CAN_NODE/can_node.h ****   XMC_CAN_NODE_Enable(handle->node_ptr);
 713:../Dave/Generated/CAN_NODE/can_node.h **** }
 714:../Dave/Generated/CAN_NODE/can_node.h **** 
 715:../Dave/Generated/CAN_NODE/can_node.h **** /**
 716:../Dave/Generated/CAN_NODE/can_node.h ****  * @brief Function to disable CAN node from participating in CAN traffic.<br>
 717:../Dave/Generated/CAN_NODE/can_node.h ****  * @param handle is a pointer pointing to APP data structure.@ref CAN_NODE_t <br>
 718:../Dave/Generated/CAN_NODE/can_node.h ****  * @return none.<BR>
 719:../Dave/Generated/CAN_NODE/can_node.h ****  *
 720:../Dave/Generated/CAN_NODE/can_node.h ****  * \par<b>Description:</b><br>
 721:../Dave/Generated/CAN_NODE/can_node.h ****  * Disables the CAN node from participating in the CAN traffic by configuring NCR.CANDIS bit.
 722:../Dave/Generated/CAN_NODE/can_node.h ****  * <BR>
 723:../Dave/Generated/CAN_NODE/can_node.h ****  *
 724:../Dave/Generated/CAN_NODE/can_node.h ****  * Example Usage:
 725:../Dave/Generated/CAN_NODE/can_node.h ****  * @code
 726:../Dave/Generated/CAN_NODE/can_node.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 727:../Dave/Generated/CAN_NODE/can_node.h ****  *
 728:../Dave/Generated/CAN_NODE/can_node.h ****  *   int main(void)
 729:../Dave/Generated/CAN_NODE/can_node.h ****  *   {
 730:../Dave/Generated/CAN_NODE/can_node.h ****  *     DAVE_STATUS_t init_status;
 731:../Dave/Generated/CAN_NODE/can_node.h ****  *     const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 732:../Dave/Generated/CAN_NODE/can_node.h ****  *
 733:../Dave/Generated/CAN_NODE/can_node.h ****  *     init_status = DAVE_Init();
 734:../Dave/Generated/CAN_NODE/can_node.h ****  *     if (init_status == DAVE_STATUS_SUCCESS)
 735:../Dave/Generated/CAN_NODE/can_node.h ****  *     {
 736:../Dave/Generated/CAN_NODE/can_node.h ****  *
 737:../Dave/Generated/CAN_NODE/can_node.h ****  *       // Application code..
 738:../Dave/Generated/CAN_NODE/can_node.h ****  *
 739:../Dave/Generated/CAN_NODE/can_node.h ****  *
 740:../Dave/Generated/CAN_NODE/can_node.h ****  *       // Disable CAN node from participating in CAN traffic.
 741:../Dave/Generated/CAN_NODE/can_node.h ****  *       CAN_NODE_Disable(HandlePtr1);
 742:../Dave/Generated/CAN_NODE/can_node.h ****  *
 743:../Dave/Generated/CAN_NODE/can_node.h ****  *       // Application code..
 744:../Dave/Generated/CAN_NODE/can_node.h ****  *
 745:../Dave/Generated/CAN_NODE/can_node.h ****  *
 746:../Dave/Generated/CAN_NODE/can_node.h ****  *       // Enable CAN node for participating in CAN traffic.
 747:../Dave/Generated/CAN_NODE/can_node.h ****  *       CAN_NODE_Enable(HandlePtr1);
 748:../Dave/Generated/CAN_NODE/can_node.h ****  *
 749:../Dave/Generated/CAN_NODE/can_node.h ****  *     }
 750:../Dave/Generated/CAN_NODE/can_node.h ****  *     // More code here
 751:../Dave/Generated/CAN_NODE/can_node.h ****  *     while(1)
 752:../Dave/Generated/CAN_NODE/can_node.h ****  *     {
 753:../Dave/Generated/CAN_NODE/can_node.h ****  *
 754:../Dave/Generated/CAN_NODE/can_node.h ****  *     }
 755:../Dave/Generated/CAN_NODE/can_node.h ****  *
 756:../Dave/Generated/CAN_NODE/can_node.h ****  *     return (1);
 757:../Dave/Generated/CAN_NODE/can_node.h ****  *  }
 758:../Dave/Generated/CAN_NODE/can_node.h ****  *  @endcode
 759:../Dave/Generated/CAN_NODE/can_node.h ****  */
 760:../Dave/Generated/CAN_NODE/can_node.h **** __STATIC_INLINE void CAN_NODE_Disable(const CAN_NODE_t *handle)
 761:../Dave/Generated/CAN_NODE/can_node.h **** {
 762:../Dave/Generated/CAN_NODE/can_node.h ****   XMC_ASSERT("CAN_NODE_Disable: null pointer", handle != NULL);
 763:../Dave/Generated/CAN_NODE/can_node.h ****   XMC_CAN_NODE_Disable(handle->node_ptr);
 764:../Dave/Generated/CAN_NODE/can_node.h **** }
 765:../Dave/Generated/CAN_NODE/can_node.h **** 
 766:../Dave/Generated/CAN_NODE/can_node.h **** /**
 767:../Dave/Generated/CAN_NODE/can_node.h ****  * @brief Function to enable MO transmit event for the selected logical message object.
 768:../Dave/Generated/CAN_NODE/can_node.h ****  *         It sets the TXIE bit of the MOFCR register.
 769:../Dave/Generated/CAN_NODE/can_node.h ****  * @param can_lmo is a pointer to a logical message object structure.@ref CAN_NODE_LMO_t<br>
 770:../Dave/Generated/CAN_NODE/can_node.h ****  * @return None.<BR>
 771:../Dave/Generated/CAN_NODE/can_node.h ****  *
 772:../Dave/Generated/CAN_NODE/can_node.h ****  * \par<b>Description:</b><br>
 773:../Dave/Generated/CAN_NODE/can_node.h ****  *
 774:../Dave/Generated/CAN_NODE/can_node.h ****  * This function to enable the MO transmit event for the selected logical message object.
 775:../Dave/Generated/CAN_NODE/can_node.h ****  * It configures MOFCR register. To achieve this functionality API calls XMC_CAN_MO_EnableEvent().
 776:../Dave/Generated/CAN_NODE/can_node.h ****  * <BR>
 777:../Dave/Generated/CAN_NODE/can_node.h ****  *
 778:../Dave/Generated/CAN_NODE/can_node.h ****  * Example Usage:
 779:../Dave/Generated/CAN_NODE/can_node.h ****  * @code
 780:../Dave/Generated/CAN_NODE/can_node.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 781:../Dave/Generated/CAN_NODE/can_node.h ****  *
 782:../Dave/Generated/CAN_NODE/can_node.h ****  *   int main(void)
 783:../Dave/Generated/CAN_NODE/can_node.h ****  *   {
 784:../Dave/Generated/CAN_NODE/can_node.h ****  *     DAVE_STATUS_t init_status;
 785:../Dave/Generated/CAN_NODE/can_node.h ****  *     const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 786:../Dave/Generated/CAN_NODE/can_node.h ****  *
 787:../Dave/Generated/CAN_NODE/can_node.h ****  *     init_status = DAVE_Init();
 788:../Dave/Generated/CAN_NODE/can_node.h ****  *     if (init_status == DAVE_STATUS_SUCCESS)
 789:../Dave/Generated/CAN_NODE/can_node.h ****  *     {
 790:../Dave/Generated/CAN_NODE/can_node.h ****  *
 791:../Dave/Generated/CAN_NODE/can_node.h ****  *       // Enable the transmit event for the selected message object.
 792:../Dave/Generated/CAN_NODE/can_node.h ****  *       CAN_NODE_MO_EnableTxEvent(HandlePtr1->lmobj_ptr[0]);
 793:../Dave/Generated/CAN_NODE/can_node.h ****  *
 794:../Dave/Generated/CAN_NODE/can_node.h ****  *       //transmit data from the message object.
 795:../Dave/Generated/CAN_NODE/can_node.h ****  *       CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[0]);
 796:../Dave/Generated/CAN_NODE/can_node.h ****  *
 797:../Dave/Generated/CAN_NODE/can_node.h ****  *       // Configure the interrupt APP and connect the transmit signal of the message object to NV
 798:../Dave/Generated/CAN_NODE/can_node.h ****  *       //After the successful transmission of message object, transmit event will be generated.
 799:../Dave/Generated/CAN_NODE/can_node.h ****  *       // Application code
 800:../Dave/Generated/CAN_NODE/can_node.h ****  *
 801:../Dave/Generated/CAN_NODE/can_node.h ****  *
 802:../Dave/Generated/CAN_NODE/can_node.h ****  *     }
 803:../Dave/Generated/CAN_NODE/can_node.h ****  *     // More code here
 804:../Dave/Generated/CAN_NODE/can_node.h ****  *     while(1)
 805:../Dave/Generated/CAN_NODE/can_node.h ****  *     {
 806:../Dave/Generated/CAN_NODE/can_node.h ****  *
 807:../Dave/Generated/CAN_NODE/can_node.h ****  *     }
 808:../Dave/Generated/CAN_NODE/can_node.h ****  *
 809:../Dave/Generated/CAN_NODE/can_node.h ****  *     return (1);
 810:../Dave/Generated/CAN_NODE/can_node.h ****  *  }
 811:../Dave/Generated/CAN_NODE/can_node.h ****  *  @endcode
 812:../Dave/Generated/CAN_NODE/can_node.h ****  */
 813:../Dave/Generated/CAN_NODE/can_node.h **** __STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
 814:../Dave/Generated/CAN_NODE/can_node.h **** {
 651              	 .loc 2 814 0
 652              	 .cfi_startproc
 653              	 
 654              	 
 655 0000 80B5     	 push {r7,lr}
 656              	.LCFI78:
 657              	 .cfi_def_cfa_offset 8
 658              	 .cfi_offset 7,-8
 659              	 .cfi_offset 14,-4
 660 0002 82B0     	 sub sp,sp,#8
 661              	.LCFI79:
 662              	 .cfi_def_cfa_offset 16
 663 0004 00AF     	 add r7,sp,#0
 664              	.LCFI80:
 665              	 .cfi_def_cfa_register 7
 666 0006 7860     	 str r0,[r7,#4]
 815:../Dave/Generated/CAN_NODE/can_node.h ****   XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
 816:../Dave/Generated/CAN_NODE/can_node.h ****   XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
 667              	 .loc 2 816 0
 668 0008 7B68     	 ldr r3,[r7,#4]
 669 000a 1B68     	 ldr r3,[r3]
 670 000c 1846     	 mov r0,r3
 671 000e 4FF40031 	 mov r1,#131072
 672 0012 FFF7FEFF 	 bl XMC_CAN_MO_EnableEvent
 817:../Dave/Generated/CAN_NODE/can_node.h **** }
 673              	 .loc 2 817 0
 674 0016 0837     	 adds r7,r7,#8
 675              	.LCFI81:
 676              	 .cfi_def_cfa_offset 8
 677 0018 BD46     	 mov sp,r7
 678              	.LCFI82:
 679              	 .cfi_def_cfa_register 13
 680              	 
 681 001a 80BD     	 pop {r7,pc}
 682              	 .cfi_endproc
 683              	.LFE217:
 685              	 .section .text.CAN_NODE_MO_EnableRxEvent,"ax",%progbits
 686              	 .align 2
 687              	 .thumb
 688              	 .thumb_func
 690              	CAN_NODE_MO_EnableRxEvent:
 691              	.LFB218:
 818:../Dave/Generated/CAN_NODE/can_node.h **** 
 819:../Dave/Generated/CAN_NODE/can_node.h **** /**
 820:../Dave/Generated/CAN_NODE/can_node.h ****  * @brief Function to enable MO receive event for the selected logical message object.
 821:../Dave/Generated/CAN_NODE/can_node.h ****  *        It sets the RXIE bit of the MOFCR register. The event will be generated after
 822:../Dave/Generated/CAN_NODE/can_node.h ****                reception of a CAN message.<br>
 823:../Dave/Generated/CAN_NODE/can_node.h ****  * @param can_lmo is a pointer to a logical message object structure @ref CAN_NODE_LMO_t.
 824:../Dave/Generated/CAN_NODE/can_node.h ****  * @return None.<BR>
 825:../Dave/Generated/CAN_NODE/can_node.h ****  *
 826:../Dave/Generated/CAN_NODE/can_node.h ****  * \par<b>Description:</b><br>
 827:../Dave/Generated/CAN_NODE/can_node.h ****  *
 828:../Dave/Generated/CAN_NODE/can_node.h ****  * This function to enable the MO receive event for the selected logical message object.
 829:../Dave/Generated/CAN_NODE/can_node.h ****  * The event is generated after reception of a CAN message.
 830:../Dave/Generated/CAN_NODE/can_node.h ****  * To achieve this functionality API calls XMC_CAN_MO_EnableEvent().
 831:../Dave/Generated/CAN_NODE/can_node.h ****  * <BR>
 832:../Dave/Generated/CAN_NODE/can_node.h ****  *
 833:../Dave/Generated/CAN_NODE/can_node.h ****  * Example Usage:
 834:../Dave/Generated/CAN_NODE/can_node.h ****  * @code
 835:../Dave/Generated/CAN_NODE/can_node.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 836:../Dave/Generated/CAN_NODE/can_node.h ****  *
 837:../Dave/Generated/CAN_NODE/can_node.h ****  *   int main(void)
 838:../Dave/Generated/CAN_NODE/can_node.h ****  *   {
 839:../Dave/Generated/CAN_NODE/can_node.h ****  *     DAVE_STATUS_t init_status;
 840:../Dave/Generated/CAN_NODE/can_node.h ****  *     const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 841:../Dave/Generated/CAN_NODE/can_node.h ****  *
 842:../Dave/Generated/CAN_NODE/can_node.h ****  *     init_status = DAVE_Init();
 843:../Dave/Generated/CAN_NODE/can_node.h ****  *     if (init_status == DAVE_STATUS_SUCCESS)
 844:../Dave/Generated/CAN_NODE/can_node.h ****  *     {
 845:../Dave/Generated/CAN_NODE/can_node.h ****  *
 846:../Dave/Generated/CAN_NODE/can_node.h ****  *
 847:../Dave/Generated/CAN_NODE/can_node.h ****  *       CAN_NODE_MO_EnableRxEvent(HandlePtr1->lmobj_ptr[0]);
 848:../Dave/Generated/CAN_NODE/can_node.h ****  *
 849:../Dave/Generated/CAN_NODE/can_node.h ****  *        // Application code
 850:../Dave/Generated/CAN_NODE/can_node.h ****  *
 851:../Dave/Generated/CAN_NODE/can_node.h ****  *
 852:../Dave/Generated/CAN_NODE/can_node.h ****  *       // Configure the interrupt APP and connect the receive signal of the message object to NVI
 853:../Dave/Generated/CAN_NODE/can_node.h ****  *       //After the successful reception of message object, receive event will be generated.
 854:../Dave/Generated/CAN_NODE/can_node.h ****  *
 855:../Dave/Generated/CAN_NODE/can_node.h ****  *
 856:../Dave/Generated/CAN_NODE/can_node.h ****  *     }
 857:../Dave/Generated/CAN_NODE/can_node.h ****  *     // More code here
 858:../Dave/Generated/CAN_NODE/can_node.h ****  *     while(1)
 859:../Dave/Generated/CAN_NODE/can_node.h ****  *     {
 860:../Dave/Generated/CAN_NODE/can_node.h ****  *
 861:../Dave/Generated/CAN_NODE/can_node.h ****  *     }
 862:../Dave/Generated/CAN_NODE/can_node.h ****  *
 863:../Dave/Generated/CAN_NODE/can_node.h ****  *     return (1);
 864:../Dave/Generated/CAN_NODE/can_node.h ****  *  }
 865:../Dave/Generated/CAN_NODE/can_node.h ****  *  @endcode
 866:../Dave/Generated/CAN_NODE/can_node.h ****  */
 867:../Dave/Generated/CAN_NODE/can_node.h **** 
 868:../Dave/Generated/CAN_NODE/can_node.h **** __STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
 869:../Dave/Generated/CAN_NODE/can_node.h **** {
 692              	 .loc 2 869 0
 693              	 .cfi_startproc
 694              	 
 695              	 
 696 0000 80B5     	 push {r7,lr}
 697              	.LCFI83:
 698              	 .cfi_def_cfa_offset 8
 699              	 .cfi_offset 7,-8
 700              	 .cfi_offset 14,-4
 701 0002 82B0     	 sub sp,sp,#8
 702              	.LCFI84:
 703              	 .cfi_def_cfa_offset 16
 704 0004 00AF     	 add r7,sp,#0
 705              	.LCFI85:
 706              	 .cfi_def_cfa_register 7
 707 0006 7860     	 str r0,[r7,#4]
 870:../Dave/Generated/CAN_NODE/can_node.h ****   XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
 871:../Dave/Generated/CAN_NODE/can_node.h ****   XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
 708              	 .loc 2 871 0
 709 0008 7B68     	 ldr r3,[r7,#4]
 710 000a 1B68     	 ldr r3,[r3]
 711 000c 1846     	 mov r0,r3
 712 000e 4FF48031 	 mov r1,#65536
 713 0012 FFF7FEFF 	 bl XMC_CAN_MO_EnableEvent
 872:../Dave/Generated/CAN_NODE/can_node.h **** }
 714              	 .loc 2 872 0
 715 0016 0837     	 adds r7,r7,#8
 716              	.LCFI86:
 717              	 .cfi_def_cfa_offset 8
 718 0018 BD46     	 mov sp,r7
 719              	.LCFI87:
 720              	 .cfi_def_cfa_register 13
 721              	 
 722 001a 80BD     	 pop {r7,pc}
 723              	 .cfi_endproc
 724              	.LFE218:
 726              	 .section .text.CAN_NODE_SetNodeEvents,"ax",%progbits
 727              	 .align 2
 728              	 .thumb
 729              	 .thumb_func
 731              	CAN_NODE_SetNodeEvents:
 732              	.LFB221:
 733              	 .file 3 "../Dave/Generated/CAN_NODE/can_node.c"
   1:../Dave/Generated/CAN_NODE/can_node.c **** /**
   2:../Dave/Generated/CAN_NODE/can_node.c ****  * @file can_node.c
   3:../Dave/Generated/CAN_NODE/can_node.c ****  * @date 2015-06-30
   4:../Dave/Generated/CAN_NODE/can_node.c ****  *
   5:../Dave/Generated/CAN_NODE/can_node.c ****  * NOTE:
   6:../Dave/Generated/CAN_NODE/can_node.c ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/CAN_NODE/can_node.c ****  *
   8:../Dave/Generated/CAN_NODE/can_node.c ****  * @cond
   9:../Dave/Generated/CAN_NODE/can_node.c ****  **************************************************************************************************
  10:../Dave/Generated/CAN_NODE/can_node.c ****  * CAN_NODE v4.1.6 - Configures a Node and MO registers of MultiCAN module. It provides a run-time 
  11:../Dave/Generated/CAN_NODE/can_node.c ****  *                   node baud rate and to enable/disable Node and MO events.
  12:../Dave/Generated/CAN_NODE/can_node.c ****  *
  13:../Dave/Generated/CAN_NODE/can_node.c ****  * Copyright (c) 2015, Infineon Technologies AG
  14:../Dave/Generated/CAN_NODE/can_node.c ****  * All rights reserved.
  15:../Dave/Generated/CAN_NODE/can_node.c ****  *
  16:../Dave/Generated/CAN_NODE/can_node.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:../Dave/Generated/CAN_NODE/can_node.c ****  * following conditions are met:
  18:../Dave/Generated/CAN_NODE/can_node.c ****  *
  19:../Dave/Generated/CAN_NODE/can_node.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:../Dave/Generated/CAN_NODE/can_node.c ****  *   disclaimer.
  21:../Dave/Generated/CAN_NODE/can_node.c ****  *
  22:../Dave/Generated/CAN_NODE/can_node.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:../Dave/Generated/CAN_NODE/can_node.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:../Dave/Generated/CAN_NODE/can_node.c ****  *
  25:../Dave/Generated/CAN_NODE/can_node.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:../Dave/Generated/CAN_NODE/can_node.c ****  *   products derived from this software without specific prior written permission.
  27:../Dave/Generated/CAN_NODE/can_node.c ****  *
  28:../Dave/Generated/CAN_NODE/can_node.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:../Dave/Generated/CAN_NODE/can_node.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:../Dave/Generated/CAN_NODE/can_node.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:../Dave/Generated/CAN_NODE/can_node.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:../Dave/Generated/CAN_NODE/can_node.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:../Dave/Generated/CAN_NODE/can_node.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:../Dave/Generated/CAN_NODE/can_node.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:../Dave/Generated/CAN_NODE/can_node.c ****  *
  36:../Dave/Generated/CAN_NODE/can_node.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:../Dave/Generated/CAN_NODE/can_node.c ****  * with Infineon Technologies AG (dave@infineon.com).
  38:../Dave/Generated/CAN_NODE/can_node.c ****  **************************************************************************************************
  39:../Dave/Generated/CAN_NODE/can_node.c ****  *
  40:../Dave/Generated/CAN_NODE/can_node.c ****  * Change History
  41:../Dave/Generated/CAN_NODE/can_node.c ****  * --------------
  42:../Dave/Generated/CAN_NODE/can_node.c ****  *
  43:../Dave/Generated/CAN_NODE/can_node.c ****  * 2015-02-16:
  44:../Dave/Generated/CAN_NODE/can_node.c ****  *     - Initial version<br>
  45:../Dave/Generated/CAN_NODE/can_node.c ****  *
  46:../Dave/Generated/CAN_NODE/can_node.c ****  * 2015-05-12:
  47:../Dave/Generated/CAN_NODE/can_node.c ****  *     - CAN_NODE_EnableEvent() and CAN_NODE_ConfigBaudrate() APIs are included with additional arg
  48:../Dave/Generated/CAN_NODE/can_node.c ****  *     - New APIs are added: CAN_NODE_MO_ReceiveData(), CAN_NODE_MO_ClearStatus(), CAN_NODE_ClearSt
  49:../Dave/Generated/CAN_NODE/can_node.c ****  *
  50:../Dave/Generated/CAN_NODE/can_node.c ****  * @endcond
  51:../Dave/Generated/CAN_NODE/can_node.c ****  *
  52:../Dave/Generated/CAN_NODE/can_node.c ****  */
  53:../Dave/Generated/CAN_NODE/can_node.c **** 
  54:../Dave/Generated/CAN_NODE/can_node.c **** /**************************************************************************************************
  55:../Dave/Generated/CAN_NODE/can_node.c ****  * HEADER FILES
  56:../Dave/Generated/CAN_NODE/can_node.c ****  **************************************************************************************************
  57:../Dave/Generated/CAN_NODE/can_node.c **** #include "can_node.h"
  58:../Dave/Generated/CAN_NODE/can_node.c **** 
  59:../Dave/Generated/CAN_NODE/can_node.c **** /**************************************************************************************************
  60:../Dave/Generated/CAN_NODE/can_node.c ****  * MACROS
  61:../Dave/Generated/CAN_NODE/can_node.c ****  **************************************************************************************************
  62:../Dave/Generated/CAN_NODE/can_node.c **** #define CAN_NODE_MIN_BAUDRATE (100000U)
  63:../Dave/Generated/CAN_NODE/can_node.c **** #define CAN_NODE_MAX_BAUDRATE (1000000U)
  64:../Dave/Generated/CAN_NODE/can_node.c **** #define CAN_NODE_MAX_SAMPLE_POINT (100U)
  65:../Dave/Generated/CAN_NODE/can_node.c **** #define CAN_NODE_MAX_SJW    (3U)
  66:../Dave/Generated/CAN_NODE/can_node.c **** #define CAN_NODE_MO_CLEAR_MASK (0x0fffU)
  67:../Dave/Generated/CAN_NODE/can_node.c **** 
  68:../Dave/Generated/CAN_NODE/can_node.c **** /**************************************************************************************************
  69:../Dave/Generated/CAN_NODE/can_node.c ****  * LOCAL DATA
  70:../Dave/Generated/CAN_NODE/can_node.c ****  **************************************************************************************************
  71:../Dave/Generated/CAN_NODE/can_node.c **** 
  72:../Dave/Generated/CAN_NODE/can_node.c **** /**************************************************************************************************
  73:../Dave/Generated/CAN_NODE/can_node.c ****  * LOCAL ROUTINES
  74:../Dave/Generated/CAN_NODE/can_node.c ****  **************************************************************************************************
  75:../Dave/Generated/CAN_NODE/can_node.c **** static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle);
  76:../Dave/Generated/CAN_NODE/can_node.c **** static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle);
  77:../Dave/Generated/CAN_NODE/can_node.c **** 
  78:../Dave/Generated/CAN_NODE/can_node.c **** /**
  79:../Dave/Generated/CAN_NODE/can_node.c ****   * @brief  Function to enable the can node events like node alert,LEC,
  80:../Dave/Generated/CAN_NODE/can_node.c ****   *         Transfer OK and Frame counter overflow based on GUI configuration.
  81:../Dave/Generated/CAN_NODE/can_node.c ****   * @param  handle is a pointer pointing to APP data structure.
  82:../Dave/Generated/CAN_NODE/can_node.c ****   * @return None
  83:../Dave/Generated/CAN_NODE/can_node.c ****   */
  84:../Dave/Generated/CAN_NODE/can_node.c **** 
  85:../Dave/Generated/CAN_NODE/can_node.c **** static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
  86:../Dave/Generated/CAN_NODE/can_node.c **** {
 734              	 .loc 3 86 0
 735              	 .cfi_startproc
 736              	 
 737              	 
 738 0000 80B5     	 push {r7,lr}
 739              	.LCFI88:
 740              	 .cfi_def_cfa_offset 8
 741              	 .cfi_offset 7,-8
 742              	 .cfi_offset 14,-4
 743 0002 84B0     	 sub sp,sp,#16
 744              	.LCFI89:
 745              	 .cfi_def_cfa_offset 24
 746 0004 00AF     	 add r7,sp,#0
 747              	.LCFI90:
 748              	 .cfi_def_cfa_register 7
 749 0006 7860     	 str r0,[r7,#4]
  87:../Dave/Generated/CAN_NODE/can_node.c ****   uint32_t lnode_event = 0U;
 750              	 .loc 3 87 0
 751 0008 0023     	 movs r3,#0
 752 000a FB60     	 str r3,[r7,#12]
  88:../Dave/Generated/CAN_NODE/can_node.c **** 
  89:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);
  90:../Dave/Generated/CAN_NODE/can_node.c **** 
  91:../Dave/Generated/CAN_NODE/can_node.c ****   CAN_NODE_SetNodePointer(handle); /* set node service pointer */
 753              	 .loc 3 91 0
 754 000c 7868     	 ldr r0,[r7,#4]
 755 000e FFF7FEFF 	 bl CAN_NODE_SetNodePointer
  92:../Dave/Generated/CAN_NODE/can_node.c **** 
  93:../Dave/Generated/CAN_NODE/can_node.c ****   if (handle->txok_event_enable == true)
 756              	 .loc 3 93 0
 757 0012 7B68     	 ldr r3,[r7,#4]
 758 0014 93F8A430 	 ldrb r3,[r3,#164]
 759 0018 002B     	 cmp r3,#0
 760 001a 03D0     	 beq .L19
  94:../Dave/Generated/CAN_NODE/can_node.c ****   {
  95:../Dave/Generated/CAN_NODE/can_node.c ****     lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
 761              	 .loc 3 95 0
 762 001c FB68     	 ldr r3,[r7,#12]
 763 001e 43F00203 	 orr r3,r3,#2
 764 0022 FB60     	 str r3,[r7,#12]
 765              	.L19:
  96:../Dave/Generated/CAN_NODE/can_node.c ****   }
  97:../Dave/Generated/CAN_NODE/can_node.c ****   if (handle->lec_event_enable == true)
 766              	 .loc 3 97 0
 767 0024 7B68     	 ldr r3,[r7,#4]
 768 0026 93F8A330 	 ldrb r3,[r3,#163]
 769 002a 002B     	 cmp r3,#0
 770 002c 03D0     	 beq .L20
  98:../Dave/Generated/CAN_NODE/can_node.c ****   {
  99:../Dave/Generated/CAN_NODE/can_node.c ****     lnode_event |= XMC_CAN_NODE_EVENT_LEC;
 771              	 .loc 3 99 0
 772 002e FB68     	 ldr r3,[r7,#12]
 773 0030 43F00403 	 orr r3,r3,#4
 774 0034 FB60     	 str r3,[r7,#12]
 775              	.L20:
 100:../Dave/Generated/CAN_NODE/can_node.c ****   }
 101:../Dave/Generated/CAN_NODE/can_node.c ****   if (handle->alert_event_enable == true)
 776              	 .loc 3 101 0
 777 0036 7B68     	 ldr r3,[r7,#4]
 778 0038 93F8A530 	 ldrb r3,[r3,#165]
 779 003c 002B     	 cmp r3,#0
 780 003e 03D0     	 beq .L21
 102:../Dave/Generated/CAN_NODE/can_node.c ****   {
 103:../Dave/Generated/CAN_NODE/can_node.c ****     lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
 781              	 .loc 3 103 0
 782 0040 FB68     	 ldr r3,[r7,#12]
 783 0042 43F00803 	 orr r3,r3,#8
 784 0046 FB60     	 str r3,[r7,#12]
 785              	.L21:
 104:../Dave/Generated/CAN_NODE/can_node.c ****   }
 105:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
 786              	 .loc 3 105 0
 787 0048 7B68     	 ldr r3,[r7,#4]
 788 004a 5B68     	 ldr r3,[r3,#4]
 789 004c 1846     	 mov r0,r3
 790 004e F968     	 ldr r1,[r7,#12]
 791 0050 FFF7FEFF 	 bl XMC_CAN_NODE_EnableEvent
 106:../Dave/Generated/CAN_NODE/can_node.c **** 
 107:../Dave/Generated/CAN_NODE/can_node.c ****   if (handle->framecount_event_enable == true)
 792              	 .loc 3 107 0
 793 0054 7B68     	 ldr r3,[r7,#4]
 794 0056 93F8A630 	 ldrb r3,[r3,#166]
 795 005a 002B     	 cmp r3,#0
 796 005c 06D0     	 beq .L18
 108:../Dave/Generated/CAN_NODE/can_node.c ****   {
 109:../Dave/Generated/CAN_NODE/can_node.c ****     XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
 797              	 .loc 3 109 0
 798 005e 7B68     	 ldr r3,[r7,#4]
 799 0060 5B68     	 ldr r3,[r3,#4]
 800 0062 1846     	 mov r0,r3
 801 0064 4FF48001 	 mov r1,#4194304
 802 0068 FFF7FEFF 	 bl XMC_CAN_NODE_EnableEvent
 803              	.L18:
 110:../Dave/Generated/CAN_NODE/can_node.c ****   }
 111:../Dave/Generated/CAN_NODE/can_node.c **** 
 112:../Dave/Generated/CAN_NODE/can_node.c **** }
 804              	 .loc 3 112 0
 805 006c 1037     	 adds r7,r7,#16
 806              	.LCFI91:
 807              	 .cfi_def_cfa_offset 8
 808 006e BD46     	 mov sp,r7
 809              	.LCFI92:
 810              	 .cfi_def_cfa_register 13
 811              	 
 812 0070 80BD     	 pop {r7,pc}
 813              	 .cfi_endproc
 814              	.LFE221:
 816 0072 00BF     	 .section .text.CAN_NODE_SetNodePointer,"ax",%progbits
 817              	 .align 2
 818              	 .thumb
 819              	 .thumb_func
 821              	CAN_NODE_SetNodePointer:
 822              	.LFB222:
 113:../Dave/Generated/CAN_NODE/can_node.c **** 
 114:../Dave/Generated/CAN_NODE/can_node.c **** /**
 115:../Dave/Generated/CAN_NODE/can_node.c ****   * @brief  Function to set the Node event pointer
 116:../Dave/Generated/CAN_NODE/can_node.c ****   *
 117:../Dave/Generated/CAN_NODE/can_node.c ****   */
 118:../Dave/Generated/CAN_NODE/can_node.c **** 
 119:../Dave/Generated/CAN_NODE/can_node.c **** static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
 120:../Dave/Generated/CAN_NODE/can_node.c **** {
 823              	 .loc 3 120 0
 824              	 .cfi_startproc
 825              	 
 826              	 
 827 0000 80B5     	 push {r7,lr}
 828              	.LCFI93:
 829              	 .cfi_def_cfa_offset 8
 830              	 .cfi_offset 7,-8
 831              	 .cfi_offset 14,-4
 832 0002 82B0     	 sub sp,sp,#8
 833              	.LCFI94:
 834              	 .cfi_def_cfa_offset 16
 835 0004 00AF     	 add r7,sp,#0
 836              	.LCFI95:
 837              	 .cfi_def_cfa_register 7
 838 0006 7860     	 str r0,[r7,#4]
 121:../Dave/Generated/CAN_NODE/can_node.c **** 
 122:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);
 123:../Dave/Generated/CAN_NODE/can_node.c **** 
 124:../Dave/Generated/CAN_NODE/can_node.c ****   /* Configured the node event pointer for the alert event with the service request number */
 125:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 839              	 .loc 3 125 0
 840 0008 7B68     	 ldr r3,[r7,#4]
 841 000a 5A68     	 ldr r2,[r3,#4]
 126:../Dave/Generated/CAN_NODE/can_node.c ****                                                         handle->node_sr_ptr->alert_event_sr);
 842              	 .loc 3 126 0
 843 000c 7B68     	 ldr r3,[r7,#4]
 844 000e D3F88C30 	 ldr r3,[r3,#140]
 845 0012 1B78     	 ldrb r3,[r3]
 125:../Dave/Generated/CAN_NODE/can_node.c ****                                                         handle->node_sr_ptr->alert_event_sr);
 846              	 .loc 3 125 0
 847 0014 1046     	 mov r0,r2
 848 0016 0021     	 movs r1,#0
 849 0018 1A46     	 mov r2,r3
 850 001a FFF7FEFF 	 bl XMC_CAN_NODE_SetEventNodePointer
 127:../Dave/Generated/CAN_NODE/can_node.c ****   /* Configured the node event pointer for the LEC event with the service request number */
 128:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 851              	 .loc 3 128 0
 852 001e 7B68     	 ldr r3,[r7,#4]
 853 0020 5A68     	 ldr r2,[r3,#4]
 129:../Dave/Generated/CAN_NODE/can_node.c ****                                                          handle->node_sr_ptr->lec_event_sr);
 854              	 .loc 3 129 0
 855 0022 7B68     	 ldr r3,[r7,#4]
 856 0024 D3F88C30 	 ldr r3,[r3,#140]
 857 0028 5B78     	 ldrb r3,[r3,#1]
 128:../Dave/Generated/CAN_NODE/can_node.c ****                                                          handle->node_sr_ptr->lec_event_sr);
 858              	 .loc 3 128 0
 859 002a 1046     	 mov r0,r2
 860 002c 0421     	 movs r1,#4
 861 002e 1A46     	 mov r2,r3
 862 0030 FFF7FEFF 	 bl XMC_CAN_NODE_SetEventNodePointer
 130:../Dave/Generated/CAN_NODE/can_node.c ****   /* Configured the node event pointer for the TXOK event with the service request number */
 131:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 863              	 .loc 3 131 0
 864 0034 7B68     	 ldr r3,[r7,#4]
 865 0036 5A68     	 ldr r2,[r3,#4]
 132:../Dave/Generated/CAN_NODE/can_node.c ****                                                                handle->node_sr_ptr->txok_event_sr);
 866              	 .loc 3 132 0
 867 0038 7B68     	 ldr r3,[r7,#4]
 868 003a D3F88C30 	 ldr r3,[r3,#140]
 869 003e 9B78     	 ldrb r3,[r3,#2]
 131:../Dave/Generated/CAN_NODE/can_node.c ****                                                                handle->node_sr_ptr->txok_event_sr);
 870              	 .loc 3 131 0
 871 0040 1046     	 mov r0,r2
 872 0042 0821     	 movs r1,#8
 873 0044 1A46     	 mov r2,r3
 874 0046 FFF7FEFF 	 bl XMC_CAN_NODE_SetEventNodePointer
 133:../Dave/Generated/CAN_NODE/can_node.c ****   /* Configured the node event pointer for the Frame counter event with the service request number 
 134:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 875              	 .loc 3 134 0
 876 004a 7B68     	 ldr r3,[r7,#4]
 877 004c 5A68     	 ldr r2,[r3,#4]
 135:../Dave/Generated/CAN_NODE/can_node.c ****                                                              handle->node_sr_ptr->framecount_event_
 878              	 .loc 3 135 0
 879 004e 7B68     	 ldr r3,[r7,#4]
 880 0050 D3F88C30 	 ldr r3,[r3,#140]
 881 0054 DB78     	 ldrb r3,[r3,#3]
 134:../Dave/Generated/CAN_NODE/can_node.c ****                                                              handle->node_sr_ptr->framecount_event_
 882              	 .loc 3 134 0
 883 0056 1046     	 mov r0,r2
 884 0058 0C21     	 movs r1,#12
 885 005a 1A46     	 mov r2,r3
 886 005c FFF7FEFF 	 bl XMC_CAN_NODE_SetEventNodePointer
 136:../Dave/Generated/CAN_NODE/can_node.c **** 
 137:../Dave/Generated/CAN_NODE/can_node.c **** }
 887              	 .loc 3 137 0
 888 0060 0837     	 adds r7,r7,#8
 889              	.LCFI96:
 890              	 .cfi_def_cfa_offset 8
 891 0062 BD46     	 mov sp,r7
 892              	.LCFI97:
 893              	 .cfi_def_cfa_register 13
 894              	 
 895 0064 80BD     	 pop {r7,pc}
 896              	 .cfi_endproc
 897              	.LFE222:
 899 0066 00BF     	 .section .text.CAN_NODE_GetAppVersion,"ax",%progbits
 900              	 .align 2
 901              	 .global CAN_NODE_GetAppVersion
 902              	 .thumb
 903              	 .thumb_func
 905              	CAN_NODE_GetAppVersion:
 906              	.LFB223:
 138:../Dave/Generated/CAN_NODE/can_node.c **** 
 139:../Dave/Generated/CAN_NODE/can_node.c **** /**************************************************************************************************
 140:../Dave/Generated/CAN_NODE/can_node.c ****  * API IMPLEMENTATION
 141:../Dave/Generated/CAN_NODE/can_node.c ****  **************************************************************************************************
 142:../Dave/Generated/CAN_NODE/can_node.c **** 
 143:../Dave/Generated/CAN_NODE/can_node.c **** /*  API to retrieve the version of the CAN_NODE APP */
 144:../Dave/Generated/CAN_NODE/can_node.c **** DAVE_APP_VERSION_t CAN_NODE_GetAppVersion()
 145:../Dave/Generated/CAN_NODE/can_node.c **** {
 907              	 .loc 3 145 0
 908              	 .cfi_startproc
 909              	 
 910              	 
 911              	 
 912 0000 80B4     	 push {r7}
 913              	.LCFI98:
 914              	 .cfi_def_cfa_offset 4
 915              	 .cfi_offset 7,-4
 916 0002 83B0     	 sub sp,sp,#12
 917              	.LCFI99:
 918              	 .cfi_def_cfa_offset 16
 919 0004 00AF     	 add r7,sp,#0
 920              	.LCFI100:
 921              	 .cfi_def_cfa_register 7
 146:../Dave/Generated/CAN_NODE/can_node.c ****   DAVE_APP_VERSION_t version;
 147:../Dave/Generated/CAN_NODE/can_node.c **** 
 148:../Dave/Generated/CAN_NODE/can_node.c ****   version.major = (uint8_t)CAN_NODE_MAJOR_VERSION;
 922              	 .loc 3 148 0
 923 0006 0423     	 movs r3,#4
 924 0008 3B70     	 strb r3,[r7]
 149:../Dave/Generated/CAN_NODE/can_node.c ****   version.minor = (uint8_t)CAN_NODE_MINOR_VERSION;
 925              	 .loc 3 149 0
 926 000a 0123     	 movs r3,#1
 927 000c 7B70     	 strb r3,[r7,#1]
 150:../Dave/Generated/CAN_NODE/can_node.c ****   version.patch = (uint8_t)CAN_NODE_PATCH_VERSION;
 928              	 .loc 3 150 0
 929 000e 0A23     	 movs r3,#10
 930 0010 BB70     	 strb r3,[r7,#2]
 151:../Dave/Generated/CAN_NODE/can_node.c **** 
 152:../Dave/Generated/CAN_NODE/can_node.c ****   return (version);
 931              	 .loc 3 152 0
 932 0012 3B1D     	 adds r3,r7,#4
 933 0014 3A46     	 mov r2,r7
 934 0016 1268     	 ldr r2,[r2]
 935 0018 1146     	 mov r1,r2
 936 001a 1980     	 strh r1,[r3]
 937 001c 0233     	 adds r3,r3,#2
 938 001e 120C     	 lsrs r2,r2,#16
 939 0020 1A70     	 strb r2,[r3]
 940 0022 0023     	 movs r3,#0
 941 0024 3A79     	 ldrb r2,[r7,#4]
 942 0026 62F30703 	 bfi r3,r2,#0,#8
 943 002a 7A79     	 ldrb r2,[r7,#5]
 944 002c 62F30F23 	 bfi r3,r2,#8,#8
 945 0030 BA79     	 ldrb r2,[r7,#6]
 946 0032 62F31743 	 bfi r3,r2,#16,#8
 153:../Dave/Generated/CAN_NODE/can_node.c **** }
 947              	 .loc 3 153 0
 948 0036 1846     	 mov r0,r3
 949 0038 0C37     	 adds r7,r7,#12
 950              	.LCFI101:
 951              	 .cfi_def_cfa_offset 4
 952 003a BD46     	 mov sp,r7
 953              	.LCFI102:
 954              	 .cfi_def_cfa_register 13
 955              	 
 956 003c 5DF8047B 	 ldr r7,[sp],#4
 957              	.LCFI103:
 958              	 .cfi_restore 7
 959              	 .cfi_def_cfa_offset 0
 960 0040 7047     	 bx lr
 961              	 .cfi_endproc
 962              	.LFE223:
 964 0042 00BF     	 .section .text.CAN_NODE_EnableEvent,"ax",%progbits
 965              	 .align 2
 966              	 .global CAN_NODE_EnableEvent
 967              	 .thumb
 968              	 .thumb_func
 970              	CAN_NODE_EnableEvent:
 971              	.LFB224:
 154:../Dave/Generated/CAN_NODE/can_node.c **** 
 155:../Dave/Generated/CAN_NODE/can_node.c **** /* API to enable the can node events like node alert,LEC,Transfer OK and Frame counter overflow. */
 156:../Dave/Generated/CAN_NODE/can_node.c **** void CAN_NODE_EnableEvent(const CAN_NODE_t *handle, const XMC_CAN_NODE_EVENT_t node_event)
 157:../Dave/Generated/CAN_NODE/can_node.c **** {
 972              	 .loc 3 157 0
 973              	 .cfi_startproc
 974              	 
 975              	 
 976 0000 80B5     	 push {r7,lr}
 977              	.LCFI104:
 978              	 .cfi_def_cfa_offset 8
 979              	 .cfi_offset 7,-8
 980              	 .cfi_offset 14,-4
 981 0002 84B0     	 sub sp,sp,#16
 982              	.LCFI105:
 983              	 .cfi_def_cfa_offset 24
 984 0004 00AF     	 add r7,sp,#0
 985              	.LCFI106:
 986              	 .cfi_def_cfa_register 7
 987 0006 7860     	 str r0,[r7,#4]
 988 0008 3960     	 str r1,[r7]
 158:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_ASSERT("CAN_NODE_EnableEvent: handle null", handle != NULL);
 159:../Dave/Generated/CAN_NODE/can_node.c **** 
 160:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_CAN_NODE_t *const can_node = handle->node_ptr;
 989              	 .loc 3 160 0
 990 000a 7B68     	 ldr r3,[r7,#4]
 991 000c 5B68     	 ldr r3,[r3,#4]
 992 000e FB60     	 str r3,[r7,#12]
 161:../Dave/Generated/CAN_NODE/can_node.c **** 
 162:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_CAN_NODE_EnableEvent(can_node,node_event);
 993              	 .loc 3 162 0
 994 0010 F868     	 ldr r0,[r7,#12]
 995 0012 3968     	 ldr r1,[r7]
 996 0014 FFF7FEFF 	 bl XMC_CAN_NODE_EnableEvent
 163:../Dave/Generated/CAN_NODE/can_node.c **** 
 164:../Dave/Generated/CAN_NODE/can_node.c **** }
 997              	 .loc 3 164 0
 998 0018 1037     	 adds r7,r7,#16
 999              	.LCFI107:
 1000              	 .cfi_def_cfa_offset 8
 1001 001a BD46     	 mov sp,r7
 1002              	.LCFI108:
 1003              	 .cfi_def_cfa_register 13
 1004              	 
 1005 001c 80BD     	 pop {r7,pc}
 1006              	 .cfi_endproc
 1007              	.LFE224:
 1009 001e 00BF     	 .section .text.CAN_NODE_ConfigBaudrate,"ax",%progbits
 1010              	 .align 2
 1011              	 .global CAN_NODE_ConfigBaudrate
 1012              	 .thumb
 1013              	 .thumb_func
 1015              	CAN_NODE_ConfigBaudrate:
 1016              	.LFB225:
 165:../Dave/Generated/CAN_NODE/can_node.c **** 
 166:../Dave/Generated/CAN_NODE/can_node.c **** /*  Function to configure the baud rate based on UI configuration. */
 167:../Dave/Generated/CAN_NODE/can_node.c **** void CAN_NODE_ConfigBaudrate(const CAN_NODE_t *handle, uint32_t baudrate, uint16_t sample_point, ui
 168:../Dave/Generated/CAN_NODE/can_node.c **** {
 1017              	 .loc 3 168 0
 1018              	 .cfi_startproc
 1019              	 
 1020              	 
 1021 0000 80B5     	 push {r7,lr}
 1022              	.LCFI109:
 1023              	 .cfi_def_cfa_offset 8
 1024              	 .cfi_offset 7,-8
 1025              	 .cfi_offset 14,-4
 1026 0002 86B0     	 sub sp,sp,#24
 1027              	.LCFI110:
 1028              	 .cfi_def_cfa_offset 32
 1029 0004 00AF     	 add r7,sp,#0
 1030              	.LCFI111:
 1031              	 .cfi_def_cfa_register 7
 1032 0006 F860     	 str r0,[r7,#12]
 1033 0008 B960     	 str r1,[r7,#8]
 1034 000a 1146     	 mov r1,r2
 1035 000c 1A46     	 mov r2,r3
 1036 000e 0B46     	 mov r3,r1
 1037 0010 FB80     	 strh r3,[r7,#6]
 1038 0012 1346     	 mov r3,r2
 1039 0014 7B71     	 strb r3,[r7,#5]
 169:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_CAN_NODE_t *const can_node = handle->node_ptr;
 1040              	 .loc 3 169 0
 1041 0016 FB68     	 ldr r3,[r7,#12]
 1042 0018 5B68     	 ldr r3,[r3,#4]
 1043 001a 7B61     	 str r3,[r7,#20]
 170:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_bit_time = handle->baudrate_config;
 1044              	 .loc 3 170 0
 1045 001c FB68     	 ldr r3,[r7,#12]
 1046 001e 9B68     	 ldr r3,[r3,#8]
 1047 0020 3B61     	 str r3,[r7,#16]
 171:../Dave/Generated/CAN_NODE/can_node.c **** 
 172:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_ASSERT("CAN_NODE_ConfigBaudrate: handle null", handle != NULL);
 173:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_ASSERT("CAN_NODE_ConfigBaudrate: baud rate invalid", (baudrate >= CAN_NODE_MIN_BAUDRATE)
 174:../Dave/Generated/CAN_NODE/can_node.c **** 		                                                                 && (baudrate <= CAN_NODE_MAX_BAU
 175:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_ASSERT("CAN_NODE_ConfigBaudrate: sample_point invalid", (sample_point >= 0U) &&
 176:../Dave/Generated/CAN_NODE/can_node.c ****                                                                         (sample_point <= CAN_NODE_M
 177:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_ASSERT("CAN_NODE_ConfigBaudrate: Synchronization jump width invalid", (sjw >= 0U) && (sjw <= 
 178:../Dave/Generated/CAN_NODE/can_node.c **** 
 179:../Dave/Generated/CAN_NODE/can_node.c ****   can_bit_time->baudrate = baudrate;
 1048              	 .loc 3 179 0
 1049 0022 3B69     	 ldr r3,[r7,#16]
 1050 0024 BA68     	 ldr r2,[r7,#8]
 1051 0026 5A60     	 str r2,[r3,#4]
 180:../Dave/Generated/CAN_NODE/can_node.c ****   can_bit_time->sample_point = (sample_point * CAN_NODE_MAX_SAMPLE_POINT);
 1052              	 .loc 3 180 0
 1053 0028 FB88     	 ldrh r3,[r7,#6]
 1054 002a 1A46     	 mov r2,r3
 1055 002c 9200     	 lsls r2,r2,#2
 1056 002e 1344     	 add r3,r3,r2
 1057 0030 1A46     	 mov r2,r3
 1058 0032 9100     	 lsls r1,r2,#2
 1059 0034 1A46     	 mov r2,r3
 1060 0036 0B46     	 mov r3,r1
 1061 0038 1344     	 add r3,r3,r2
 1062 003a 9B00     	 lsls r3,r3,#2
 1063 003c 9AB2     	 uxth r2,r3
 1064 003e 3B69     	 ldr r3,[r7,#16]
 1065 0040 1A81     	 strh r2,[r3,#8]
 181:../Dave/Generated/CAN_NODE/can_node.c ****   can_bit_time->sjw = (uint16_t)sjw;
 1066              	 .loc 3 181 0
 1067 0042 7B79     	 ldrb r3,[r7,#5]
 1068 0044 9AB2     	 uxth r2,r3
 1069 0046 3B69     	 ldr r3,[r7,#16]
 1070 0048 5A81     	 strh r2,[r3,#10]
 182:../Dave/Generated/CAN_NODE/can_node.c **** 
 183:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
 1071              	 .loc 3 183 0
 1072 004a 7869     	 ldr r0,[r7,#20]
 1073 004c 3969     	 ldr r1,[r7,#16]
 1074 004e FFF7FEFF 	 bl XMC_CAN_NODE_NominalBitTimeConfigure
 184:../Dave/Generated/CAN_NODE/can_node.c **** }
 1075              	 .loc 3 184 0
 1076 0052 1837     	 adds r7,r7,#24
 1077              	.LCFI112:
 1078              	 .cfi_def_cfa_offset 8
 1079 0054 BD46     	 mov sp,r7
 1080              	.LCFI113:
 1081              	 .cfi_def_cfa_register 13
 1082              	 
 1083 0056 80BD     	 pop {r7,pc}
 1084              	 .cfi_endproc
 1085              	.LFE225:
 1087              	 .section .text.CAN_NODE_MO_Init,"ax",%progbits
 1088              	 .align 2
 1089              	 .global CAN_NODE_MO_Init
 1090              	 .thumb
 1091              	 .thumb_func
 1093              	CAN_NODE_MO_Init:
 1094              	.LFB226:
 185:../Dave/Generated/CAN_NODE/can_node.c **** 
 186:../Dave/Generated/CAN_NODE/can_node.c **** /*  Function to initialize the CAN MO based on UI configuration. */
 187:../Dave/Generated/CAN_NODE/can_node.c **** void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
 188:../Dave/Generated/CAN_NODE/can_node.c **** {
 1095              	 .loc 3 188 0
 1096              	 .cfi_startproc
 1097              	 
 1098              	 
 1099 0000 80B5     	 push {r7,lr}
 1100              	.LCFI114:
 1101              	 .cfi_def_cfa_offset 8
 1102              	 .cfi_offset 7,-8
 1103              	 .cfi_offset 14,-4
 1104 0002 82B0     	 sub sp,sp,#8
 1105              	.LCFI115:
 1106              	 .cfi_def_cfa_offset 16
 1107 0004 00AF     	 add r7,sp,#0
 1108              	.LCFI116:
 1109              	 .cfi_def_cfa_register 7
 1110 0006 7860     	 str r0,[r7,#4]
 189:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);
 190:../Dave/Generated/CAN_NODE/can_node.c **** 
 191:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
 1111              	 .loc 3 191 0
 1112 0008 7B68     	 ldr r3,[r7,#4]
 1113 000a 1B68     	 ldr r3,[r3]
 1114 000c 1846     	 mov r0,r3
 1115 000e FFF7FEFF 	 bl XMC_CAN_MO_Config
 192:../Dave/Generated/CAN_NODE/can_node.c **** 
 193:../Dave/Generated/CAN_NODE/can_node.c ****   if (lmo_ptr->tx_event_enable == true)
 1116              	 .loc 3 193 0
 1117 0012 7B68     	 ldr r3,[r7,#4]
 1118 0014 DB79     	 ldrb r3,[r3,#7]
 1119 0016 002B     	 cmp r3,#0
 1120 0018 0BD0     	 beq .L29
 194:../Dave/Generated/CAN_NODE/can_node.c ****   {
 195:../Dave/Generated/CAN_NODE/can_node.c ****     XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_
 1121              	 .loc 3 195 0
 1122 001a 7B68     	 ldr r3,[r7,#4]
 1123 001c 1A68     	 ldr r2,[r3]
 1124 001e 7B68     	 ldr r3,[r7,#4]
 1125 0020 5B79     	 ldrb r3,[r3,#5]
 1126 0022 1046     	 mov r0,r2
 1127 0024 0421     	 movs r1,#4
 1128 0026 1A46     	 mov r2,r3
 1129 0028 FFF7FEFF 	 bl XMC_CAN_MO_SetEventNodePointer
 196:../Dave/Generated/CAN_NODE/can_node.c ****     CAN_NODE_MO_EnableTxEvent(lmo_ptr);
 1130              	 .loc 3 196 0
 1131 002c 7868     	 ldr r0,[r7,#4]
 1132 002e FFF7FEFF 	 bl CAN_NODE_MO_EnableTxEvent
 1133              	.L29:
 197:../Dave/Generated/CAN_NODE/can_node.c ****   }
 198:../Dave/Generated/CAN_NODE/can_node.c ****   if (lmo_ptr->rx_event_enable == true)
 1134              	 .loc 3 198 0
 1135 0032 7B68     	 ldr r3,[r7,#4]
 1136 0034 1B7A     	 ldrb r3,[r3,#8]
 1137 0036 002B     	 cmp r3,#0
 1138 0038 0BD0     	 beq .L28
 199:../Dave/Generated/CAN_NODE/can_node.c ****   {
 200:../Dave/Generated/CAN_NODE/can_node.c ****     XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_s
 1139              	 .loc 3 200 0
 1140 003a 7B68     	 ldr r3,[r7,#4]
 1141 003c 1A68     	 ldr r2,[r3]
 1142 003e 7B68     	 ldr r3,[r7,#4]
 1143 0040 9B79     	 ldrb r3,[r3,#6]
 1144 0042 1046     	 mov r0,r2
 1145 0044 0021     	 movs r1,#0
 1146 0046 1A46     	 mov r2,r3
 1147 0048 FFF7FEFF 	 bl XMC_CAN_MO_SetEventNodePointer
 201:../Dave/Generated/CAN_NODE/can_node.c ****     CAN_NODE_MO_EnableRxEvent(lmo_ptr);
 1148              	 .loc 3 201 0
 1149 004c 7868     	 ldr r0,[r7,#4]
 1150 004e FFF7FEFF 	 bl CAN_NODE_MO_EnableRxEvent
 1151              	.L28:
 202:../Dave/Generated/CAN_NODE/can_node.c ****   }
 203:../Dave/Generated/CAN_NODE/can_node.c **** 
 204:../Dave/Generated/CAN_NODE/can_node.c **** }
 1152              	 .loc 3 204 0
 1153 0052 0837     	 adds r7,r7,#8
 1154              	.LCFI117:
 1155              	 .cfi_def_cfa_offset 8
 1156 0054 BD46     	 mov sp,r7
 1157              	.LCFI118:
 1158              	 .cfi_def_cfa_register 13
 1159              	 
 1160 0056 80BD     	 pop {r7,pc}
 1161              	 .cfi_endproc
 1162              	.LFE226:
 1164              	 .section .text.CAN_NODE_MO_Transmit,"ax",%progbits
 1165              	 .align 2
 1166              	 .global CAN_NODE_MO_Transmit
 1167              	 .thumb
 1168              	 .thumb_func
 1170              	CAN_NODE_MO_Transmit:
 1171              	.LFB227:
 205:../Dave/Generated/CAN_NODE/can_node.c **** 
 206:../Dave/Generated/CAN_NODE/can_node.c **** /* Function to transmit the can MO frame.  */
 207:../Dave/Generated/CAN_NODE/can_node.c **** CAN_NODE_STATUS_t CAN_NODE_MO_Transmit(const CAN_NODE_LMO_t *lmo_ptr)
 208:../Dave/Generated/CAN_NODE/can_node.c **** {
 1172              	 .loc 3 208 0
 1173              	 .cfi_startproc
 1174              	 
 1175              	 
 1176 0000 80B5     	 push {r7,lr}
 1177              	.LCFI119:
 1178              	 .cfi_def_cfa_offset 8
 1179              	 .cfi_offset 7,-8
 1180              	 .cfi_offset 14,-4
 1181 0002 84B0     	 sub sp,sp,#16
 1182              	.LCFI120:
 1183              	 .cfi_def_cfa_offset 24
 1184 0004 00AF     	 add r7,sp,#0
 1185              	.LCFI121:
 1186              	 .cfi_def_cfa_register 7
 1187 0006 7860     	 str r0,[r7,#4]
 209:../Dave/Generated/CAN_NODE/can_node.c ****   CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 1188              	 .loc 3 209 0
 1189 0008 0023     	 movs r3,#0
 1190 000a FB73     	 strb r3,[r7,#15]
 210:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_ASSERT("CAN_NODE_MO_Transmit: lmo_ptr null", lmo_ptr != NULL);
 211:../Dave/Generated/CAN_NODE/can_node.c **** 
 212:../Dave/Generated/CAN_NODE/can_node.c ****   status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Transmit(lmo_ptr->mo_ptr);
 1191              	 .loc 3 212 0
 1192 000c 7B68     	 ldr r3,[r7,#4]
 1193 000e 1B68     	 ldr r3,[r3]
 1194 0010 1846     	 mov r0,r3
 1195 0012 FFF7FEFF 	 bl XMC_CAN_MO_Transmit
 1196 0016 0346     	 mov r3,r0
 1197 0018 FB73     	 strb r3,[r7,#15]
 213:../Dave/Generated/CAN_NODE/can_node.c ****   return (status);
 1198              	 .loc 3 213 0
 1199 001a FB7B     	 ldrb r3,[r7,#15]
 214:../Dave/Generated/CAN_NODE/can_node.c **** }
 1200              	 .loc 3 214 0
 1201 001c 1846     	 mov r0,r3
 1202 001e 1037     	 adds r7,r7,#16
 1203              	.LCFI122:
 1204              	 .cfi_def_cfa_offset 8
 1205 0020 BD46     	 mov sp,r7
 1206              	.LCFI123:
 1207              	 .cfi_def_cfa_register 13
 1208              	 
 1209 0022 80BD     	 pop {r7,pc}
 1210              	 .cfi_endproc
 1211              	.LFE227:
 1213              	 .section .text.CAN_NODE_MO_Receive,"ax",%progbits
 1214              	 .align 2
 1215              	 .global CAN_NODE_MO_Receive
 1216              	 .thumb
 1217              	 .thumb_func
 1219              	CAN_NODE_MO_Receive:
 1220              	.LFB228:
 215:../Dave/Generated/CAN_NODE/can_node.c **** 
 216:../Dave/Generated/CAN_NODE/can_node.c **** /* Function to read the received CAN message from the selected message object. */
 217:../Dave/Generated/CAN_NODE/can_node.c **** CAN_NODE_STATUS_t CAN_NODE_MO_Receive( CAN_NODE_LMO_t *lmo_ptr)
 218:../Dave/Generated/CAN_NODE/can_node.c **** {
 1221              	 .loc 3 218 0
 1222              	 .cfi_startproc
 1223              	 
 1224              	 
 1225 0000 80B5     	 push {r7,lr}
 1226              	.LCFI124:
 1227              	 .cfi_def_cfa_offset 8
 1228              	 .cfi_offset 7,-8
 1229              	 .cfi_offset 14,-4
 1230 0002 84B0     	 sub sp,sp,#16
 1231              	.LCFI125:
 1232              	 .cfi_def_cfa_offset 24
 1233 0004 00AF     	 add r7,sp,#0
 1234              	.LCFI126:
 1235              	 .cfi_def_cfa_register 7
 1236 0006 7860     	 str r0,[r7,#4]
 219:../Dave/Generated/CAN_NODE/can_node.c ****   CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 1237              	 .loc 3 219 0
 1238 0008 0023     	 movs r3,#0
 1239 000a FB73     	 strb r3,[r7,#15]
 220:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_ASSERT("CAN_NODE_MO_Receive: lmo_ptr null", lmo_ptr != NULL);
 221:../Dave/Generated/CAN_NODE/can_node.c **** 
 222:../Dave/Generated/CAN_NODE/can_node.c ****   status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Receive(lmo_ptr->mo_ptr);
 1240              	 .loc 3 222 0
 1241 000c 7B68     	 ldr r3,[r7,#4]
 1242 000e 1B68     	 ldr r3,[r3]
 1243 0010 1846     	 mov r0,r3
 1244 0012 FFF7FEFF 	 bl XMC_CAN_MO_Receive
 1245 0016 0346     	 mov r3,r0
 1246 0018 FB73     	 strb r3,[r7,#15]
 223:../Dave/Generated/CAN_NODE/can_node.c ****   return (status);
 1247              	 .loc 3 223 0
 1248 001a FB7B     	 ldrb r3,[r7,#15]
 224:../Dave/Generated/CAN_NODE/can_node.c **** }
 1249              	 .loc 3 224 0
 1250 001c 1846     	 mov r0,r3
 1251 001e 1037     	 adds r7,r7,#16
 1252              	.LCFI127:
 1253              	 .cfi_def_cfa_offset 8
 1254 0020 BD46     	 mov sp,r7
 1255              	.LCFI128:
 1256              	 .cfi_def_cfa_register 13
 1257              	 
 1258 0022 80BD     	 pop {r7,pc}
 1259              	 .cfi_endproc
 1260              	.LFE228:
 1262              	 .section .text.CAN_NODE_MO_ReceiveData,"ax",%progbits
 1263              	 .align 2
 1264              	 .global CAN_NODE_MO_ReceiveData
 1265              	 .thumb
 1266              	 .thumb_func
 1268              	CAN_NODE_MO_ReceiveData:
 1269              	.LFB229:
 225:../Dave/Generated/CAN_NODE/can_node.c **** 
 226:../Dave/Generated/CAN_NODE/can_node.c **** /* Function to read the received CAN message data from the selected message object excluding other 
 227:../Dave/Generated/CAN_NODE/can_node.c **** CAN_NODE_STATUS_t CAN_NODE_MO_ReceiveData( CAN_NODE_LMO_t *lmo_ptr)
 228:../Dave/Generated/CAN_NODE/can_node.c **** {
 1270              	 .loc 3 228 0
 1271              	 .cfi_startproc
 1272              	 
 1273              	 
 1274 0000 80B5     	 push {r7,lr}
 1275              	.LCFI129:
 1276              	 .cfi_def_cfa_offset 8
 1277              	 .cfi_offset 7,-8
 1278              	 .cfi_offset 14,-4
 1279 0002 84B0     	 sub sp,sp,#16
 1280              	.LCFI130:
 1281              	 .cfi_def_cfa_offset 24
 1282 0004 00AF     	 add r7,sp,#0
 1283              	.LCFI131:
 1284              	 .cfi_def_cfa_register 7
 1285 0006 7860     	 str r0,[r7,#4]
 229:../Dave/Generated/CAN_NODE/can_node.c ****   CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 1286              	 .loc 3 229 0
 1287 0008 0023     	 movs r3,#0
 1288 000a FB73     	 strb r3,[r7,#15]
 230:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_ASSERT("CAN_NODE_MO_ReceiveData: lmo_ptr null", lmo_ptr != NULL);
 231:../Dave/Generated/CAN_NODE/can_node.c **** 
 232:../Dave/Generated/CAN_NODE/can_node.c ****   status = (CAN_NODE_STATUS_t)XMC_CAN_MO_ReceiveData(lmo_ptr->mo_ptr);
 1289              	 .loc 3 232 0
 1290 000c 7B68     	 ldr r3,[r7,#4]
 1291 000e 1B68     	 ldr r3,[r3]
 1292 0010 1846     	 mov r0,r3
 1293 0012 FFF7FEFF 	 bl XMC_CAN_MO_ReceiveData
 1294 0016 0346     	 mov r3,r0
 1295 0018 FB73     	 strb r3,[r7,#15]
 233:../Dave/Generated/CAN_NODE/can_node.c ****   return (status);
 1296              	 .loc 3 233 0
 1297 001a FB7B     	 ldrb r3,[r7,#15]
 234:../Dave/Generated/CAN_NODE/can_node.c **** }
 1298              	 .loc 3 234 0
 1299 001c 1846     	 mov r0,r3
 1300 001e 1037     	 adds r7,r7,#16
 1301              	.LCFI132:
 1302              	 .cfi_def_cfa_offset 8
 1303 0020 BD46     	 mov sp,r7
 1304              	.LCFI133:
 1305              	 .cfi_def_cfa_register 13
 1306              	 
 1307 0022 80BD     	 pop {r7,pc}
 1308              	 .cfi_endproc
 1309              	.LFE229:
 1311              	 .section .text.CAN_NODE_MO_UpdateData,"ax",%progbits
 1312              	 .align 2
 1313              	 .global CAN_NODE_MO_UpdateData
 1314              	 .thumb
 1315              	 .thumb_func
 1317              	CAN_NODE_MO_UpdateData:
 1318              	.LFB230:
 235:../Dave/Generated/CAN_NODE/can_node.c **** 
 236:../Dave/Generated/CAN_NODE/can_node.c **** /* Function to updates the data for the CAN Message Object. */
 237:../Dave/Generated/CAN_NODE/can_node.c **** CAN_NODE_STATUS_t CAN_NODE_MO_UpdateData(const CAN_NODE_LMO_t *const lmo_ptr, uint8_t *array_data)
 238:../Dave/Generated/CAN_NODE/can_node.c **** {
 1319              	 .loc 3 238 0
 1320              	 .cfi_startproc
 1321              	 
 1322              	 
 1323 0000 80B5     	 push {r7,lr}
 1324              	.LCFI134:
 1325              	 .cfi_def_cfa_offset 8
 1326              	 .cfi_offset 7,-8
 1327              	 .cfi_offset 14,-4
 1328 0002 84B0     	 sub sp,sp,#16
 1329              	.LCFI135:
 1330              	 .cfi_def_cfa_offset 24
 1331 0004 00AF     	 add r7,sp,#0
 1332              	.LCFI136:
 1333              	 .cfi_def_cfa_register 7
 1334 0006 7860     	 str r0,[r7,#4]
 1335 0008 3960     	 str r1,[r7]
 239:../Dave/Generated/CAN_NODE/can_node.c ****   CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 1336              	 .loc 3 239 0
 1337 000a 0023     	 movs r3,#0
 1338 000c FB73     	 strb r3,[r7,#15]
 240:../Dave/Generated/CAN_NODE/can_node.c ****   uint32_t *data_pointer = (uint32_t*) array_data;
 1339              	 .loc 3 240 0
 1340 000e 3B68     	 ldr r3,[r7]
 1341 0010 BB60     	 str r3,[r7,#8]
 241:../Dave/Generated/CAN_NODE/can_node.c **** 
 242:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);
 243:../Dave/Generated/CAN_NODE/can_node.c **** 
 244:../Dave/Generated/CAN_NODE/can_node.c ****   lmo_ptr->mo_ptr->can_data[0U] = *data_pointer;
 1342              	 .loc 3 244 0
 1343 0012 7B68     	 ldr r3,[r7,#4]
 1344 0014 1B68     	 ldr r3,[r3]
 1345 0016 BA68     	 ldr r2,[r7,#8]
 1346 0018 1268     	 ldr r2,[r2]
 1347 001a 1A61     	 str r2,[r3,#16]
 245:../Dave/Generated/CAN_NODE/can_node.c ****   lmo_ptr->mo_ptr->can_data[1U] = *(data_pointer + 1U);
 1348              	 .loc 3 245 0
 1349 001c 7B68     	 ldr r3,[r7,#4]
 1350 001e 1B68     	 ldr r3,[r3]
 1351 0020 BA68     	 ldr r2,[r7,#8]
 1352 0022 5268     	 ldr r2,[r2,#4]
 1353 0024 5A61     	 str r2,[r3,#20]
 246:../Dave/Generated/CAN_NODE/can_node.c **** 
 247:../Dave/Generated/CAN_NODE/can_node.c ****   status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(lmo_ptr->mo_ptr);
 1354              	 .loc 3 247 0
 1355 0026 7B68     	 ldr r3,[r7,#4]
 1356 0028 1B68     	 ldr r3,[r3]
 1357 002a 1846     	 mov r0,r3
 1358 002c FFF7FEFF 	 bl XMC_CAN_MO_UpdateData
 1359 0030 0346     	 mov r3,r0
 1360 0032 FB73     	 strb r3,[r7,#15]
 248:../Dave/Generated/CAN_NODE/can_node.c ****   return (status);
 1361              	 .loc 3 248 0
 1362 0034 FB7B     	 ldrb r3,[r7,#15]
 249:../Dave/Generated/CAN_NODE/can_node.c **** }
 1363              	 .loc 3 249 0
 1364 0036 1846     	 mov r0,r3
 1365 0038 1037     	 adds r7,r7,#16
 1366              	.LCFI137:
 1367              	 .cfi_def_cfa_offset 8
 1368 003a BD46     	 mov sp,r7
 1369              	.LCFI138:
 1370              	 .cfi_def_cfa_register 13
 1371              	 
 1372 003c 80BD     	 pop {r7,pc}
 1373              	 .cfi_endproc
 1374              	.LFE230:
 1376 003e 00BF     	 .section .text.CAN_NODE_MO_GetStatus,"ax",%progbits
 1377              	 .align 2
 1378              	 .global CAN_NODE_MO_GetStatus
 1379              	 .thumb
 1380              	 .thumb_func
 1382              	CAN_NODE_MO_GetStatus:
 1383              	.LFB231:
 250:../Dave/Generated/CAN_NODE/can_node.c **** 
 251:../Dave/Generated/CAN_NODE/can_node.c **** /*  Function to reads the status of the CAN Message Object.  */
 252:../Dave/Generated/CAN_NODE/can_node.c **** uint32_t CAN_NODE_MO_GetStatus(const CAN_NODE_LMO_t *lmo_ptr)
 253:../Dave/Generated/CAN_NODE/can_node.c **** {
 1384              	 .loc 3 253 0
 1385              	 .cfi_startproc
 1386              	 
 1387              	 
 1388 0000 80B5     	 push {r7,lr}
 1389              	.LCFI139:
 1390              	 .cfi_def_cfa_offset 8
 1391              	 .cfi_offset 7,-8
 1392              	 .cfi_offset 14,-4
 1393 0002 84B0     	 sub sp,sp,#16
 1394              	.LCFI140:
 1395              	 .cfi_def_cfa_offset 24
 1396 0004 00AF     	 add r7,sp,#0
 1397              	.LCFI141:
 1398              	 .cfi_def_cfa_register 7
 1399 0006 7860     	 str r0,[r7,#4]
 254:../Dave/Generated/CAN_NODE/can_node.c ****   uint32_t status;
 255:../Dave/Generated/CAN_NODE/can_node.c **** 
 256:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_ASSERT("CAN_NODE_MO_GetStatus: lmo_ptr null", lmo_ptr != NULL);
 257:../Dave/Generated/CAN_NODE/can_node.c **** 
 258:../Dave/Generated/CAN_NODE/can_node.c ****   status = XMC_CAN_MO_GetStatus(lmo_ptr->mo_ptr);
 1400              	 .loc 3 258 0
 1401 0008 7B68     	 ldr r3,[r7,#4]
 1402 000a 1B68     	 ldr r3,[r3]
 1403 000c 1846     	 mov r0,r3
 1404 000e FFF7FEFF 	 bl XMC_CAN_MO_GetStatus
 1405 0012 F860     	 str r0,[r7,#12]
 259:../Dave/Generated/CAN_NODE/can_node.c **** 
 260:../Dave/Generated/CAN_NODE/can_node.c ****   return (status);
 1406              	 .loc 3 260 0
 1407 0014 FB68     	 ldr r3,[r7,#12]
 261:../Dave/Generated/CAN_NODE/can_node.c **** }
 1408              	 .loc 3 261 0
 1409 0016 1846     	 mov r0,r3
 1410 0018 1037     	 adds r7,r7,#16
 1411              	.LCFI142:
 1412              	 .cfi_def_cfa_offset 8
 1413 001a BD46     	 mov sp,r7
 1414              	.LCFI143:
 1415              	 .cfi_def_cfa_register 13
 1416              	 
 1417 001c 80BD     	 pop {r7,pc}
 1418              	 .cfi_endproc
 1419              	.LFE231:
 1421 001e 00BF     	 .section .text.CAN_NODE_MO_ClearStatus,"ax",%progbits
 1422              	 .align 2
 1423              	 .global CAN_NODE_MO_ClearStatus
 1424              	 .thumb
 1425              	 .thumb_func
 1427              	CAN_NODE_MO_ClearStatus:
 1428              	.LFB232:
 262:../Dave/Generated/CAN_NODE/can_node.c **** 
 263:../Dave/Generated/CAN_NODE/can_node.c **** /*  Function to clear/ reset the status of the CAN Message Object  */
 264:../Dave/Generated/CAN_NODE/can_node.c **** void CAN_NODE_MO_ClearStatus(const CAN_NODE_LMO_t *lmo_ptr, const uint32_t mask)
 265:../Dave/Generated/CAN_NODE/can_node.c **** {
 1429              	 .loc 3 265 0
 1430              	 .cfi_startproc
 1431              	 
 1432              	 
 1433 0000 80B5     	 push {r7,lr}
 1434              	.LCFI144:
 1435              	 .cfi_def_cfa_offset 8
 1436              	 .cfi_offset 7,-8
 1437              	 .cfi_offset 14,-4
 1438 0002 82B0     	 sub sp,sp,#8
 1439              	.LCFI145:
 1440              	 .cfi_def_cfa_offset 16
 1441 0004 00AF     	 add r7,sp,#0
 1442              	.LCFI146:
 1443              	 .cfi_def_cfa_register 7
 1444 0006 7860     	 str r0,[r7,#4]
 1445 0008 3960     	 str r1,[r7]
 266:../Dave/Generated/CAN_NODE/can_node.c **** 
 267:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_ASSERT("CAN_NODE_MO_ClearStatus: lmo_ptr null", lmo_ptr != NULL);
 268:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_ASSERT("CAN_NODE_MO_ClearStatus: mask invalid", (mask <= CAN_NODE_MO_CLEAR_MASK));
 269:../Dave/Generated/CAN_NODE/can_node.c **** 
 270:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_CAN_MO_ResetStatus(lmo_ptr->mo_ptr, mask);
 1446              	 .loc 3 270 0
 1447 000a 7B68     	 ldr r3,[r7,#4]
 1448 000c 1B68     	 ldr r3,[r3]
 1449 000e 1846     	 mov r0,r3
 1450 0010 3968     	 ldr r1,[r7]
 1451 0012 FFF7FEFF 	 bl XMC_CAN_MO_ResetStatus
 271:../Dave/Generated/CAN_NODE/can_node.c **** 
 272:../Dave/Generated/CAN_NODE/can_node.c **** }
 1452              	 .loc 3 272 0
 1453 0016 0837     	 adds r7,r7,#8
 1454              	.LCFI147:
 1455              	 .cfi_def_cfa_offset 8
 1456 0018 BD46     	 mov sp,r7
 1457              	.LCFI148:
 1458              	 .cfi_def_cfa_register 13
 1459              	 
 1460 001a 80BD     	 pop {r7,pc}
 1461              	 .cfi_endproc
 1462              	.LFE232:
 1464              	 .section .text.CAN_NODE_DisableEvent,"ax",%progbits
 1465              	 .align 2
 1466              	 .global CAN_NODE_DisableEvent
 1467              	 .thumb
 1468              	 .thumb_func
 1470              	CAN_NODE_DisableEvent:
 1471              	.LFB233:
 273:../Dave/Generated/CAN_NODE/can_node.c **** 
 274:../Dave/Generated/CAN_NODE/can_node.c **** /*  Function to disable the node event  */
 275:../Dave/Generated/CAN_NODE/can_node.c **** void CAN_NODE_DisableEvent(const CAN_NODE_t *handle, const XMC_CAN_NODE_EVENT_t node_event)
 276:../Dave/Generated/CAN_NODE/can_node.c **** {
 1472              	 .loc 3 276 0
 1473              	 .cfi_startproc
 1474              	 
 1475              	 
 1476 0000 80B5     	 push {r7,lr}
 1477              	.LCFI149:
 1478              	 .cfi_def_cfa_offset 8
 1479              	 .cfi_offset 7,-8
 1480              	 .cfi_offset 14,-4
 1481 0002 84B0     	 sub sp,sp,#16
 1482              	.LCFI150:
 1483              	 .cfi_def_cfa_offset 24
 1484 0004 00AF     	 add r7,sp,#0
 1485              	.LCFI151:
 1486              	 .cfi_def_cfa_register 7
 1487 0006 7860     	 str r0,[r7,#4]
 1488 0008 3960     	 str r1,[r7]
 277:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_CAN_NODE_t *const can_node = handle->node_ptr;
 1489              	 .loc 3 277 0
 1490 000a 7B68     	 ldr r3,[r7,#4]
 1491 000c 5B68     	 ldr r3,[r3,#4]
 1492 000e FB60     	 str r3,[r7,#12]
 278:../Dave/Generated/CAN_NODE/can_node.c **** 
 279:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_ASSERT("CAN_NODE_DisableEvent: handle null", handle != NULL);
 280:../Dave/Generated/CAN_NODE/can_node.c **** 
 281:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_CAN_NODE_DisableEvent(can_node,node_event);
 1493              	 .loc 3 281 0
 1494 0010 F868     	 ldr r0,[r7,#12]
 1495 0012 3968     	 ldr r1,[r7]
 1496 0014 FFF7FEFF 	 bl XMC_CAN_NODE_DisableEvent
 282:../Dave/Generated/CAN_NODE/can_node.c **** 
 283:../Dave/Generated/CAN_NODE/can_node.c **** }
 1497              	 .loc 3 283 0
 1498 0018 1037     	 adds r7,r7,#16
 1499              	.LCFI152:
 1500              	 .cfi_def_cfa_offset 8
 1501 001a BD46     	 mov sp,r7
 1502              	.LCFI153:
 1503              	 .cfi_def_cfa_register 13
 1504              	 
 1505 001c 80BD     	 pop {r7,pc}
 1506              	 .cfi_endproc
 1507              	.LFE233:
 1509 001e 00BF     	 .section .text.CAN_NODE_GetStatus,"ax",%progbits
 1510              	 .align 2
 1511              	 .global CAN_NODE_GetStatus
 1512              	 .thumb
 1513              	 .thumb_func
 1515              	CAN_NODE_GetStatus:
 1516              	.LFB234:
 284:../Dave/Generated/CAN_NODE/can_node.c **** 
 285:../Dave/Generated/CAN_NODE/can_node.c **** /* Function to read the current status of the CAN node  */
 286:../Dave/Generated/CAN_NODE/can_node.c **** uint32_t CAN_NODE_GetStatus(const CAN_NODE_t* handle)
 287:../Dave/Generated/CAN_NODE/can_node.c **** {
 1517              	 .loc 3 287 0
 1518              	 .cfi_startproc
 1519              	 
 1520              	 
 1521 0000 80B5     	 push {r7,lr}
 1522              	.LCFI154:
 1523              	 .cfi_def_cfa_offset 8
 1524              	 .cfi_offset 7,-8
 1525              	 .cfi_offset 14,-4
 1526 0002 84B0     	 sub sp,sp,#16
 1527              	.LCFI155:
 1528              	 .cfi_def_cfa_offset 24
 1529 0004 00AF     	 add r7,sp,#0
 1530              	.LCFI156:
 1531              	 .cfi_def_cfa_register 7
 1532 0006 7860     	 str r0,[r7,#4]
 288:../Dave/Generated/CAN_NODE/can_node.c ****   uint32_t  status;
 289:../Dave/Generated/CAN_NODE/can_node.c **** 
 290:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_ASSERT("CAN_NODE_GetStatus: handle null", handle != NULL);
 291:../Dave/Generated/CAN_NODE/can_node.c **** 
 292:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_CAN_NODE_t *const can_node = handle->node_ptr;
 1533              	 .loc 3 292 0
 1534 0008 7B68     	 ldr r3,[r7,#4]
 1535 000a 5B68     	 ldr r3,[r3,#4]
 1536 000c FB60     	 str r3,[r7,#12]
 293:../Dave/Generated/CAN_NODE/can_node.c **** 
 294:../Dave/Generated/CAN_NODE/can_node.c ****   status = XMC_CAN_NODE_GetStatus(can_node);
 1537              	 .loc 3 294 0
 1538 000e F868     	 ldr r0,[r7,#12]
 1539 0010 FFF7FEFF 	 bl XMC_CAN_NODE_GetStatus
 1540 0014 B860     	 str r0,[r7,#8]
 295:../Dave/Generated/CAN_NODE/can_node.c ****   return (status);
 1541              	 .loc 3 295 0
 1542 0016 BB68     	 ldr r3,[r7,#8]
 296:../Dave/Generated/CAN_NODE/can_node.c **** }
 1543              	 .loc 3 296 0
 1544 0018 1846     	 mov r0,r3
 1545 001a 1037     	 adds r7,r7,#16
 1546              	.LCFI157:
 1547              	 .cfi_def_cfa_offset 8
 1548 001c BD46     	 mov sp,r7
 1549              	.LCFI158:
 1550              	 .cfi_def_cfa_register 13
 1551              	 
 1552 001e 80BD     	 pop {r7,pc}
 1553              	 .cfi_endproc
 1554              	.LFE234:
 1556              	 .section .text.CAN_NODE_ClearStatus,"ax",%progbits
 1557              	 .align 2
 1558              	 .global CAN_NODE_ClearStatus
 1559              	 .thumb
 1560              	 .thumb_func
 1562              	CAN_NODE_ClearStatus:
 1563              	.LFB235:
 297:../Dave/Generated/CAN_NODE/can_node.c **** 
 298:../Dave/Generated/CAN_NODE/can_node.c **** /* Function to clear the current status of the CAN node  */
 299:../Dave/Generated/CAN_NODE/can_node.c **** void CAN_NODE_ClearStatus(const CAN_NODE_t *handle, XMC_CAN_NODE_STATUS_t can_node_status)
 300:../Dave/Generated/CAN_NODE/can_node.c **** {
 1564              	 .loc 3 300 0
 1565              	 .cfi_startproc
 1566              	 
 1567              	 
 1568 0000 80B5     	 push {r7,lr}
 1569              	.LCFI159:
 1570              	 .cfi_def_cfa_offset 8
 1571              	 .cfi_offset 7,-8
 1572              	 .cfi_offset 14,-4
 1573 0002 84B0     	 sub sp,sp,#16
 1574              	.LCFI160:
 1575              	 .cfi_def_cfa_offset 24
 1576 0004 00AF     	 add r7,sp,#0
 1577              	.LCFI161:
 1578              	 .cfi_def_cfa_register 7
 1579 0006 7860     	 str r0,[r7,#4]
 1580 0008 0B46     	 mov r3,r1
 1581 000a 7B80     	 strh r3,[r7,#2]
 301:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_ASSERT("CAN_NODE_ClearStatus: handle null", handle != NULL);
 302:../Dave/Generated/CAN_NODE/can_node.c **** 
 303:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_CAN_NODE_t *const can_node = handle->node_ptr;
 1582              	 .loc 3 303 0
 1583 000c 7B68     	 ldr r3,[r7,#4]
 1584 000e 5B68     	 ldr r3,[r3,#4]
 1585 0010 FB60     	 str r3,[r7,#12]
 304:../Dave/Generated/CAN_NODE/can_node.c **** 
 305:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_CAN_NODE_ClearStatus(can_node, can_node_status);
 1586              	 .loc 3 305 0
 1587 0012 7B88     	 ldrh r3,[r7,#2]
 1588 0014 F868     	 ldr r0,[r7,#12]
 1589 0016 1946     	 mov r1,r3
 1590 0018 FFF7FEFF 	 bl XMC_CAN_NODE_ClearStatus
 306:../Dave/Generated/CAN_NODE/can_node.c **** }
 1591              	 .loc 3 306 0
 1592 001c 1037     	 adds r7,r7,#16
 1593              	.LCFI162:
 1594              	 .cfi_def_cfa_offset 8
 1595 001e BD46     	 mov sp,r7
 1596              	.LCFI163:
 1597              	 .cfi_def_cfa_register 13
 1598              	 
 1599 0020 80BD     	 pop {r7,pc}
 1600              	 .cfi_endproc
 1601              	.LFE235:
 1603 0022 00BF     	 .section .text.CAN_NODE_Init,"ax",%progbits
 1604              	 .align 2
 1605              	 .global CAN_NODE_Init
 1606              	 .thumb
 1607              	 .thumb_func
 1609              	CAN_NODE_Init:
 1610              	.LFB236:
 307:../Dave/Generated/CAN_NODE/can_node.c **** 
 308:../Dave/Generated/CAN_NODE/can_node.c **** /*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or int
 309:../Dave/Generated/CAN_NODE/can_node.c ****  *  and message objects.
 310:../Dave/Generated/CAN_NODE/can_node.c ****  */
 311:../Dave/Generated/CAN_NODE/can_node.c **** 
 312:../Dave/Generated/CAN_NODE/can_node.c **** CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
 313:../Dave/Generated/CAN_NODE/can_node.c **** {
 1611              	 .loc 3 313 0
 1612              	 .cfi_startproc
 1613              	 
 1614              	 
 1615 0000 80B5     	 push {r7,lr}
 1616              	.LCFI164:
 1617              	 .cfi_def_cfa_offset 8
 1618              	 .cfi_offset 7,-8
 1619              	 .cfi_offset 14,-4
 1620 0002 86B0     	 sub sp,sp,#24
 1621              	.LCFI165:
 1622              	 .cfi_def_cfa_offset 32
 1623 0004 00AF     	 add r7,sp,#0
 1624              	.LCFI166:
 1625              	 .cfi_def_cfa_register 7
 1626 0006 7860     	 str r0,[r7,#4]
 314:../Dave/Generated/CAN_NODE/can_node.c ****   CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 1627              	 .loc 3 314 0
 1628 0008 0023     	 movs r3,#0
 1629 000a FB75     	 strb r3,[r7,#23]
 315:../Dave/Generated/CAN_NODE/can_node.c ****   uint32_t loop_count;
 316:../Dave/Generated/CAN_NODE/can_node.c ****   const CAN_NODE_LMO_t *lmo_ptr;
 317:../Dave/Generated/CAN_NODE/can_node.c **** 
 318:../Dave/Generated/CAN_NODE/can_node.c ****   XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);
 319:../Dave/Generated/CAN_NODE/can_node.c **** 
 320:../Dave/Generated/CAN_NODE/can_node.c ****   const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
 1630              	 .loc 3 320 0
 1631 000c 7B68     	 ldr r3,[r7,#4]
 1632 000e D3F89030 	 ldr r3,[r3,#144]
 1633 0012 FB60     	 str r3,[r7,#12]
 321:../Dave/Generated/CAN_NODE/can_node.c **** 
 322:../Dave/Generated/CAN_NODE/can_node.c ****   /* Initialize the GLOBAL_CAN APP */
 323:../Dave/Generated/CAN_NODE/can_node.c ****   status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
 1634              	 .loc 3 323 0
 1635 0014 7B68     	 ldr r3,[r7,#4]
 1636 0016 1B68     	 ldr r3,[r3]
 1637 0018 1846     	 mov r0,r3
 1638 001a FFF7FEFF 	 bl GLOBAL_CAN_Init
 1639 001e 0346     	 mov r3,r0
 1640 0020 FB75     	 strb r3,[r7,#23]
 324:../Dave/Generated/CAN_NODE/can_node.c **** 
 325:../Dave/Generated/CAN_NODE/can_node.c ****   if (status == CAN_NODE_STATUS_SUCCESS)
 1641              	 .loc 3 325 0
 1642 0022 FB7D     	 ldrb r3,[r7,#23]
 1643 0024 002B     	 cmp r3,#0
 1644 0026 7BD1     	 bne .L47
 326:../Dave/Generated/CAN_NODE/can_node.c ****   {
 327:../Dave/Generated/CAN_NODE/can_node.c ****     /* Initialize the GUI configured values for baud rate to NBTR Reg */
 328:../Dave/Generated/CAN_NODE/can_node.c ****     XMC_CAN_NODE_NominalBitTimeConfigure(handle->node_ptr, handle->baudrate_config);
 1645              	 .loc 3 328 0
 1646 0028 7B68     	 ldr r3,[r7,#4]
 1647 002a 5A68     	 ldr r2,[r3,#4]
 1648 002c 7B68     	 ldr r3,[r7,#4]
 1649 002e 9B68     	 ldr r3,[r3,#8]
 1650 0030 1046     	 mov r0,r2
 1651 0032 1946     	 mov r1,r3
 1652 0034 FFF7FEFF 	 bl XMC_CAN_NODE_NominalBitTimeConfigure
 329:../Dave/Generated/CAN_NODE/can_node.c ****     /* set CCE and INIT bit NCR for node configuration */
 330:../Dave/Generated/CAN_NODE/can_node.c ****     XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
 1653              	 .loc 3 330 0
 1654 0038 7B68     	 ldr r3,[r7,#4]
 1655 003a 5B68     	 ldr r3,[r3,#4]
 1656 003c 1846     	 mov r0,r3
 1657 003e FFF7FEFF 	 bl XMC_CAN_NODE_EnableConfigurationChange
 331:../Dave/Generated/CAN_NODE/can_node.c ****     XMC_CAN_NODE_SetInitBit(handle->node_ptr);
 1658              	 .loc 3 331 0
 1659 0042 7B68     	 ldr r3,[r7,#4]
 1660 0044 5B68     	 ldr r3,[r3,#4]
 1661 0046 1846     	 mov r0,r3
 1662 0048 FFF7FEFF 	 bl XMC_CAN_NODE_SetInitBit
 332:../Dave/Generated/CAN_NODE/can_node.c **** 
 333:../Dave/Generated/CAN_NODE/can_node.c ****     if (handle->loopback_enable == true) /* Loop back mode enabled */
 1663              	 .loc 3 333 0
 1664 004c 7B68     	 ldr r3,[r7,#4]
 1665 004e 93F8A730 	 ldrb r3,[r3,#167]
 1666 0052 002B     	 cmp r3,#0
 1667 0054 05D0     	 beq .L48
 334:../Dave/Generated/CAN_NODE/can_node.c ****     {
 335:../Dave/Generated/CAN_NODE/can_node.c ****       XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
 1668              	 .loc 3 335 0
 1669 0056 7B68     	 ldr r3,[r7,#4]
 1670 0058 5B68     	 ldr r3,[r3,#4]
 1671 005a 1846     	 mov r0,r3
 1672 005c FFF7FEFF 	 bl XMC_CAN_NODE_EnableLoopBack
 1673 0060 18E0     	 b .L49
 1674              	.L48:
 336:../Dave/Generated/CAN_NODE/can_node.c ****     }
 337:../Dave/Generated/CAN_NODE/can_node.c ****     else
 338:../Dave/Generated/CAN_NODE/can_node.c ****     {
 339:../Dave/Generated/CAN_NODE/can_node.c ****       XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
 1675              	 .loc 3 339 0
 1676 0062 7B68     	 ldr r3,[r7,#4]
 1677 0064 D3F89830 	 ldr r3,[r3,#152]
 1678 0068 1968     	 ldr r1,[r3]
 1679 006a 7B68     	 ldr r3,[r7,#4]
 1680 006c D3F89830 	 ldr r3,[r3,#152]
 1681 0070 1A79     	 ldrb r2,[r3,#4]
 1682 0072 7B68     	 ldr r3,[r7,#4]
 1683 0074 D3F89C30 	 ldr r3,[r3,#156]
 1684 0078 0846     	 mov r0,r1
 1685 007a 1146     	 mov r1,r2
 1686 007c 1A46     	 mov r2,r3
 1687 007e FFF7FEFF 	 bl XMC_GPIO_Init
 340:../Dave/Generated/CAN_NODE/can_node.c ****       XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
 1688              	 .loc 3 340 0
 1689 0082 7B68     	 ldr r3,[r7,#4]
 1690 0084 5A68     	 ldr r2,[r3,#4]
 1691 0086 7B68     	 ldr r3,[r7,#4]
 1692 0088 93F8A030 	 ldrb r3,[r3,#160]
 1693 008c 1046     	 mov r0,r2
 1694 008e 1946     	 mov r1,r3
 1695 0090 FFF7FEFF 	 bl XMC_CAN_NODE_SetReceiveInput
 1696              	.L49:
 341:../Dave/Generated/CAN_NODE/can_node.c ****     }
 342:../Dave/Generated/CAN_NODE/can_node.c ****     CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
 1697              	 .loc 3 342 0
 1698 0094 7868     	 ldr r0,[r7,#4]
 1699 0096 FFF7FEFF 	 bl CAN_NODE_SetNodeEvents
 343:../Dave/Generated/CAN_NODE/can_node.c **** 
 344:../Dave/Generated/CAN_NODE/can_node.c ****     for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 1700              	 .loc 3 344 0
 1701 009a 0023     	 movs r3,#0
 1702 009c 3B61     	 str r3,[r7,#16]
 1703 009e 19E0     	 b .L50
 1704              	.L51:
 345:../Dave/Generated/CAN_NODE/can_node.c ****     {
 346:../Dave/Generated/CAN_NODE/can_node.c ****       lmo_ptr = handle->lmobj_ptr[loop_count];
 1705              	 .loc 3 346 0 discriminator 3
 1706 00a0 7A68     	 ldr r2,[r7,#4]
 1707 00a2 3B69     	 ldr r3,[r7,#16]
 1708 00a4 0233     	 adds r3,r3,#2
 1709 00a6 9B00     	 lsls r3,r3,#2
 1710 00a8 1344     	 add r3,r3,r2
 1711 00aa 5B68     	 ldr r3,[r3,#4]
 1712 00ac BB60     	 str r3,[r7,#8]
 347:../Dave/Generated/CAN_NODE/can_node.c ****       XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->nu
 1713              	 .loc 3 347 0 discriminator 3
 1714 00ae 7B68     	 ldr r3,[r7,#4]
 1715 00b0 1B68     	 ldr r3,[r3]
 1716 00b2 5968     	 ldr r1,[r3,#4]
 1717 00b4 7B68     	 ldr r3,[r7,#4]
 1718 00b6 93F8A120 	 ldrb r2,[r3,#161]
 1719 00ba BB68     	 ldr r3,[r7,#8]
 1720 00bc 1B79     	 ldrb r3,[r3,#4]
 1721 00be 0846     	 mov r0,r1
 1722 00c0 1146     	 mov r1,r2
 1723 00c2 1A46     	 mov r2,r3
 1724 00c4 FFF7FEFF 	 bl XMC_CAN_AllocateMOtoNodeList
 348:../Dave/Generated/CAN_NODE/can_node.c ****       CAN_NODE_MO_Init(lmo_ptr);
 1725              	 .loc 3 348 0 discriminator 3
 1726 00c8 B868     	 ldr r0,[r7,#8]
 1727 00ca FFF7FEFF 	 bl CAN_NODE_MO_Init
 344:../Dave/Generated/CAN_NODE/can_node.c ****     {
 1728              	 .loc 3 344 0 discriminator 3
 1729 00ce 3B69     	 ldr r3,[r7,#16]
 1730 00d0 0133     	 adds r3,r3,#1
 1731 00d2 3B61     	 str r3,[r7,#16]
 1732              	.L50:
 344:../Dave/Generated/CAN_NODE/can_node.c ****     {
 1733              	 .loc 3 344 0 is_stmt 0 discriminator 1
 1734 00d4 7B68     	 ldr r3,[r7,#4]
 1735 00d6 93F8A230 	 ldrb r3,[r3,#162]
 1736 00da 1A46     	 mov r2,r3
 1737 00dc 3B69     	 ldr r3,[r7,#16]
 1738 00de 9A42     	 cmp r2,r3
 1739 00e0 DED8     	 bhi .L51
 349:../Dave/Generated/CAN_NODE/can_node.c ****     }
 350:../Dave/Generated/CAN_NODE/can_node.c ****     /* reset CCE and INIT bit NCR for node configuration */
 351:../Dave/Generated/CAN_NODE/can_node.c ****     XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
 1740              	 .loc 3 351 0 is_stmt 1
 1741 00e2 7B68     	 ldr r3,[r7,#4]
 1742 00e4 5B68     	 ldr r3,[r3,#4]
 1743 00e6 1846     	 mov r0,r3
 1744 00e8 FFF7FEFF 	 bl XMC_CAN_NODE_DisableConfigurationChange
 352:../Dave/Generated/CAN_NODE/can_node.c ****     XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
 1745              	 .loc 3 352 0
 1746 00ec 7B68     	 ldr r3,[r7,#4]
 1747 00ee 5B68     	 ldr r3,[r3,#4]
 1748 00f0 1846     	 mov r0,r3
 1749 00f2 FFF7FEFF 	 bl XMC_CAN_NODE_ResetInitBit
 353:../Dave/Generated/CAN_NODE/can_node.c ****     if (handle->loopback_enable == false)
 1750              	 .loc 3 353 0
 1751 00f6 7B68     	 ldr r3,[r7,#4]
 1752 00f8 93F8A730 	 ldrb r3,[r3,#167]
 1753 00fc 83F00103 	 eor r3,r3,#1
 1754 0100 DBB2     	 uxtb r3,r3
 1755 0102 002B     	 cmp r3,#0
 1756 0104 0ED0     	 beq .L53
 354:../Dave/Generated/CAN_NODE/can_node.c ****     {
 355:../Dave/Generated/CAN_NODE/can_node.c ****       /* CAN transmit pin configuration */
 356:../Dave/Generated/CAN_NODE/can_node.c ****       XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
 1757              	 .loc 3 356 0
 1758 0106 FB68     	 ldr r3,[r7,#12]
 1759 0108 1968     	 ldr r1,[r3]
 1760 010a FB68     	 ldr r3,[r7,#12]
 1761 010c 1A79     	 ldrb r2,[r3,#4]
 1762 010e 7B68     	 ldr r3,[r7,#4]
 1763 0110 D3F89430 	 ldr r3,[r3,#148]
 1764 0114 0846     	 mov r0,r1
 1765 0116 1146     	 mov r1,r2
 1766 0118 1A46     	 mov r2,r3
 1767 011a FFF7FEFF 	 bl XMC_GPIO_Init
 1768 011e 01E0     	 b .L53
 1769              	.L47:
 357:../Dave/Generated/CAN_NODE/can_node.c ****     }
 358:../Dave/Generated/CAN_NODE/can_node.c ****   }
 359:../Dave/Generated/CAN_NODE/can_node.c ****   else
 360:../Dave/Generated/CAN_NODE/can_node.c ****   {
 361:../Dave/Generated/CAN_NODE/can_node.c ****     status = CAN_NODE_STATUS_FAILURE;
 1770              	 .loc 3 361 0
 1771 0120 0123     	 movs r3,#1
 1772 0122 FB75     	 strb r3,[r7,#23]
 1773              	.L53:
 362:../Dave/Generated/CAN_NODE/can_node.c ****   }
 363:../Dave/Generated/CAN_NODE/can_node.c **** 
 364:../Dave/Generated/CAN_NODE/can_node.c ****   return (status);
 1774              	 .loc 3 364 0
 1775 0124 FB7D     	 ldrb r3,[r7,#23]
 365:../Dave/Generated/CAN_NODE/can_node.c **** }
 1776              	 .loc 3 365 0
 1777 0126 1846     	 mov r0,r3
 1778 0128 1837     	 adds r7,r7,#24
 1779              	.LCFI167:
 1780              	 .cfi_def_cfa_offset 8
 1781 012a BD46     	 mov sp,r7
 1782              	.LCFI168:
 1783              	 .cfi_def_cfa_register 13
 1784              	 
 1785 012c 80BD     	 pop {r7,pc}
 1786              	 .cfi_endproc
 1787              	.LFE236:
 1789 012e 00BF     	 .text
 1790              	.Letext0:
 1791              	 .file 4 "e:\\davev4\\dave-4.1.4\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1792              	 .file 5 "e:\\davev4\\dave-4.1.4\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1793              	 .file 6 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest/Libraries/CMSIS/Infineon/XMC4700_series/Include/XMC4700.h"
 1794              	 .file 7 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest\\Libraries\\XMCLib\\inc/xmc_gpio.h"
 1795              	 .file 8 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest\\Libraries\\XMCLib\\inc/xmc4_gpio.h"
 1796              	 .file 9 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest\\Dave\\Generated/DAVE_Common.h"
 1797              	 .file 10 "../Dave/Generated/CAN_NODE/../GLOBAL_CAN/global_can.h"
 1798              	 .file 11 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest/Libraries/CMSIS/Include/core_cm4.h"
 1799              	 .file 12 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest/Libraries/CMSIS/Infineon/XMC4700_series/Include/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 can_node.c
    {standard input}:20     .text.XMC_CAN_NODE_SetEventNodePointer:00000000 $t
    {standard input}:24     .text.XMC_CAN_NODE_SetEventNodePointer:00000000 XMC_CAN_NODE_SetEventNodePointer
    {standard input}:77     .text.XMC_CAN_NODE_SetReceiveInput:00000000 $t
    {standard input}:81     .text.XMC_CAN_NODE_SetReceiveInput:00000000 XMC_CAN_NODE_SetReceiveInput
    {standard input}:129    .text.XMC_CAN_NODE_EnableLoopBack:00000000 $t
    {standard input}:133    .text.XMC_CAN_NODE_EnableLoopBack:00000000 XMC_CAN_NODE_EnableLoopBack
    {standard input}:174    .text.XMC_CAN_NODE_GetStatus:00000000 $t
    {standard input}:178    .text.XMC_CAN_NODE_GetStatus:00000000 XMC_CAN_NODE_GetStatus
    {standard input}:217    .text.XMC_CAN_NODE_ClearStatus:00000000 $t
    {standard input}:221    .text.XMC_CAN_NODE_ClearStatus:00000000 XMC_CAN_NODE_ClearStatus
    {standard input}:266    .text.XMC_CAN_NODE_EnableConfigurationChange:00000000 $t
    {standard input}:270    .text.XMC_CAN_NODE_EnableConfigurationChange:00000000 XMC_CAN_NODE_EnableConfigurationChange
    {standard input}:311    .text.XMC_CAN_NODE_DisableConfigurationChange:00000000 $t
    {standard input}:315    .text.XMC_CAN_NODE_DisableConfigurationChange:00000000 XMC_CAN_NODE_DisableConfigurationChange
    {standard input}:356    .text.XMC_CAN_NODE_SetInitBit:00000000 $t
    {standard input}:360    .text.XMC_CAN_NODE_SetInitBit:00000000 XMC_CAN_NODE_SetInitBit
    {standard input}:401    .text.XMC_CAN_NODE_ResetInitBit:00000000 $t
    {standard input}:405    .text.XMC_CAN_NODE_ResetInitBit:00000000 XMC_CAN_NODE_ResetInitBit
    {standard input}:446    .text.XMC_CAN_MO_SetEventNodePointer:00000000 $t
    {standard input}:450    .text.XMC_CAN_MO_SetEventNodePointer:00000000 XMC_CAN_MO_SetEventNodePointer
    {standard input}:506    .text.XMC_CAN_MO_GetStatus:00000000 $t
    {standard input}:510    .text.XMC_CAN_MO_GetStatus:00000000 XMC_CAN_MO_GetStatus
    {standard input}:550    .text.XMC_CAN_MO_ResetStatus:00000000 $t
    {standard input}:554    .text.XMC_CAN_MO_ResetStatus:00000000 XMC_CAN_MO_ResetStatus
    {standard input}:595    .text.XMC_CAN_MO_EnableEvent:00000000 $t
    {standard input}:599    .text.XMC_CAN_MO_EnableEvent:00000000 XMC_CAN_MO_EnableEvent
    {standard input}:644    .text.CAN_NODE_MO_EnableTxEvent:00000000 $t
    {standard input}:648    .text.CAN_NODE_MO_EnableTxEvent:00000000 CAN_NODE_MO_EnableTxEvent
    {standard input}:686    .text.CAN_NODE_MO_EnableRxEvent:00000000 $t
    {standard input}:690    .text.CAN_NODE_MO_EnableRxEvent:00000000 CAN_NODE_MO_EnableRxEvent
    {standard input}:727    .text.CAN_NODE_SetNodeEvents:00000000 $t
    {standard input}:731    .text.CAN_NODE_SetNodeEvents:00000000 CAN_NODE_SetNodeEvents
    {standard input}:821    .text.CAN_NODE_SetNodePointer:00000000 CAN_NODE_SetNodePointer
    {standard input}:817    .text.CAN_NODE_SetNodePointer:00000000 $t
    {standard input}:900    .text.CAN_NODE_GetAppVersion:00000000 $t
    {standard input}:905    .text.CAN_NODE_GetAppVersion:00000000 CAN_NODE_GetAppVersion
    {standard input}:965    .text.CAN_NODE_EnableEvent:00000000 $t
    {standard input}:970    .text.CAN_NODE_EnableEvent:00000000 CAN_NODE_EnableEvent
    {standard input}:1010   .text.CAN_NODE_ConfigBaudrate:00000000 $t
    {standard input}:1015   .text.CAN_NODE_ConfigBaudrate:00000000 CAN_NODE_ConfigBaudrate
    {standard input}:1088   .text.CAN_NODE_MO_Init:00000000 $t
    {standard input}:1093   .text.CAN_NODE_MO_Init:00000000 CAN_NODE_MO_Init
    {standard input}:1165   .text.CAN_NODE_MO_Transmit:00000000 $t
    {standard input}:1170   .text.CAN_NODE_MO_Transmit:00000000 CAN_NODE_MO_Transmit
    {standard input}:1214   .text.CAN_NODE_MO_Receive:00000000 $t
    {standard input}:1219   .text.CAN_NODE_MO_Receive:00000000 CAN_NODE_MO_Receive
    {standard input}:1263   .text.CAN_NODE_MO_ReceiveData:00000000 $t
    {standard input}:1268   .text.CAN_NODE_MO_ReceiveData:00000000 CAN_NODE_MO_ReceiveData
    {standard input}:1312   .text.CAN_NODE_MO_UpdateData:00000000 $t
    {standard input}:1317   .text.CAN_NODE_MO_UpdateData:00000000 CAN_NODE_MO_UpdateData
    {standard input}:1377   .text.CAN_NODE_MO_GetStatus:00000000 $t
    {standard input}:1382   .text.CAN_NODE_MO_GetStatus:00000000 CAN_NODE_MO_GetStatus
    {standard input}:1422   .text.CAN_NODE_MO_ClearStatus:00000000 $t
    {standard input}:1427   .text.CAN_NODE_MO_ClearStatus:00000000 CAN_NODE_MO_ClearStatus
    {standard input}:1465   .text.CAN_NODE_DisableEvent:00000000 $t
    {standard input}:1470   .text.CAN_NODE_DisableEvent:00000000 CAN_NODE_DisableEvent
    {standard input}:1510   .text.CAN_NODE_GetStatus:00000000 $t
    {standard input}:1515   .text.CAN_NODE_GetStatus:00000000 CAN_NODE_GetStatus
    {standard input}:1557   .text.CAN_NODE_ClearStatus:00000000 $t
    {standard input}:1562   .text.CAN_NODE_ClearStatus:00000000 CAN_NODE_ClearStatus
    {standard input}:1604   .text.CAN_NODE_Init:00000000 $t
    {standard input}:1609   .text.CAN_NODE_Init:00000000 CAN_NODE_Init
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_CAN_NODE_EnableEvent
XMC_CAN_NODE_NominalBitTimeConfigure
XMC_CAN_MO_Config
XMC_CAN_MO_Transmit
XMC_CAN_MO_Receive
XMC_CAN_MO_ReceiveData
XMC_CAN_MO_UpdateData
XMC_CAN_NODE_DisableEvent
GLOBAL_CAN_Init
XMC_GPIO_Init
XMC_CAN_AllocateMOtoNodeList
