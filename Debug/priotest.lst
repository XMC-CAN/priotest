
priotest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002300  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00018000  2**0
                  ALLOC
  2 .data         000003fc  1ffe8800  0c002300  00010800  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000005  1ffe8bfc  0c0026fc  00010bfc  2**2
                  ALLOC
  4 .no_init      00000014  2003ffc0  2003ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 00000818  00000000  00000000  00010c00  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b0b2  00000000  00000000  00011418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c6c  00000000  00000000  0001c4ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003bc3  00000000  00000000  0001e136  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f78  00000000  00000000  00021cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000534c  00000000  00000000  00023c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004032  00000000  00000000  00028fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006a8  00000000  00000000  0002cff2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 0000049e  00000000  00000000  0002d69a  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 39 1f 00 08 99 02 00 08     ........9.......
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c002300 	.word	0x0c002300
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	000003fc 	.word	0x000003fc
 8000254:	0c002300 	.word	0x0c002300
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe8bfc 	.word	0x1ffe8bfc
 8000264:	00000005 	.word	0x00000005
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	08001f99 	.word	0x08001f99
    blx  r0
#endif

    ldr  r0, =main
 8000294:	08001ea1 	.word	0x08001ea1

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x1c>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  SystemCoreSetup();
 80002ae:	f001 fa63 	bl	8001778 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002b2:	f001 facb 	bl	800184c <SystemCoreClockSetup>
}
 80002b6:	bd98      	pop	{r3, r4, r7, pc}
 80002b8:	2003ffc4 	.word	0x2003ffc4

080002bc <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d03e      	beq.n	800034c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d002      	beq.n	80002e0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002da:	4b2b      	ldr	r3, [pc, #172]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e002      	b.n	80002e6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002e0:	f001 faaa 	bl	8001838 <OSCHP_GetFrequency>
 80002e4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002e6:	4b27      	ldr	r3, [pc, #156]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0304 	and.w	r3, r3, #4
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d020      	beq.n	8000334 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002f2:	4b24      	ldr	r3, [pc, #144]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80002fa:	0e1b      	lsrs	r3, r3, #24
 80002fc:	3301      	adds	r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000300:	4b20      	ldr	r3, [pc, #128]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000308:	0a1b      	lsrs	r3, r3, #8
 800030a:	3301      	adds	r3, #1
 800030c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800030e:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000316:	0c1b      	lsrs	r3, r3, #16
 8000318:	3301      	adds	r3, #1
 800031a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	fbb2 f3f3 	udiv	r3, r2, r3
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e00d      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800033c:	3301      	adds	r3, #1
 800033e:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	fbb2 f3f3 	udiv	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e001      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 800034e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	3301      	adds	r3, #1
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	3301      	adds	r3, #1
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000370:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000372:	4a06      	ldr	r2, [pc, #24]	; (800038c <SystemCoreClockUpdate+0xd0>)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	50004600 	.word	0x50004600
 8000384:	50004710 	.word	0x50004710
 8000388:	016e3600 	.word	0x016e3600
 800038c:	2003ffc0 	.word	0x2003ffc0

08000390 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	460b      	mov	r3, r1
 800039a:	607a      	str	r2, [r7, #4]
 800039c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800039e:	7afb      	ldrb	r3, [r7, #11]
 80003a0:	089b      	lsrs	r3, r3, #2
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	4618      	mov	r0, r3
 80003a6:	7afb      	ldrb	r3, [r7, #11]
 80003a8:	089b      	lsrs	r3, r3, #2
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	461a      	mov	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	3204      	adds	r2, #4
 80003b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	f003 0303 	and.w	r3, r3, #3
 80003bc:	00db      	lsls	r3, r3, #3
 80003be:	4619      	mov	r1, r3
 80003c0:	23f8      	movs	r3, #248	; 0xf8
 80003c2:	408b      	lsls	r3, r1
 80003c4:	43db      	mvns	r3, r3
 80003c6:	ea02 0103 	and.w	r1, r2, r3
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	1d02      	adds	r2, r0, #4
 80003ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003d6:	7afb      	ldrb	r3, [r7, #11]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	4619      	mov	r1, r3
 80003dc:	2303      	movs	r3, #3
 80003de:	408b      	lsls	r3, r1
 80003e0:	43db      	mvns	r3, r3
 80003e2:	401a      	ands	r2, r3
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	4a37      	ldr	r2, [pc, #220]	; (80004c8 <XMC_GPIO_Init+0x138>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d003      	beq.n	80003f8 <XMC_GPIO_Init+0x68>
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	4a36      	ldr	r2, [pc, #216]	; (80004cc <XMC_GPIO_Init+0x13c>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d10a      	bne.n	800040e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80003fc:	7afb      	ldrb	r3, [r7, #11]
 80003fe:	2101      	movs	r1, #1
 8000400:	fa01 f303 	lsl.w	r3, r1, r3
 8000404:	43db      	mvns	r3, r3
 8000406:	401a      	ands	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	661a      	str	r2, [r3, #96]	; 0x60
 800040c:	e03c      	b.n	8000488 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	685a      	ldr	r2, [r3, #4]
 8000412:	7afb      	ldrb	r3, [r7, #11]
 8000414:	409a      	lsls	r2, r3
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800041a:	7afb      	ldrb	r3, [r7, #11]
 800041c:	08db      	lsrs	r3, r3, #3
 800041e:	b2db      	uxtb	r3, r3
 8000420:	4618      	mov	r0, r3
 8000422:	7afb      	ldrb	r3, [r7, #11]
 8000424:	08db      	lsrs	r3, r3, #3
 8000426:	b2db      	uxtb	r3, r3
 8000428:	461a      	mov	r2, r3
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	3210      	adds	r2, #16
 800042e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000432:	7afb      	ldrb	r3, [r7, #11]
 8000434:	f003 0307 	and.w	r3, r3, #7
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	4619      	mov	r1, r3
 800043c:	2307      	movs	r3, #7
 800043e:	408b      	lsls	r3, r1
 8000440:	43db      	mvns	r3, r3
 8000442:	ea02 0103 	and.w	r1, r2, r3
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	f100 0210 	add.w	r2, r0, #16
 800044c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000450:	7afb      	ldrb	r3, [r7, #11]
 8000452:	08db      	lsrs	r3, r3, #3
 8000454:	b2db      	uxtb	r3, r3
 8000456:	4618      	mov	r0, r3
 8000458:	7afb      	ldrb	r3, [r7, #11]
 800045a:	08db      	lsrs	r3, r3, #3
 800045c:	b2db      	uxtb	r3, r3
 800045e:	461a      	mov	r2, r3
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	3210      	adds	r2, #16
 8000464:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	7a1b      	ldrb	r3, [r3, #8]
 800046c:	4619      	mov	r1, r3
 800046e:	7afb      	ldrb	r3, [r7, #11]
 8000470:	f003 0307 	and.w	r3, r3, #7
 8000474:	009b      	lsls	r3, r3, #2
 8000476:	fa01 f303 	lsl.w	r3, r1, r3
 800047a:	ea42 0103 	orr.w	r1, r2, r3
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	f100 0210 	add.w	r2, r0, #16
 8000484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000488:	7afb      	ldrb	r3, [r7, #11]
 800048a:	089b      	lsrs	r3, r3, #2
 800048c:	b2db      	uxtb	r3, r3
 800048e:	4618      	mov	r0, r3
 8000490:	7afb      	ldrb	r3, [r7, #11]
 8000492:	089b      	lsrs	r3, r3, #2
 8000494:	b2db      	uxtb	r3, r3
 8000496:	461a      	mov	r2, r3
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	3204      	adds	r2, #4
 800049c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	4619      	mov	r1, r3
 80004a6:	7afb      	ldrb	r3, [r7, #11]
 80004a8:	f003 0303 	and.w	r3, r3, #3
 80004ac:	00db      	lsls	r3, r3, #3
 80004ae:	fa01 f303 	lsl.w	r3, r1, r3
 80004b2:	ea42 0103 	orr.w	r1, r2, r3
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	1d02      	adds	r2, r0, #4
 80004ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004be:	3714      	adds	r7, #20
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr
 80004c8:	48028e00 	.word	0x48028e00
 80004cc:	48028f00 	.word	0x48028f00

080004d0 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80004d4:	4b03      	ldr	r3, [pc, #12]	; (80004e4 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80004d6:	681b      	ldr	r3, [r3, #0]
}
 80004d8:	4618      	mov	r0, r3
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	2003ffc0 	.word	0x2003ffc0

080004e8 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 80004f0:	f7ff fee4 	bl	80002bc <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80004f4:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <XMC_SCU_lDelay+0x3c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <XMC_SCU_lDelay+0x40>)
 80004fa:	fba2 2303 	umull	r2, r3, r2, r3
 80004fe:	0c9a      	lsrs	r2, r3, #18
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	fb02 f303 	mul.w	r3, r2, r3
 8000506:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000508:	2300      	movs	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	e003      	b.n	8000516 <XMC_SCU_lDelay+0x2e>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800050e:	bf00      	nop
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	3301      	adds	r3, #1
 8000514:	60fb      	str	r3, [r7, #12]
 8000516:	68fa      	ldr	r2, [r7, #12]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	429a      	cmp	r2, r3
 800051c:	d3f7      	bcc.n	800050e <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	2003ffc0 	.word	0x2003ffc0
 8000528:	431bde83 	.word	0x431bde83

0800052c <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 800052c:	b5b0      	push	{r4, r5, r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af02      	add	r7, sp, #8
 8000532:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000534:	2000      	movs	r0, #0
 8000536:	f000 f88d 	bl	8000654 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800053a:	f000 fa35 	bl	80009a8 <XMC_SCU_HIB_EnableHibernateDomain>
  if (config->enable_osculp == true)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	79db      	ldrb	r3, [r3, #7]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <XMC_SCU_CLOCK_Init+0x1e>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8000546:	f000 fa59 	bl	80009fc <XMC_SCU_CLOCK_EnableLowPowerOscillator>
  }
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	7a5b      	ldrb	r3, [r3, #9]
 800054e:	4618      	mov	r0, r3
 8000550:	f000 f8fa 	bl	8000748 <XMC_SCU_HIB_SetStandbyClockSource>

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	7a1b      	ldrb	r3, [r3, #8]
 8000558:	4618      	mov	r0, r3
 800055a:	f000 f9ff 	bl	800095c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	7c1b      	ldrb	r3, [r3, #16]
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f90e 	bl	8000784 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	7c5b      	ldrb	r3, [r3, #17]
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f931 	bl	80007d4 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	7c9b      	ldrb	r3, [r3, #18]
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f918 	bl	80007ac <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	7cdb      	ldrb	r3, [r3, #19]
 8000580:	4618      	mov	r0, r3
 8000582:	f000 f93b 	bl	80007fc <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	799b      	ldrb	r3, [r3, #6]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <XMC_SCU_CLOCK_Init+0x66>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 800058e:	f000 fa6f 	bl	8000a70 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	78db      	ldrb	r3, [r3, #3]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d102      	bne.n	80005a0 <XMC_SCU_CLOCK_Init+0x74>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 800059a:	f000 faa9 	bl	8000af0 <XMC_SCU_CLOCK_DisableSystemPll>
 800059e:	e014      	b.n	80005ca <XMC_SCU_CLOCK_Init+0x9e>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 80005a0:	f000 fa96 	bl	8000ad0 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	8899      	ldrh	r1, [r3, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80005b0:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80005b6:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	4608      	mov	r0, r1
 80005c0:	4611      	mov	r1, r2
 80005c2:	462a      	mov	r2, r5
 80005c4:	4623      	mov	r3, r4
 80005c6:	f000 faa3 	bl	8000b10 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005d2:	d103      	bne.n	80005dc <XMC_SCU_CLOCK_Init+0xb0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 80005d4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80005d8:	f000 f83c 	bl	8000654 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 80005dc:	f7ff fe6e 	bl	80002bc <SystemCoreClockUpdate>
}
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bdb0      	pop	{r4, r5, r7, pc}
 80005e6:	bf00      	nop

080005e8 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) |= (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	0f1b      	lsrs	r3, r3, #28
 80005f4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80005fc:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) |= (uint32_t)mask;
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	4613      	mov	r3, r2
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	4413      	add	r3, r2
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4a09      	ldr	r2, [pc, #36]	; (8000630 <XMC_SCU_RESET_DeassertPeripheralReset+0x48>)
 800060a:	441a      	add	r2, r3
 800060c:	68f9      	ldr	r1, [r7, #12]
 800060e:	460b      	mov	r3, r1
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	440b      	add	r3, r1
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	4619      	mov	r1, r3
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <XMC_SCU_RESET_DeassertPeripheralReset+0x48>)
 800061a:	440b      	add	r3, r1
 800061c:	6819      	ldr	r1, [r3, #0]
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	430b      	orrs	r3, r1
 8000622:	6013      	str	r3, [r2, #0]
}
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	50004414 	.word	0x50004414

08000634 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000638:	f7ff ff4a 	bl	80004d0 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 800063c:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 800063e:	4b04      	ldr	r3, [pc, #16]	; (8000650 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8000640:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 800064a:	4618      	mov	r0, r3
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	50004600 	.word	0x50004600

08000654 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 800065c:	4906      	ldr	r1, [pc, #24]	; (8000678 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000660:	68db      	ldr	r3, [r3, #12]
 8000662:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4313      	orrs	r3, r2
 800066a:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	50004600 	.word	0x50004600

0800067c <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000684:	4906      	ldr	r1, [pc, #24]	; (80006a0 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4313      	orrs	r3, r2
 8000692:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	50004600 	.word	0x50004600

080006a4 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80006ac:	4906      	ldr	r1, [pc, #24]	; (80006c8 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80006b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	50004600 	.word	0x50004600

080006cc <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 80006d6:	88fb      	ldrh	r3, [r7, #6]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d108      	bne.n	80006ee <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80006dc:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006e6:	f023 0301 	bic.w	r3, r3, #1
 80006ea:	60d3      	str	r3, [r2, #12]
 80006ec:	e007      	b.n	80006fe <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80006ee:	4a06      	ldr	r2, [pc, #24]	; (8000708 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	60d3      	str	r3, [r2, #12]
  }
}
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	50004710 	.word	0x50004710

0800070c <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000716:	bf00      	nop
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 800071a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800071e:	f003 0308 	and.w	r3, r3, #8
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1f8      	bne.n	8000718 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000726:	4907      	ldr	r1, [pc, #28]	; (8000744 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000730:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000732:	4313      	orrs	r3, r2
 8000734:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	50004000 	.word	0x50004000
 8000744:	50004300 	.word	0x50004300

08000748 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000752:	bf00      	nop
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 8000756:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800075a:	f003 0308 	and.w	r3, r3, #8
 800075e:	2b00      	cmp	r3, #0
 8000760:	d1f8      	bne.n	8000754 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000762:	4907      	ldr	r1, [pc, #28]	; (8000780 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 800076c:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800076e:	4313      	orrs	r3, r2
 8000770:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	50004000 	.word	0x50004000
 8000780:	50004300 	.word	0x50004300

08000784 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800078c:	4906      	ldr	r1, [pc, #24]	; (80007a8 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000790:	68db      	ldr	r3, [r3, #12]
 8000792:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800079a:	4313      	orrs	r3, r2
 800079c:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	50004600 	.word	0x50004600

080007ac <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80007b4:	4906      	ldr	r1, [pc, #24]	; (80007d0 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80007b8:	6a1b      	ldr	r3, [r3, #32]
 80007ba:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80007c2:	4313      	orrs	r3, r2
 80007c4:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	50004600 	.word	0x50004600

080007d4 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80007dc:	4906      	ldr	r1, [pc, #24]	; (80007f8 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80007e0:	691b      	ldr	r3, [r3, #16]
 80007e2:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80007ea:	4313      	orrs	r3, r2
 80007ec:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	50004600 	.word	0x50004600

080007fc <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000804:	4906      	ldr	r1, [pc, #24]	; (8000820 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000812:	4313      	orrs	r3, r2
 8000814:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	50004600 	.word	0x50004600

08000824 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800082c:	4906      	ldr	r1, [pc, #24]	; (8000848 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800083a:	4313      	orrs	r3, r2
 800083c:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	50004600 	.word	0x50004600

0800084c <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000854:	4906      	ldr	r1, [pc, #24]	; (8000870 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000862:	4313      	orrs	r3, r2
 8000864:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	50004600 	.word	0x50004600

08000874 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800087c:	4906      	ldr	r1, [pc, #24]	; (8000898 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000882:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800088a:	4313      	orrs	r3, r2
 800088c:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	50004600 	.word	0x50004600

0800089c <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) |= (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	0f1b      	lsrs	r3, r3, #28
 80008a8:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80008b0:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) |= (uint32_t)mask;
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	4613      	mov	r3, r2
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	4413      	add	r3, r2
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	4a09      	ldr	r2, [pc, #36]	; (80008e4 <XMC_SCU_CLOCK_UngatePeripheralClock+0x48>)
 80008be:	441a      	add	r2, r3
 80008c0:	68f9      	ldr	r1, [r7, #12]
 80008c2:	460b      	mov	r3, r1
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	440b      	add	r3, r1
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	4619      	mov	r1, r3
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <XMC_SCU_CLOCK_UngatePeripheralClock+0x48>)
 80008ce:	440b      	add	r3, r1
 80008d0:	6819      	ldr	r1, [r3, #0]
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	430b      	orrs	r3, r1
 80008d6:	6013      	str	r3, [r2, #0]
}
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	50004648 	.word	0x50004648

080008e8 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80008f2:	4a19      	ldr	r2, [pc, #100]	; (8000958 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80008f6:	695b      	ldr	r3, [r3, #20]
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80008fe:	4a16      	ldr	r2, [pc, #88]	; (8000958 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	f043 0310 	orr.w	r3, r3, #16
 8000908:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800090a:	4913      	ldr	r1, [pc, #76]	; (8000958 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	3b01      	subs	r3, #1
 8000910:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	3b01      	subs	r3, #1
 8000916:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000918:	4313      	orrs	r3, r2
 800091a:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 800091c:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000926:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000928:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	f023 0310 	bic.w	r3, r3, #16
 8000932:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000934:	4a08      	ldr	r2, [pc, #32]	; (8000958 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800093e:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000940:	bf00      	nop
 8000942:	4b05      	ldr	r3, [pc, #20]	; (8000958 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000944:	691b      	ldr	r3, [r3, #16]
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	2b00      	cmp	r3, #0
 800094c:	d0f9      	beq.n	8000942 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	50004710 	.word	0x50004710

0800095c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000966:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000970:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d10e      	bne.n	8000996 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000978:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000982:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000984:	2064      	movs	r0, #100	; 0x64
 8000986:	f7ff fdaf 	bl	80004e8 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 800098a:	4a06      	ldr	r2, [pc, #24]	; (80009a4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000994:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000996:	2064      	movs	r0, #100	; 0x64
 8000998:	f7ff fda6 	bl	80004e8 <XMC_SCU_lDelay>
}
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	50004710 	.word	0x50004710

080009a8 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <XMC_SCU_HIB_EnableHibernateDomain+0x4c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d10c      	bne.n	80009d2 <XMC_SCU_HIB_EnableHibernateDomain+0x2a>
  {
    SCU_POWER->PWRSET |= (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80009b8:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <XMC_SCU_HIB_EnableHibernateDomain+0x4c>)
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <XMC_SCU_HIB_EnableHibernateDomain+0x4c>)
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	6053      	str	r3, [r2, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009c4:	bf00      	nop
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <XMC_SCU_HIB_EnableHibernateDomain+0x4c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d0f9      	beq.n	80009c6 <XMC_SCU_HIB_EnableHibernateDomain+0x1e>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d008      	beq.n	80009f0 <XMC_SCU_HIB_EnableHibernateDomain+0x48>
  {
    SCU_RESET->RSTCLR |= (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 80009de:	4a06      	ldr	r2, [pc, #24]	; (80009f8 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009e8:	6093      	str	r3, [r2, #8]
    XMC_SCU_lDelay(150U);
 80009ea:	2096      	movs	r0, #150	; 0x96
 80009ec:	f7ff fd7c 	bl	80004e8 <XMC_SCU_lDelay>
  }
}
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	50004200 	.word	0x50004200
 80009f8:	50004400 	.word	0x50004400

080009fc <XMC_SCU_CLOCK_EnableLowPowerOscillator>:
  }
}

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8000a00:	bf00      	nop
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a04:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d1f8      	bne.n	8000a02 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until the update of OSCULCTRL register in hibernate domain is completed */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000a10:	4a16      	ldr	r2, [pc, #88]	; (8000a6c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000a12:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a1a:	61d3      	str	r3, [r2, #28]

  /* Check if the input clock is OK using OSCULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000a1c:	bf00      	nop
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a20:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a24:	f003 0308 	and.w	r3, r3, #8
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d1f8      	bne.n	8000a1e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000a2c:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	f043 0308 	orr.w	r3, r3, #8
 8000a36:	60d3      	str	r3, [r2, #12]

  /* wait till clock is stable */
  do
  {
    while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 8000a38:	bf00      	nop
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a3c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a40:	f003 0302 	and.w	r3, r3, #2
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d1f8      	bne.n	8000a3a <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    SCU_HIBERNATE->HDCLR |= (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000a48:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f043 0308 	orr.w	r3, r3, #8
 8000a52:	6053      	str	r3, [r2, #4]

    XMC_SCU_lDelay(50U);
 8000a54:	2032      	movs	r0, #50	; 0x32
 8000a56:	f7ff fd47 	bl	80004e8 <XMC_SCU_lDelay>

  } while ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) != 0UL);
 8000a5a:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d1e8      	bne.n	8000a38 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3c>

}
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	50004000 	.word	0x50004000
 8000a6c:	50004300 	.word	0x50004300

08000a70 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  }
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000a70:	b5b0      	push	{r4, r5, r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000a74:	4a13      	ldr	r2, [pc, #76]	; (8000ac4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a7e:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000a80:	4d11      	ldr	r5, [pc, #68]	; (8000ac8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x58>)
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x58>)
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000a8a:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000a8e:	f000 fed3 	bl	8001838 <OSCHP_GetFrequency>
 8000a92:	4602      	mov	r2, r0
 8000a94:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x5c>)
 8000a96:	fba3 2302 	umull	r2, r3, r3, r2
 8000a9a:	0d1b      	lsrs	r3, r3, #20
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000aa0:	4323      	orrs	r3, r4
 8000aa2:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000aa4:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000aae:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) != XMC_SCU_PLL_PLLSTAT_OSC_USABLE)
 8000ab0:	bf00      	nop
 8000ab2:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000aba:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000abe:	d1f8      	bne.n	8000ab2 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x42>
  {
      /* wait till OSC_HP output frequency is usable */
  }
}
 8000ac0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	50004710 	.word	0x50004710
 8000ac8:	50004700 	.word	0x50004700
 8000acc:	6b5fca6b 	.word	0x6b5fca6b

08000ad0 <XMC_SCU_CLOCK_EnableSystemPll>:
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000ad4:	4a05      	ldr	r2, [pc, #20]	; (8000aec <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000ad6:	4b05      	ldr	r3, [pc, #20]	; (8000aec <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ade:	f023 0302 	bic.w	r3, r3, #2
 8000ae2:	6053      	str	r3, [r2, #4]
}
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	50004710 	.word	0x50004710

08000af0 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000af4:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000afe:	f043 0302 	orr.w	r3, r3, #2
 8000b02:	6053      	str	r3, [r2, #4]
}
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	50004710 	.word	0x50004710

08000b10 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60ba      	str	r2, [r7, #8]
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	81fb      	strh	r3, [r7, #14]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	737b      	strb	r3, [r7, #13]

  float vco_frequency;
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000b22:	89fb      	ldrh	r3, [r7, #14]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fdd1 	bl	80006cc <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000b2a:	7b7b      	ldrb	r3, [r7, #13]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	f040 8099 	bne.w	8000c64 <XMC_SCU_CLOCK_StartSystemPll+0x154>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000b32:	89fb      	ldrh	r3, [r7, #14]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d108      	bne.n	8000b4a <XMC_SCU_CLOCK_StartSystemPll+0x3a>
    {
      vco_frequency = (float)OSCHP_GetFrequency();
 8000b38:	f000 fe7e 	bl	8001838 <OSCHP_GetFrequency>
 8000b3c:	ee07 0a90 	vmov	s15, r0
 8000b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b44:	edc7 7a05 	vstr	s15, [r7, #20]
 8000b48:	e001      	b.n	8000b4e <XMC_SCU_CLOCK_StartSystemPll+0x3e>
    }
    else
    {
      vco_frequency = (float)OFI_FREQUENCY;
 8000b4a:	4b53      	ldr	r3, [pc, #332]	; (8000c98 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000b4c:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = (float)((vco_frequency * (float)ndiv) / (float)pdiv);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	ee07 3a90 	vmov	s15, r3
 8000b54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b58:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	ee07 3a90 	vmov	s15, r3
 8000b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b6a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8000b6e:	edc7 7a05 	vstr	s15, [r7, #20]
    kdiv_temp = (uint32_t)((uint32_t)vco_frequency / OFI_FREQUENCY);
 8000b72:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b7a:	ee17 2a90 	vmov	r2, s15
 8000b7e:	4b47      	ldr	r3, [pc, #284]	; (8000c9c <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000b80:	fba3 2302 	umull	r2, r3, r3, r2
 8000b84:	0d5b      	lsrs	r3, r3, #21
 8000b86:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000b88:	4a45      	ldr	r2, [pc, #276]	; (8000ca0 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000b8a:	4b45      	ldr	r3, [pc, #276]	; (8000ca0 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000b94:	4a42      	ldr	r2, [pc, #264]	; (8000ca0 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000b96:	4b42      	ldr	r3, [pc, #264]	; (8000ca0 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f043 0310 	orr.w	r3, r3, #16
 8000b9e:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000ba0:	493f      	ldr	r1, [pc, #252]	; (8000ca0 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000ba2:	4b3f      	ldr	r3, [pc, #252]	; (8000ca0 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000ba4:	689a      	ldr	r2, [r3, #8]
 8000ba6:	4b3f      	ldr	r3, [pc, #252]	; (8000ca4 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000ba8:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	3a01      	subs	r2, #1
 8000bae:	0212      	lsls	r2, r2, #8
 8000bb0:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000bb8:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000bc4:	4a36      	ldr	r2, [pc, #216]	; (8000ca0 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000bc6:	4b36      	ldr	r3, [pc, #216]	; (8000ca0 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bce:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000bd0:	4a33      	ldr	r2, [pc, #204]	; (8000ca0 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000bd2:	4b33      	ldr	r3, [pc, #204]	; (8000ca0 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f023 0310 	bic.w	r3, r3, #16
 8000bda:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000bdc:	4a30      	ldr	r2, [pc, #192]	; (8000ca0 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000bde:	4b30      	ldr	r3, [pc, #192]	; (8000ca0 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000be6:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000be8:	bf00      	nop
 8000bea:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d0f9      	beq.n	8000bea <XMC_SCU_CLOCK_StartSystemPll+0xda>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000bf6:	4a2a      	ldr	r2, [pc, #168]	; (8000ca0 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000bf8:	4b29      	ldr	r3, [pc, #164]	; (8000ca0 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f023 0301 	bic.w	r3, r3, #1
 8000c00:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000c02:	bf00      	nop
 8000c04:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1f9      	bne.n	8000c04 <XMC_SCU_CLOCK_StartSystemPll+0xf4>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (uint32_t)((uint32_t)vco_frequency / 60000000UL);
 8000c10:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c18:	ee17 3a90 	vmov	r3, s15
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	4a22      	ldr	r2, [pc, #136]	; (8000ca8 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000c20:	fba2 2303 	umull	r2, r3, r2, r3
 8000c24:	0a9b      	lsrs	r3, r3, #10
 8000c26:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c28:	6a3a      	ldr	r2, [r7, #32]
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d202      	bcs.n	8000c36 <XMC_SCU_CLOCK_StartSystemPll+0x126>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c30:	6938      	ldr	r0, [r7, #16]
 8000c32:	f000 f83d 	bl	8000cb0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (uint32_t)((uint32_t)vco_frequency / 90000000UL);
 8000c36:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c3e:	ee17 3a90 	vmov	r3, s15
 8000c42:	09db      	lsrs	r3, r3, #7
 8000c44:	4a19      	ldr	r2, [pc, #100]	; (8000cac <XMC_SCU_CLOCK_StartSystemPll+0x19c>)
 8000c46:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4a:	0adb      	lsrs	r3, r3, #11
 8000c4c:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c4e:	6a3a      	ldr	r2, [r7, #32]
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d202      	bcs.n	8000c5c <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c56:	6938      	ldr	r0, [r7, #16]
 8000c58:	f000 f82a 	bl	8000cb0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000c5c:	6a38      	ldr	r0, [r7, #32]
 8000c5e:	f000 f827 	bl	8000cb0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000c62:	e015      	b.n	8000c90 <XMC_SCU_CLOCK_StartSystemPll+0x180>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000c64:	490e      	ldr	r1, [pc, #56]	; (8000ca0 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000c6e:	6a3b      	ldr	r3, [r7, #32]
 8000c70:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000c72:	4313      	orrs	r3, r2
 8000c74:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000c82:	bf00      	nop
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d0f9      	beq.n	8000c84 <XMC_SCU_CLOCK_StartSystemPll+0x174>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	4bb71b00 	.word	0x4bb71b00
 8000c9c:	165e9f81 	.word	0x165e9f81
 8000ca0:	50004710 	.word	0x50004710
 8000ca4:	f08080ff 	.word	0xf08080ff
 8000ca8:	011e54c7 	.word	0x011e54c7
 8000cac:	00bee32f 	.word	0x00bee32f

08000cb0 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000cb8:	4907      	ldr	r1, [pc, #28]	; (8000cd8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000ccc:	2032      	movs	r0, #50	; 0x32
 8000cce:	f7ff fc0b 	bl	80004e8 <XMC_SCU_lDelay>
}
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	50004710 	.word	0x50004710

08000cdc <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
		                                  const uint8_t arg1,
		                                  const uint8_t arg2)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4603      	mov	r3, r0
 8000cec:	70fb      	strb	r3, [r7, #3]
 8000cee:	460b      	mov	r3, r1
 8000cf0:	70bb      	strb	r3, [r7, #2]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	707b      	strb	r3, [r7, #1]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000cf6:	78fa      	ldrb	r2, [r7, #3]
		        (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8000cf8:	78bb      	ldrb	r3, [r7, #2]
 8000cfa:	041b      	lsls	r3, r3, #16
 8000cfc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
		                                  const uint8_t arg1,
		                                  const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000d00:	431a      	orrs	r2, r3
		        (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
		        (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 8000d02:	787b      	ldrb	r3, [r7, #1]
 8000d04:	061b      	lsls	r3, r3, #24
                                          const XMC_CAN_PANCMD_t pancmd,
		                                  const uint8_t arg1,
		                                  const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
		        (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8000d06:	431a      	orrs	r2, r3
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
		                                  const uint8_t arg1,
		                                  const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		        (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
		        (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	601a      	str	r2, [r3, #0]
}
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop

08000d38 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	601a      	str	r2, [r3, #0]
}
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4293      	cmp	r3, r2
 8000d68:	bf38      	it	cc
 8000d6a:	4613      	movcc	r3, r2
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4293      	cmp	r3, r2
 8000d88:	bf28      	it	cs
 8000d8a:	4613      	movcs	r3, r2
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <XMC_CAN_NODE_NominalBitTimeConfigure>:
 *******************************************************************************/

/* Baudrate Configuration */
void XMC_CAN_NODE_NominalBitTimeConfigure (XMC_CAN_NODE_t *const can_node,
                                           const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_bit_time)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b090      	sub	sp, #64	; 0x40
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  uint32_t temp_brp = 12U ;
 8000da2:	230c      	movs	r3, #12
 8000da4:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t temp_tseg1 = 12U;
 8000da6:	230c      	movs	r3, #12
 8000da8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t best_brp = 0U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t best_tseg1 = 1U;
 8000dae:	2301      	movs	r3, #1
 8000db0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t best_tseg2 = 0U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
  uint32_t best_tbaud = 0U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t best_error = 10000U;
 8000dba:	f242 7310 	movw	r3, #10000	; 0x2710
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   * Tsjw = (SJW + 1)*Tq
   * TSeg1 >= Tsjw + Tprop
   * TSeg2 >= Tsjw
   */
  /* search for best baudrate */
  for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000dc4:	e067      	b.n	8000e96 <XMC_CAN_NODE_NominalBitTimeConfigure+0xfe>
  {

    uint32_t f_quanta = (uint32_t)((can_bit_time->can_frequency * 10U) / temp_brp);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dda:	613b      	str	r3, [r7, #16]
    uint32_t temp_tbaud = (uint32_t)(f_quanta / (can_bit_time->baudrate));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t temp_baudrate;
    uint32_t error;

  if((temp_tbaud % 10U) > 5U)
 8000de8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000dea:	4b5b      	ldr	r3, [pc, #364]	; (8000f58 <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c0>)
 8000dec:	fba3 2301 	umull	r2, r3, r3, r1
 8000df0:	08da      	lsrs	r2, r3, #3
 8000df2:	4613      	mov	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4413      	add	r3, r2
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	1aca      	subs	r2, r1, r3
 8000dfc:	2a05      	cmp	r2, #5
 8000dfe:	d909      	bls.n	8000e14 <XMC_CAN_NODE_NominalBitTimeConfigure+0x7c>
  {
	temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 8000e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e02:	4a55      	ldr	r2, [pc, #340]	; (8000f58 <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c0>)
 8000e04:	fba2 2303 	umull	r2, r3, r2, r3
 8000e08:	08db      	lsrs	r3, r3, #3
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
	temp_tbaud++;
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0e:	3301      	adds	r3, #1
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
 8000e12:	e005      	b.n	8000e20 <XMC_CAN_NODE_NominalBitTimeConfigure+0x88>
  }
  else
  {
	temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 8000e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e16:	4a50      	ldr	r2, [pc, #320]	; (8000f58 <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c0>)
 8000e18:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1c:	08db      	lsrs	r3, r3, #3
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if(temp_tbaud > 0U)
 8000e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d00a      	beq.n	8000e3c <XMC_CAN_NODE_NominalBitTimeConfigure+0xa4>
  {
    temp_baudrate = (uint32_t) (f_quanta / (temp_tbaud * 10U));
 8000e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e28:	4613      	mov	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	461a      	mov	r2, r3
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e38:	623b      	str	r3, [r7, #32]
 8000e3a:	e007      	b.n	8000e4c <XMC_CAN_NODE_NominalBitTimeConfigure+0xb4>
  }
  else
  {
    temp_baudrate = f_quanta / 10U;
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4a46      	ldr	r2, [pc, #280]	; (8000f58 <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c0>)
 8000e40:	fba2 2303 	umull	r2, r3, r2, r3
 8000e44:	08db      	lsrs	r3, r3, #3
 8000e46:	623b      	str	r3, [r7, #32]
	temp_tbaud = 1;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if(temp_baudrate >= can_bit_time->baudrate)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	6a3b      	ldr	r3, [r7, #32]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d805      	bhi.n	8000e62 <XMC_CAN_NODE_NominalBitTimeConfigure+0xca>
  {
	error = temp_baudrate - can_bit_time->baudrate;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	6a3a      	ldr	r2, [r7, #32]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	61fb      	str	r3, [r7, #28]
 8000e60:	e004      	b.n	8000e6c <XMC_CAN_NODE_NominalBitTimeConfigure+0xd4>
  }
  else
  {
	error = can_bit_time->baudrate - temp_baudrate;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	6a3b      	ldr	r3, [r7, #32]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	61fb      	str	r3, [r7, #28]
  }

  if ((temp_tbaud <= 20U) && (best_error > error))
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6e:	2b14      	cmp	r3, #20
 8000e70:	d80e      	bhi.n	8000e90 <XMC_CAN_NODE_NominalBitTimeConfigure+0xf8>
 8000e72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d90a      	bls.n	8000e90 <XMC_CAN_NODE_NominalBitTimeConfigure+0xf8>
  {
    best_brp = temp_brp;
 8000e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e7c:	637b      	str	r3, [r7, #52]	; 0x34
    best_tbaud = temp_tbaud;
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    best_error = (error);
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28

    if (error < 1000U)
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e8c:	d200      	bcs.n	8000e90 <XMC_CAN_NODE_NominalBitTimeConfigure+0xf8>
    {
      break;
 8000e8e:	e005      	b.n	8000e9c <XMC_CAN_NODE_NominalBitTimeConfigure+0x104>
   * Tsjw = (SJW + 1)*Tq
   * TSeg1 >= Tsjw + Tprop
   * TSeg2 >= Tsjw
   */
  /* search for best baudrate */
  for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
 8000e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e92:	3301      	adds	r3, #1
 8000e94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e98:	2b40      	cmp	r3, #64	; 0x40
 8000e9a:	d994      	bls.n	8000dc6 <XMC_CAN_NODE_NominalBitTimeConfigure+0x2e>
      break;
    }
   }
  }
  /* search for best sample point */
  best_error = 10000U;
 8000e9c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
 8000ea2:	2340      	movs	r3, #64	; 0x40
 8000ea4:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ea6:	e02e      	b.n	8000f06 <XMC_CAN_NODE_NominalBitTimeConfigure+0x16e>
  {
    uint32_t tempSamplePoint = ((temp_tseg1 + 1U) * 10000U) / best_tbaud;
 8000ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eaa:	3301      	adds	r3, #1
 8000eac:	f242 7210 	movw	r2, #10000	; 0x2710
 8000eb0:	fb02 f203 	mul.w	r2, r2, r3
 8000eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eba:	60fb      	str	r3, [r7, #12]
	uint32_t error;
	if (tempSamplePoint >= can_bit_time->sample_point)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	891b      	ldrh	r3, [r3, #8]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d806      	bhi.n	8000ed6 <XMC_CAN_NODE_NominalBitTimeConfigure+0x13e>
	{
      error = tempSamplePoint  - can_bit_time->sample_point;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	891b      	ldrh	r3, [r3, #8]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	1a9b      	subs	r3, r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
 8000ed4:	e005      	b.n	8000ee2 <XMC_CAN_NODE_NominalBitTimeConfigure+0x14a>
	}
	else
	{
	  error = can_bit_time->sample_point  - tempSamplePoint;
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	891b      	ldrh	r3, [r3, #8]
 8000eda:	461a      	mov	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	61bb      	str	r3, [r7, #24]
	}
    if (best_error > error)
 8000ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d903      	bls.n	8000ef2 <XMC_CAN_NODE_NominalBitTimeConfigure+0x15a>
    {
      best_tseg1 = temp_tseg1;
 8000eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eec:	633b      	str	r3, [r7, #48]	; 0x30
      best_error = error;
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if (tempSamplePoint < (can_bit_time->sample_point))
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	891b      	ldrh	r3, [r3, #8]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d900      	bls.n	8000f00 <XMC_CAN_NODE_NominalBitTimeConfigure+0x168>
    {
      break;
 8000efe:	e005      	b.n	8000f0c <XMC_CAN_NODE_NominalBitTimeConfigure+0x174>
   }
  }
  /* search for best sample point */
  best_error = 10000U;

  for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
 8000f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f02:	3b01      	subs	r3, #1
 8000f04:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d8cd      	bhi.n	8000ea8 <XMC_CAN_NODE_NominalBitTimeConfigure+0x110>
    {
      break;
    }
  }

  best_tseg2 = best_tbaud - best_tseg1 - 1U;
 8000f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	3b01      	subs	r3, #1
 8000f14:	617b      	str	r3, [r7, #20]

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff fefe 	bl	8000d18 <XMC_CAN_NODE_EnableConfigurationChange>
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	031b      	lsls	r3, r3, #12
 8000f22:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	895b      	ldrh	r3, [r3, #10]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	019b      	lsls	r3, r3, #6
 8000f2e:	b2db      	uxtb	r3, r3

  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8000f30:	431a      	orrs	r2, r3
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
 8000f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f34:	3b01      	subs	r3, #1
 8000f36:	021b      	lsls	r3, r3, #8
 8000f38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
 8000f3c:	431a      	orrs	r2, r3
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
                   (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk)|
 8000f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f40:	3b01      	subs	r3, #1
 8000f42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f46:	431a      	orrs	r2, r3

  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	611a      	str	r2, [r3, #16]
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
                   (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk)|
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff fef3 	bl	8000d38 <XMC_CAN_NODE_DisableConfigurationChange>
}
 8000f52:	3740      	adds	r7, #64	; 0x40
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	cccccccd 	.word	0xcccccccd

08000f5c <XMC_CAN_AllocateMOtoNodeList>:
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	70fb      	strb	r3, [r7, #3]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	70bb      	strb	r3, [r7, #2]
  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
 8000f6c:	78fb      	ldrb	r3, [r7, #3]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	78ba      	ldrb	r2, [r7, #2]
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	2102      	movs	r1, #2
 8000f78:	f7ff feb0 	bl	8000cdc <XMC_CAN_PanelControl>
  /* wait until panel as done the command */
  while (obj->PANCTR & CAN_PANCTR_BUSY_Msk)
 8000f7c:	bf00      	nop
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8000f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1f8      	bne.n	8000f7e <XMC_CAN_AllocateMOtoNodeList+0x22>
  {
    /*Do nothing*/
  };
}
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop

08000f94 <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 8000f9c:	480a      	ldr	r0, [pc, #40]	; (8000fc8 <XMC_CAN_Enable+0x34>)
 8000f9e:	f7ff fc7d 	bl	800089c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 8000fa2:	4809      	ldr	r0, [pc, #36]	; (8000fc8 <XMC_CAN_Enable+0x34>)
 8000fa4:	f7ff fb20 	bl	80005e8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f023 0201 	bic.w	r2, r3, #1
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
 8000fb4:	bf00      	nop
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f9      	bne.n	8000fb6 <XMC_CAN_Enable+0x22>
  {
    /*Do nothing*/
  };
}
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	10000010 	.word	0x10000010

08000fcc <XMC_CAN_GetBaudrateClockFrequency>:
#if defined(MULTICAN_PLUS)
uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t frequency;

  switch(XMC_CAN_GetBaudrateClockSource(obj))
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 f89f 	bl	8001118 <XMC_CAN_GetBaudrateClockSource>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d002      	beq.n	8000fe6 <XMC_CAN_GetBaudrateClockFrequency+0x1a>
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d004      	beq.n	8000fee <XMC_CAN_GetBaudrateClockFrequency+0x22>
 8000fe4:	e007      	b.n	8000ff6 <XMC_CAN_GetBaudrateClockFrequency+0x2a>
  {
#if UC_FAMILY == XMC4
    case XMC_CAN_CANCLKSRC_FPERI:
         frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8000fe6:	f7ff fb25 	bl	8000634 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8000fea:	60f8      	str	r0, [r7, #12]
         break;
 8000fec:	e006      	b.n	8000ffc <XMC_CAN_GetBaudrateClockFrequency+0x30>
    case XMC_CAN_CANCLKSRC_MCLK:
           frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
           break;
#endif
    case XMC_CAN_CANCLKSRC_FOHP:
         frequency = OSCHP_GetFrequency();
 8000fee:	f000 fc23 	bl	8001838 <OSCHP_GetFrequency>
 8000ff2:	60f8      	str	r0, [r7, #12]
         break;
 8000ff4:	e002      	b.n	8000ffc <XMC_CAN_GetBaudrateClockFrequency+0x30>

    default:
         frequency = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
         break;
 8000ffa:	bf00      	nop
  }

  return frequency;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop

08001008 <XMC_CAN_Init>:

void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08e      	sub	sp, #56	; 0x38
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	460b      	mov	r3, r1
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	72fb      	strb	r3, [r7, #11]
  uint32_t peripheral_frequency_khz;
  XMC_CAN_DM_t can_divider_mode;

  uint32_t peripheral_frequency;
  /*Enabling the module*/
  XMC_CAN_Enable(obj);
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f7ff ffbc 	bl	8000f94 <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 800101c:	7afb      	ldrb	r3, [r7, #11]
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	4619      	mov	r1, r3
 8001022:	f000 f863 	bl	80010ec <XMC_CAN_SetBaudrateClockSource>

  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 8001026:	68f8      	ldr	r0, [r7, #12]
 8001028:	f7ff ffd0 	bl	8000fcc <XMC_CAN_GetBaudrateClockFrequency>
 800102c:	6378      	str	r0, [r7, #52]	; 0x34

  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 800102e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	fbb2 f3f3 	udiv	r3, r2, r3
 8001036:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800103a:	2000      	movs	r0, #0
 800103c:	4619      	mov	r1, r3
 800103e:	f7ff fe8b 	bl	8000d58 <max>
 8001042:	4603      	mov	r3, r0
 8001044:	4618      	mov	r0, r3
 8001046:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800104a:	f7ff fe95 	bl	8000d78 <min>
 800104e:	6338      	str	r0, [r7, #48]	; 0x30
  freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 8001050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001052:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001056:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001058:	fbb2 f3f3 	udiv	r3, r2, r3
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Fractional divider mode */
  can_frequency_khz = (uint32_t) (can_frequency >> 6);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	099b      	lsrs	r3, r3, #6
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
  peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 8001064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001066:	099b      	lsrs	r3, r3, #6
 8001068:	627b      	str	r3, [r7, #36]	; 0x24

  step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 800106a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800106c:	029a      	lsls	r2, r3, #10
 800106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001070:	fbb2 f3f3 	udiv	r3, r2, r3
 8001074:	4618      	mov	r0, r3
 8001076:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800107a:	f7ff fe7d 	bl	8000d78 <min>
 800107e:	6238      	str	r0, [r7, #32]
  freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	6a3a      	ldr	r2, [r7, #32]
 8001084:	fb02 f303 	mul.w	r3, r2, r3
 8001088:	0a9b      	lsrs	r3, r3, #10
 800108a:	61fb      	str	r3, [r7, #28]
  freq_f = freq_f << 6;
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	019b      	lsls	r3, r3, #6
 8001090:	61fb      	str	r3, [r7, #28]

  normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001096:	1ad2      	subs	r2, r2, r3
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	1acb      	subs	r3, r1, r3
 800109e:	429a      	cmp	r2, r3
 80010a0:	bf94      	ite	ls
 80010a2:	2301      	movls	r3, #1
 80010a4:	2300      	movhi	r3, #0
 80010a6:	76fb      	strb	r3, [r7, #27]

  step   = (normal_divider != 0U) ? step_n : step_f;
 80010a8:	7efb      	ldrb	r3, [r7, #27]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <XMC_CAN_Init+0xaa>
 80010ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b0:	e000      	b.n	80010b4 <XMC_CAN_Init+0xac>
 80010b2:	6a3b      	ldr	r3, [r7, #32]
 80010b4:	617b      	str	r3, [r7, #20]
  can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 80010b6:	7efb      	ldrb	r3, [r7, #27]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <XMC_CAN_Init+0xb8>
 80010bc:	2301      	movs	r3, #1
 80010be:	e000      	b.n	80010c2 <XMC_CAN_Init+0xba>
 80010c0:	2302      	movs	r3, #2
 80010c2:	74fb      	strb	r3, [r7, #19]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80010cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	60d3      	str	r3, [r2, #12]
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	7cfb      	ldrb	r3, [r7, #19]
 80010da:	0399      	lsls	r1, r3, #14
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	430b      	orrs	r3, r1
 80010e0:	431a      	orrs	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	60da      	str	r2, [r3, #12]

}
 80010e6:	3738      	adds	r7, #56	; 0x38
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <XMC_CAN_SetBaudrateClockSource>:

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	70fb      	strb	r3, [r7, #3]
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80010fe:	f023 020f 	bic.w	r2, r3, #15
 8001102:	78fb      	ldrb	r3, [r7, #3]
 8001104:	431a      	orrs	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
}
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop

08001118 <XMC_CAN_GetBaudrateClockSource>:

XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8001126:	b2db      	uxtb	r3, r3
 8001128:	f003 030f 	and.w	r3, r3, #15
 800112c:	b2db      	uxtb	r3, r3
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t reg;
  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f103 4338 	add.w	r3, r3, #3087007744	; 0xb8000000
 800114c:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 8001150:	095b      	lsrs	r3, r3, #5
 8001152:	60fb      	str	r3, [r7, #12]
  can_mo->can_mo_ptr->MOIPR = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	0952      	lsrs	r2, r2, #5
 800115c:	0351      	lsls	r1, r2, #13
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	f002 021f 	and.w	r2, r2, #31
 8001164:	0212      	lsls	r2, r2, #8
 8001166:	430a      	orrs	r2, r1
 8001168:	609a      	str	r2, [r3, #8]

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	79db      	ldrb	r3, [r3, #7]
 800116e:	f003 0320 	and.w	r3, r3, #32
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d007      	beq.n	8001188 <XMC_CAN_MO_Config+0x4c>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	79db      	ldrb	r3, [r3, #7]
 800117c:	f003 0320 	and.w	r3, r3, #32
 8001180:	b2db      	uxtb	r3, r3
  uint32_t reg;
  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
  can_mo->can_mo_ptr->MOIPR = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 8001182:	2b00      	cmp	r3, #0
 8001184:	d100      	bne.n	8001188 <XMC_CAN_MO_Config+0x4c>
 8001186:	e05c      	b.n	8001242 <XMC_CAN_MO_Config+0x106>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	7e1b      	ldrb	r3, [r3, #24]
  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
  can_mo->can_mo_ptr->MOIPR = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 800118c:	2b00      	cmp	r3, #0
 800118e:	d004      	beq.n	800119a <XMC_CAN_MO_Config+0x5e>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
  can_mo->can_mo_ptr->MOIPR = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 8001194:	2b01      	cmp	r3, #1
 8001196:	d000      	beq.n	800119a <XMC_CAN_MO_Config+0x5e>
 8001198:	e053      	b.n	8001242 <XMC_CAN_MO_Config+0x106>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2220      	movs	r2, #32
 80011a0:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	79db      	ldrb	r3, [r3, #7]
 80011a6:	f003 0320 	and.w	r3, r3, #32
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d128      	bne.n	8001202 <XMC_CAN_MO_Config+0xc6>
    {
      reg = can_mo->mo_ar;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	60bb      	str	r3, [r7, #8]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80011bc:	60bb      	str	r3, [r7, #8]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80011c6:	049b      	lsls	r3, r3, #18
 80011c8:	461a      	mov	r2, r3
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]
      can_mo->can_mo_ptr->MOAR = reg;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	68ba      	ldr	r2, [r7, #8]
 80011d6:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	60bb      	str	r3, [r7, #8]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80011e4:	60bb      	str	r3, [r7, #8]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80011ee:	049b      	lsls	r3, r3, #18
 80011f0:	461a      	mov	r2, r3
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	60bb      	str	r3, [r7, #8]
      can_mo->can_mo_ptr->MOAMR = reg;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	e009      	b.n	8001216 <XMC_CAN_MO_Config+0xda>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	6852      	ldr	r2, [r2, #4]
 800120a:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	6892      	ldr	r2, [r2, #8]
 8001214:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	7e1b      	ldrb	r3, [r3, #24]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d108      	bne.n	8001230 <XMC_CAN_MO_Config+0xf4>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 f814 	bl	800124c <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800122c:	61da      	str	r2, [r3, #28]
 800122e:	e004      	b.n	800123a <XMC_CAN_MO_Config+0xfe>
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001238:	61da      	str	r2, [r3, #28]
    }

    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a02      	ldr	r2, [pc, #8]	; (8001248 <XMC_CAN_MO_Config+0x10c>)
 8001240:	61da      	str	r2, [r3, #28]
                                 CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
  }
}
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	06a00040 	.word	0x06a00040

0800124c <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 8001254:	2303      	movs	r3, #3
 8001256:	73fb      	strb	r3, [r7, #15]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	7e1b      	ldrb	r3, [r3, #24]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d122      	bne.n	80012a6 <XMC_CAN_MO_UpdateData+0x5a>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2220      	movs	r2, #32
 8001266:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	6812      	ldr	r2, [r2, #0]
 8001270:	6812      	ldr	r2, [r2, #0]
 8001272:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	7b12      	ldrb	r2, [r2, #12]
 800127a:	0612      	lsls	r2, r2, #24
 800127c:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 8001280:	430a      	orrs	r2, r1
 8001282:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	6912      	ldr	r2, [r2, #16]
 800128c:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	6952      	ldr	r2, [r2, #20]
 8001296:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOCTR_RESRTSEL_Msk);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a06      	ldr	r2, [pc, #24]	; (80012b8 <XMC_CAN_MO_UpdateData+0x6c>)
 800129e:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 80012a0:	2300      	movs	r3, #0
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	e001      	b.n	80012aa <XMC_CAN_MO_UpdateData+0x5e>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 80012a6:	2303      	movs	r3, #3
 80012a8:	73fb      	strb	r3, [r7, #15]
  }
  return error;
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	00280040 	.word	0x00280040

080012bc <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	75fb      	strb	r3, [r7, #23]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	f003 0320 	and.w	r3, r3, #32
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	69db      	ldr	r3, [r3, #28]
 80012dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e0:	0a1b      	lsrs	r3, r3, #8
 80012e2:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <XMC_CAN_MO_Transmit+0x34>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
 80012ea:	2304      	movs	r3, #4
 80012ec:	75fb      	strb	r3, [r7, #23]
 80012ee:	e00c      	b.n	800130a <XMC_CAN_MO_Transmit+0x4e>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d102      	bne.n	80012fc <XMC_CAN_MO_Transmit+0x40>
  {
    error = XMC_CAN_STATUS_BUSY;
 80012f6:	2302      	movs	r3, #2
 80012f8:	75fb      	strb	r3, [r7, #23]
 80012fa:	e006      	b.n	800130a <XMC_CAN_MO_Transmit+0x4e>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001304:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 8001306:	2300      	movs	r3, #0
 8001308:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 800130a:	7dfb      	ldrb	r3, [r7, #23]
}
 800130c:	4618      	mov	r0, r3
 800130e:	371c      	adds	r7, #28
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <XMC_CAN_MO_Receive>:
}


/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
{
 8001318:	b480      	push	{r7}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	75fb      	strb	r3, [r7, #23]
  uint8_t rx_pnd = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	75bb      	strb	r3, [r7, #22]
  uint8_t new_data = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	757b      	strb	r3, [r7, #21]
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001336:	0adb      	lsrs	r3, r3, #11
 8001338:	613b      	str	r3, [r7, #16]
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	69db      	ldr	r3, [r3, #28]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	089b      	lsrs	r3, r3, #2
 8001346:	60fb      	str	r3, [r7, #12]
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d002      	beq.n	8001354 <XMC_CAN_MO_Receive+0x3c>
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 800134e:	2303      	movs	r3, #3
 8001350:	75fb      	strb	r3, [r7, #23]
 8001352:	e0a7      	b.n	80014a4 <XMC_CAN_MO_Receive+0x18c>
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d102      	bne.n	8001360 <XMC_CAN_MO_Receive+0x48>
  {
    error = XMC_CAN_STATUS_BUSY;
 800135a:	2302      	movs	r3, #2
 800135c:	75fb      	strb	r3, [r7, #23]
 800135e:	e0a1      	b.n	80014a4 <XMC_CAN_MO_Receive+0x18c>
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2208      	movs	r2, #8
 8001366:	61da      	str	r2, [r3, #28]
      if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001372:	0f5b      	lsrs	r3, r3, #29
 8001374:	2b00      	cmp	r3, #0
 8001376:	d140      	bne.n	80013fa <XMC_CAN_MO_Receive+0xe2>
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	79d3      	ldrb	r3, [r2, #7]
 800137c:	f36f 1345 	bfc	r3, #5, #1
 8001380:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	699a      	ldr	r2, [r3, #24]
 8001388:	4b4a      	ldr	r3, [pc, #296]	; (80014b4 <XMC_CAN_MO_Receive+0x19c>)
 800138a:	4013      	ands	r3, r2
 800138c:	0c9b      	lsrs	r3, r3, #18
 800138e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6853      	ldr	r3, [r2, #4]
 8001396:	f361 031c 	bfi	r3, r1, #0, #29
 800139a:	6053      	str	r3, [r2, #4]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013a6:	0f5b      	lsrs	r3, r3, #29
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	b2d9      	uxtb	r1, r3
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	7ad3      	ldrb	r3, [r2, #11]
 80013b4:	f361 1345 	bfi	r3, r1, #5, #1
 80013b8:	72d3      	strb	r3, [r2, #11]
        if(can_mo->can_ide_mask == 1U)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7adb      	ldrb	r3, [r3, #11]
 80013be:	f003 0320 	and.w	r3, r3, #32
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00d      	beq.n	80013e4 <XMC_CAN_MO_Receive+0xcc>
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	4b39      	ldr	r3, [pc, #228]	; (80014b4 <XMC_CAN_MO_Receive+0x19c>)
 80013d0:	4013      	ands	r3, r2
 80013d2:	0c9b      	lsrs	r3, r3, #18
 80013d4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	6893      	ldr	r3, [r2, #8]
 80013dc:	f361 031c 	bfi	r3, r1, #0, #29
 80013e0:	6093      	str	r3, [r2, #8]
 80013e2:	e032      	b.n	800144a <XMC_CAN_MO_Receive+0x132>
        }
        else
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6893      	ldr	r3, [r2, #8]
 80013f2:	f361 031c 	bfi	r3, r1, #0, #29
 80013f6:	6093      	str	r3, [r2, #8]
 80013f8:	e027      	b.n	800144a <XMC_CAN_MO_Receive+0x132>
        }
      }
      else
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	79d3      	ldrb	r3, [r2, #7]
 80013fe:	f043 0320 	orr.w	r3, r3, #32
 8001402:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6853      	ldr	r3, [r2, #4]
 8001412:	f361 031c 	bfi	r3, r1, #0, #29
 8001416:	6053      	str	r3, [r2, #4]
        can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	6893      	ldr	r3, [r2, #8]
 8001426:	f361 031c 	bfi	r3, r1, #0, #29
 800142a:	6093      	str	r3, [r2, #8]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001436:	0f5b      	lsrs	r3, r3, #29
 8001438:	b2db      	uxtb	r3, r3
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	b2d9      	uxtb	r1, r3
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	7ad3      	ldrb	r3, [r2, #11]
 8001444:	f361 1345 	bfi	r3, r1, #5, #1
 8001448:	72d3      	strb	r3, [r2, #11]
      }
      can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC_Msk) >> CAN_MO_MOFCR_DLC_Pos);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001454:	0e1b      	lsrs	r3, r3, #24
 8001456:	b2da      	uxtb	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	731a      	strb	r2, [r3, #12]

      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	691a      	ldr	r2, [r3, #16]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	611a      	str	r2, [r3, #16]
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	695a      	ldr	r2, [r3, #20]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	615a      	str	r2, [r3, #20]

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	75bb      	strb	r3, [r7, #22]
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	08db      	lsrs	r3, r3, #3
 800148a:	757b      	strb	r3, [r7, #21]
    } while ((rx_pnd != 0U) && (new_data != 0U));
 800148c:	7dbb      	ldrb	r3, [r7, #22]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <XMC_CAN_MO_Receive+0x182>
 8001492:	7d7b      	ldrb	r3, [r7, #21]
 8001494:	2b00      	cmp	r3, #0
 8001496:	f47f af63 	bne.w	8001360 <XMC_CAN_MO_Receive+0x48>

    can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	761a      	strb	r2, [r3, #24]
    error = XMC_CAN_STATUS_SUCCESS;
 80014a0:	2300      	movs	r3, #0
 80014a2:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 80014a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	371c      	adds	r7, #28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	1ffc0000 	.word	0x1ffc0000

080014b8 <XMC_CAN_NODE_EnableEvent>:

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  if(event != XMC_CAN_NODE_EVENT_CFCIE)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014c8:	d006      	beq.n	80014d8 <XMC_CAN_NODE_EnableEvent+0x20>
  {
    can_node->NCR |= (uint32_t)event;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	431a      	orrs	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	e005      	b.n	80014e4 <XMC_CAN_NODE_EnableEvent+0x2c>
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699a      	ldr	r2, [r3, #24]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	619a      	str	r2, [r3, #24]
  }
}
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop

080014f0 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	70fb      	strb	r3, [r7, #3]
 80014fc:	4613      	mov	r3, r2
 80014fe:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4619      	mov	r1, r3
 800150a:	2303      	movs	r3, #3
 800150c:	408b      	lsls	r3, r1
 800150e:	43db      	mvns	r3, r3
 8001510:	401a      	ands	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800151a:	78bb      	ldrb	r3, [r7, #2]
 800151c:	78f9      	ldrb	r1, [r7, #3]
 800151e:	0049      	lsls	r1, r1, #1
 8001520:	408b      	lsls	r3, r1
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop

08001534 <_init>:
  }
}

/* Init */
void _init(void)
{}
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001544:	4b04      	ldr	r3, [pc, #16]	; (8001558 <NVIC_GetPriorityGrouping+0x18>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800154c:	0a1b      	lsrs	r3, r3, #8
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001566:	4908      	ldr	r1, [pc, #32]	; (8001588 <NVIC_EnableIRQ+0x2c>)
 8001568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156c:	095b      	lsrs	r3, r3, #5
 800156e:	79fa      	ldrb	r2, [r7, #7]
 8001570:	f002 021f 	and.w	r2, r2, #31
 8001574:	2001      	movs	r0, #1
 8001576:	fa00 f202 	lsl.w	r2, r0, r2
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000e100 	.word	0xe000e100

0800158c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	2b00      	cmp	r3, #0
 800159e:	da0b      	bge.n	80015b8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a0:	490d      	ldr	r1, [pc, #52]	; (80015d8 <NVIC_SetPriority+0x4c>)
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	f003 030f 	and.w	r3, r3, #15
 80015a8:	3b04      	subs	r3, #4
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	0092      	lsls	r2, r2, #2
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	440b      	add	r3, r1
 80015b4:	761a      	strb	r2, [r3, #24]
 80015b6:	e009      	b.n	80015cc <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b8:	4908      	ldr	r1, [pc, #32]	; (80015dc <NVIC_SetPriority+0x50>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	0092      	lsls	r2, r2, #2
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	440b      	add	r3, r1
 80015c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00
 80015dc:	e000e100 	.word	0xe000e100

080015e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	; 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f1c3 0307 	rsb	r3, r3, #7
 80015fa:	2b06      	cmp	r3, #6
 80015fc:	bf28      	it	cs
 80015fe:	2306      	movcs	r3, #6
 8001600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3306      	adds	r3, #6
 8001606:	2b06      	cmp	r3, #6
 8001608:	d902      	bls.n	8001610 <NVIC_EncodePriority+0x30>
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3b01      	subs	r3, #1
 800160e:	e000      	b.n	8001612 <NVIC_EncodePriority+0x32>
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	2201      	movs	r2, #1
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	1e5a      	subs	r2, r3, #1
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	401a      	ands	r2, r3
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	2101      	movs	r1, #1
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	1e59      	subs	r1, r3, #1
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001634:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001636:	4618      	mov	r0, r3
 8001638:	3724      	adds	r7, #36	; 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop

08001644 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	b25b      	sxtb	r3, r3
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff82 	bl	800155c <NVIC_EnableIRQ>
}
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop

08001660 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	781c      	ldrb	r4, [r3, #0]
 800166c:	f7ff ff68 	bl	8001540 <NVIC_GetPriorityGrouping>
 8001670:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8001676:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 800167c:	4608      	mov	r0, r1
 800167e:	4611      	mov	r1, r2
 8001680:	461a      	mov	r2, r3
 8001682:	f7ff ffad 	bl	80015e0 <NVIC_EncodePriority>
 8001686:	4602      	mov	r2, r0
 8001688:	b263      	sxtb	r3, r4
 800168a:	4618      	mov	r0, r3
 800168c:	4611      	mov	r1, r2
 800168e:	f7ff ff7d 	bl	800158c <NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	78db      	ldrb	r3, [r3, #3]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff ffd2 	bl	8001644 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd90      	pop	{r4, r7, pc}
 80016aa:	bf00      	nop

080016ac <GLOBAL_CAN_Init>:
  return (version);
}

/*  Function to initialize the CAN Peripheral module clock.  */
GLOBAL_CAN_STATUS_t GLOBAL_CAN_Init(GLOBAL_CAN_t *handle)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GLOBAL_CAN_STATUS_t status = GLOBAL_CAN_STATUS_SUCCESS;
 80016b4:	2300      	movs	r3, #0
 80016b6:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("GLOBAL_CAN_Init: handle null", handle != NULL);

  if (handle->init_status != true)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	7a5b      	ldrb	r3, [r3, #9]
 80016bc:	f083 0301 	eor.w	r3, r3, #1
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00f      	beq.n	80016e6 <GLOBAL_CAN_Init+0x3a>
  {
#if defined(MULTICAN_PLUS)
    XMC_CAN_Init(handle->canglobal_ptr, (XMC_CAN_CANCLKSRC_t)handle->can_clock_src, handle->can_frequency);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6859      	ldr	r1, [r3, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	7a1a      	ldrb	r2, [r3, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4608      	mov	r0, r1
 80016d4:	4611      	mov	r1, r2
 80016d6:	461a      	mov	r2, r3
 80016d8:	f7ff fc96 	bl	8001008 <XMC_CAN_Init>
#else
    XMC_CAN_Init(handle->canglobal_ptr, handle->can_frequency);
#endif
    handle->init_status = true;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	725a      	strb	r2, [r3, #9]
    status = GLOBAL_CAN_STATUS_SUCCESS;
 80016e2:	2300      	movs	r3, #0
 80016e4:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 80016e6:	7bfb      	ldrb	r3, [r7, #15]

}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6819      	ldr	r1, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	7c1a      	ldrb	r2, [r3, #16]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3304      	adds	r3, #4
 8001704:	4608      	mov	r0, r1
 8001706:	4611      	mov	r1, r2
 8001708:	461a      	mov	r2, r3
 800170a:	f7fe fe41 	bl	8000390 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6819      	ldr	r1, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	7c1a      	ldrb	r2, [r3, #16]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	7c5b      	ldrb	r3, [r3, #17]
 800171a:	4608      	mov	r0, r1
 800171c:	4611      	mov	r1, r2
 800171e:	461a      	mov	r2, r3
 8001720:	f7ff fee6 	bl	80014f0 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop

08001730 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <NVIC_SetPriorityGrouping+0x44>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800174c:	4013      	ands	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800175c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001760:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001762:	4a04      	ldr	r2, [pc, #16]	; (8001774 <NVIC_SetPriorityGrouping+0x44>)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	60d3      	str	r3, [r2, #12]
}
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 800177e:	2001      	movs	r0, #1
 8001780:	f7ff ffd6 	bl	8001730 <NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001784:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8001786:	4b21      	ldr	r3, [pc, #132]	; (800180c <SystemCoreSetup+0x94>)
 8001788:	4a21      	ldr	r2, [pc, #132]	; (8001810 <SystemCoreSetup+0x98>)
 800178a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800178c:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001790:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8001792:	4a1e      	ldr	r2, [pc, #120]	; (800180c <SystemCoreSetup+0x94>)
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <SystemCoreSetup+0x94>)
 8001796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800179a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800179e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 80017a2:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <SystemCoreSetup+0x9c>)
 80017a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017a8:	3314      	adds	r3, #20
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f023 030f 	bic.w	r3, r3, #15
 80017b4:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f043 0304 	orr.w	r3, r3, #4
 80017bc:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <SystemCoreSetup+0x9c>)
 80017c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017c4:	3314      	adds	r3, #20
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 80017ca:	4a10      	ldr	r2, [pc, #64]	; (800180c <SystemCoreSetup+0x94>)
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <SystemCoreSetup+0x94>)
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	f023 0310 	bic.w	r3, r3, #16
 80017d4:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 80017d6:	4a0d      	ldr	r2, [pc, #52]	; (800180c <SystemCoreSetup+0x94>)
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <SystemCoreSetup+0x94>)
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	f023 0308 	bic.w	r3, r3, #8
 80017e0:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80017e2:	4a0a      	ldr	r2, [pc, #40]	; (800180c <SystemCoreSetup+0x94>)
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <SystemCoreSetup+0x94>)
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ec:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 80017ee:	4a07      	ldr	r2, [pc, #28]	; (800180c <SystemCoreSetup+0x94>)
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <SystemCoreSetup+0x94>)
 80017f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80017f8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 80017fa:	4a04      	ldr	r2, [pc, #16]	; (800180c <SystemCoreSetup+0x94>)
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <SystemCoreSetup+0x94>)
 80017fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001800:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001804:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	e000ed00 	.word	0xe000ed00
 8001810:	08000000 	.word	0x08000000
 8001814:	58001000 	.word	0x58001000

08001818 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8001820:	2300      	movs	r3, #0
 8001822:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]

  return (status);
 800182a:	7bfb      	ldrb	r3, [r7, #15]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 800183c:	4b02      	ldr	r3, [pc, #8]	; (8001848 <OSCHP_GetFrequency+0x10>)
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	00b71b00 	.word	0x00b71b00

0800184c <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 800184c:	b5b0      	push	{r4, r5, r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8001852:	4b12      	ldr	r3, [pc, #72]	; (800189c <SystemCoreClockSetup+0x50>)
 8001854:	1d3c      	adds	r4, r7, #4
 8001856:	461d      	mov	r5, r3
 8001858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800185a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800185c:	682b      	ldr	r3, [r5, #0]
 800185e:	6023      	str	r3, [r4, #0]
    .fccu_clkdiv = 1U,
#endif
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fe62 	bl	800052c <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8001868:	2000      	movs	r0, #0
 800186a:	f7fe ff4f 	bl	800070c <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 800186e:	2000      	movs	r0, #0
 8001870:	f7fe ff04 	bl	800067c <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8001874:	2004      	movs	r0, #4
 8001876:	f7fe ffd5 	bl	8000824 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 800187a:	2001      	movs	r0, #1
 800187c:	2120      	movs	r1, #32
 800187e:	f7ff f833 	bl	80008e8 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8001882:	2000      	movs	r0, #0
 8001884:	f7fe ff0e 	bl	80006a4 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8001888:	2001      	movs	r0, #1
 800188a:	f7fe fff3 	bl	8000874 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 800188e:	2001      	movs	r0, #1
 8001890:	f7fe ffdc 	bl	800084c <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bdb0      	pop	{r4, r5, r7, pc}
 800189a:	bf00      	nop
 800189c:	08002028 	.word	0x08002028

080018a0 <XMC_CAN_NODE_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
		                                      const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
		                                      const uint32_t service_request)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	460b      	mov	r3, r1
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	72fb      	strb	r3, [r7, #11]
  can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_event)) | (service_request << (uint32_t)ptr_event);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	7afb      	ldrb	r3, [r7, #11]
 80018b4:	2107      	movs	r1, #7
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	401a      	ands	r2, r3
 80018be:	7afb      	ldrb	r3, [r7, #11]
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	431a      	orrs	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	609a      	str	r2, [r3, #8]
}
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop

080018d8 <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
		                                          const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	70fb      	strb	r3, [r7, #3]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	f023 0207 	bic.w	r2, r3, #7
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
		                                          const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop

08001904 <XMC_CAN_NODE_EnableLoopBack>:
 *  NPCRx can be written only if bit NCRx.CCE is set.
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	60da      	str	r2, [r3, #12]
}
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop

08001924 <XMC_CAN_NODE_GetStatus>:
 *  XMC_CAN_NODE_ClearStatus()
 *
 */

__STATIC_INLINE uint32_t XMC_CAN_NODE_GetStatus(XMC_CAN_NODE_t *const can_node)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  return ((can_node->NSR));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
}
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	601a      	str	r2, [r3, #0]
}
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop

0800195c <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	601a      	str	r2, [r3, #0]
}
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop

0800197c <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f043 0201 	orr.w	r2, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	601a      	str	r2, [r3, #0]
}
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop

0800199c <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f023 0201 	bic.w	r2, r3, #1
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	601a      	str	r2, [r3, #0]
}
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop

080019bc <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
		                                            const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
		                                            const uint32_t service_request)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	460b      	mov	r3, r1
 80019c6:	607a      	str	r2, [r7, #4]
 80019c8:	72fb      	strb	r3, [r7, #11]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	6891      	ldr	r1, [r2, #8]
 80019d4:	7afa      	ldrb	r2, [r7, #11]
 80019d6:	2007      	movs	r0, #7
 80019d8:	fa00 f202 	lsl.w	r2, r0, r2
 80019dc:	43d2      	mvns	r2, r2
 80019de:	4011      	ands	r1, r2
		                      (service_request << (uint32_t)can_mo_ptr_int);
 80019e0:	7afa      	ldrb	r2, [r7, #11]
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	fa00 f202 	lsl.w	r2, r0, r2

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
		                                            const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
		                                            const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 80019e8:	430a      	orrs	r2, r1
 80019ea:	609a      	str	r2, [r3, #8]
		                      (service_request << (uint32_t)can_mo_ptr_int);
}
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop

080019f8 <XMC_CAN_MO_GetStatus>:
 * None
 *
 */

__STATIC_INLINE uint32_t XMC_CAN_MO_GetStatus(const XMC_CAN_MO_t *const can_mo)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  return ((can_mo->can_mo_ptr->MOSTAT));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	69db      	ldr	r3, [r3, #28]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop

08001a14 <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
		                                    const uint32_t event)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6812      	ldr	r2, [r2, #0]
 8001a26:	6811      	ldr	r1, [r2, #0]
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	601a      	str	r2, [r3, #0]
}
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <CAN_NODE_MO_EnableTxEvent>:
 *     return (1);
 *  }
 *  @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001a4a:	f7ff ffe3 	bl	8001a14 <XMC_CAN_MO_EnableEvent>
}
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <CAN_NODE_MO_EnableRxEvent>:
 *  }
 *  @endcode
 */

__STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001a66:	f7ff ffd5 	bl	8001a14 <XMC_CAN_MO_EnableEvent>
}
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <CAN_NODE_SetNodeEvents>:
  * @param  handle is a pointer pointing to APP data structure.
  * @return None
  */

static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t lnode_event = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);

  CAN_NODE_SetNodePointer(handle); /* set node service pointer */
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f831 	bl	8001ae4 <CAN_NODE_SetNodePointer>

  if (handle->txok_event_enable == true)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <CAN_NODE_SetNodeEvents+0x24>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f043 0302 	orr.w	r3, r3, #2
 8001a92:	60fb      	str	r3, [r7, #12]
  }
  if (handle->lec_event_enable == true)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <CAN_NODE_SetNodeEvents+0x36>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_LEC;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	60fb      	str	r3, [r7, #12]
  }
  if (handle->alert_event_enable == true)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <CAN_NODE_SetNodeEvents+0x48>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f043 0308 	orr.w	r3, r3, #8
 8001ab6:	60fb      	str	r3, [r7, #12]
  }
  XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	4618      	mov	r0, r3
 8001abe:	68f9      	ldr	r1, [r7, #12]
 8001ac0:	f7ff fcfa 	bl	80014b8 <XMC_CAN_NODE_EnableEvent>

  if (handle->framecount_event_enable == true)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d006      	beq.n	8001adc <CAN_NODE_SetNodeEvents+0x6c>
  {
    XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001ad8:	f7ff fcee 	bl	80014b8 <XMC_CAN_NODE_EnableEvent>
  }

}
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop

08001ae4 <CAN_NODE_SetNodePointer>:
  * @brief  Function to set the Node event pointer
  *
  */

static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685a      	ldr	r2, [r3, #4]
                                                        handle->node_sr_ptr->alert_event_sr);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001af6:	781b      	ldrb	r3, [r3, #0]
{

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8001af8:	4610      	mov	r0, r2
 8001afa:	2100      	movs	r1, #0
 8001afc:	461a      	mov	r2, r3
 8001afe:	f7ff fecf 	bl	80018a0 <XMC_CAN_NODE_SetEventNodePointer>
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685a      	ldr	r2, [r3, #4]
                                                         handle->node_sr_ptr->lec_event_sr);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b0c:	785b      	ldrb	r3, [r3, #1]

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 8001b0e:	4610      	mov	r0, r2
 8001b10:	2104      	movs	r1, #4
 8001b12:	461a      	mov	r2, r3
 8001b14:	f7ff fec4 	bl	80018a0 <XMC_CAN_NODE_SetEventNodePointer>
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685a      	ldr	r2, [r3, #4]
                                                               handle->node_sr_ptr->txok_event_sr);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b22:	789b      	ldrb	r3, [r3, #2]
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 8001b24:	4610      	mov	r0, r2
 8001b26:	2108      	movs	r1, #8
 8001b28:	461a      	mov	r2, r3
 8001b2a:	f7ff feb9 	bl	80018a0 <XMC_CAN_NODE_SetEventNodePointer>
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685a      	ldr	r2, [r3, #4]
                                                             handle->node_sr_ptr->framecount_event_sr);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b38:	78db      	ldrb	r3, [r3, #3]
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	210c      	movs	r1, #12
 8001b3e:	461a      	mov	r2, r3
 8001b40:	f7ff feae 	bl	80018a0 <XMC_CAN_NODE_SetEventNodePointer>
                                                             handle->node_sr_ptr->framecount_event_sr);

}
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop

08001b4c <CAN_NODE_MO_Init>:
  XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
}

/*  Function to initialize the CAN MO based on UI configuration. */
void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);

  XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff faef 	bl	800113c <XMC_CAN_MO_Config>

  if (lmo_ptr->tx_event_enable == true)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	79db      	ldrb	r3, [r3, #7]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00b      	beq.n	8001b7e <CAN_NODE_MO_Init+0x32>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_sr);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	795b      	ldrb	r3, [r3, #5]
 8001b6e:	4610      	mov	r0, r2
 8001b70:	2104      	movs	r1, #4
 8001b72:	461a      	mov	r2, r3
 8001b74:	f7ff ff22 	bl	80019bc <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableTxEvent(lmo_ptr);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff5d 	bl	8001a38 <CAN_NODE_MO_EnableTxEvent>
  }
  if (lmo_ptr->rx_event_enable == true)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	7a1b      	ldrb	r3, [r3, #8]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00b      	beq.n	8001b9e <CAN_NODE_MO_Init+0x52>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_sr);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	799b      	ldrb	r3, [r3, #6]
 8001b8e:	4610      	mov	r0, r2
 8001b90:	2100      	movs	r1, #0
 8001b92:	461a      	mov	r2, r3
 8001b94:	f7ff ff12 	bl	80019bc <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableRxEvent(lmo_ptr);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff ff5b 	bl	8001a54 <CAN_NODE_MO_EnableRxEvent>
  }

}
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <CAN_NODE_MO_Transmit>:

/* Function to transmit the can MO frame.  */
CAN_NODE_STATUS_t CAN_NODE_MO_Transmit(const CAN_NODE_LMO_t *lmo_ptr)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8001bac:	2300      	movs	r3, #0
 8001bae:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Transmit: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Transmit(lmo_ptr->mo_ptr);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fb81 	bl	80012bc <XMC_CAN_MO_Transmit>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	73fb      	strb	r3, [r7, #15]
  return (status);
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <CAN_NODE_MO_Receive>:

/* Function to read the received CAN message from the selected message object. */
CAN_NODE_STATUS_t CAN_NODE_MO_Receive( CAN_NODE_LMO_t *lmo_ptr)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Receive: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Receive(lmo_ptr->mo_ptr);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fb9d 	bl	8001318 <XMC_CAN_MO_Receive>
 8001bde:	4603      	mov	r3, r0
 8001be0:	73fb      	strb	r3, [r7, #15]
  return (status);
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <CAN_NODE_MO_GetStatus>:
  return (status);
}

/*  Function to reads the status of the CAN Message Object.  */
uint32_t CAN_NODE_MO_GetStatus(const CAN_NODE_LMO_t *lmo_ptr)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t status;

  XMC_ASSERT("CAN_NODE_MO_GetStatus: lmo_ptr null", lmo_ptr != NULL);

  status = XMC_CAN_MO_GetStatus(lmo_ptr->mo_ptr);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fefd 	bl	80019f8 <XMC_CAN_MO_GetStatus>
 8001bfe:	60f8      	str	r0, [r7, #12]

  return (status);
 8001c00:	68fb      	ldr	r3, [r7, #12]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop

08001c0c <CAN_NODE_GetStatus>:

}

/* Function to read the current status of the CAN node  */
uint32_t CAN_NODE_GetStatus(const CAN_NODE_t* handle)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t  status;

  XMC_ASSERT("CAN_NODE_GetStatus: handle null", handle != NULL);

  XMC_CAN_NODE_t *const can_node = handle->node_ptr;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	60fb      	str	r3, [r7, #12]

  status = XMC_CAN_NODE_GetStatus(can_node);
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f7ff fe82 	bl	8001924 <XMC_CAN_NODE_GetStatus>
 8001c20:	60b8      	str	r0, [r7, #8]
  return (status);
 8001c22:	68bb      	ldr	r3, [r7, #8]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <CAN_NODE_Init>:
/*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or internal)
 *  and message objects.
 */

CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8001c34:	2300      	movs	r3, #0
 8001c36:	75fb      	strb	r3, [r7, #23]
  uint32_t loop_count;
  const CAN_NODE_LMO_t *lmo_ptr;

  XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);

  const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3e:	60fb      	str	r3, [r7, #12]

  /* Initialize the GLOBAL_CAN APP */
  status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fd31 	bl	80016ac <GLOBAL_CAN_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	75fb      	strb	r3, [r7, #23]

  if (status == CAN_NODE_STATUS_SUCCESS)
 8001c4e:	7dfb      	ldrb	r3, [r7, #23]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d17b      	bne.n	8001d4c <CAN_NODE_Init+0x120>
  {
    /* Initialize the GUI configured values for baud rate to NBTR Reg */
    XMC_CAN_NODE_NominalBitTimeConfigure(handle->node_ptr, handle->baudrate_config);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	4610      	mov	r0, r2
 8001c5e:	4619      	mov	r1, r3
 8001c60:	f7ff f89a 	bl	8000d98 <XMC_CAN_NODE_NominalBitTimeConfigure>
    /* set CCE and INIT bit NCR for node configuration */
    XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fe67 	bl	800193c <XMC_CAN_NODE_EnableConfigurationChange>
    XMC_CAN_NODE_SetInitBit(handle->node_ptr);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fe82 	bl	800197c <XMC_CAN_NODE_SetInitBit>

    if (handle->loopback_enable == true) /* Loop back mode enabled */
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d005      	beq.n	8001c8e <CAN_NODE_Init+0x62>
    {
      XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fe3c 	bl	8001904 <XMC_CAN_NODE_EnableLoopBack>
 8001c8c:	e018      	b.n	8001cc0 <CAN_NODE_Init+0x94>
    }
    else
    {
      XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c94:	6819      	ldr	r1, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c9c:	791a      	ldrb	r2, [r3, #4]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ca4:	4608      	mov	r0, r1
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	461a      	mov	r2, r3
 8001caa:	f7fe fb71 	bl	8000390 <XMC_GPIO_Init>
      XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f7ff fe0c 	bl	80018d8 <XMC_CAN_NODE_SetReceiveInput>
    }
    CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff fed5 	bl	8001a70 <CAN_NODE_SetNodeEvents>

    for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	e019      	b.n	8001d00 <CAN_NODE_Init+0xd4>
    {
      lmo_ptr = handle->lmobj_ptr[loop_count];
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	60bb      	str	r3, [r7, #8]
      XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6859      	ldr	r1, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	791b      	ldrb	r3, [r3, #4]
 8001cea:	4608      	mov	r0, r1
 8001cec:	4611      	mov	r1, r2
 8001cee:	461a      	mov	r2, r3
 8001cf0:	f7ff f934 	bl	8000f5c <XMC_CAN_AllocateMOtoNodeList>
      CAN_NODE_MO_Init(lmo_ptr);
 8001cf4:	68b8      	ldr	r0, [r7, #8]
 8001cf6:	f7ff ff29 	bl	8001b4c <CAN_NODE_MO_Init>
      XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
      XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
    }
    CAN_NODE_SetNodeEvents(handle); /* API to enable node events */

    for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8001d06:	461a      	mov	r2, r3
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d8de      	bhi.n	8001ccc <CAN_NODE_Init+0xa0>
      lmo_ptr = handle->lmobj_ptr[loop_count];
      XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
      CAN_NODE_MO_Init(lmo_ptr);
    }
    /* reset CCE and INIT bit NCR for node configuration */
    XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fe22 	bl	800195c <XMC_CAN_NODE_DisableConfigurationChange>
    XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fe3d 	bl	800199c <XMC_CAN_NODE_ResetInitBit>
    if (handle->loopback_enable == false)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8001d28:	f083 0301 	eor.w	r3, r3, #1
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00e      	beq.n	8001d50 <CAN_NODE_Init+0x124>
    {
      /* CAN transmit pin configuration */
      XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6819      	ldr	r1, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	791a      	ldrb	r2, [r3, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d40:	4608      	mov	r0, r1
 8001d42:	4611      	mov	r1, r2
 8001d44:	461a      	mov	r2, r3
 8001d46:	f7fe fb23 	bl	8000390 <XMC_GPIO_Init>
 8001d4a:	e001      	b.n	8001d50 <CAN_NODE_Init+0x124>
    }
  }
  else
  {
    status = CAN_NODE_STATUS_FAILURE;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 8001d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop

08001d5c <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8001d62:	2300      	movs	r3, #0
 8001d64:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8001d66:	4815      	ldr	r0, [pc, #84]	; (8001dbc <DAVE_Init+0x60>)
 8001d68:	f7ff fd56 	bl	8001818 <CLOCK_XMC4_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d104      	bne.n	8001d80 <DAVE_Init+0x24>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_0 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_0); 
 8001d76:	4812      	ldr	r0, [pc, #72]	; (8001dc0 <DAVE_Init+0x64>)
 8001d78:	f7ff ff58 	bl	8001c2c <CAN_NODE_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d104      	bne.n	8001d90 <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED1); 
 8001d86:	480f      	ldr	r0, [pc, #60]	; (8001dc4 <DAVE_Init+0x68>)
 8001d88:	f7ff fcb2 	bl	80016f0 <DIGITAL_IO_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d104      	bne.n	8001da0 <DAVE_Init+0x44>
  {
	 /**  Initialization of INTERRUPT APP instance CanRxInterrupt */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&CanRxInterrupt); 
 8001d96:	480c      	ldr	r0, [pc, #48]	; (8001dc8 <DAVE_Init+0x6c>)
 8001d98:	f7ff fc62 	bl	8001660 <INTERRUPT_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d104      	bne.n	8001db0 <DAVE_Init+0x54>
  {
	 /**  Initialization of DIGITAL_IO APP instance Button1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&Button1); 
 8001da6:	4809      	ldr	r0, [pc, #36]	; (8001dcc <DAVE_Init+0x70>)
 8001da8:	f7ff fca2 	bl	80016f0 <DIGITAL_IO_Init>
 8001dac:	4603      	mov	r3, r0
 8001dae:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8001db0:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	1ffe8bfc 	.word	0x1ffe8bfc
 8001dc0:	080021dc 	.word	0x080021dc
 8001dc4:	08002000 	.word	0x08002000
 8001dc8:	08001ffc 	.word	0x08001ffc
 8001dcc:	08002014 	.word	0x08002014

08001dd0 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	2201      	movs	r2, #1
 8001de0:	409a      	lsls	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	605a      	str	r2, [r3, #4]
}
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e02:	409a      	lsls	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	605a      	str	r2, [r3, #4]
}
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop

08001e14 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2a:	f003 0301 	and.w	r3, r3, #1
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop

08001e3c <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	7c1b      	ldrb	r3, [r3, #16]
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f7ff ffbe 	bl	8001dd0 <XMC_GPIO_SetOutputHigh>
}
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop

08001e5c <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7c1b      	ldrb	r3, [r3, #16]
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f7ff ffbe 	bl	8001df0 <XMC_GPIO_SetOutputLow>
}
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop

08001e7c <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	7c1b      	ldrb	r3, [r3, #16]
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f7ff ffc0 	bl	8001e14 <XMC_GPIO_GetInput>
 8001e94:	4603      	mov	r3, r0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop

08001ea0 <main>:
	NOT_ACTIVATED, ACTIVATED
} sendCanFrames_t;
sendCanFrames_t sendCanFrames = NOT_ACTIVATED;

int main(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b0a2      	sub	sp, #136	; 0x88
 8001ea4:	af00      	add	r7, sp, #0

#define messageObjectsMax (30)

	const CAN_NODE_LMO_t * messageObjects[31] =
 8001ea6:	4a20      	ldr	r2, [pc, #128]	; (8001f28 <main+0x88>)
 8001ea8:	1d3b      	adds	r3, r7, #4
 8001eaa:	4611      	mov	r1, r2
 8001eac:	227c      	movs	r2, #124	; 0x7c
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 f898 	bl	8001fe4 <memcpy>
			&CAN_NODE_0_LMO_31_Config
	};

	DAVE_STATUS_t status;

	status = DAVE_Init(); /* Initialization of DAVE APPs  */
 8001eb4:	f7ff ff52 	bl	8001d5c <DAVE_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

	if (status == DAVE_STATUS_FAILURE)
 8001ebe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d100      	bne.n	8001ec8 <main+0x28>
		XMC_DEBUG("DAVE APPs initialization failed\n");

		while (1U)
		{

		}
 8001ec6:	e7fe      	b.n	8001ec6 <main+0x26>
	}

	/* Placeholder for user application code. The while loop below can be replaced with user application code. */
	while (1U)
	{
		if (sendCanFrames == ACTIVATED)
 8001ec8:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <main+0x8c>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d121      	bne.n	8001f14 <main+0x74>
		{
			sendCanFrames = NOT_ACTIVATED;
 8001ed0:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <main+0x8c>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]

			DIGITAL_IO_SetOutputHigh(&LED1);
 8001ed6:	4816      	ldr	r0, [pc, #88]	; (8001f30 <main+0x90>)
 8001ed8:	f7ff ffb0 	bl	8001e3c <DIGITAL_IO_SetOutputHigh>
			for (int messageObject = 2; messageObject < messageObjectsMax;
 8001edc:	2302      	movs	r3, #2
 8001ede:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001ee2:	e00f      	b.n	8001f04 <main+0x64>
					messageObject++)
			{
				CAN_NODE_MO_Transmit(messageObjects[messageObject]);
 8001ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001eee:	4413      	add	r3, r2
 8001ef0:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fe55 	bl	8001ba4 <CAN_NODE_MO_Transmit>
		{
			sendCanFrames = NOT_ACTIVATED;

			DIGITAL_IO_SetOutputHigh(&LED1);
			for (int messageObject = 2; messageObject < messageObjectsMax;
					messageObject++)
 8001efa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001efe:	3301      	adds	r3, #1
 8001f00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (sendCanFrames == ACTIVATED)
		{
			sendCanFrames = NOT_ACTIVATED;

			DIGITAL_IO_SetOutputHigh(&LED1);
			for (int messageObject = 2; messageObject < messageObjectsMax;
 8001f04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f08:	2b1d      	cmp	r3, #29
 8001f0a:	ddeb      	ble.n	8001ee4 <main+0x44>
					messageObject++)
			{
				CAN_NODE_MO_Transmit(messageObjects[messageObject]);
			}
			DIGITAL_IO_SetOutputLow(&LED1);
 8001f0c:	4808      	ldr	r0, [pc, #32]	; (8001f30 <main+0x90>)
 8001f0e:	f7ff ffa5 	bl	8001e5c <DIGITAL_IO_SetOutputLow>
 8001f12:	e008      	b.n	8001f26 <main+0x86>
		}
		else if (!DIGITAL_IO_GetInput(&Button1) )
 8001f14:	4807      	ldr	r0, [pc, #28]	; (8001f34 <main+0x94>)
 8001f16:	f7ff ffb1 	bl	8001e7c <DIGITAL_IO_GetInput>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d102      	bne.n	8001f26 <main+0x86>
		{
			sendCanFrames = ACTIVATED;
 8001f20:	4b02      	ldr	r3, [pc, #8]	; (8001f2c <main+0x8c>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]
		}
	}
 8001f26:	e7cf      	b.n	8001ec8 <main+0x28>
 8001f28:	08002284 	.word	0x08002284
 8001f2c:	1ffe8c00 	.word	0x1ffe8c00
 8001f30:	08002000 	.word	0x08002000
 8001f34:	08002014 	.word	0x08002014

08001f38 <CAN0_1_IRQHandler>:
}

void CanRxInterruptHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
	/* Check for Node error */
	if (CAN_NODE_GetStatus(&CAN_NODE_0) & XMC_CAN_NODE_STATUS_LAST_ERROR_CODE)
 8001f3e:	4812      	ldr	r0, [pc, #72]	; (8001f88 <CAN0_1_IRQHandler+0x50>)
 8001f40:	f7ff fe64 	bl	8001c0c <CAN_NODE_GetStatus>
 8001f44:	4603      	mov	r3, r0
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d119      	bne.n	8001f82 <CAN0_1_IRQHandler+0x4a>
	{
		XMC_DEBUG("Something failed\n");
	}
	else if (CAN_NODE_MO_GetStatus(&CAN_NODE_0_LMO_01_Config)
 8001f4e:	480f      	ldr	r0, [pc, #60]	; (8001f8c <CAN0_1_IRQHandler+0x54>)
 8001f50:	f7ff fe4c 	bl	8001bec <CAN_NODE_MO_GetStatus>
 8001f54:	4603      	mov	r3, r0
			& XMC_CAN_MO_STATUS_RX_PENDING)
 8001f56:	f003 0301 	and.w	r3, r3, #1
	/* Check for Node error */
	if (CAN_NODE_GetStatus(&CAN_NODE_0) & XMC_CAN_NODE_STATUS_LAST_ERROR_CODE)
	{
		XMC_DEBUG("Something failed\n");
	}
	else if (CAN_NODE_MO_GetStatus(&CAN_NODE_0_LMO_01_Config)
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d011      	beq.n	8001f82 <CAN0_1_IRQHandler+0x4a>
			& XMC_CAN_MO_STATUS_RX_PENDING)
	{
		static int oldCommand = 0x42;
		int currentCommand;
		/* Read the received Message object and stores in Request_Node_LMO_02_Config*/
		CAN_NODE_MO_Receive(&CAN_NODE_0_LMO_01_Config);
 8001f5e:	480b      	ldr	r0, [pc, #44]	; (8001f8c <CAN0_1_IRQHandler+0x54>)
 8001f60:	f7ff fe32 	bl	8001bc8 <CAN_NODE_MO_Receive>
		currentCommand = CAN_NODE_0_LMO_01_Config.mo_ptr->can_data_byte[7];
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <CAN0_1_IRQHandler+0x54>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	7ddb      	ldrb	r3, [r3, #23]
 8001f6a:	607b      	str	r3, [r7, #4]

		if ( currentCommand != oldCommand )
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <CAN0_1_IRQHandler+0x58>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d005      	beq.n	8001f82 <CAN0_1_IRQHandler+0x4a>
		{
			oldCommand = currentCommand;
 8001f76:	4a06      	ldr	r2, [pc, #24]	; (8001f90 <CAN0_1_IRQHandler+0x58>)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6013      	str	r3, [r2, #0]
			sendCanFrames = ACTIVATED;
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <CAN0_1_IRQHandler+0x5c>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	080021dc 	.word	0x080021dc
 8001f8c:	08002068 	.word	0x08002068
 8001f90:	1ffe8bf8 	.word	0x1ffe8bf8
 8001f94:	1ffe8c00 	.word	0x1ffe8c00

08001f98 <__libc_init_array>:
 8001f98:	b570      	push	{r4, r5, r6, lr}
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <__libc_init_array+0x3c>)
 8001f9c:	4c0e      	ldr	r4, [pc, #56]	; (8001fd8 <__libc_init_array+0x40>)
 8001f9e:	1ae4      	subs	r4, r4, r3
 8001fa0:	10a4      	asrs	r4, r4, #2
 8001fa2:	2500      	movs	r5, #0
 8001fa4:	461e      	mov	r6, r3
 8001fa6:	42a5      	cmp	r5, r4
 8001fa8:	d004      	beq.n	8001fb4 <__libc_init_array+0x1c>
 8001faa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fae:	4798      	blx	r3
 8001fb0:	3501      	adds	r5, #1
 8001fb2:	e7f8      	b.n	8001fa6 <__libc_init_array+0xe>
 8001fb4:	f7ff fabe 	bl	8001534 <_init>
 8001fb8:	4c08      	ldr	r4, [pc, #32]	; (8001fdc <__libc_init_array+0x44>)
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <__libc_init_array+0x48>)
 8001fbc:	1ae4      	subs	r4, r4, r3
 8001fbe:	10a4      	asrs	r4, r4, #2
 8001fc0:	2500      	movs	r5, #0
 8001fc2:	461e      	mov	r6, r3
 8001fc4:	42a5      	cmp	r5, r4
 8001fc6:	d004      	beq.n	8001fd2 <__libc_init_array+0x3a>
 8001fc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fcc:	4798      	blx	r3
 8001fce:	3501      	adds	r5, #1
 8001fd0:	e7f8      	b.n	8001fc4 <__libc_init_array+0x2c>
 8001fd2:	bd70      	pop	{r4, r5, r6, pc}
 8001fd4:	1ffe8bfc 	.word	0x1ffe8bfc
 8001fd8:	1ffe8bfc 	.word	0x1ffe8bfc
 8001fdc:	1ffe8bfc 	.word	0x1ffe8bfc
 8001fe0:	1ffe8bfc 	.word	0x1ffe8bfc

08001fe4 <memcpy>:
 8001fe4:	b510      	push	{r4, lr}
 8001fe6:	1e43      	subs	r3, r0, #1
 8001fe8:	440a      	add	r2, r1
 8001fea:	4291      	cmp	r1, r2
 8001fec:	d004      	beq.n	8001ff8 <memcpy+0x14>
 8001fee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001ff2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001ff6:	e7f8      	b.n	8001fea <memcpy+0x6>
 8001ff8:	bd10      	pop	{r4, pc}
	...

08001ffc <CanRxInterrupt>:
 8001ffc:	3f4d 0100                                   M?..

08002000 <LED1>:
 8002000:	8500 4802 0080 0000 0000 0001 0000 0000     ...H............
 8002010:	0009 0000                                   ....

08002014 <Button1>:
 8002014:	8f00 4802 0000 0000 0000 0000 0000 0000     ...H............
 8002024:	000d 0000 0230 0101 0000 0001 0000 0000     ....0...........
 8002034:	0000 0001 0102 0101                         ........

0800203c <CAN_NODE_0_gpio_out>:
 800203c:	8100 4802 000c 0000                         ...H....

08002044 <CAN_NODE_0_gpio_out_config>:
 8002044:	0090 0000 0001 0000 0002 0000               ............

08002050 <CAN_NODE_0_gpio_in>:
 8002050:	8100 4802 000d 0000                         ...H....

08002058 <CAN_NODE_0_gpio_in_config>:
	...

08002064 <CAN_NODE_0_sr>:
 8002064:	0000 0000                                   ....

08002068 <CAN_NODE_0_LMO_01_Config>:
 8002068:	8818 1ffe 0023 0001 0001 0000               ....#.......

08002074 <CAN_NODE_0_LMO_02_Config>:
 8002074:	8838 1ffe 003b 0000 0000 0000               8...;.......

08002080 <CAN_NODE_0_LMO_03_Config>:
 8002080:	8858 1ffe 003a 0000 0000 0000               X...:.......

0800208c <CAN_NODE_0_LMO_04_Config>:
 800208c:	8878 1ffe 001b 0000 0000 0000               x...........

08002098 <CAN_NODE_0_LMO_05_Config>:
 8002098:	8898 1ffe 003f 0000 0000 0000               ....?.......

080020a4 <CAN_NODE_0_LMO_06_Config>:
 80020a4:	88b8 1ffe 001c 0000 0000 0000               ............

080020b0 <CAN_NODE_0_LMO_07_Config>:
 80020b0:	88d8 1ffe 003e 0000 0000 0000               ....>.......

080020bc <CAN_NODE_0_LMO_08_Config>:
 80020bc:	88f8 1ffe 0019 0000 0000 0000               ............

080020c8 <CAN_NODE_0_LMO_09_Config>:
 80020c8:	8918 1ffe 001a 0000 0000 0000               ............

080020d4 <CAN_NODE_0_LMO_10_Config>:
 80020d4:	8938 1ffe 003d 0000 0000 0000               8...=.......

080020e0 <CAN_NODE_0_LMO_11_Config>:
 80020e0:	8958 1ffe 001d 0000 0000 0000               X...........

080020ec <CAN_NODE_0_LMO_12_Config>:
 80020ec:	8978 1ffe 0014 0000 0000 0000               x...........

080020f8 <CAN_NODE_0_LMO_13_Config>:
 80020f8:	8998 1ffe 0017 0000 0000 0000               ............

08002104 <CAN_NODE_0_LMO_14_Config>:
 8002104:	89b8 1ffe 0018 0000 0000 0000               ............

08002110 <CAN_NODE_0_LMO_15_Config>:
 8002110:	89d8 1ffe 0015 0000 0000 0000               ............

0800211c <CAN_NODE_0_LMO_16_Config>:
 800211c:	89f8 1ffe 0016 0000 0000 0000               ............

08002128 <CAN_NODE_0_LMO_17_Config>:
 8002128:	8a18 1ffe 0006 0000 0000 0000               ............

08002134 <CAN_NODE_0_LMO_18_Config>:
 8002134:	8a38 1ffe 0005 0000 0000 0000               8...........

08002140 <CAN_NODE_0_LMO_19_Config>:
 8002140:	8a58 1ffe 0008 0000 0000 0000               X...........

0800214c <CAN_NODE_0_LMO_20_Config>:
 800214c:	8a78 1ffe 0007 0000 0000 0000               x...........

08002158 <CAN_NODE_0_LMO_21_Config>:
 8002158:	8a98 1ffe 003c 0000 0000 0000               ....<.......

08002164 <CAN_NODE_0_LMO_22_Config>:
 8002164:	8ab8 1ffe 0009 0000 0000 0000               ............

08002170 <CAN_NODE_0_LMO_23_Config>:
 8002170:	8ad8 1ffe 0024 0000 0000 0000               ....$.......

0800217c <CAN_NODE_0_LMO_24_Config>:
 800217c:	8af8 1ffe 0025 0000 0000 0000               ....%.......

08002188 <CAN_NODE_0_LMO_25_Config>:
 8002188:	8b18 1ffe 0026 0000 0000 0000               ....&.......

08002194 <CAN_NODE_0_LMO_26_Config>:
 8002194:	8b38 1ffe 0027 0000 0000 0000               8...'.......

080021a0 <CAN_NODE_0_LMO_27_Config>:
 80021a0:	8b58 1ffe 001e 0000 0000 0000               X...........

080021ac <CAN_NODE_0_LMO_28_Config>:
 80021ac:	8b78 1ffe 001f 0000 0000 0000               x...........

080021b8 <CAN_NODE_0_LMO_29_Config>:
 80021b8:	8b98 1ffe 0020 0000 0000 0000               .... .......

080021c4 <CAN_NODE_0_LMO_30_Config>:
 80021c4:	8bb8 1ffe 0021 0000 0000 0000               ....!.......

080021d0 <CAN_NODE_0_LMO_31_Config>:
 80021d0:	8bd8 1ffe 0022 0000 0000 0000               ....".......

080021dc <CAN_NODE_0>:
 80021dc:	8800 1ffe 4300 4801 880c 1ffe 2068 0800     .....C.H....h ..
 80021ec:	2074 0800 2080 0800 208c 0800 2098 0800     t ... ... ... ..
 80021fc:	20a4 0800 20b0 0800 20bc 0800 20c8 0800     . ... ... ... ..
 800220c:	20d4 0800 20e0 0800 20ec 0800 20f8 0800     . ... ... ... ..
 800221c:	2104 0800 2110 0800 211c 0800 2128 0800     .!...!...!..(!..
 800222c:	2134 0800 2140 0800 214c 0800 2158 0800     4!..@!..L!..X!..
 800223c:	2164 0800 2170 0800 217c 0800 2188 0800     d!..p!..|!...!..
 800224c:	2194 0800 21a0 0800 21ac 0800 21b8 0800     .!...!...!...!..
 800225c:	21c4 0800 21d0 0800 0000 0000 2064 0800     .!...!......d ..
 800226c:	203c 0800 2044 0800 2050 0800 2058 0800     < ..D ..P ..X ..
 800227c:	0102 001f 0000 0000 0000 0000 2068 0800     ............h ..
 800228c:	2074 0800 2080 0800 208c 0800 2098 0800     t ... ... ... ..
 800229c:	20a4 0800 20b0 0800 20bc 0800 20c8 0800     . ... ... ... ..
 80022ac:	20d4 0800 20e0 0800 20ec 0800 20f8 0800     . ... ... ... ..
 80022bc:	2104 0800 2110 0800 211c 0800 2134 0800     .!...!...!..4!..
 80022cc:	2140 0800 214c 0800 2158 0800 2164 0800     @!..L!..X!..d!..
 80022dc:	2170 0800 217c 0800 2188 0800 2194 0800     p!..|!...!...!..
 80022ec:	21a0 0800 21ac 0800 21b8 0800 21c4 0800     .!...!...!...!..
 80022fc:	21d0 0800                                   .!..
