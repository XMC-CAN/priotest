   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_dma.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_DMA_GetEventStatus,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_DMA_GetEventStatus:
  25              	.LFB128:
  26              	 .file 1 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest\\Libraries\\XMCLib\\inc/xmc_dma.h"
   1:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
   2:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
   3:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @file xmc_dma.h
   4:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @date 2016-01-12
   5:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
   6:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @cond
   7:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  **************************************************************************************************
   8:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * XMClib v2.1.4 - XMC Peripheral Driver Library 
   9:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
  10:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  11:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * All rights reserved.                        
  12:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *                                             
  13:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * following conditions are met:   
  15:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *                                                                              
  16:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  17:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * disclaimer.                        
  18:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * 
  19:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  20:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  21:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * 
  22:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  23:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * products derived from this software without specific prior written permission.                  
  24:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *                                                                              
  25:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  32:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *                                                                              
  33:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  35:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  **************************************************************************************************
  36:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
  37:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Change History
  38:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * --------------
  39:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
  40:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * 2015-02-20:
  41:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *     - Initial <br>
  42:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
  43:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * 2015-06-20:
  44:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *     - Add the declarations for the following APIs: <br>
  45:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *       XMC_DMA_DisableRequestLine, XMC_DMA_ClearRequestLine, <br>
  46:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *       XMC_DMA_CH_ClearSourcePeripheralRequest, <br>
  47:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *       XMC_DMA_CH_ClearDestinationPeripheralRequest <br>
  48:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *     - Documentation updates <br>
  49:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  50:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
  51:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @endcond
  52:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
  53:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
  54:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** #ifndef XMC_DMA_H
  55:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** #define XMC_DMA_H
  56:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
  57:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /*******************************************************************************
  58:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * HEADER FILES
  59:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *******************************************************************************/
  60:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
  61:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** #include "xmc_common.h"
  62:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
  63:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** #if defined (GPDMA0)
  64:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
  65:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** #include "xmc_dma_map.h"
  66:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
  67:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
  68:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @addtogroup XMClib XMC Peripheral Library
  69:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @{
  70:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
  71:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
  72:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
  73:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @addtogroup DMA
  74:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @brief General purpose DMA (GPDMA) driver for the XMC4000 microcontroller family
  75:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
  76:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * The GPDMA is a highly configurable DMA controller that allows high-speed data transfers
  77:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * between peripherals and memories. Complex data transfers can be done with minimal
  78:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * intervention of the processor, making CPU available for other operations.
  79:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
  80:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * GPDMA provides extensive support for XMC microcontroller peripherals like A/D, D/A
  81:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * converters and timers. Data transfers through communication interfaces (USIC) using the
  82:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * GPDMA increase efficiency and parallelism for real-time applications.
  83:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
  84:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * The DMA low level driver provides functions to configure and initialize the GPDMA
  85:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * hardware peripheral.
  86:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @{
  87:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
  88:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
  89:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /*******************************************************************************
  90:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * MACROS
  91:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *******************************************************************************/
  92:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
  93:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** #if defined (GPDMA0)
  94:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** #define XMC_DMA0 ((XMC_DMA_t *)GPDMA0_CH0_BASE) /**< DMA module 0 */
  95:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** #define XMC_DMA0_NUM_CHANNELS 8
  96:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** #endif
  97:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
  98:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** #if defined (GPDMA1)
  99:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** #define XMC_DMA1 ((XMC_DMA_t *)GPDMA1_CH0_BASE) /**< DMA module 1, only available in XMC45xx series
 100:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** #define XMC_DMA1_NUM_CHANNELS 4
 101:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** #endif
 102:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 103:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /*******************************************************************************
 104:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * ENUMS
 105:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *******************************************************************************/
 106:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 107:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 108:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * DMA transfer types
 109:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 110:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_TYPE
 111:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** {
 112:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK,                                /**< Single block */
 113:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD, /**< Multi-block: src addre
 114:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS, /**< Multi-block: src addre
 115:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD,     /**< Multi-block: src addre
 116:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED, /**< Multi-block: src addre
 117:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED,     /**< Multi-block: src addre
 118:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS, /**< Multi-block: src addre
 119:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD,     /**< Multi-block: src addre
 120:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED      /**< Multi-block: src addre
 121:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_TYPE_t;
 122:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 123:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 124:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * DMA transfer flow modes
 125:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 126:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_FLOW
 127:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** {
 128:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2M_DMA    = 0x0UL, /**< Memory to memory (DMA flow controller) */
 129:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA    = 0x1UL, /**< Memory to peripheral (DMA flow controller) */
 130:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA    = 0x2UL, /**< Peripheral to memory (DMA flow controller) */
 131:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA    = 0x3UL, /**< Peripheral to peripheral (DMA flow controller) 
 132:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2M_PER    = 0x4UL, /**< Peripheral to memory (Peripheral flow controlle
 133:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_SRCPER = 0x5UL, /**< Peripheral to peripheral (Source peripheral flo
 134:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2P_PER    = 0x6UL, /**< Memory to peripheral (Peripheral flow controlle
 135:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_DSTPER = 0x7UL  /**< Peripheral to peripheral (Destination periphera
 136:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_FLOW_t;
 137:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 138:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 139:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Valid burst length values
 140:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 141:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** typedef enum XMC_DMA_CH_BURST_LENGTH
 142:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** {
 143:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_1 = 0x0UL, /**< Burst length: 1 word */
 144:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_4 = 0x1UL, /**< Burst length: 4 words */
 145:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_8 = 0x2UL  /**< Burst length: 8 words */
 146:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_CH_BURST_LENGTH_t;
 147:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 148:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 149:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Valid transfer width values
 150:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 151:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_WIDTH
 152:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** {
 153:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_8  = 0x0UL, /**< 8-bit transfer width */
 154:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_16 = 0x1UL, /**< 16-bit transfer width */
 155:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_32 = 0x2UL  /**< 32-bit transfer width */
 156:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_WIDTH_t;
 157:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 158:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 159:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * DMA address count mode
 160:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 161:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** typedef enum XMC_DMA_CH_ADDRESS_COUNT_MODE
 162:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** {
 163:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_INCREMENT = 0x0UL, /**< Address count mode: increment */
 164:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_DECREMENT = 0x1UL, /**< Address count mode: decrement */
 165:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_NO_CHANGE = 0x2UL  /**< Address count mode: no change */
 166:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_CH_ADDRESS_COUNT_MODE_t;
 167:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 168:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 169:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * DMA channel priorities
 170:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 171:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** typedef enum XMC_DMA_CH_PRIORITY
 172:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** {
 173:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_0 = 0x0UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 0 (low) *
 174:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_1 = 0x1UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 1 */
 175:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_2 = 0x2UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 2 */
 176:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_3 = 0x3UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 3 */
 177:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_4 = 0x4UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 4 */
 178:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_5 = 0x5UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 5 */
 179:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_6 = 0x6UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 6 */
 180:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_7 = 0x7UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos  /**< DMA channel priority 7 (high) 
 181:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_CH_PRIORITY_t;
 182:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 183:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 184:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Source handshake interface
 185:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 186:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** typedef enum XMC_DMA_CH_SRC_HANDSHAKING
 187:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** {
 188:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE = 0x0UL << GPDMA0_CH_CFGL_HS_SEL_SRC_Pos, /**< Source: hardwa
 189:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_SOFTWARE = 0x1UL << GPDMA0_CH_CFGL_HS_SEL_SRC_Pos  /**< Source: softwa
 190:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_CH_SRC_HANDSHAKING_t;
 191:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 192:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 193:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Destination handshake interface
 194:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 195:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** typedef enum XMC_DMA_CH_DST_HANDSHAKING
 196:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** {
 197:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_HARDWARE = 0x0UL << GPDMA0_CH_CFGL_HS_SEL_DST_Pos, /**< Destination: h
 198:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_SOFTWARE = 0x1UL << GPDMA0_CH_CFGL_HS_SEL_DST_Pos  /**< Destination: s
 199:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_CH_DST_HANDSHAKING_t;
 200:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 201:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 202:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * DMA hardware handshaking interface
 203:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Hardware handshaking available only if DMA is flow controller
 204:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 205:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** typedef enum XMC_DMA_CH_HARDWARE_HANDSHAKING_IF
 206:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** {
 207:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_0 = 0x0UL, /**< Hardware handshaking interface 0 */
 208:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_1 = 0x1UL, /**< Hardware handshaking interface 1 */
 209:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_2 = 0x2UL, /**< Hardware handshaking interface 2 */
 210:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_3 = 0x3UL, /**< Hardware handshaking interface 3 */
 211:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_4 = 0x4UL, /**< Hardware handshaking interface 4 */
 212:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_5 = 0x5UL, /**< Hardware handshaking interface 5 */
 213:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_6 = 0x6UL, /**< Hardware handshaking interface 6 */
 214:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_7 = 0x7UL  /**< Hardware handshaking interface 7 */
 215:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_t;
 216:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 217:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 218:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * DMA events
 219:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 220:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** typedef enum XMC_DMA_CH_EVENT
 221:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** {
 222:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_TRANSFER_COMPLETE        = 0x1UL, /**< Transfer complete event */
 223:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE  = 0x2UL, /**< Block transfer complete event */
 224:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE = 0x4UL, /**< Source transaction complete event */
 225:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE = 0x8UL, /**< Destination transaction complete event */
 226:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_ERROR                    = 0x10UL /**< DMA error event */
 227:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_CH_EVENT_t;
 228:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 229:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 230:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Transaction types
 231:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 232:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSACTION_TYPE
 233:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** {
 234:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSACTION_TYPE_SINGLE, /**< Single DMA transaction */
 235:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSACTION_TYPE_BURST   /**< Burst transaction */
 236:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_CH_TRANSACTION_TYPE_t;
 237:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 238:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 239:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * DMA channel status values
 240:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 241:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** typedef enum XMC_DMA_CH_STATUS
 242:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** {
 243:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_OK,    /**< DMA status OK */
 244:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_ERROR, /**< DMA status error */
 245:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_BUSY   /**< DMA is busy */
 246:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_CH_STATUS_t;
 247:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 248:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /*******************************************************************************
 249:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * DATA STRUCTURES
 250:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *******************************************************************************/
 251:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 252:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 253:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * DMA channel configuration structure <br>
 254:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
 255:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * The structure represents a collection of all hardware registers used
 256:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * to configure the DMA channel. It is contained within the ::XMC_DMA_t
 257:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * structure. It's registers can be used to configure DMA transfer details
 258:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * like source address, destination address, block size, incrementation
 259:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * modes and the like.
 260:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 261:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  
 262:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** typedef struct {
 263:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  SAR;
 264:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED0;
 265:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  DAR;
 266:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED1;
 267:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  LLP;
 268:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED2;
 269:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  CTLL;
 270:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  CTLH;
 271:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  SSTAT;
 272:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED3;
 273:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  DSTAT;
 274:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED4;
 275:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  SSTATAR;
 276:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED5;
 277:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  DSTATAR;
 278:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED6;
 279:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  CFGL;
 280:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  CFGH;
 281:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  SGR;
 282:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED7;
 283:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  DSR;
 284:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED8;
 285:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** } GPDMA_CH_t;
 286:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 287:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 288:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * DMA device structure <br>
 289:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
 290:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * The structure represents a collection of all hardware registers used
 291:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * to configure the GPDMA peripheral on the XMC4000 series of microcontrollers.
 292:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * The registers can be accessed with ::XMC_DMA0 and ::XMC_DMA1.
 293:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 294:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** typedef struct {
 295:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   GPDMA_CH_t CH[8];
 296:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 297:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  RAWCHEV[10];
 298:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  STATUSCHEV[10];
 299:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  MASKCHEV[10];
 300:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __O  uint32_t  CLEARCHEV[10];
 301:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  STATUSGLEV;
 302:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED20;
 303:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  REQSRCREG;
 304:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED21;
 305:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  REQDSTREG;
 306:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED22;
 307:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  SGLREQSRCREG;
 308:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED23;
 309:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  SGLREQDSTREG;
 310:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED24;
 311:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  LSTSRCREG;
 312:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED25;
 313:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  LSTDSTREG;
 314:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED26;
 315:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  DMACFGREG;
 316:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED27;
 317:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  CHENREG;
 318:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED28;
 319:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  ID;
 320:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED29[19];
 321:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  TYPE;
 322:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  VERSION;
 323:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_t;
 324:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 325:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /* Anonymous structure/union guard start */
 326:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** #if defined (__CC_ARM)
 327:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   #pragma push
 328:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   #pragma anon_unions
 329:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** #elif defined (__TASKING__)
 330:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   #pragma warning 586
 331:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** #endif
 332:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 333:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 334:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * DMA channel linked list item.
 335:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Note: Needs to be word aligned
 336:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 337:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** typedef struct XMC_DMA_LLI
 338:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** {
 339:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   uint32_t src_addr;                            /**< Source address */
 340:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   uint32_t dst_addr;                            /**< Destination address */
 341:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   struct XMC_DMA_LLI *llp;                      /**< Linked list pointer of type XMC_DMA_LLI_t */
 342:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   union
 343:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   {
 344:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****     struct
 345:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****     {
 346:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t enable_interrupt: 1;             /**< Enable interrupts? */
 347:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t dst_transfer_width: 3;           /**< Destination transfer width */
 348:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t src_transfer_width: 3;           /**< Source transfer width */
 349:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t dst_address_count_mode: 2;       /**< Destination address count mode */
 350:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t src_address_count_mode: 2;       /**< Source address count mode */
 351:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t dst_burst_length: 3;             /**< Destination burst length */
 352:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t src_burst_length: 3;             /**< Source burst length */
 353:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t enable_src_gather: 1;            /**< Enable source gather? */
 354:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t enable_dst_scatter: 1;           /**< Enable destination scatter? */
 355:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t : 1;                             /**< Reserved bits */
 356:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t transfer_flow: 3;                /**< DMA transfer flow */
 357:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t : 4;                             /**< Reserved bits */
 358:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t enable_dst_linked_list: 1;       /**< Enable destination linked list? */
 359:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t enable_src_linked_list: 1;       /**< Enable source linked list? */
 360:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t : 3;                             /**< Reserved bits */
 361:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****     };
 362:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****     uint32_t control;
 363:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   };
 364:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   uint32_t block_size;                          /**< Transfer block size */
 365:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   uint32_t src_status;                          /**< Source status */
 366:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   uint32_t dst_status;                          /**< Destination status */
 367:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_LLI_t;
 368:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 369:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** typedef XMC_DMA_LLI_t **XMC_DMA_LIST_t;         /**< Type definition for a linked list pointer */
 370:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 371:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 372:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * DMA channel configuration structure
 373:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 374:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** typedef struct XMC_DMA_CH_CONFIG
 375:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** {
 376:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   union
 377:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   {
 378:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****     uint32_t control;
 379:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****     struct
 380:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****     {
 381:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t enable_interrupt: 1;             /**< Enable interrupts? */
 382:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t dst_transfer_width: 3;           /**< Destination transfer width */
 383:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t src_transfer_width: 3;           /**< Source transfer width */
 384:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t dst_address_count_mode: 2;       /**< Destination address count mode */
 385:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t src_address_count_mode: 2;       /**< Source address count mode */
 386:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t dst_burst_length: 3;             /**< Destination burst length */
 387:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t src_burst_length: 3;             /**< Source burst length */
 388:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t enable_src_gather: 1;            /**< Enable source gather? */
 389:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t enable_dst_scatter: 1;           /**< Enable destination scatter? */
 390:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t : 1;                             
 391:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t transfer_flow: 3;                /**< DMA transfer flow */
 392:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t : 9;                             
 393:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****     };
 394:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   };
 395:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 396:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   uint32_t src_addr;                            /**< Source address */
 397:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   uint32_t dst_addr;                            /**< Destination address */
 398:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_LLI_t *linked_list_pointer;           /**< Linked list pointer */
 399:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   
 400:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   union
 401:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   {
 402:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****     uint32_t src_gather_control;
 403:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****     struct
 404:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****     {
 405:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t src_gather_interval: 20;         /**< Source gather interval */
 406:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t src_gather_count: 12;            /**< Source gather count */
 407:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****     };
 408:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   };
 409:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 410:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   union
 411:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   {
 412:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****     uint32_t dst_scatter_control;
 413:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****     struct
 414:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****     {
 415:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t dst_scatter_interval: 20;        /**< Destination scatter interval */
 416:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t dst_scatter_count: 12;           /**< Destination scatter count */
 417:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****     };
 418:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   };
 419:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   
 420:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   uint16_t block_size;                          /**< Block size for DMA controlled transfers [1-204
 421:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_t transfer_type;     /**< DMA transfer type */
 422:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_t priority;               /**< DMA channel priority */
 423:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_t src_handshaking; /**< DMA source handshaking interface */
 424:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   uint8_t src_peripheral_request;               /**< Source peripheral request */
 425:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_t dst_handshaking; /**< DMA destination handshaking interface */
 426:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   uint8_t dst_peripheral_request;               /**< Destination peripheral request */
 427:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_CH_CONFIG_t;
 428:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 429:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /* Anonymous structure/union guard end */
 430:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** #if defined (__CC_ARM)
 431:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   #pragma pop
 432:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** #elif defined (__TASKING__)
 433:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   #pragma warning restore
 434:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** #endif
 435:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 436:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 437:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * DMA channel event handler
 438:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 439:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** typedef void (*XMC_DMA_CH_EVENT_HANDLER_t)(XMC_DMA_CH_EVENT_t event);
 440:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 441:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /*******************************************************************************
 442:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * API PROTOTYPES
 443:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *******************************************************************************/
 444:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 445:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** #ifdef __cplusplus
 446:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** extern "C" {
 447:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** #endif
 448:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 449:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 450:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 451:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @return None
 452:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
 453:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 454:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Initialize the GPDMA peripheral <br>
 455:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
 456:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * \par
 457:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * The function initializes a prioritized list of DMA channels and enables the GPDMA
 458:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * peripheral.
 459:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 460:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** void XMC_DMA_Init(XMC_DMA_t *const dma);
 461:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 462:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 463:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 464:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @return None
 465:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
 466:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 467:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Enable the GPDMA peripheral <br>
 468:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
 469:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * \par
 470:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * The function de-asserts the GPDMA peripheral reset. In addition, it un-gates the
 471:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * GPDMA0 peripheral clock for all XMC4000 series of microcontrollers with an exception
 472:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * of the XMC4500 microcontroller. The XMC4500 doesn't support gating.
 473:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 474:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** void XMC_DMA_Enable(XMC_DMA_t *const dma);
 475:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 476:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 477:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 478:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @return None
 479:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
 480:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 481:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Disable the GPDMA peripheral <br>
 482:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
 483:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * \par
 484:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * The function asserts the GPDMA peripheral reset. In addition, it gates the GPDMA0
 485:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * peripheral clock for all XMC4000 series of microcontrollers with an exception of
 486:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * the XMC4500 microcontroller. The XMC4500 doesn't support gating.
 487:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 488:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** void XMC_DMA_Disable(XMC_DMA_t *const dma);
 489:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 490:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 491:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 492:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @return bool
 493:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
 494:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 495:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Check if the GPDMA peripheral is enabled <br>
 496:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
 497:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * \par
 498:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * For the XMC4500 microcontroller, the function checks if the GPDMA module is asserted
 499:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * and returns "false" if it is. In addition, it also checks if the clock is gated
 500:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * for the other XMC4000 series of microcontrollers. It returns "true" if the peripheral
 501:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * is enabled.
 502:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 503:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma);
 504:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 505:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 506:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 507:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @return uint32_t DMA event status
 508:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
 509:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 510:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Get DMA event status <br>
 511:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
 512:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * \par
 513:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * The function returns the collective (global) status of GPDMA events. The following
 514:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * lists the various DMA events and their corresponding enumeration. The return value
 515:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * of this function may then be masked with any one of the following enumerations to
 516:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * obtain the status of individual DMA events. <br>
 517:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
 518:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * \par
 519:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Transfer complete -> ::XMC_DMA_CH_EVENT_TRANSFER_COMPLETE                       <br>
 520:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Block transfer complete -> ::XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE           <br>
 521:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Source transaction complete -> ::XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE      <br>
 522:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Destination transaction complete -> ::XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE <br>
 523:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * DMA error event -> ::XMC_DMA_CH_EVENT_ERROR                                     <br>
 524:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 525:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetEventStatus(XMC_DMA_t *const dma)
 526:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** {
  27              	 .loc 1 526 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
 527:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   return (dma->STATUSGLEV);
  43              	 .loc 1 527 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a D3F86033 	 ldr r3,[r3,#864]
 528:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** }
  46              	 .loc 1 528 0
  47 000e 1846     	 mov r0,r3
  48 0010 0C37     	 adds r7,r7,#12
  49              	.LCFI3:
  50              	 .cfi_def_cfa_offset 4
  51 0012 BD46     	 mov sp,r7
  52              	.LCFI4:
  53              	 .cfi_def_cfa_register 13
  54              	 
  55 0014 5DF8047B 	 ldr r7,[sp],#4
  56              	.LCFI5:
  57              	 .cfi_restore 7
  58              	 .cfi_def_cfa_offset 0
  59 0018 7047     	 bx lr
  60              	 .cfi_endproc
  61              	.LFE128:
  63 001a 00BF     	 .section .text.XMC_DMA_GetChannelsTransferCompleteStatus,"ax",%progbits
  64              	 .align 2
  65              	 .thumb
  66              	 .thumb_func
  68              	XMC_DMA_GetChannelsTransferCompleteStatus:
  69              	.LFB129:
 529:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 530:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 531:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 532:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @return uint32_t DMA transfer complete status
 533:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
 534:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 535:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Get transfer complete status <br>
 536:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
 537:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * \par
 538:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * The function returns GPDMA transfer complete interrupt status. <br>
 539:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 540:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsTransferCompleteStatus(XMC_DMA_t *const dma)
 541:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** {
  70              	 .loc 1 541 0
  71              	 .cfi_startproc
  72              	 
  73              	 
  74              	 
  75 0000 80B4     	 push {r7}
  76              	.LCFI6:
  77              	 .cfi_def_cfa_offset 4
  78              	 .cfi_offset 7,-4
  79 0002 83B0     	 sub sp,sp,#12
  80              	.LCFI7:
  81              	 .cfi_def_cfa_offset 16
  82 0004 00AF     	 add r7,sp,#0
  83              	.LCFI8:
  84              	 .cfi_def_cfa_register 7
  85 0006 7860     	 str r0,[r7,#4]
 542:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   return (dma->STATUSCHEV[0]);
  86              	 .loc 1 542 0
  87 0008 7B68     	 ldr r3,[r7,#4]
  88 000a D3F8E832 	 ldr r3,[r3,#744]
 543:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** }
  89              	 .loc 1 543 0
  90 000e 1846     	 mov r0,r3
  91 0010 0C37     	 adds r7,r7,#12
  92              	.LCFI9:
  93              	 .cfi_def_cfa_offset 4
  94 0012 BD46     	 mov sp,r7
  95              	.LCFI10:
  96              	 .cfi_def_cfa_register 13
  97              	 
  98 0014 5DF8047B 	 ldr r7,[sp],#4
  99              	.LCFI11:
 100              	 .cfi_restore 7
 101              	 .cfi_def_cfa_offset 0
 102 0018 7047     	 bx lr
 103              	 .cfi_endproc
 104              	.LFE129:
 106 001a 00BF     	 .section .text.XMC_DMA_GetChannelsBlockCompleteStatus,"ax",%progbits
 107              	 .align 2
 108              	 .thumb
 109              	 .thumb_func
 111              	XMC_DMA_GetChannelsBlockCompleteStatus:
 112              	.LFB130:
 544:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 545:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 546:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 547:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @return uint32_t DMA block complete status
 548:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
 549:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 550:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Get block transfer complete status <br>
 551:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
 552:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * \par
 553:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * The function returns GPDMA block transfer complete interrupt status. <br>
 554:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 555:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsBlockCompleteStatus(XMC_DMA_t *const dma)
 556:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** {
 113              	 .loc 1 556 0
 114              	 .cfi_startproc
 115              	 
 116              	 
 117              	 
 118 0000 80B4     	 push {r7}
 119              	.LCFI12:
 120              	 .cfi_def_cfa_offset 4
 121              	 .cfi_offset 7,-4
 122 0002 83B0     	 sub sp,sp,#12
 123              	.LCFI13:
 124              	 .cfi_def_cfa_offset 16
 125 0004 00AF     	 add r7,sp,#0
 126              	.LCFI14:
 127              	 .cfi_def_cfa_register 7
 128 0006 7860     	 str r0,[r7,#4]
 557:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   return (dma->STATUSCHEV[2]);
 129              	 .loc 1 557 0
 130 0008 7B68     	 ldr r3,[r7,#4]
 131 000a D3F8F032 	 ldr r3,[r3,#752]
 558:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** }
 132              	 .loc 1 558 0
 133 000e 1846     	 mov r0,r3
 134 0010 0C37     	 adds r7,r7,#12
 135              	.LCFI15:
 136              	 .cfi_def_cfa_offset 4
 137 0012 BD46     	 mov sp,r7
 138              	.LCFI16:
 139              	 .cfi_def_cfa_register 13
 140              	 
 141 0014 5DF8047B 	 ldr r7,[sp],#4
 142              	.LCFI17:
 143              	 .cfi_restore 7
 144              	 .cfi_def_cfa_offset 0
 145 0018 7047     	 bx lr
 146              	 .cfi_endproc
 147              	.LFE130:
 149 001a 00BF     	 .section .text.XMC_DMA_GetChannelsSourceTransactionCompleteStatus,"ax",%progbits
 150              	 .align 2
 151              	 .thumb
 152              	 .thumb_func
 154              	XMC_DMA_GetChannelsSourceTransactionCompleteStatus:
 155              	.LFB131:
 559:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 560:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 561:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 562:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @return uint32_t DMA event status
 563:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
 564:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 565:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Get source transaction complete status <br>
 566:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
 567:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * \par
 568:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * The function returns the source transaction complete interrupt status. <br>
 569:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
 570:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * \par<b>Note: </b><br>
 571:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * If the source peripheral is memory, the source transaction complete interrupt is
 572:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * ignored.
 573:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 574:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsSourceTransactionCompleteStatus(XMC_DMA_t *const dma)
 575:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** {
 156              	 .loc 1 575 0
 157              	 .cfi_startproc
 158              	 
 159              	 
 160              	 
 161 0000 80B4     	 push {r7}
 162              	.LCFI18:
 163              	 .cfi_def_cfa_offset 4
 164              	 .cfi_offset 7,-4
 165 0002 83B0     	 sub sp,sp,#12
 166              	.LCFI19:
 167              	 .cfi_def_cfa_offset 16
 168 0004 00AF     	 add r7,sp,#0
 169              	.LCFI20:
 170              	 .cfi_def_cfa_register 7
 171 0006 7860     	 str r0,[r7,#4]
 576:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   return (dma->STATUSCHEV[4]);
 172              	 .loc 1 576 0
 173 0008 7B68     	 ldr r3,[r7,#4]
 174 000a D3F8F832 	 ldr r3,[r3,#760]
 577:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** }
 175              	 .loc 1 577 0
 176 000e 1846     	 mov r0,r3
 177 0010 0C37     	 adds r7,r7,#12
 178              	.LCFI21:
 179              	 .cfi_def_cfa_offset 4
 180 0012 BD46     	 mov sp,r7
 181              	.LCFI22:
 182              	 .cfi_def_cfa_register 13
 183              	 
 184 0014 5DF8047B 	 ldr r7,[sp],#4
 185              	.LCFI23:
 186              	 .cfi_restore 7
 187              	 .cfi_def_cfa_offset 0
 188 0018 7047     	 bx lr
 189              	 .cfi_endproc
 190              	.LFE131:
 192 001a 00BF     	 .section .text.XMC_DMA_GetChannelsDestinationTransactionCompleteStatus,"ax",%progbits
 193              	 .align 2
 194              	 .thumb
 195              	 .thumb_func
 197              	XMC_DMA_GetChannelsDestinationTransactionCompleteStatus:
 198              	.LFB132:
 578:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 579:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 580:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 581:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @return uint32_t DMA event status
 582:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
 583:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 584:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Get destination transaction complete status <br>
 585:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
 586:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * \par
 587:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * The function returns the destination transaction complete interrupt status <br>
 588:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
 589:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * \par<b>Note: </b><br>
 590:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * If the destination peripheral is memory, the destination transaction complete
 591:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * interrupt is ignored.
 592:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 593:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(XMC_DMA_t *const d
 594:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** {
 199              	 .loc 1 594 0
 200              	 .cfi_startproc
 201              	 
 202              	 
 203              	 
 204 0000 80B4     	 push {r7}
 205              	.LCFI24:
 206              	 .cfi_def_cfa_offset 4
 207              	 .cfi_offset 7,-4
 208 0002 83B0     	 sub sp,sp,#12
 209              	.LCFI25:
 210              	 .cfi_def_cfa_offset 16
 211 0004 00AF     	 add r7,sp,#0
 212              	.LCFI26:
 213              	 .cfi_def_cfa_register 7
 214 0006 7860     	 str r0,[r7,#4]
 595:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   return (dma->STATUSCHEV[6]);
 215              	 .loc 1 595 0
 216 0008 7B68     	 ldr r3,[r7,#4]
 217 000a D3F80033 	 ldr r3,[r3,#768]
 596:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** }
 218              	 .loc 1 596 0
 219 000e 1846     	 mov r0,r3
 220 0010 0C37     	 adds r7,r7,#12
 221              	.LCFI27:
 222              	 .cfi_def_cfa_offset 4
 223 0012 BD46     	 mov sp,r7
 224              	.LCFI28:
 225              	 .cfi_def_cfa_register 13
 226              	 
 227 0014 5DF8047B 	 ldr r7,[sp],#4
 228              	.LCFI29:
 229              	 .cfi_restore 7
 230              	 .cfi_def_cfa_offset 0
 231 0018 7047     	 bx lr
 232              	 .cfi_endproc
 233              	.LFE132:
 235 001a 00BF     	 .section .text.XMC_DMA_GetChannelsErrorStatus,"ax",%progbits
 236              	 .align 2
 237              	 .thumb
 238              	 .thumb_func
 240              	XMC_DMA_GetChannelsErrorStatus:
 241              	.LFB133:
 597:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** 
 598:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** /**
 599:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 600:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * @return uint32_t DMA error event status
 601:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
 602:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 603:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * Get DMA error event status <br>
 604:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  *
 605:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * \par
 606:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  * The function returns error interrupt status. <br>
 607:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****  */
 608:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsErrorStatus(XMC_DMA_t *const dma)
 609:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** {
 242              	 .loc 1 609 0
 243              	 .cfi_startproc
 244              	 
 245              	 
 246              	 
 247 0000 80B4     	 push {r7}
 248              	.LCFI30:
 249              	 .cfi_def_cfa_offset 4
 250              	 .cfi_offset 7,-4
 251 0002 83B0     	 sub sp,sp,#12
 252              	.LCFI31:
 253              	 .cfi_def_cfa_offset 16
 254 0004 00AF     	 add r7,sp,#0
 255              	.LCFI32:
 256              	 .cfi_def_cfa_register 7
 257 0006 7860     	 str r0,[r7,#4]
 610:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h ****   return (dma->STATUSCHEV[8]);
 258              	 .loc 1 610 0
 259 0008 7B68     	 ldr r3,[r7,#4]
 260 000a D3F80833 	 ldr r3,[r3,#776]
 611:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_dma.h **** }
 261              	 .loc 1 611 0
 262 000e 1846     	 mov r0,r3
 263 0010 0C37     	 adds r7,r7,#12
 264              	.LCFI33:
 265              	 .cfi_def_cfa_offset 4
 266 0012 BD46     	 mov sp,r7
 267              	.LCFI34:
 268              	 .cfi_def_cfa_register 13
 269              	 
 270 0014 5DF8047B 	 ldr r7,[sp],#4
 271              	.LCFI35:
 272              	 .cfi_restore 7
 273              	 .cfi_def_cfa_offset 0
 274 0018 7047     	 bx lr
 275              	 .cfi_endproc
 276              	.LFE133:
 278              	 .comm dma0_event_handlers,32,4
 279              	 .comm dma1_event_handlers,16,4
 280 001a 00BF     	 .section .text.XMC_DMA_Init,"ax",%progbits
 281              	 .align 2
 282              	 .global XMC_DMA_Init
 283              	 .thumb
 284              	 .thumb_func
 286              	XMC_DMA_Init:
 287              	.LFB164:
 288              	 .file 2 "../Libraries/XMCLib/src/xmc_dma.c"
   1:../Libraries/XMCLib/src/xmc_dma.c **** 
   2:../Libraries/XMCLib/src/xmc_dma.c **** /**
   3:../Libraries/XMCLib/src/xmc_dma.c ****  * @file xmc_dma.c
   4:../Libraries/XMCLib/src/xmc_dma.c ****  * @date 2016-01-12
   5:../Libraries/XMCLib/src/xmc_dma.c ****  *
   6:../Libraries/XMCLib/src/xmc_dma.c ****  * @cond
   7:../Libraries/XMCLib/src/xmc_dma.c ****  **************************************************************************************************
   8:../Libraries/XMCLib/src/xmc_dma.c ****  * XMClib v2.1.4 - XMC Peripheral Driver Library 
   9:../Libraries/XMCLib/src/xmc_dma.c ****  *
  10:../Libraries/XMCLib/src/xmc_dma.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  11:../Libraries/XMCLib/src/xmc_dma.c ****  * All rights reserved.                        
  12:../Libraries/XMCLib/src/xmc_dma.c ****  *                                             
  13:../Libraries/XMCLib/src/xmc_dma.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:../Libraries/XMCLib/src/xmc_dma.c ****  * following conditions are met:   
  15:../Libraries/XMCLib/src/xmc_dma.c ****  *                                                                              
  16:../Libraries/XMCLib/src/xmc_dma.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  17:../Libraries/XMCLib/src/xmc_dma.c ****  * disclaimer.                        
  18:../Libraries/XMCLib/src/xmc_dma.c ****  * 
  19:../Libraries/XMCLib/src/xmc_dma.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  20:../Libraries/XMCLib/src/xmc_dma.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  21:../Libraries/XMCLib/src/xmc_dma.c ****  * 
  22:../Libraries/XMCLib/src/xmc_dma.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  23:../Libraries/XMCLib/src/xmc_dma.c ****  * products derived from this software without specific prior written permission.                  
  24:../Libraries/XMCLib/src/xmc_dma.c ****  *                                                                              
  25:../Libraries/XMCLib/src/xmc_dma.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:../Libraries/XMCLib/src/xmc_dma.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:../Libraries/XMCLib/src/xmc_dma.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:../Libraries/XMCLib/src/xmc_dma.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:../Libraries/XMCLib/src/xmc_dma.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:../Libraries/XMCLib/src/xmc_dma.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:../Libraries/XMCLib/src/xmc_dma.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  32:../Libraries/XMCLib/src/xmc_dma.c ****  *                                                                              
  33:../Libraries/XMCLib/src/xmc_dma.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:../Libraries/XMCLib/src/xmc_dma.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  35:../Libraries/XMCLib/src/xmc_dma.c ****  **************************************************************************************************
  36:../Libraries/XMCLib/src/xmc_dma.c ****  *
  37:../Libraries/XMCLib/src/xmc_dma.c ****  * Change History
  38:../Libraries/XMCLib/src/xmc_dma.c ****  * --------------
  39:../Libraries/XMCLib/src/xmc_dma.c ****  *
  40:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-02-20:
  41:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Initial <br>
  42:../Libraries/XMCLib/src/xmc_dma.c ****  *
  43:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-05-20:
  44:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Add the declarations for the following APIs: <br>
  45:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_DisableRequestLine, XMC_DMA_ClearRequestLine, <br>
  46:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_CH_ClearSourcePeripheralRequest, <br>
  47:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_CH_ClearDestinationPeripheralRequest <br>
  48:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Remove PRIOARRAY <br>
  49:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Documentation updates <br>
  50:../Libraries/XMCLib/src/xmc_dma.c ****  *
  51:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-06-20:
  52:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Removed GetDriverVersion API <br>
  53:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Updated XMC_DMA_CH_Init() to support scatter/gather functionality (only
  54:../Libraries/XMCLib/src/xmc_dma.c ****  *       on advanced DMA channels) <br>
  55:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Updated XMC_DMA_CH_Disable() <br>
  56:../Libraries/XMCLib/src/xmc_dma.c ****  *
  57:../Libraries/XMCLib/src/xmc_dma.c ****  * @endcond
  58:../Libraries/XMCLib/src/xmc_dma.c ****  */
  59:../Libraries/XMCLib/src/xmc_dma.c **** 
  60:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
  61:../Libraries/XMCLib/src/xmc_dma.c ****  * HEADER FILES
  62:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
  63:../Libraries/XMCLib/src/xmc_dma.c **** 
  64:../Libraries/XMCLib/src/xmc_dma.c **** #include "xmc_dma.h"
  65:../Libraries/XMCLib/src/xmc_dma.c **** 
  66:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA0)
  67:../Libraries/XMCLib/src/xmc_dma.c **** 
  68:../Libraries/XMCLib/src/xmc_dma.c **** #include "xmc_scu.h"
  69:../Libraries/XMCLib/src/xmc_dma.c **** 
  70:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
  71:../Libraries/XMCLib/src/xmc_dma.c ****  * MACROS
  72:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
  73:../Libraries/XMCLib/src/xmc_dma.c **** 
  74:../Libraries/XMCLib/src/xmc_dma.c **** #define DLR_SRSEL_RS_MSK (0xfUL)
  75:../Libraries/XMCLib/src/xmc_dma.c **** #define DLR_SRSEL_RS_BITSIZE (4UL)
  76:../Libraries/XMCLib/src/xmc_dma.c **** #define DMA_EVENT_MAX (5UL)
  77:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_DEST_PER_Pos GPDMA0_CH_CFGH_DEST_PER_Pos
  78:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_SRC_PER_Pos GPDMA0_CH_CFGH_SRC_PER_Pos
  79:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA0_CH_CFGH_PER_Msk (0x7U)
  80:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA1_CH_CFGH_PER_Msk (0x3U)
  81:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_PER_BITSIZE (4U)
  82:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CTLL_INT_EN_Msk GPDMA0_CH_CTLL_INT_EN_Msk
  83:../Libraries/XMCLib/src/xmc_dma.c **** 
  84:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
  85:../Libraries/XMCLib/src/xmc_dma.c ****  * LOCAL DATA
  86:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
  87:../Libraries/XMCLib/src/xmc_dma.c **** 
  88:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA0)
  89:../Libraries/XMCLib/src/xmc_dma.c **** XMC_DMA_CH_EVENT_HANDLER_t dma0_event_handlers[XMC_DMA0_NUM_CHANNELS];
  90:../Libraries/XMCLib/src/xmc_dma.c **** #endif
  91:../Libraries/XMCLib/src/xmc_dma.c **** 
  92:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA1)
  93:../Libraries/XMCLib/src/xmc_dma.c **** XMC_DMA_CH_EVENT_HANDLER_t dma1_event_handlers[XMC_DMA1_NUM_CHANNELS];
  94:../Libraries/XMCLib/src/xmc_dma.c **** #endif
  95:../Libraries/XMCLib/src/xmc_dma.c ****  
  96:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
  97:../Libraries/XMCLib/src/xmc_dma.c ****  * API IMPLEMENTATION
  98:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
  99:../Libraries/XMCLib/src/xmc_dma.c **** 
 100:../Libraries/XMCLib/src/xmc_dma.c **** /* Initialize GPDMA */
 101:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Init(XMC_DMA_t *const dma)
 102:../Libraries/XMCLib/src/xmc_dma.c **** {
 289              	 .loc 2 102 0
 290              	 .cfi_startproc
 291              	 
 292              	 
 293 0000 80B5     	 push {r7,lr}
 294              	.LCFI36:
 295              	 .cfi_def_cfa_offset 8
 296              	 .cfi_offset 7,-8
 297              	 .cfi_offset 14,-4
 298 0002 82B0     	 sub sp,sp,#8
 299              	.LCFI37:
 300              	 .cfi_def_cfa_offset 16
 301 0004 00AF     	 add r7,sp,#0
 302              	.LCFI38:
 303              	 .cfi_def_cfa_register 7
 304 0006 7860     	 str r0,[r7,#4]
 103:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_Enable(dma);
 305              	 .loc 2 103 0
 306 0008 7868     	 ldr r0,[r7,#4]
 307 000a FFF7FEFF 	 bl XMC_DMA_Enable
 104:../Libraries/XMCLib/src/xmc_dma.c **** }
 308              	 .loc 2 104 0
 309 000e 0837     	 adds r7,r7,#8
 310              	.LCFI39:
 311              	 .cfi_def_cfa_offset 8
 312 0010 BD46     	 mov sp,r7
 313              	.LCFI40:
 314              	 .cfi_def_cfa_register 13
 315              	 
 316 0012 80BD     	 pop {r7,pc}
 317              	 .cfi_endproc
 318              	.LFE164:
 320              	 .section .text.XMC_DMA_Enable,"ax",%progbits
 321              	 .align 2
 322              	 .global XMC_DMA_Enable
 323              	 .thumb
 324              	 .thumb_func
 326              	XMC_DMA_Enable:
 327              	.LFB165:
 105:../Libraries/XMCLib/src/xmc_dma.c **** 
 106:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable GPDMA module */
 107:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Enable(XMC_DMA_t *const dma)
 108:../Libraries/XMCLib/src/xmc_dma.c **** {
 328              	 .loc 2 108 0
 329              	 .cfi_startproc
 330              	 
 331              	 
 332 0000 80B5     	 push {r7,lr}
 333              	.LCFI41:
 334              	 .cfi_def_cfa_offset 8
 335              	 .cfi_offset 7,-8
 336              	 .cfi_offset 14,-4
 337 0002 82B0     	 sub sp,sp,#8
 338              	.LCFI42:
 339              	 .cfi_def_cfa_offset 16
 340 0004 00AF     	 add r7,sp,#0
 341              	.LCFI43:
 342              	 .cfi_def_cfa_register 7
 343 0006 7860     	 str r0,[r7,#4]
 109:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 110:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 344              	 .loc 2 110 0
 345 0008 7B68     	 ldr r3,[r7,#4]
 346 000a 0B4A     	 ldr r2,.L17
 347 000c 9342     	 cmp r3,r2
 348 000e 06D1     	 bne .L15
 111:../Libraries/XMCLib/src/xmc_dma.c ****   {
 112:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 113:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 114:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 349              	 .loc 2 114 0
 350 0010 0A48     	 ldr r0,.L17+4
 351 0012 FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 115:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 116:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 352              	 .loc 2 116 0
 353 0016 0948     	 ldr r0,.L17+4
 354 0018 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 355 001c 05E0     	 b .L16
 356              	.L15:
 117:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 118:../Libraries/XMCLib/src/xmc_dma.c ****   }
 119:../Libraries/XMCLib/src/xmc_dma.c ****   else
 120:../Libraries/XMCLib/src/xmc_dma.c ****   {
 121:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 122:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 357              	 .loc 2 122 0
 358 001e 0848     	 ldr r0,.L17+8
 359 0020 FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 123:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 124:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 360              	 .loc 2 124 0
 361 0024 0648     	 ldr r0,.L17+8
 362 0026 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 363              	.L16:
 125:../Libraries/XMCLib/src/xmc_dma.c ****   }
 126:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 127:../Libraries/XMCLib/src/xmc_dma.c **** 
 128:../Libraries/XMCLib/src/xmc_dma.c ****   dma->DMACFGREG = 0x1U;
 364              	 .loc 2 128 0
 365 002a 7B68     	 ldr r3,[r7,#4]
 366 002c 0122     	 movs r2,#1
 367 002e C3F89823 	 str r2,[r3,#920]
 129:../Libraries/XMCLib/src/xmc_dma.c **** }
 368              	 .loc 2 129 0
 369 0032 0837     	 adds r7,r7,#8
 370              	.LCFI44:
 371              	 .cfi_def_cfa_offset 8
 372 0034 BD46     	 mov sp,r7
 373              	.LCFI45:
 374              	 .cfi_def_cfa_register 13
 375              	 
 376 0036 80BD     	 pop {r7,pc}
 377              	.L18:
 378              	 .align 2
 379              	.L17:
 380 0038 00400150 	 .word 1342259200
 381 003c 10000020 	 .word 536870928
 382 0040 20000020 	 .word 536870944
 383              	 .cfi_endproc
 384              	.LFE165:
 386              	 .section .text.XMC_DMA_Disable,"ax",%progbits
 387              	 .align 2
 388              	 .global XMC_DMA_Disable
 389              	 .thumb
 390              	 .thumb_func
 392              	XMC_DMA_Disable:
 393              	.LFB166:
 130:../Libraries/XMCLib/src/xmc_dma.c **** 
 131:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable GPDMA module */
 132:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Disable(XMC_DMA_t *const dma)
 133:../Libraries/XMCLib/src/xmc_dma.c **** {
 394              	 .loc 2 133 0
 395              	 .cfi_startproc
 396              	 
 397              	 
 398 0000 80B5     	 push {r7,lr}
 399              	.LCFI46:
 400              	 .cfi_def_cfa_offset 8
 401              	 .cfi_offset 7,-8
 402              	 .cfi_offset 14,-4
 403 0002 82B0     	 sub sp,sp,#8
 404              	.LCFI47:
 405              	 .cfi_def_cfa_offset 16
 406 0004 00AF     	 add r7,sp,#0
 407              	.LCFI48:
 408              	 .cfi_def_cfa_register 7
 409 0006 7860     	 str r0,[r7,#4]
 134:../Libraries/XMCLib/src/xmc_dma.c ****   dma->DMACFGREG = 0x0U;
 410              	 .loc 2 134 0
 411 0008 7B68     	 ldr r3,[r7,#4]
 412 000a 0022     	 movs r2,#0
 413 000c C3F89823 	 str r2,[r3,#920]
 135:../Libraries/XMCLib/src/xmc_dma.c **** 
 136:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 137:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 414              	 .loc 2 137 0
 415 0010 7B68     	 ldr r3,[r7,#4]
 416 0012 094A     	 ldr r2,.L22
 417 0014 9342     	 cmp r3,r2
 418 0016 06D1     	 bne .L20
 138:../Libraries/XMCLib/src/xmc_dma.c ****   {
 139:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 140:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 419              	 .loc 2 140 0
 420 0018 0848     	 ldr r0,.L22+4
 421 001a FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 141:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 142:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 422              	 .loc 2 142 0
 423 001e 0748     	 ldr r0,.L22+4
 424 0020 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 425 0024 05E0     	 b .L19
 426              	.L20:
 143:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 144:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 145:../Libraries/XMCLib/src/xmc_dma.c ****   }
 146:../Libraries/XMCLib/src/xmc_dma.c ****   else
 147:../Libraries/XMCLib/src/xmc_dma.c ****   {
 148:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 427              	 .loc 2 148 0
 428 0026 0648     	 ldr r0,.L22+8
 429 0028 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 149:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 150:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 430              	 .loc 2 150 0
 431 002c 0448     	 ldr r0,.L22+8
 432 002e FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 433              	.L19:
 151:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 152:../Libraries/XMCLib/src/xmc_dma.c ****   }
 153:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 154:../Libraries/XMCLib/src/xmc_dma.c **** }
 434              	 .loc 2 154 0
 435 0032 0837     	 adds r7,r7,#8
 436              	.LCFI49:
 437              	 .cfi_def_cfa_offset 8
 438 0034 BD46     	 mov sp,r7
 439              	.LCFI50:
 440              	 .cfi_def_cfa_register 13
 441              	 
 442 0036 80BD     	 pop {r7,pc}
 443              	.L23:
 444              	 .align 2
 445              	.L22:
 446 0038 00400150 	 .word 1342259200
 447 003c 10000020 	 .word 536870928
 448 0040 20000020 	 .word 536870944
 449              	 .cfi_endproc
 450              	.LFE166:
 452              	 .section .text.XMC_DMA_IsEnabled,"ax",%progbits
 453              	 .align 2
 454              	 .global XMC_DMA_IsEnabled
 455              	 .thumb
 456              	 .thumb_func
 458              	XMC_DMA_IsEnabled:
 459              	.LFB167:
 155:../Libraries/XMCLib/src/xmc_dma.c **** 
 156:../Libraries/XMCLib/src/xmc_dma.c **** /* Check is the GPDMA peripheral is enabled */
 157:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma)
 158:../Libraries/XMCLib/src/xmc_dma.c **** {
 460              	 .loc 2 158 0
 461              	 .cfi_startproc
 462              	 
 463              	 
 464 0000 80B5     	 push {r7,lr}
 465              	.LCFI51:
 466              	 .cfi_def_cfa_offset 8
 467              	 .cfi_offset 7,-8
 468              	 .cfi_offset 14,-4
 469 0002 84B0     	 sub sp,sp,#16
 470              	.LCFI52:
 471              	 .cfi_def_cfa_offset 24
 472 0004 00AF     	 add r7,sp,#0
 473              	.LCFI53:
 474              	 .cfi_def_cfa_register 7
 475 0006 7860     	 str r0,[r7,#4]
 159:../Libraries/XMCLib/src/xmc_dma.c ****   bool status;
 160:../Libraries/XMCLib/src/xmc_dma.c **** 
 161:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 162:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 476              	 .loc 2 162 0
 477 0008 7B68     	 ldr r3,[r7,#4]
 478 000a 334A     	 ldr r2,.L35
 479 000c 9342     	 cmp r3,r2
 480 000e 25D1     	 bne .L25
 163:../Libraries/XMCLib/src/xmc_dma.c ****   {
 164:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 165:../Libraries/XMCLib/src/xmc_dma.c ****     status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 481              	 .loc 2 165 0
 482 0010 3248     	 ldr r0,.L35+4
 483 0012 FFF7FEFF 	 bl XMC_SCU_RESET_IsPeripheralResetAsserted
 484 0016 0346     	 mov r3,r0
 485 0018 002B     	 cmp r3,#0
 486 001a 14BF     	 ite ne
 487 001c 0123     	 movne r3,#1
 488 001e 0023     	 moveq r3,#0
 489 0020 DBB2     	 uxtb r3,r3
 490 0022 83F00103 	 eor r3,r3,#1
 491 0026 DBB2     	 uxtb r3,r3
 492 0028 FB73     	 strb r3,[r7,#15]
 493 002a FB7B     	 ldrb r3,[r7,#15]
 494 002c 03F00103 	 and r3,r3,#1
 495 0030 FB73     	 strb r3,[r7,#15]
 166:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 167:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 496              	 .loc 2 167 0
 497 0032 FB7B     	 ldrb r3,[r7,#15]
 498 0034 002B     	 cmp r3,#0
 499 0036 0AD0     	 beq .L26
 500              	 .loc 2 167 0 is_stmt 0 discriminator 1
 501 0038 2848     	 ldr r0,.L35+4
 502 003a FFF7FEFF 	 bl XMC_SCU_CLOCK_IsPeripheralClockGated
 503 003e 0346     	 mov r3,r0
 504 0040 83F00103 	 eor r3,r3,#1
 505 0044 DBB2     	 uxtb r3,r3
 506 0046 002B     	 cmp r3,#0
 507 0048 01D0     	 beq .L26
 508              	 .loc 2 167 0 discriminator 3
 509 004a 0123     	 movs r3,#1
 510 004c 00E0     	 b .L27
 511              	.L26:
 512              	 .loc 2 167 0 discriminator 4
 513 004e 0023     	 movs r3,#0
 514              	.L27:
 515              	 .loc 2 167 0 discriminator 6
 516 0050 FB73     	 strb r3,[r7,#15]
 517 0052 FB7B     	 ldrb r3,[r7,#15]
 518 0054 03F00103 	 and r3,r3,#1
 519 0058 FB73     	 strb r3,[r7,#15]
 520 005a 24E0     	 b .L28
 521              	.L25:
 168:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 169:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 170:../Libraries/XMCLib/src/xmc_dma.c ****   }
 171:../Libraries/XMCLib/src/xmc_dma.c ****   else
 172:../Libraries/XMCLib/src/xmc_dma.c ****   {
 173:../Libraries/XMCLib/src/xmc_dma.c ****     status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 522              	 .loc 2 173 0 is_stmt 1
 523 005c 2048     	 ldr r0,.L35+8
 524 005e FFF7FEFF 	 bl XMC_SCU_RESET_IsPeripheralResetAsserted
 525 0062 0346     	 mov r3,r0
 526 0064 002B     	 cmp r3,#0
 527 0066 14BF     	 ite ne
 528 0068 0123     	 movne r3,#1
 529 006a 0023     	 moveq r3,#0
 530 006c DBB2     	 uxtb r3,r3
 531 006e 83F00103 	 eor r3,r3,#1
 532 0072 DBB2     	 uxtb r3,r3
 533 0074 FB73     	 strb r3,[r7,#15]
 534 0076 FB7B     	 ldrb r3,[r7,#15]
 535 0078 03F00103 	 and r3,r3,#1
 536 007c FB73     	 strb r3,[r7,#15]
 174:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 175:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 537              	 .loc 2 175 0
 538 007e FB7B     	 ldrb r3,[r7,#15]
 539 0080 002B     	 cmp r3,#0
 540 0082 0AD0     	 beq .L29
 541              	 .loc 2 175 0 is_stmt 0 discriminator 1
 542 0084 1648     	 ldr r0,.L35+8
 543 0086 FFF7FEFF 	 bl XMC_SCU_CLOCK_IsPeripheralClockGated
 544 008a 0346     	 mov r3,r0
 545 008c 83F00103 	 eor r3,r3,#1
 546 0090 DBB2     	 uxtb r3,r3
 547 0092 002B     	 cmp r3,#0
 548 0094 01D0     	 beq .L29
 549              	 .loc 2 175 0 discriminator 3
 550 0096 0123     	 movs r3,#1
 551 0098 00E0     	 b .L30
 552              	.L29:
 553              	 .loc 2 175 0 discriminator 4
 554 009a 0023     	 movs r3,#0
 555              	.L30:
 556              	 .loc 2 175 0 discriminator 6
 557 009c FB73     	 strb r3,[r7,#15]
 558 009e FB7B     	 ldrb r3,[r7,#15]
 559 00a0 03F00103 	 and r3,r3,#1
 560 00a4 FB73     	 strb r3,[r7,#15]
 561              	.L28:
 176:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 177:../Libraries/XMCLib/src/xmc_dma.c ****   }
 178:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 179:../Libraries/XMCLib/src/xmc_dma.c **** 
 180:../Libraries/XMCLib/src/xmc_dma.c ****   /* DMA reset is not asserted and peripheral clock is not gated */
 181:../Libraries/XMCLib/src/xmc_dma.c ****   if (status == true)
 562              	 .loc 2 181 0 is_stmt 1
 563 00a6 FB7B     	 ldrb r3,[r7,#15]
 564 00a8 002B     	 cmp r3,#0
 565 00aa 0FD0     	 beq .L31
 182:../Libraries/XMCLib/src/xmc_dma.c ****   {
 183:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && (dma->DMACFGREG != 0U);
 566              	 .loc 2 183 0
 567 00ac FB7B     	 ldrb r3,[r7,#15]
 568 00ae 002B     	 cmp r3,#0
 569 00b0 06D0     	 beq .L32
 570              	 .loc 2 183 0 is_stmt 0 discriminator 1
 571 00b2 7B68     	 ldr r3,[r7,#4]
 572 00b4 D3F89833 	 ldr r3,[r3,#920]
 573 00b8 002B     	 cmp r3,#0
 574 00ba 01D0     	 beq .L32
 575              	 .loc 2 183 0 discriminator 3
 576 00bc 0123     	 movs r3,#1
 577 00be 00E0     	 b .L33
 578              	.L32:
 579              	 .loc 2 183 0 discriminator 4
 580 00c0 0023     	 movs r3,#0
 581              	.L33:
 582              	 .loc 2 183 0 discriminator 6
 583 00c2 FB73     	 strb r3,[r7,#15]
 584 00c4 FB7B     	 ldrb r3,[r7,#15]
 585 00c6 03F00103 	 and r3,r3,#1
 586 00ca FB73     	 strb r3,[r7,#15]
 587              	.L31:
 184:../Libraries/XMCLib/src/xmc_dma.c ****   }
 185:../Libraries/XMCLib/src/xmc_dma.c **** 
 186:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 588              	 .loc 2 186 0 is_stmt 1
 589 00cc FB7B     	 ldrb r3,[r7,#15]
 187:../Libraries/XMCLib/src/xmc_dma.c **** }
 590              	 .loc 2 187 0
 591 00ce 1846     	 mov r0,r3
 592 00d0 1037     	 adds r7,r7,#16
 593              	.LCFI54:
 594              	 .cfi_def_cfa_offset 8
 595 00d2 BD46     	 mov sp,r7
 596              	.LCFI55:
 597              	 .cfi_def_cfa_register 13
 598              	 
 599 00d4 80BD     	 pop {r7,pc}
 600              	.L36:
 601 00d6 00BF     	 .align 2
 602              	.L35:
 603 00d8 00400150 	 .word 1342259200
 604 00dc 10000020 	 .word 536870928
 605 00e0 20000020 	 .word 536870944
 606              	 .cfi_endproc
 607              	.LFE167:
 609              	 .section .text.XMC_DMA_EnableRequestLine,"ax",%progbits
 610              	 .align 2
 611              	 .global XMC_DMA_EnableRequestLine
 612              	 .thumb
 613              	 .thumb_func
 615              	XMC_DMA_EnableRequestLine:
 616              	.LFB168:
 188:../Libraries/XMCLib/src/xmc_dma.c **** 
 189:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable request line */
 190:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_EnableRequestLine(XMC_DMA_t *const dma, uint8_t line, uint8_t peripheral)
 191:../Libraries/XMCLib/src/xmc_dma.c **** {
 617              	 .loc 2 191 0
 618              	 .cfi_startproc
 619              	 
 620              	 
 621              	 
 622 0000 80B4     	 push {r7}
 623              	.LCFI56:
 624              	 .cfi_def_cfa_offset 4
 625              	 .cfi_offset 7,-4
 626 0002 83B0     	 sub sp,sp,#12
 627              	.LCFI57:
 628              	 .cfi_def_cfa_offset 16
 629 0004 00AF     	 add r7,sp,#0
 630              	.LCFI58:
 631              	 .cfi_def_cfa_register 7
 632 0006 7860     	 str r0,[r7,#4]
 633 0008 0B46     	 mov r3,r1
 634 000a FB70     	 strb r3,[r7,#3]
 635 000c 1346     	 mov r3,r2
 636 000e BB70     	 strb r3,[r7,#2]
 192:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 193:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 637              	 .loc 2 193 0
 638 0010 7B68     	 ldr r3,[r7,#4]
 639 0012 1F4A     	 ldr r2,.L40
 640 0014 9342     	 cmp r3,r2
 641 0016 1BD1     	 bne .L38
 194:../Libraries/XMCLib/src/xmc_dma.c ****   {
 195:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 196:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 642              	 .loc 2 196 0
 643 0018 1E48     	 ldr r0,.L40+4
 644 001a 1E4B     	 ldr r3,.L40+4
 645 001c 9A68     	 ldr r2,[r3,#8]
 646 001e FB78     	 ldrb r3,[r7,#3]
 647 0020 9B00     	 lsls r3,r3,#2
 648 0022 1946     	 mov r1,r3
 649 0024 0F23     	 movs r3,#15
 650 0026 8B40     	 lsls r3,r3,r1
 651 0028 DB43     	 mvns r3,r3
 652 002a 1A40     	 ands r2,r2,r3
 197:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 653              	 .loc 2 197 0
 654 002c BB78     	 ldrb r3,[r7,#2]
 655 002e F978     	 ldrb r1,[r7,#3]
 656 0030 8900     	 lsls r1,r1,#2
 657 0032 8B40     	 lsls r3,r3,r1
 196:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 658              	 .loc 2 196 0
 659 0034 1343     	 orrs r3,r3,r2
 660 0036 8360     	 str r3,[r0,#8]
 198:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
 661              	 .loc 2 198 0
 662 0038 1649     	 ldr r1,.L40+4
 663 003a 164B     	 ldr r3,.L40+4
 664 003c 1A69     	 ldr r2,[r3,#16]
 665 003e FB78     	 ldrb r3,[r7,#3]
 666 0040 03F00703 	 and r3,r3,#7
 667 0044 0120     	 movs r0,#1
 668 0046 00FA03F3 	 lsl r3,r0,r3
 669 004a 1343     	 orrs r3,r3,r2
 670 004c 0B61     	 str r3,[r1,#16]
 671 004e 19E0     	 b .L37
 672              	.L38:
 199:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 200:../Libraries/XMCLib/src/xmc_dma.c ****   }
 201:../Libraries/XMCLib/src/xmc_dma.c ****   else
 202:../Libraries/XMCLib/src/xmc_dma.c ****   {
 203:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 673              	 .loc 2 203 0
 674 0050 1048     	 ldr r0,.L40+4
 675 0052 104B     	 ldr r3,.L40+4
 676 0054 DA68     	 ldr r2,[r3,#12]
 677 0056 FB78     	 ldrb r3,[r7,#3]
 678 0058 9B00     	 lsls r3,r3,#2
 679 005a 1946     	 mov r1,r3
 680 005c 0F23     	 movs r3,#15
 681 005e 8B40     	 lsls r3,r3,r1
 682 0060 DB43     	 mvns r3,r3
 683 0062 1A40     	 ands r2,r2,r3
 204:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 684              	 .loc 2 204 0
 685 0064 BB78     	 ldrb r3,[r7,#2]
 686 0066 F978     	 ldrb r1,[r7,#3]
 687 0068 8900     	 lsls r1,r1,#2
 688 006a 8B40     	 lsls r3,r3,r1
 203:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 689              	 .loc 2 203 0
 690 006c 1343     	 orrs r3,r3,r2
 691 006e C360     	 str r3,[r0,#12]
 205:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= (0x100UL << line);
 692              	 .loc 2 205 0
 693 0070 0849     	 ldr r1,.L40+4
 694 0072 084B     	 ldr r3,.L40+4
 695 0074 1A69     	 ldr r2,[r3,#16]
 696 0076 FB78     	 ldrb r3,[r7,#3]
 697 0078 4FF48070 	 mov r0,#256
 698 007c 00FA03F3 	 lsl r3,r0,r3
 699 0080 1343     	 orrs r3,r3,r2
 700 0082 0B61     	 str r3,[r1,#16]
 701              	.L37:
 206:../Libraries/XMCLib/src/xmc_dma.c ****   }
 207:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 208:../Libraries/XMCLib/src/xmc_dma.c **** }
 702              	 .loc 2 208 0
 703 0084 0C37     	 adds r7,r7,#12
 704              	.LCFI59:
 705              	 .cfi_def_cfa_offset 4
 706 0086 BD46     	 mov sp,r7
 707              	.LCFI60:
 708              	 .cfi_def_cfa_register 13
 709              	 
 710 0088 5DF8047B 	 ldr r7,[sp],#4
 711              	.LCFI61:
 712              	 .cfi_restore 7
 713              	 .cfi_def_cfa_offset 0
 714 008c 7047     	 bx lr
 715              	.L41:
 716 008e 00BF     	 .align 2
 717              	.L40:
 718 0090 00400150 	 .word 1342259200
 719 0094 00490050 	 .word 1342195968
 720              	 .cfi_endproc
 721              	.LFE168:
 723              	 .section .text.XMC_DMA_DisableRequestLine,"ax",%progbits
 724              	 .align 2
 725              	 .global XMC_DMA_DisableRequestLine
 726              	 .thumb
 727              	 .thumb_func
 729              	XMC_DMA_DisableRequestLine:
 730              	.LFB169:
 209:../Libraries/XMCLib/src/xmc_dma.c **** 
 210:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_DisableRequestLine(XMC_DMA_t *const dma, uint8_t line)
 211:../Libraries/XMCLib/src/xmc_dma.c **** {
 731              	 .loc 2 211 0
 732              	 .cfi_startproc
 733              	 
 734              	 
 735              	 
 736 0000 80B4     	 push {r7}
 737              	.LCFI62:
 738              	 .cfi_def_cfa_offset 4
 739              	 .cfi_offset 7,-4
 740 0002 83B0     	 sub sp,sp,#12
 741              	.LCFI63:
 742              	 .cfi_def_cfa_offset 16
 743 0004 00AF     	 add r7,sp,#0
 744              	.LCFI64:
 745              	 .cfi_def_cfa_register 7
 746 0006 7860     	 str r0,[r7,#4]
 747 0008 0B46     	 mov r3,r1
 748 000a FB70     	 strb r3,[r7,#3]
 212:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 213:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 749              	 .loc 2 213 0
 750 000c 7B68     	 ldr r3,[r7,#4]
 751 000e 0F4A     	 ldr r2,.L45
 752 0010 9342     	 cmp r3,r2
 753 0012 0AD1     	 bne .L43
 214:../Libraries/XMCLib/src/xmc_dma.c ****   {
 215:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 216:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x1UL << line);
 754              	 .loc 2 216 0
 755 0014 0E49     	 ldr r1,.L45+4
 756 0016 0E4B     	 ldr r3,.L45+4
 757 0018 1A69     	 ldr r2,[r3,#16]
 758 001a FB78     	 ldrb r3,[r7,#3]
 759 001c 0120     	 movs r0,#1
 760 001e 00FA03F3 	 lsl r3,r0,r3
 761 0022 DB43     	 mvns r3,r3
 762 0024 1340     	 ands r3,r3,r2
 763 0026 0B61     	 str r3,[r1,#16]
 764 0028 0AE0     	 b .L42
 765              	.L43:
 217:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 218:../Libraries/XMCLib/src/xmc_dma.c ****   }
 219:../Libraries/XMCLib/src/xmc_dma.c ****   else
 220:../Libraries/XMCLib/src/xmc_dma.c ****   {
 221:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x100UL << line);
 766              	 .loc 2 221 0
 767 002a 0949     	 ldr r1,.L45+4
 768 002c 084B     	 ldr r3,.L45+4
 769 002e 1A69     	 ldr r2,[r3,#16]
 770 0030 FB78     	 ldrb r3,[r7,#3]
 771 0032 4FF48070 	 mov r0,#256
 772 0036 00FA03F3 	 lsl r3,r0,r3
 773 003a DB43     	 mvns r3,r3
 774 003c 1340     	 ands r3,r3,r2
 775 003e 0B61     	 str r3,[r1,#16]
 776              	.L42:
 222:../Libraries/XMCLib/src/xmc_dma.c ****   }
 223:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 224:../Libraries/XMCLib/src/xmc_dma.c **** }
 777              	 .loc 2 224 0
 778 0040 0C37     	 adds r7,r7,#12
 779              	.LCFI65:
 780              	 .cfi_def_cfa_offset 4
 781 0042 BD46     	 mov sp,r7
 782              	.LCFI66:
 783              	 .cfi_def_cfa_register 13
 784              	 
 785 0044 5DF8047B 	 ldr r7,[sp],#4
 786              	.LCFI67:
 787              	 .cfi_restore 7
 788              	 .cfi_def_cfa_offset 0
 789 0048 7047     	 bx lr
 790              	.L46:
 791 004a 00BF     	 .align 2
 792              	.L45:
 793 004c 00400150 	 .word 1342259200
 794 0050 00490050 	 .word 1342195968
 795              	 .cfi_endproc
 796              	.LFE169:
 798              	 .section .text.XMC_DMA_ClearRequestLine,"ax",%progbits
 799              	 .align 2
 800              	 .global XMC_DMA_ClearRequestLine
 801              	 .thumb
 802              	 .thumb_func
 804              	XMC_DMA_ClearRequestLine:
 805              	.LFB170:
 225:../Libraries/XMCLib/src/xmc_dma.c **** 
 226:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_ClearRequestLine(XMC_DMA_t *const dma, uint8_t line)
 227:../Libraries/XMCLib/src/xmc_dma.c **** {
 806              	 .loc 2 227 0
 807              	 .cfi_startproc
 808              	 
 809              	 
 810              	 
 811 0000 80B4     	 push {r7}
 812              	.LCFI68:
 813              	 .cfi_def_cfa_offset 4
 814              	 .cfi_offset 7,-4
 815 0002 83B0     	 sub sp,sp,#12
 816              	.LCFI69:
 817              	 .cfi_def_cfa_offset 16
 818 0004 00AF     	 add r7,sp,#0
 819              	.LCFI70:
 820              	 .cfi_def_cfa_register 7
 821 0006 7860     	 str r0,[r7,#4]
 822 0008 0B46     	 mov r3,r1
 823 000a FB70     	 strb r3,[r7,#3]
 228:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 229:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 824              	 .loc 2 229 0
 825 000c 7B68     	 ldr r3,[r7,#4]
 826 000e 184A     	 ldr r2,.L50
 827 0010 9342     	 cmp r3,r2
 828 0012 13D1     	 bne .L48
 230:../Libraries/XMCLib/src/xmc_dma.c ****   {
 231:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 232:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x1UL << line);
 829              	 .loc 2 232 0
 830 0014 1749     	 ldr r1,.L50+4
 831 0016 174B     	 ldr r3,.L50+4
 832 0018 1A69     	 ldr r2,[r3,#16]
 833 001a FB78     	 ldrb r3,[r7,#3]
 834 001c 0120     	 movs r0,#1
 835 001e 00FA03F3 	 lsl r3,r0,r3
 836 0022 DB43     	 mvns r3,r3
 837 0024 1340     	 ands r3,r3,r2
 838 0026 0B61     	 str r3,[r1,#16]
 233:../Libraries/XMCLib/src/xmc_dma.c **** 	DLR->LNEN |= 0x1UL << line;
 839              	 .loc 2 233 0
 840 0028 1249     	 ldr r1,.L50+4
 841 002a 124B     	 ldr r3,.L50+4
 842 002c 1A69     	 ldr r2,[r3,#16]
 843 002e FB78     	 ldrb r3,[r7,#3]
 844 0030 0120     	 movs r0,#1
 845 0032 00FA03F3 	 lsl r3,r0,r3
 846 0036 1343     	 orrs r3,r3,r2
 847 0038 0B61     	 str r3,[r1,#16]
 848 003a 14E0     	 b .L47
 849              	.L48:
 234:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 235:../Libraries/XMCLib/src/xmc_dma.c ****   }
 236:../Libraries/XMCLib/src/xmc_dma.c ****   else
 237:../Libraries/XMCLib/src/xmc_dma.c ****   {
 238:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x100UL << line);
 850              	 .loc 2 238 0
 851 003c 0D49     	 ldr r1,.L50+4
 852 003e 0D4B     	 ldr r3,.L50+4
 853 0040 1A69     	 ldr r2,[r3,#16]
 854 0042 FB78     	 ldrb r3,[r7,#3]
 855 0044 4FF48070 	 mov r0,#256
 856 0048 00FA03F3 	 lsl r3,r0,r3
 857 004c DB43     	 mvns r3,r3
 858 004e 1340     	 ands r3,r3,r2
 859 0050 0B61     	 str r3,[r1,#16]
 239:../Libraries/XMCLib/src/xmc_dma.c **** 	DLR->LNEN |= 0x100UL << line;
 860              	 .loc 2 239 0
 861 0052 0849     	 ldr r1,.L50+4
 862 0054 074B     	 ldr r3,.L50+4
 863 0056 1A69     	 ldr r2,[r3,#16]
 864 0058 FB78     	 ldrb r3,[r7,#3]
 865 005a 4FF48070 	 mov r0,#256
 866 005e 00FA03F3 	 lsl r3,r0,r3
 867 0062 1343     	 orrs r3,r3,r2
 868 0064 0B61     	 str r3,[r1,#16]
 869              	.L47:
 240:../Libraries/XMCLib/src/xmc_dma.c ****   }
 241:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 242:../Libraries/XMCLib/src/xmc_dma.c **** }
 870              	 .loc 2 242 0
 871 0066 0C37     	 adds r7,r7,#12
 872              	.LCFI71:
 873              	 .cfi_def_cfa_offset 4
 874 0068 BD46     	 mov sp,r7
 875              	.LCFI72:
 876              	 .cfi_def_cfa_register 13
 877              	 
 878 006a 5DF8047B 	 ldr r7,[sp],#4
 879              	.LCFI73:
 880              	 .cfi_restore 7
 881              	 .cfi_def_cfa_offset 0
 882 006e 7047     	 bx lr
 883              	.L51:
 884              	 .align 2
 885              	.L50:
 886 0070 00400150 	 .word 1342259200
 887 0074 00490050 	 .word 1342195968
 888              	 .cfi_endproc
 889              	.LFE170:
 891              	 .section .text.XMC_DMA_GetOverrunStatus,"ax",%progbits
 892              	 .align 2
 893              	 .global XMC_DMA_GetOverrunStatus
 894              	 .thumb
 895              	 .thumb_func
 897              	XMC_DMA_GetOverrunStatus:
 898              	.LFB171:
 243:../Libraries/XMCLib/src/xmc_dma.c **** 
 244:../Libraries/XMCLib/src/xmc_dma.c **** /* Get DMA DLR overrun status */
 245:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_GetOverrunStatus(XMC_DMA_t *const dma, uint8_t line)
 246:../Libraries/XMCLib/src/xmc_dma.c **** {
 899              	 .loc 2 246 0
 900              	 .cfi_startproc
 901              	 
 902              	 
 903              	 
 904 0000 80B4     	 push {r7}
 905              	.LCFI74:
 906              	 .cfi_def_cfa_offset 4
 907              	 .cfi_offset 7,-4
 908 0002 85B0     	 sub sp,sp,#20
 909              	.LCFI75:
 910              	 .cfi_def_cfa_offset 24
 911 0004 00AF     	 add r7,sp,#0
 912              	.LCFI76:
 913              	 .cfi_def_cfa_register 7
 914 0006 7860     	 str r0,[r7,#4]
 915 0008 0B46     	 mov r3,r1
 916 000a FB70     	 strb r3,[r7,#3]
 247:../Libraries/XMCLib/src/xmc_dma.c ****   bool status;
 248:../Libraries/XMCLib/src/xmc_dma.c **** 
 249:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 250:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 917              	 .loc 2 250 0
 918 000c 7B68     	 ldr r3,[r7,#4]
 919 000e 124A     	 ldr r2,.L56
 920 0010 9342     	 cmp r3,r2
 921 0012 0CD1     	 bne .L53
 251:../Libraries/XMCLib/src/xmc_dma.c ****   {
 252:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 253:../Libraries/XMCLib/src/xmc_dma.c ****     status = (bool)(DLR->OVRSTAT & (0x1UL << line));
 922              	 .loc 2 253 0
 923 0014 114B     	 ldr r3,.L56+4
 924 0016 1A68     	 ldr r2,[r3]
 925 0018 FB78     	 ldrb r3,[r7,#3]
 926 001a 22FA03F3 	 lsr r3,r2,r3
 927 001e 03F00103 	 and r3,r3,#1
 928 0022 002B     	 cmp r3,#0
 929 0024 14BF     	 ite ne
 930 0026 0123     	 movne r3,#1
 931 0028 0023     	 moveq r3,#0
 932 002a FB73     	 strb r3,[r7,#15]
 933 002c 0CE0     	 b .L54
 934              	.L53:
 254:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 255:../Libraries/XMCLib/src/xmc_dma.c ****   }
 256:../Libraries/XMCLib/src/xmc_dma.c ****   else
 257:../Libraries/XMCLib/src/xmc_dma.c ****   {
 258:../Libraries/XMCLib/src/xmc_dma.c ****     status = (bool)(DLR->OVRSTAT & (0x100UL << line));
 935              	 .loc 2 258 0
 936 002e 0B4B     	 ldr r3,.L56+4
 937 0030 1A68     	 ldr r2,[r3]
 938 0032 FB78     	 ldrb r3,[r7,#3]
 939 0034 4FF48071 	 mov r1,#256
 940 0038 01FA03F3 	 lsl r3,r1,r3
 941 003c 1340     	 ands r3,r3,r2
 942 003e 002B     	 cmp r3,#0
 943 0040 14BF     	 ite ne
 944 0042 0123     	 movne r3,#1
 945 0044 0023     	 moveq r3,#0
 946 0046 FB73     	 strb r3,[r7,#15]
 947              	.L54:
 259:../Libraries/XMCLib/src/xmc_dma.c ****   }
 260:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 261:../Libraries/XMCLib/src/xmc_dma.c **** 
 262:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 948              	 .loc 2 262 0
 949 0048 FB7B     	 ldrb r3,[r7,#15]
 263:../Libraries/XMCLib/src/xmc_dma.c **** }
 950              	 .loc 2 263 0
 951 004a 1846     	 mov r0,r3
 952 004c 1437     	 adds r7,r7,#20
 953              	.LCFI77:
 954              	 .cfi_def_cfa_offset 4
 955 004e BD46     	 mov sp,r7
 956              	.LCFI78:
 957              	 .cfi_def_cfa_register 13
 958              	 
 959 0050 5DF8047B 	 ldr r7,[sp],#4
 960              	.LCFI79:
 961              	 .cfi_restore 7
 962              	 .cfi_def_cfa_offset 0
 963 0054 7047     	 bx lr
 964              	.L57:
 965 0056 00BF     	 .align 2
 966              	.L56:
 967 0058 00400150 	 .word 1342259200
 968 005c 00490050 	 .word 1342195968
 969              	 .cfi_endproc
 970              	.LFE171:
 972              	 .section .text.XMC_DMA_ClearOverrunStatus,"ax",%progbits
 973              	 .align 2
 974              	 .global XMC_DMA_ClearOverrunStatus
 975              	 .thumb
 976              	 .thumb_func
 978              	XMC_DMA_ClearOverrunStatus:
 979              	.LFB172:
 264:../Libraries/XMCLib/src/xmc_dma.c **** 
 265:../Libraries/XMCLib/src/xmc_dma.c **** /* Clear DMA DLR overrun status */
 266:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_ClearOverrunStatus(XMC_DMA_t *const dma, const uint8_t line)
 267:../Libraries/XMCLib/src/xmc_dma.c **** {
 980              	 .loc 2 267 0
 981              	 .cfi_startproc
 982              	 
 983              	 
 984              	 
 985 0000 80B4     	 push {r7}
 986              	.LCFI80:
 987              	 .cfi_def_cfa_offset 4
 988              	 .cfi_offset 7,-4
 989 0002 83B0     	 sub sp,sp,#12
 990              	.LCFI81:
 991              	 .cfi_def_cfa_offset 16
 992 0004 00AF     	 add r7,sp,#0
 993              	.LCFI82:
 994              	 .cfi_def_cfa_register 7
 995 0006 7860     	 str r0,[r7,#4]
 996 0008 0B46     	 mov r3,r1
 997 000a FB70     	 strb r3,[r7,#3]
 268:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 269:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 998              	 .loc 2 269 0
 999 000c 7B68     	 ldr r3,[r7,#4]
 1000 000e 0E4A     	 ldr r2,.L61
 1001 0010 9342     	 cmp r3,r2
 1002 0012 09D1     	 bne .L59
 270:../Libraries/XMCLib/src/xmc_dma.c ****   {
 271:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 272:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->OVRCLR |= (uint32_t)(0x1UL << line);
 1003              	 .loc 2 272 0
 1004 0014 0D49     	 ldr r1,.L61+4
 1005 0016 0D4B     	 ldr r3,.L61+4
 1006 0018 5A68     	 ldr r2,[r3,#4]
 1007 001a FB78     	 ldrb r3,[r7,#3]
 1008 001c 0120     	 movs r0,#1
 1009 001e 00FA03F3 	 lsl r3,r0,r3
 1010 0022 1343     	 orrs r3,r3,r2
 1011 0024 4B60     	 str r3,[r1,#4]
 1012 0026 09E0     	 b .L58
 1013              	.L59:
 273:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 274:../Libraries/XMCLib/src/xmc_dma.c ****   }
 275:../Libraries/XMCLib/src/xmc_dma.c ****   else
 276:../Libraries/XMCLib/src/xmc_dma.c ****   {
 277:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->OVRCLR |= (uint32_t)(0x100UL << line);
 1014              	 .loc 2 277 0
 1015 0028 0849     	 ldr r1,.L61+4
 1016 002a 084B     	 ldr r3,.L61+4
 1017 002c 5A68     	 ldr r2,[r3,#4]
 1018 002e FB78     	 ldrb r3,[r7,#3]
 1019 0030 4FF48070 	 mov r0,#256
 1020 0034 00FA03F3 	 lsl r3,r0,r3
 1021 0038 1343     	 orrs r3,r3,r2
 1022 003a 4B60     	 str r3,[r1,#4]
 1023              	.L58:
 278:../Libraries/XMCLib/src/xmc_dma.c ****   }
 279:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 280:../Libraries/XMCLib/src/xmc_dma.c **** }
 1024              	 .loc 2 280 0
 1025 003c 0C37     	 adds r7,r7,#12
 1026              	.LCFI83:
 1027              	 .cfi_def_cfa_offset 4
 1028 003e BD46     	 mov sp,r7
 1029              	.LCFI84:
 1030              	 .cfi_def_cfa_register 13
 1031              	 
 1032 0040 5DF8047B 	 ldr r7,[sp],#4
 1033              	.LCFI85:
 1034              	 .cfi_restore 7
 1035              	 .cfi_def_cfa_offset 0
 1036 0044 7047     	 bx lr
 1037              	.L62:
 1038 0046 00BF     	 .align 2
 1039              	.L61:
 1040 0048 00400150 	 .word 1342259200
 1041 004c 00490050 	 .word 1342195968
 1042              	 .cfi_endproc
 1043              	.LFE172:
 1045              	 .section .text.XMC_DMA_CH_Disable,"ax",%progbits
 1046              	 .align 2
 1047              	 .global XMC_DMA_CH_Disable
 1048              	 .thumb
 1049              	 .thumb_func
 1051              	XMC_DMA_CH_Disable:
 1052              	.LFB173:
 281:../Libraries/XMCLib/src/xmc_dma.c **** 
 282:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable DMA channel */
 283:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Disable(XMC_DMA_t *const dma, const uint8_t channel)
 284:../Libraries/XMCLib/src/xmc_dma.c **** {
 1053              	 .loc 2 284 0
 1054              	 .cfi_startproc
 1055              	 
 1056              	 
 1057              	 
 1058 0000 80B4     	 push {r7}
 1059              	.LCFI86:
 1060              	 .cfi_def_cfa_offset 4
 1061              	 .cfi_offset 7,-4
 1062 0002 83B0     	 sub sp,sp,#12
 1063              	.LCFI87:
 1064              	 .cfi_def_cfa_offset 16
 1065 0004 00AF     	 add r7,sp,#0
 1066              	.LCFI88:
 1067              	 .cfi_def_cfa_register 7
 1068 0006 7860     	 str r0,[r7,#4]
 1069 0008 0B46     	 mov r3,r1
 1070 000a FB70     	 strb r3,[r7,#3]
 285:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CHENREG = (uint32_t)(0x100UL << channel);
 1071              	 .loc 2 285 0
 1072 000c FB78     	 ldrb r3,[r7,#3]
 1073 000e 4FF48072 	 mov r2,#256
 1074 0012 9A40     	 lsls r2,r2,r3
 1075 0014 7B68     	 ldr r3,[r7,#4]
 1076 0016 C3F8A023 	 str r2,[r3,#928]
 286:../Libraries/XMCLib/src/xmc_dma.c ****   while((dma->CHENREG & (uint32_t)(0x1UL << channel)) != 0U)
 1077              	 .loc 2 286 0
 1078 001a 00BF     	 nop
 1079              	.L64:
 1080              	 .loc 2 286 0 is_stmt 0 discriminator 1
 1081 001c 7B68     	 ldr r3,[r7,#4]
 1082 001e D3F8A023 	 ldr r2,[r3,#928]
 1083 0022 FB78     	 ldrb r3,[r7,#3]
 1084 0024 22FA03F3 	 lsr r3,r2,r3
 1085 0028 03F00103 	 and r3,r3,#1
 1086 002c 002B     	 cmp r3,#0
 1087 002e F5D1     	 bne .L64
 287:../Libraries/XMCLib/src/xmc_dma.c ****   {
 288:../Libraries/XMCLib/src/xmc_dma.c ****     /* wait until channel is disabled */
 289:../Libraries/XMCLib/src/xmc_dma.c ****   }
 290:../Libraries/XMCLib/src/xmc_dma.c **** }
 1088              	 .loc 2 290 0 is_stmt 1
 1089 0030 0C37     	 adds r7,r7,#12
 1090              	.LCFI89:
 1091              	 .cfi_def_cfa_offset 4
 1092 0032 BD46     	 mov sp,r7
 1093              	.LCFI90:
 1094              	 .cfi_def_cfa_register 13
 1095              	 
 1096 0034 5DF8047B 	 ldr r7,[sp],#4
 1097              	.LCFI91:
 1098              	 .cfi_restore 7
 1099              	 .cfi_def_cfa_offset 0
 1100 0038 7047     	 bx lr
 1101              	 .cfi_endproc
 1102              	.LFE173:
 1104 003a 00BF     	 .section .text.XMC_DMA_CH_IsEnabled,"ax",%progbits
 1105              	 .align 2
 1106              	 .global XMC_DMA_CH_IsEnabled
 1107              	 .thumb
 1108              	 .thumb_func
 1110              	XMC_DMA_CH_IsEnabled:
 1111              	.LFB174:
 291:../Libraries/XMCLib/src/xmc_dma.c **** 
 292:../Libraries/XMCLib/src/xmc_dma.c **** /* Check if a DMA channel is enabled */
 293:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_CH_IsEnabled(XMC_DMA_t *const dma, const uint8_t channel)
 294:../Libraries/XMCLib/src/xmc_dma.c **** {
 1112              	 .loc 2 294 0
 1113              	 .cfi_startproc
 1114              	 
 1115              	 
 1116              	 
 1117 0000 80B4     	 push {r7}
 1118              	.LCFI92:
 1119              	 .cfi_def_cfa_offset 4
 1120              	 .cfi_offset 7,-4
 1121 0002 83B0     	 sub sp,sp,#12
 1122              	.LCFI93:
 1123              	 .cfi_def_cfa_offset 16
 1124 0004 00AF     	 add r7,sp,#0
 1125              	.LCFI94:
 1126              	 .cfi_def_cfa_register 7
 1127 0006 7860     	 str r0,[r7,#4]
 1128 0008 0B46     	 mov r3,r1
 1129 000a FB70     	 strb r3,[r7,#3]
 295:../Libraries/XMCLib/src/xmc_dma.c ****   return (bool)(dma->CHENREG & ((uint32_t)1U << channel));
 1130              	 .loc 2 295 0
 1131 000c 7B68     	 ldr r3,[r7,#4]
 1132 000e D3F8A023 	 ldr r2,[r3,#928]
 1133 0012 FB78     	 ldrb r3,[r7,#3]
 1134 0014 22FA03F3 	 lsr r3,r2,r3
 1135 0018 03F00103 	 and r3,r3,#1
 1136 001c 002B     	 cmp r3,#0
 1137 001e 14BF     	 ite ne
 1138 0020 0123     	 movne r3,#1
 1139 0022 0023     	 moveq r3,#0
 1140 0024 DBB2     	 uxtb r3,r3
 296:../Libraries/XMCLib/src/xmc_dma.c **** }
 1141              	 .loc 2 296 0
 1142 0026 1846     	 mov r0,r3
 1143 0028 0C37     	 adds r7,r7,#12
 1144              	.LCFI95:
 1145              	 .cfi_def_cfa_offset 4
 1146 002a BD46     	 mov sp,r7
 1147              	.LCFI96:
 1148              	 .cfi_def_cfa_register 13
 1149              	 
 1150 002c 5DF8047B 	 ldr r7,[sp],#4
 1151              	.LCFI97:
 1152              	 .cfi_restore 7
 1153              	 .cfi_def_cfa_offset 0
 1154 0030 7047     	 bx lr
 1155              	 .cfi_endproc
 1156              	.LFE174:
 1158 0032 00BF     	 .section .text.XMC_DMA_CH_Init,"ax",%progbits
 1159              	 .align 2
 1160              	 .global XMC_DMA_CH_Init
 1161              	 .thumb
 1162              	 .thumb_func
 1164              	XMC_DMA_CH_Init:
 1165              	.LFB175:
 297:../Libraries/XMCLib/src/xmc_dma.c **** 
 298:../Libraries/XMCLib/src/xmc_dma.c **** /* Initialize DMA channel */
 299:../Libraries/XMCLib/src/xmc_dma.c **** XMC_DMA_CH_STATUS_t XMC_DMA_CH_Init(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_C
 300:../Libraries/XMCLib/src/xmc_dma.c **** {
 1166              	 .loc 2 300 0
 1167              	 .cfi_startproc
 1168              	 
 1169              	 
 1170 0000 80B5     	 push {r7,lr}
 1171              	.LCFI98:
 1172              	 .cfi_def_cfa_offset 8
 1173              	 .cfi_offset 7,-8
 1174              	 .cfi_offset 14,-4
 1175 0002 86B0     	 sub sp,sp,#24
 1176              	.LCFI99:
 1177              	 .cfi_def_cfa_offset 32
 1178 0004 00AF     	 add r7,sp,#0
 1179              	.LCFI100:
 1180              	 .cfi_def_cfa_register 7
 1181 0006 F860     	 str r0,[r7,#12]
 1182 0008 0B46     	 mov r3,r1
 1183 000a 7A60     	 str r2,[r7,#4]
 1184 000c FB72     	 strb r3,[r7,#11]
 301:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_STATUS_t status;
 302:../Libraries/XMCLib/src/xmc_dma.c ****   uint8_t line;
 303:../Libraries/XMCLib/src/xmc_dma.c ****   uint8_t peripheral;
 304:../Libraries/XMCLib/src/xmc_dma.c **** 
 305:../Libraries/XMCLib/src/xmc_dma.c ****   if (XMC_DMA_IsEnabled(dma) == true)
 1185              	 .loc 2 305 0
 1186 000e F868     	 ldr r0,[r7,#12]
 1187 0010 FFF7FEFF 	 bl XMC_DMA_IsEnabled
 1188 0014 0346     	 mov r3,r0
 1189 0016 002B     	 cmp r3,#0
 1190 0018 00F0F181 	 beq .L68
 306:../Libraries/XMCLib/src/xmc_dma.c ****   {
 307:../Libraries/XMCLib/src/xmc_dma.c ****     if (XMC_DMA_CH_IsEnabled(dma, channel) == false)
 1191              	 .loc 2 307 0
 1192 001c FB7A     	 ldrb r3,[r7,#11]
 1193 001e F868     	 ldr r0,[r7,#12]
 1194 0020 1946     	 mov r1,r3
 1195 0022 FFF7FEFF 	 bl XMC_DMA_CH_IsEnabled
 1196 0026 0346     	 mov r3,r0
 1197 0028 83F00103 	 eor r3,r3,#1
 1198 002c DBB2     	 uxtb r3,r3
 1199 002e 002B     	 cmp r3,#0
 1200 0030 00F0E281 	 beq .L69
 308:../Libraries/XMCLib/src/xmc_dma.c ****     {
 309:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].SAR = config->src_addr;
 1201              	 .loc 2 309 0
 1202 0034 FB7A     	 ldrb r3,[r7,#11]
 1203 0036 7A68     	 ldr r2,[r7,#4]
 1204 0038 5268     	 ldr r2,[r2,#4]
 1205 003a F968     	 ldr r1,[r7,#12]
 1206 003c 5820     	 movs r0,#88
 1207 003e 00FB03F3 	 mul r3,r0,r3
 1208 0042 0B44     	 add r3,r3,r1
 1209 0044 1A60     	 str r2,[r3]
 310:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].DAR = config->dst_addr;
 1210              	 .loc 2 310 0
 1211 0046 FB7A     	 ldrb r3,[r7,#11]
 1212 0048 7A68     	 ldr r2,[r7,#4]
 1213 004a 9268     	 ldr r2,[r2,#8]
 1214 004c F968     	 ldr r1,[r7,#12]
 1215 004e 5820     	 movs r0,#88
 1216 0050 00FB03F3 	 mul r3,r0,r3
 1217 0054 0B44     	 add r3,r3,r1
 1218 0056 0833     	 adds r3,r3,#8
 1219 0058 1A60     	 str r2,[r3]
 311:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].LLP = (uint32_t)config->linked_list_pointer;
 1220              	 .loc 2 311 0
 1221 005a FB7A     	 ldrb r3,[r7,#11]
 1222 005c 7A68     	 ldr r2,[r7,#4]
 1223 005e D268     	 ldr r2,[r2,#12]
 1224 0060 1046     	 mov r0,r2
 1225 0062 FA68     	 ldr r2,[r7,#12]
 1226 0064 5821     	 movs r1,#88
 1227 0066 01FB03F3 	 mul r3,r1,r3
 1228 006a 1344     	 add r3,r3,r2
 1229 006c 1033     	 adds r3,r3,#16
 1230 006e 1860     	 str r0,[r3]
 312:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CTLH = (uint32_t)config->block_size;
 1231              	 .loc 2 312 0
 1232 0070 FB7A     	 ldrb r3,[r7,#11]
 1233 0072 7A68     	 ldr r2,[r7,#4]
 1234 0074 128B     	 ldrh r2,[r2,#24]
 1235 0076 1046     	 mov r0,r2
 1236 0078 FA68     	 ldr r2,[r7,#12]
 1237 007a 5821     	 movs r1,#88
 1238 007c 01FB03F3 	 mul r3,r1,r3
 1239 0080 1344     	 add r3,r3,r2
 1240 0082 1833     	 adds r3,r3,#24
 1241 0084 5860     	 str r0,[r3,#4]
 313:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CTLL = config->control;
 1242              	 .loc 2 313 0
 1243 0086 FB7A     	 ldrb r3,[r7,#11]
 1244 0088 7A68     	 ldr r2,[r7,#4]
 1245 008a 1268     	 ldr r2,[r2]
 1246 008c F968     	 ldr r1,[r7,#12]
 1247 008e 5820     	 movs r0,#88
 1248 0090 00FB03F3 	 mul r3,r0,r3
 1249 0094 0B44     	 add r3,r3,r1
 1250 0096 1833     	 adds r3,r3,#24
 1251 0098 1A60     	 str r2,[r3]
 314:../Libraries/XMCLib/src/xmc_dma.c **** 
 315:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CFGL = (uint32_t)((uint32_t)config->priority |
 1252              	 .loc 2 315 0
 1253 009a FB7A     	 ldrb r3,[r7,#11]
 1254 009c 7A68     	 ldr r2,[r7,#4]
 1255 009e D27E     	 ldrb r2,[r2,#27]
 1256 00a0 42F44062 	 orr r2,r2,#3072
 1257 00a4 F968     	 ldr r1,[r7,#12]
 1258 00a6 5820     	 movs r0,#88
 1259 00a8 00FB03F3 	 mul r3,r0,r3
 1260 00ac 0B44     	 add r3,r3,r1
 1261 00ae 4033     	 adds r3,r3,#64
 1262 00b0 1A60     	 str r2,[r3]
 316:../Libraries/XMCLib/src/xmc_dma.c ****                                          (uint32_t)GPDMA0_CH_CFGL_HS_SEL_SRC_Msk |
 317:../Libraries/XMCLib/src/xmc_dma.c ****                                          (uint32_t)GPDMA0_CH_CFGL_HS_SEL_DST_Msk);
 318:../Libraries/XMCLib/src/xmc_dma.c **** 
 319:../Libraries/XMCLib/src/xmc_dma.c ****       if ((dma == XMC_DMA0) && (channel < (uint8_t)2))
 1263              	 .loc 2 319 0
 1264 00b2 FB68     	 ldr r3,[r7,#12]
 1265 00b4 B14A     	 ldr r2,.L95
 1266 00b6 9342     	 cmp r3,r2
 1267 00b8 16D1     	 bne .L70
 1268              	 .loc 2 319 0 is_stmt 0 discriminator 1
 1269 00ba FB7A     	 ldrb r3,[r7,#11]
 1270 00bc 012B     	 cmp r3,#1
 1271 00be 13D8     	 bhi .L70
 320:../Libraries/XMCLib/src/xmc_dma.c ****       {
 321:../Libraries/XMCLib/src/xmc_dma.c ****         /* Configure scatter and gather */
 322:../Libraries/XMCLib/src/xmc_dma.c ****         dma->CH[channel].SGR = config->src_gather_control;
 1272              	 .loc 2 322 0 is_stmt 1
 1273 00c0 FB7A     	 ldrb r3,[r7,#11]
 1274 00c2 7A68     	 ldr r2,[r7,#4]
 1275 00c4 1269     	 ldr r2,[r2,#16]
 1276 00c6 F968     	 ldr r1,[r7,#12]
 1277 00c8 5820     	 movs r0,#88
 1278 00ca 00FB03F3 	 mul r3,r0,r3
 1279 00ce 0B44     	 add r3,r3,r1
 1280 00d0 4833     	 adds r3,r3,#72
 1281 00d2 1A60     	 str r2,[r3]
 323:../Libraries/XMCLib/src/xmc_dma.c ****         dma->CH[channel].DSR = config->dst_scatter_control;
 1282              	 .loc 2 323 0
 1283 00d4 FB7A     	 ldrb r3,[r7,#11]
 1284 00d6 7A68     	 ldr r2,[r7,#4]
 1285 00d8 5269     	 ldr r2,[r2,#20]
 1286 00da F968     	 ldr r1,[r7,#12]
 1287 00dc 5820     	 movs r0,#88
 1288 00de 00FB03F3 	 mul r3,r0,r3
 1289 00e2 0B44     	 add r3,r3,r1
 1290 00e4 5033     	 adds r3,r3,#80
 1291 00e6 1A60     	 str r2,[r3]
 1292              	.L70:
 324:../Libraries/XMCLib/src/xmc_dma.c ****       }
 325:../Libraries/XMCLib/src/xmc_dma.c **** 
 326:../Libraries/XMCLib/src/xmc_dma.c ****       if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
 1293              	 .loc 2 326 0
 1294 00e8 7B68     	 ldr r3,[r7,#4]
 1295 00ea 1B8C     	 ldrh r3,[r3,#32]
 1296 00ec 002B     	 cmp r3,#0
 1297 00ee 4FD1     	 bne .L71
 327:../Libraries/XMCLib/src/xmc_dma.c ****       {
 328:../Libraries/XMCLib/src/xmc_dma.c ****         /* Hardware handshaking interface configuration */
 329:../Libraries/XMCLib/src/xmc_dma.c ****         if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 1298              	 .loc 2 329 0
 1299 00f0 7B68     	 ldr r3,[r7,#4]
 1300 00f2 9B78     	 ldrb r3,[r3,#2]
 1301 00f4 03F07003 	 and r3,r3,#112
 1302 00f8 DBB2     	 uxtb r3,r3
 1303 00fa 102B     	 cmp r3,#16
 1304 00fc 06D0     	 beq .L72
 330:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1305              	 .loc 2 330 0 discriminator 1
 1306 00fe 7B68     	 ldr r3,[r7,#4]
 1307 0100 9B78     	 ldrb r3,[r3,#2]
 1308 0102 03F07003 	 and r3,r3,#112
 1309 0106 DBB2     	 uxtb r3,r3
 329:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1310              	 .loc 2 329 0 discriminator 1
 1311 0108 302B     	 cmp r3,#48
 1312 010a 41D1     	 bne .L71
 1313              	.L72:
 331:../Libraries/XMCLib/src/xmc_dma.c ****         {
 332:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 333:../Libraries/XMCLib/src/xmc_dma.c ****           if (dma == XMC_DMA0)
 1314              	 .loc 2 333 0
 1315 010c FB68     	 ldr r3,[r7,#12]
 1316 010e 9B4A     	 ldr r2,.L95
 1317 0110 9342     	 cmp r3,r2
 1318 0112 06D1     	 bne .L73
 334:../Libraries/XMCLib/src/xmc_dma.c ****           {
 335:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 336:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->dst_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 1319              	 .loc 2 336 0
 1320 0114 7B68     	 ldr r3,[r7,#4]
 1321 0116 93F82230 	 ldrb r3,[r3,#34]
 1322 011a 03F00703 	 and r3,r3,#7
 1323 011e BB75     	 strb r3,[r7,#22]
 1324 0120 05E0     	 b .L74
 1325              	.L73:
 337:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 338:../Libraries/XMCLib/src/xmc_dma.c ****           }
 339:../Libraries/XMCLib/src/xmc_dma.c ****           else
 340:../Libraries/XMCLib/src/xmc_dma.c ****           {
 341:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->dst_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 1326              	 .loc 2 341 0
 1327 0122 7B68     	 ldr r3,[r7,#4]
 1328 0124 93F82230 	 ldrb r3,[r3,#34]
 1329 0128 03F00303 	 and r3,r3,#3
 1330 012c BB75     	 strb r3,[r7,#22]
 1331              	.L74:
 342:../Libraries/XMCLib/src/xmc_dma.c ****           }
 343:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 344:../Libraries/XMCLib/src/xmc_dma.c ****           peripheral = config->dst_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 1332              	 .loc 2 344 0
 1333 012e 7B68     	 ldr r3,[r7,#4]
 1334 0130 93F82230 	 ldrb r3,[r3,#34]
 1335 0134 1B09     	 lsrs r3,r3,#4
 1336 0136 7B75     	 strb r3,[r7,#21]
 345:../Libraries/XMCLib/src/xmc_dma.c **** 
 346:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_DEST_PER_Pos);
 1337              	 .loc 2 346 0
 1338 0138 FB7A     	 ldrb r3,[r7,#11]
 1339 013a FA7A     	 ldrb r2,[r7,#11]
 1340 013c F968     	 ldr r1,[r7,#12]
 1341 013e 5820     	 movs r0,#88
 1342 0140 00FB02F2 	 mul r2,r0,r2
 1343 0144 0A44     	 add r2,r2,r1
 1344 0146 4032     	 adds r2,r2,#64
 1345 0148 5168     	 ldr r1,[r2,#4]
 1346 014a BA7D     	 ldrb r2,[r7,#22]
 1347 014c D202     	 lsls r2,r2,#11
 1348 014e 0A43     	 orrs r2,r2,r1
 1349 0150 F968     	 ldr r1,[r7,#12]
 1350 0152 5820     	 movs r0,#88
 1351 0154 00FB03F3 	 mul r3,r0,r3
 1352 0158 0B44     	 add r3,r3,r1
 1353 015a 4033     	 adds r3,r3,#64
 1354 015c 5A60     	 str r2,[r3,#4]
 347:../Libraries/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 1355              	 .loc 2 347 0
 1356 015e BA7D     	 ldrb r2,[r7,#22]
 1357 0160 7B7D     	 ldrb r3,[r7,#21]
 1358 0162 F868     	 ldr r0,[r7,#12]
 1359 0164 1146     	 mov r1,r2
 1360 0166 1A46     	 mov r2,r3
 1361 0168 FFF7FEFF 	 bl XMC_DMA_EnableRequestLine
 348:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_DST_Msk;
 1362              	 .loc 2 348 0
 1363 016c FB7A     	 ldrb r3,[r7,#11]
 1364 016e FA7A     	 ldrb r2,[r7,#11]
 1365 0170 F968     	 ldr r1,[r7,#12]
 1366 0172 5820     	 movs r0,#88
 1367 0174 00FB02F2 	 mul r2,r0,r2
 1368 0178 0A44     	 add r2,r2,r1
 1369 017a 4032     	 adds r2,r2,#64
 1370 017c 1268     	 ldr r2,[r2]
 1371 017e 22F48062 	 bic r2,r2,#1024
 1372 0182 F968     	 ldr r1,[r7,#12]
 1373 0184 5820     	 movs r0,#88
 1374 0186 00FB03F3 	 mul r3,r0,r3
 1375 018a 0B44     	 add r3,r3,r1
 1376 018c 4033     	 adds r3,r3,#64
 1377 018e 1A60     	 str r2,[r3]
 1378              	.L71:
 349:../Libraries/XMCLib/src/xmc_dma.c ****         }
 350:../Libraries/XMCLib/src/xmc_dma.c ****       }
 351:../Libraries/XMCLib/src/xmc_dma.c **** 
 352:../Libraries/XMCLib/src/xmc_dma.c **** 
 353:../Libraries/XMCLib/src/xmc_dma.c ****       if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
 1379              	 .loc 2 353 0
 1380 0190 7B68     	 ldr r3,[r7,#4]
 1381 0192 9B8B     	 ldrh r3,[r3,#28]
 1382 0194 002B     	 cmp r3,#0
 1383 0196 4CD1     	 bne .L75
 354:../Libraries/XMCLib/src/xmc_dma.c ****       {
 355:../Libraries/XMCLib/src/xmc_dma.c ****         if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 1384              	 .loc 2 355 0
 1385 0198 7B68     	 ldr r3,[r7,#4]
 1386 019a 9B78     	 ldrb r3,[r3,#2]
 1387 019c 03F07003 	 and r3,r3,#112
 1388 01a0 DBB2     	 uxtb r3,r3
 1389 01a2 202B     	 cmp r3,#32
 1390 01a4 06D0     	 beq .L76
 356:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1391              	 .loc 2 356 0 discriminator 1
 1392 01a6 7B68     	 ldr r3,[r7,#4]
 1393 01a8 9B78     	 ldrb r3,[r3,#2]
 1394 01aa 03F07003 	 and r3,r3,#112
 1395 01ae DBB2     	 uxtb r3,r3
 355:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1396              	 .loc 2 355 0 discriminator 1
 1397 01b0 302B     	 cmp r3,#48
 1398 01b2 3ED1     	 bne .L75
 1399              	.L76:
 357:../Libraries/XMCLib/src/xmc_dma.c ****         {
 358:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 359:../Libraries/XMCLib/src/xmc_dma.c ****           if (dma == XMC_DMA0)
 1400              	 .loc 2 359 0
 1401 01b4 FB68     	 ldr r3,[r7,#12]
 1402 01b6 714A     	 ldr r2,.L95
 1403 01b8 9342     	 cmp r3,r2
 1404 01ba 05D1     	 bne .L77
 360:../Libraries/XMCLib/src/xmc_dma.c ****           {
 361:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 362:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->src_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 1405              	 .loc 2 362 0
 1406 01bc 7B68     	 ldr r3,[r7,#4]
 1407 01be 9B7F     	 ldrb r3,[r3,#30]
 1408 01c0 03F00703 	 and r3,r3,#7
 1409 01c4 BB75     	 strb r3,[r7,#22]
 1410 01c6 04E0     	 b .L78
 1411              	.L77:
 363:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 364:../Libraries/XMCLib/src/xmc_dma.c ****           }
 365:../Libraries/XMCLib/src/xmc_dma.c ****           else
 366:../Libraries/XMCLib/src/xmc_dma.c ****           {
 367:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->src_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 1412              	 .loc 2 367 0
 1413 01c8 7B68     	 ldr r3,[r7,#4]
 1414 01ca 9B7F     	 ldrb r3,[r3,#30]
 1415 01cc 03F00303 	 and r3,r3,#3
 1416 01d0 BB75     	 strb r3,[r7,#22]
 1417              	.L78:
 368:../Libraries/XMCLib/src/xmc_dma.c ****           }
 369:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 370:../Libraries/XMCLib/src/xmc_dma.c ****           peripheral = config->src_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 1418              	 .loc 2 370 0
 1419 01d2 7B68     	 ldr r3,[r7,#4]
 1420 01d4 9B7F     	 ldrb r3,[r3,#30]
 1421 01d6 1B09     	 lsrs r3,r3,#4
 1422 01d8 7B75     	 strb r3,[r7,#21]
 371:../Libraries/XMCLib/src/xmc_dma.c **** 
 372:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_SRC_PER_Pos);
 1423              	 .loc 2 372 0
 1424 01da FB7A     	 ldrb r3,[r7,#11]
 1425 01dc FA7A     	 ldrb r2,[r7,#11]
 1426 01de F968     	 ldr r1,[r7,#12]
 1427 01e0 5820     	 movs r0,#88
 1428 01e2 00FB02F2 	 mul r2,r0,r2
 1429 01e6 0A44     	 add r2,r2,r1
 1430 01e8 4032     	 adds r2,r2,#64
 1431 01ea 5168     	 ldr r1,[r2,#4]
 1432 01ec BA7D     	 ldrb r2,[r7,#22]
 1433 01ee D201     	 lsls r2,r2,#7
 1434 01f0 0A43     	 orrs r2,r2,r1
 1435 01f2 F968     	 ldr r1,[r7,#12]
 1436 01f4 5820     	 movs r0,#88
 1437 01f6 00FB03F3 	 mul r3,r0,r3
 1438 01fa 0B44     	 add r3,r3,r1
 1439 01fc 4033     	 adds r3,r3,#64
 1440 01fe 5A60     	 str r2,[r3,#4]
 373:../Libraries/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 1441              	 .loc 2 373 0
 1442 0200 BA7D     	 ldrb r2,[r7,#22]
 1443 0202 7B7D     	 ldrb r3,[r7,#21]
 1444 0204 F868     	 ldr r0,[r7,#12]
 1445 0206 1146     	 mov r1,r2
 1446 0208 1A46     	 mov r2,r3
 1447 020a FFF7FEFF 	 bl XMC_DMA_EnableRequestLine
 374:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_SRC_Msk;
 1448              	 .loc 2 374 0
 1449 020e FB7A     	 ldrb r3,[r7,#11]
 1450 0210 FA7A     	 ldrb r2,[r7,#11]
 1451 0212 F968     	 ldr r1,[r7,#12]
 1452 0214 5820     	 movs r0,#88
 1453 0216 00FB02F2 	 mul r2,r0,r2
 1454 021a 0A44     	 add r2,r2,r1
 1455 021c 4032     	 adds r2,r2,#64
 1456 021e 1268     	 ldr r2,[r2]
 1457 0220 22F40062 	 bic r2,r2,#2048
 1458 0224 F968     	 ldr r1,[r7,#12]
 1459 0226 5820     	 movs r0,#88
 1460 0228 00FB03F3 	 mul r3,r0,r3
 1461 022c 0B44     	 add r3,r3,r1
 1462 022e 4033     	 adds r3,r3,#64
 1463 0230 1A60     	 str r2,[r3]
 1464              	.L75:
 375:../Libraries/XMCLib/src/xmc_dma.c ****         }
 376:../Libraries/XMCLib/src/xmc_dma.c ****       }
 377:../Libraries/XMCLib/src/xmc_dma.c ****       
 378:../Libraries/XMCLib/src/xmc_dma.c ****       XMC_DMA_CH_ClearEventStatus(dma, channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMP
 1465              	 .loc 2 378 0
 1466 0232 FB7A     	 ldrb r3,[r7,#11]
 1467 0234 F868     	 ldr r0,[r7,#12]
 1468 0236 1946     	 mov r1,r3
 1469 0238 1F22     	 movs r2,#31
 1470 023a FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 379:../Libraries/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFE
 380:../Libraries/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTI
 381:../Libraries/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTI
 382:../Libraries/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_ERROR));
 383:../Libraries/XMCLib/src/xmc_dma.c **** 
 384:../Libraries/XMCLib/src/xmc_dma.c ****       switch (config->transfer_type)
 1471              	 .loc 2 384 0
 1472 023e 7B68     	 ldr r3,[r7,#4]
 1473 0240 9B7E     	 ldrb r3,[r3,#26]
 1474 0242 082B     	 cmp r3,#8
 1475 0244 00F2D480 	 bhi .L94
 1476 0248 01A2     	 adr r2,.L81
 1477 024a 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1478 024e 00BF     	 .p2align 2
 1479              	.L81:
 1480 0250 F1030000 	 .word .L94+1
 1481 0254 75020000 	 .word .L82+1
 1482 0258 9B020000 	 .word .L83+1
 1483 025c C1020000 	 .word .L84+1
 1484 0260 E7020000 	 .word .L85+1
 1485 0264 0D030000 	 .word .L86+1
 1486 0268 57030000 	 .word .L87+1
 1487 026c 81030000 	 .word .L88+1
 1488 0270 CB030000 	 .word .L89+1
 1489              	 .p2align 1
 1490              	.L82:
 385:../Libraries/XMCLib/src/xmc_dma.c ****       {
 386:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK:
 387:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 388:../Libraries/XMCLib/src/xmc_dma.c **** 
 389:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD:
 390:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 1491              	 .loc 2 390 0
 1492 0274 FB7A     	 ldrb r3,[r7,#11]
 1493 0276 FA7A     	 ldrb r2,[r7,#11]
 1494 0278 F968     	 ldr r1,[r7,#12]
 1495 027a 5820     	 movs r0,#88
 1496 027c 00FB02F2 	 mul r2,r0,r2
 1497 0280 0A44     	 add r2,r2,r1
 1498 0282 4032     	 adds r2,r2,#64
 1499 0284 1268     	 ldr r2,[r2]
 1500 0286 42F00042 	 orr r2,r2,#-2147483648
 1501 028a F968     	 ldr r1,[r7,#12]
 1502 028c 5820     	 movs r0,#88
 1503 028e 00FB03F3 	 mul r3,r0,r3
 1504 0292 0B44     	 add r3,r3,r1
 1505 0294 4033     	 adds r3,r3,#64
 1506 0296 1A60     	 str r2,[r3]
 391:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1507              	 .loc 2 391 0
 1508 0298 ABE0     	 b .L90
 1509              	.L83:
 392:../Libraries/XMCLib/src/xmc_dma.c **** 
 393:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS:
 394:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 1510              	 .loc 2 394 0
 1511 029a FB7A     	 ldrb r3,[r7,#11]
 1512 029c FA7A     	 ldrb r2,[r7,#11]
 1513 029e F968     	 ldr r1,[r7,#12]
 1514 02a0 5820     	 movs r0,#88
 1515 02a2 00FB02F2 	 mul r2,r0,r2
 1516 02a6 0A44     	 add r2,r2,r1
 1517 02a8 4032     	 adds r2,r2,#64
 1518 02aa 1268     	 ldr r2,[r2]
 1519 02ac 42F08042 	 orr r2,r2,#1073741824
 1520 02b0 F968     	 ldr r1,[r7,#12]
 1521 02b2 5820     	 movs r0,#88
 1522 02b4 00FB03F3 	 mul r3,r0,r3
 1523 02b8 0B44     	 add r3,r3,r1
 1524 02ba 4033     	 adds r3,r3,#64
 1525 02bc 1A60     	 str r2,[r3]
 395:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1526              	 .loc 2 395 0
 1527 02be 98E0     	 b .L90
 1528              	.L84:
 396:../Libraries/XMCLib/src/xmc_dma.c **** 
 397:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD:
 398:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)((uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk |
 1529              	 .loc 2 398 0
 1530 02c0 FB7A     	 ldrb r3,[r7,#11]
 1531 02c2 FA7A     	 ldrb r2,[r7,#11]
 1532 02c4 F968     	 ldr r1,[r7,#12]
 1533 02c6 5820     	 movs r0,#88
 1534 02c8 00FB02F2 	 mul r2,r0,r2
 1535 02cc 0A44     	 add r2,r2,r1
 1536 02ce 4032     	 adds r2,r2,#64
 1537 02d0 1268     	 ldr r2,[r2]
 1538 02d2 42F04042 	 orr r2,r2,#-1073741824
 1539 02d6 F968     	 ldr r1,[r7,#12]
 1540 02d8 5820     	 movs r0,#88
 1541 02da 00FB03F3 	 mul r3,r0,r3
 1542 02de 0B44     	 add r3,r3,r1
 1543 02e0 4033     	 adds r3,r3,#64
 1544 02e2 1A60     	 str r2,[r3]
 399:../Libraries/XMCLib/src/xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk);
 400:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1545              	 .loc 2 400 0
 1546 02e4 85E0     	 b .L90
 1547              	.L85:
 401:../Libraries/XMCLib/src/xmc_dma.c **** 
 402:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED:
 403:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 1548              	 .loc 2 403 0
 1549 02e6 FB7A     	 ldrb r3,[r7,#11]
 1550 02e8 FA7A     	 ldrb r2,[r7,#11]
 1551 02ea F968     	 ldr r1,[r7,#12]
 1552 02ec 5820     	 movs r0,#88
 1553 02ee 00FB02F2 	 mul r2,r0,r2
 1554 02f2 0A44     	 add r2,r2,r1
 1555 02f4 1832     	 adds r2,r2,#24
 1556 02f6 1268     	 ldr r2,[r2]
 1557 02f8 42F00062 	 orr r2,r2,#134217728
 1558 02fc F968     	 ldr r1,[r7,#12]
 1559 02fe 5820     	 movs r0,#88
 1560 0300 00FB03F3 	 mul r3,r0,r3
 1561 0304 0B44     	 add r3,r3,r1
 1562 0306 1833     	 adds r3,r3,#24
 1563 0308 1A60     	 str r2,[r3]
 404:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1564              	 .loc 2 404 0
 1565 030a 72E0     	 b .L90
 1566              	.L86:
 405:../Libraries/XMCLib/src/xmc_dma.c **** 
 406:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED:
 407:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 1567              	 .loc 2 407 0
 1568 030c FB7A     	 ldrb r3,[r7,#11]
 1569 030e FA7A     	 ldrb r2,[r7,#11]
 1570 0310 F968     	 ldr r1,[r7,#12]
 1571 0312 5820     	 movs r0,#88
 1572 0314 00FB02F2 	 mul r2,r0,r2
 1573 0318 0A44     	 add r2,r2,r1
 1574 031a 4032     	 adds r2,r2,#64
 1575 031c 1268     	 ldr r2,[r2]
 1576 031e 42F08042 	 orr r2,r2,#1073741824
 1577 0322 F968     	 ldr r1,[r7,#12]
 1578 0324 5820     	 movs r0,#88
 1579 0326 00FB03F3 	 mul r3,r0,r3
 1580 032a 0B44     	 add r3,r3,r1
 1581 032c 4033     	 adds r3,r3,#64
 1582 032e 1A60     	 str r2,[r3]
 408:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 1583              	 .loc 2 408 0
 1584 0330 FB7A     	 ldrb r3,[r7,#11]
 1585 0332 FA7A     	 ldrb r2,[r7,#11]
 1586 0334 F968     	 ldr r1,[r7,#12]
 1587 0336 5820     	 movs r0,#88
 1588 0338 00FB02F2 	 mul r2,r0,r2
 1589 033c 0A44     	 add r2,r2,r1
 1590 033e 1832     	 adds r2,r2,#24
 1591 0340 1268     	 ldr r2,[r2]
 1592 0342 42F00062 	 orr r2,r2,#134217728
 1593 0346 F968     	 ldr r1,[r7,#12]
 1594 0348 5820     	 movs r0,#88
 1595 034a 00FB03F3 	 mul r3,r0,r3
 1596 034e 0B44     	 add r3,r3,r1
 1597 0350 1833     	 adds r3,r3,#24
 1598 0352 1A60     	 str r2,[r3]
 409:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1599              	 .loc 2 409 0
 1600 0354 4DE0     	 b .L90
 1601              	.L87:
 410:../Libraries/XMCLib/src/xmc_dma.c **** 
 411:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS:
 412:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 1602              	 .loc 2 412 0
 1603 0356 FB7A     	 ldrb r3,[r7,#11]
 1604 0358 FA7A     	 ldrb r2,[r7,#11]
 1605 035a F968     	 ldr r1,[r7,#12]
 1606 035c 5820     	 movs r0,#88
 1607 035e 00FB02F2 	 mul r2,r0,r2
 1608 0362 0A44     	 add r2,r2,r1
 1609 0364 1832     	 adds r2,r2,#24
 1610 0366 1268     	 ldr r2,[r2]
 1611 0368 42F08052 	 orr r2,r2,#268435456
 1612 036c F968     	 ldr r1,[r7,#12]
 1613 036e 5820     	 movs r0,#88
 1614 0370 00FB03F3 	 mul r3,r0,r3
 1615 0374 0B44     	 add r3,r3,r1
 1616 0376 1833     	 adds r3,r3,#24
 1617 0378 1A60     	 str r2,[r3]
 413:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1618              	 .loc 2 413 0
 1619 037a 3AE0     	 b .L90
 1620              	.L96:
 1621              	 .align 2
 1622              	.L95:
 1623 037c 00400150 	 .word 1342259200
 1624              	.L88:
 414:../Libraries/XMCLib/src/xmc_dma.c **** 
 415:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD:
 416:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 1625              	 .loc 2 416 0
 1626 0380 FB7A     	 ldrb r3,[r7,#11]
 1627 0382 FA7A     	 ldrb r2,[r7,#11]
 1628 0384 F968     	 ldr r1,[r7,#12]
 1629 0386 5820     	 movs r0,#88
 1630 0388 00FB02F2 	 mul r2,r0,r2
 1631 038c 0A44     	 add r2,r2,r1
 1632 038e 4032     	 adds r2,r2,#64
 1633 0390 1268     	 ldr r2,[r2]
 1634 0392 42F00042 	 orr r2,r2,#-2147483648
 1635 0396 F968     	 ldr r1,[r7,#12]
 1636 0398 5820     	 movs r0,#88
 1637 039a 00FB03F3 	 mul r3,r0,r3
 1638 039e 0B44     	 add r3,r3,r1
 1639 03a0 4033     	 adds r3,r3,#64
 1640 03a2 1A60     	 str r2,[r3]
 417:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 1641              	 .loc 2 417 0
 1642 03a4 FB7A     	 ldrb r3,[r7,#11]
 1643 03a6 FA7A     	 ldrb r2,[r7,#11]
 1644 03a8 F968     	 ldr r1,[r7,#12]
 1645 03aa 5820     	 movs r0,#88
 1646 03ac 00FB02F2 	 mul r2,r0,r2
 1647 03b0 0A44     	 add r2,r2,r1
 1648 03b2 1832     	 adds r2,r2,#24
 1649 03b4 1268     	 ldr r2,[r2]
 1650 03b6 42F08052 	 orr r2,r2,#268435456
 1651 03ba F968     	 ldr r1,[r7,#12]
 1652 03bc 5820     	 movs r0,#88
 1653 03be 00FB03F3 	 mul r3,r0,r3
 1654 03c2 0B44     	 add r3,r3,r1
 1655 03c4 1833     	 adds r3,r3,#24
 1656 03c6 1A60     	 str r2,[r3]
 418:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1657              	 .loc 2 418 0
 1658 03c8 13E0     	 b .L90
 1659              	.L89:
 419:../Libraries/XMCLib/src/xmc_dma.c **** 
 420:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED:
 421:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)((uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk |
 1660              	 .loc 2 421 0
 1661 03ca FB7A     	 ldrb r3,[r7,#11]
 1662 03cc FA7A     	 ldrb r2,[r7,#11]
 1663 03ce F968     	 ldr r1,[r7,#12]
 1664 03d0 5820     	 movs r0,#88
 1665 03d2 00FB02F2 	 mul r2,r0,r2
 1666 03d6 0A44     	 add r2,r2,r1
 1667 03d8 1832     	 adds r2,r2,#24
 1668 03da 1268     	 ldr r2,[r2]
 1669 03dc 42F0C052 	 orr r2,r2,#402653184
 1670 03e0 F968     	 ldr r1,[r7,#12]
 1671 03e2 5820     	 movs r0,#88
 1672 03e4 00FB03F3 	 mul r3,r0,r3
 1673 03e8 0B44     	 add r3,r3,r1
 1674 03ea 1833     	 adds r3,r3,#24
 1675 03ec 1A60     	 str r2,[r3]
 422:../Libraries/XMCLib/src/xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
 423:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1676              	 .loc 2 423 0
 1677 03ee 00E0     	 b .L90
 1678              	.L94:
 424:../Libraries/XMCLib/src/xmc_dma.c **** 
 425:../Libraries/XMCLib/src/xmc_dma.c ****         default:
 426:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1679              	 .loc 2 426 0
 1680 03f0 00BF     	 nop
 1681              	.L90:
 427:../Libraries/XMCLib/src/xmc_dma.c ****       }
 428:../Libraries/XMCLib/src/xmc_dma.c **** 
 429:../Libraries/XMCLib/src/xmc_dma.c ****       status = XMC_DMA_CH_STATUS_OK;
 1682              	 .loc 2 429 0
 1683 03f2 0023     	 movs r3,#0
 1684 03f4 FB75     	 strb r3,[r7,#23]
 1685 03f6 04E0     	 b .L92
 1686              	.L69:
 430:../Libraries/XMCLib/src/xmc_dma.c **** 
 431:../Libraries/XMCLib/src/xmc_dma.c ****     }
 432:../Libraries/XMCLib/src/xmc_dma.c ****     else
 433:../Libraries/XMCLib/src/xmc_dma.c ****     {
 434:../Libraries/XMCLib/src/xmc_dma.c ****       status = XMC_DMA_CH_STATUS_BUSY;
 1687              	 .loc 2 434 0
 1688 03f8 0223     	 movs r3,#2
 1689 03fa FB75     	 strb r3,[r7,#23]
 1690 03fc 01E0     	 b .L92
 1691              	.L68:
 435:../Libraries/XMCLib/src/xmc_dma.c ****     }
 436:../Libraries/XMCLib/src/xmc_dma.c ****   }
 437:../Libraries/XMCLib/src/xmc_dma.c ****   else 
 438:../Libraries/XMCLib/src/xmc_dma.c ****   {
 439:../Libraries/XMCLib/src/xmc_dma.c ****     status = XMC_DMA_CH_STATUS_ERROR;
 1692              	 .loc 2 439 0
 1693 03fe 0123     	 movs r3,#1
 1694 0400 FB75     	 strb r3,[r7,#23]
 1695              	.L92:
 440:../Libraries/XMCLib/src/xmc_dma.c ****   }
 441:../Libraries/XMCLib/src/xmc_dma.c ****   
 442:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 1696              	 .loc 2 442 0
 1697 0402 FB7D     	 ldrb r3,[r7,#23]
 443:../Libraries/XMCLib/src/xmc_dma.c **** }
 1698              	 .loc 2 443 0
 1699 0404 1846     	 mov r0,r3
 1700 0406 1837     	 adds r7,r7,#24
 1701              	.LCFI101:
 1702              	 .cfi_def_cfa_offset 8
 1703 0408 BD46     	 mov sp,r7
 1704              	.LCFI102:
 1705              	 .cfi_def_cfa_register 13
 1706              	 
 1707 040a 80BD     	 pop {r7,pc}
 1708              	 .cfi_endproc
 1709              	.LFE175:
 1711              	 .section .text.XMC_DMA_CH_Suspend,"ax",%progbits
 1712              	 .align 2
 1713              	 .global XMC_DMA_CH_Suspend
 1714              	 .thumb
 1715              	 .thumb_func
 1717              	XMC_DMA_CH_Suspend:
 1718              	.LFB176:
 444:../Libraries/XMCLib/src/xmc_dma.c **** 
 445:../Libraries/XMCLib/src/xmc_dma.c **** /* Suspend DMA channel transfer */
 446:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Suspend(XMC_DMA_t *const dma, const uint8_t channel)
 447:../Libraries/XMCLib/src/xmc_dma.c **** {
 1719              	 .loc 2 447 0
 1720              	 .cfi_startproc
 1721              	 
 1722              	 
 1723              	 
 1724 0000 80B4     	 push {r7}
 1725              	.LCFI103:
 1726              	 .cfi_def_cfa_offset 4
 1727              	 .cfi_offset 7,-4
 1728 0002 83B0     	 sub sp,sp,#12
 1729              	.LCFI104:
 1730              	 .cfi_def_cfa_offset 16
 1731 0004 00AF     	 add r7,sp,#0
 1732              	.LCFI105:
 1733              	 .cfi_def_cfa_register 7
 1734 0006 7860     	 str r0,[r7,#4]
 1735 0008 0B46     	 mov r3,r1
 1736 000a FB70     	 strb r3,[r7,#3]
 448:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk;
 1737              	 .loc 2 448 0
 1738 000c FB78     	 ldrb r3,[r7,#3]
 1739 000e FA78     	 ldrb r2,[r7,#3]
 1740 0010 7968     	 ldr r1,[r7,#4]
 1741 0012 5820     	 movs r0,#88
 1742 0014 00FB02F2 	 mul r2,r0,r2
 1743 0018 0A44     	 add r2,r2,r1
 1744 001a 4032     	 adds r2,r2,#64
 1745 001c 1268     	 ldr r2,[r2]
 1746 001e 42F48072 	 orr r2,r2,#256
 1747 0022 7968     	 ldr r1,[r7,#4]
 1748 0024 5820     	 movs r0,#88
 1749 0026 00FB03F3 	 mul r3,r0,r3
 1750 002a 0B44     	 add r3,r3,r1
 1751 002c 4033     	 adds r3,r3,#64
 1752 002e 1A60     	 str r2,[r3]
 449:../Libraries/XMCLib/src/xmc_dma.c **** }
 1753              	 .loc 2 449 0
 1754 0030 0C37     	 adds r7,r7,#12
 1755              	.LCFI106:
 1756              	 .cfi_def_cfa_offset 4
 1757 0032 BD46     	 mov sp,r7
 1758              	.LCFI107:
 1759              	 .cfi_def_cfa_register 13
 1760              	 
 1761 0034 5DF8047B 	 ldr r7,[sp],#4
 1762              	.LCFI108:
 1763              	 .cfi_restore 7
 1764              	 .cfi_def_cfa_offset 0
 1765 0038 7047     	 bx lr
 1766              	 .cfi_endproc
 1767              	.LFE176:
 1769 003a 00BF     	 .section .text.XMC_DMA_CH_Resume,"ax",%progbits
 1770              	 .align 2
 1771              	 .global XMC_DMA_CH_Resume
 1772              	 .thumb
 1773              	 .thumb_func
 1775              	XMC_DMA_CH_Resume:
 1776              	.LFB177:
 450:../Libraries/XMCLib/src/xmc_dma.c **** 
 451:../Libraries/XMCLib/src/xmc_dma.c **** /* Resume DMA channel transfer */
 452:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Resume(XMC_DMA_t *const dma, const uint8_t channel)
 453:../Libraries/XMCLib/src/xmc_dma.c **** {
 1777              	 .loc 2 453 0
 1778              	 .cfi_startproc
 1779              	 
 1780              	 
 1781              	 
 1782 0000 80B4     	 push {r7}
 1783              	.LCFI109:
 1784              	 .cfi_def_cfa_offset 4
 1785              	 .cfi_offset 7,-4
 1786 0002 83B0     	 sub sp,sp,#12
 1787              	.LCFI110:
 1788              	 .cfi_def_cfa_offset 16
 1789 0004 00AF     	 add r7,sp,#0
 1790              	.LCFI111:
 1791              	 .cfi_def_cfa_register 7
 1792 0006 7860     	 str r0,[r7,#4]
 1793 0008 0B46     	 mov r3,r1
 1794 000a FB70     	 strb r3,[r7,#3]
 454:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_CH_SUSP_Msk;
 1795              	 .loc 2 454 0
 1796 000c FB78     	 ldrb r3,[r7,#3]
 1797 000e FA78     	 ldrb r2,[r7,#3]
 1798 0010 7968     	 ldr r1,[r7,#4]
 1799 0012 5820     	 movs r0,#88
 1800 0014 00FB02F2 	 mul r2,r0,r2
 1801 0018 0A44     	 add r2,r2,r1
 1802 001a 4032     	 adds r2,r2,#64
 1803 001c 1268     	 ldr r2,[r2]
 1804 001e 22F48072 	 bic r2,r2,#256
 1805 0022 7968     	 ldr r1,[r7,#4]
 1806 0024 5820     	 movs r0,#88
 1807 0026 00FB03F3 	 mul r3,r0,r3
 1808 002a 0B44     	 add r3,r3,r1
 1809 002c 4033     	 adds r3,r3,#64
 1810 002e 1A60     	 str r2,[r3]
 455:../Libraries/XMCLib/src/xmc_dma.c **** }
 1811              	 .loc 2 455 0
 1812 0030 0C37     	 adds r7,r7,#12
 1813              	.LCFI112:
 1814              	 .cfi_def_cfa_offset 4
 1815 0032 BD46     	 mov sp,r7
 1816              	.LCFI113:
 1817              	 .cfi_def_cfa_register 13
 1818              	 
 1819 0034 5DF8047B 	 ldr r7,[sp],#4
 1820              	.LCFI114:
 1821              	 .cfi_restore 7
 1822              	 .cfi_def_cfa_offset 0
 1823 0038 7047     	 bx lr
 1824              	 .cfi_endproc
 1825              	.LFE177:
 1827 003a 00BF     	 .section .text.XMC_DMA_CH_IsSuspended,"ax",%progbits
 1828              	 .align 2
 1829              	 .global XMC_DMA_CH_IsSuspended
 1830              	 .thumb
 1831              	 .thumb_func
 1833              	XMC_DMA_CH_IsSuspended:
 1834              	.LFB178:
 456:../Libraries/XMCLib/src/xmc_dma.c **** 
 457:../Libraries/XMCLib/src/xmc_dma.c **** /* Check if a DMA channel is suspended */
 458:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_CH_IsSuspended(XMC_DMA_t *const dma, const uint8_t channel)
 459:../Libraries/XMCLib/src/xmc_dma.c **** {
 1835              	 .loc 2 459 0
 1836              	 .cfi_startproc
 1837              	 
 1838              	 
 1839              	 
 1840 0000 80B4     	 push {r7}
 1841              	.LCFI115:
 1842              	 .cfi_def_cfa_offset 4
 1843              	 .cfi_offset 7,-4
 1844 0002 83B0     	 sub sp,sp,#12
 1845              	.LCFI116:
 1846              	 .cfi_def_cfa_offset 16
 1847 0004 00AF     	 add r7,sp,#0
 1848              	.LCFI117:
 1849              	 .cfi_def_cfa_register 7
 1850 0006 7860     	 str r0,[r7,#4]
 1851 0008 0B46     	 mov r3,r1
 1852 000a FB70     	 strb r3,[r7,#3]
 460:../Libraries/XMCLib/src/xmc_dma.c ****   return (bool)(dma->CH[channel].CFGL & (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk);
 1853              	 .loc 2 460 0
 1854 000c FB78     	 ldrb r3,[r7,#3]
 1855 000e 7A68     	 ldr r2,[r7,#4]
 1856 0010 5821     	 movs r1,#88
 1857 0012 01FB03F3 	 mul r3,r1,r3
 1858 0016 1344     	 add r3,r3,r2
 1859 0018 4033     	 adds r3,r3,#64
 1860 001a 1B68     	 ldr r3,[r3]
 1861 001c 03F48073 	 and r3,r3,#256
 1862 0020 002B     	 cmp r3,#0
 1863 0022 14BF     	 ite ne
 1864 0024 0123     	 movne r3,#1
 1865 0026 0023     	 moveq r3,#0
 1866 0028 DBB2     	 uxtb r3,r3
 461:../Libraries/XMCLib/src/xmc_dma.c **** }
 1867              	 .loc 2 461 0
 1868 002a 1846     	 mov r0,r3
 1869 002c 0C37     	 adds r7,r7,#12
 1870              	.LCFI118:
 1871              	 .cfi_def_cfa_offset 4
 1872 002e BD46     	 mov sp,r7
 1873              	.LCFI119:
 1874              	 .cfi_def_cfa_register 13
 1875              	 
 1876 0030 5DF8047B 	 ldr r7,[sp],#4
 1877              	.LCFI120:
 1878              	 .cfi_restore 7
 1879              	 .cfi_def_cfa_offset 0
 1880 0034 7047     	 bx lr
 1881              	 .cfi_endproc
 1882              	.LFE178:
 1884 0036 00BF     	 .section .text.XMC_DMA_CH_EnableEvent,"ax",%progbits
 1885              	 .align 2
 1886              	 .global XMC_DMA_CH_EnableEvent
 1887              	 .thumb
 1888              	 .thumb_func
 1890              	XMC_DMA_CH_EnableEvent:
 1891              	.LFB179:
 462:../Libraries/XMCLib/src/xmc_dma.c **** 
 463:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable GPDMA event */
 464:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 465:../Libraries/XMCLib/src/xmc_dma.c **** {
 1892              	 .loc 2 465 0
 1893              	 .cfi_startproc
 1894              	 
 1895              	 
 1896              	 
 1897 0000 80B4     	 push {r7}
 1898              	.LCFI121:
 1899              	 .cfi_def_cfa_offset 4
 1900              	 .cfi_offset 7,-4
 1901 0002 87B0     	 sub sp,sp,#28
 1902              	.LCFI122:
 1903              	 .cfi_def_cfa_offset 32
 1904 0004 00AF     	 add r7,sp,#0
 1905              	.LCFI123:
 1906              	 .cfi_def_cfa_register 7
 1907 0006 F860     	 str r0,[r7,#12]
 1908 0008 0B46     	 mov r3,r1
 1909 000a 7A60     	 str r2,[r7,#4]
 1910 000c FB72     	 strb r3,[r7,#11]
 466:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 467:../Libraries/XMCLib/src/xmc_dma.c **** 
 468:../Libraries/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 1911              	 .loc 2 468 0
 1912 000e 0023     	 movs r3,#0
 1913 0010 7B61     	 str r3,[r7,#20]
 1914 0012 1CE0     	 b .L102
 1915              	.L104:
 469:../Libraries/XMCLib/src/xmc_dma.c ****   {
 470:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & ((uint32_t)0x1UL << event_idx))
 1916              	 .loc 2 470 0
 1917 0014 7B69     	 ldr r3,[r7,#20]
 1918 0016 7A68     	 ldr r2,[r7,#4]
 1919 0018 22FA03F3 	 lsr r3,r2,r3
 1920 001c 03F00103 	 and r3,r3,#1
 1921 0020 002B     	 cmp r3,#0
 1922 0022 11D0     	 beq .L103
 471:../Libraries/XMCLib/src/xmc_dma.c ****     {
 472:../Libraries/XMCLib/src/xmc_dma.c ****       dma->MASKCHEV[event_idx * 2UL] |= ((uint32_t)0x101UL << channel);
 1923              	 .loc 2 472 0
 1924 0024 7B69     	 ldr r3,[r7,#20]
 1925 0026 5A00     	 lsls r2,r3,#1
 1926 0028 7B69     	 ldr r3,[r7,#20]
 1927 002a 5900     	 lsls r1,r3,#1
 1928 002c FB68     	 ldr r3,[r7,#12]
 1929 002e C431     	 adds r1,r1,#196
 1930 0030 53F82110 	 ldr r1,[r3,r1,lsl#2]
 1931 0034 FB7A     	 ldrb r3,[r7,#11]
 1932 0036 40F20110 	 movw r0,#257
 1933 003a 00FA03F3 	 lsl r3,r0,r3
 1934 003e 1943     	 orrs r1,r1,r3
 1935 0040 FB68     	 ldr r3,[r7,#12]
 1936 0042 C432     	 adds r2,r2,#196
 1937 0044 43F82210 	 str r1,[r3,r2,lsl#2]
 1938              	.L103:
 468:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1939              	 .loc 2 468 0 discriminator 2
 1940 0048 7B69     	 ldr r3,[r7,#20]
 1941 004a 0133     	 adds r3,r3,#1
 1942 004c 7B61     	 str r3,[r7,#20]
 1943              	.L102:
 468:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1944              	 .loc 2 468 0 is_stmt 0 discriminator 1
 1945 004e 7B69     	 ldr r3,[r7,#20]
 1946 0050 042B     	 cmp r3,#4
 1947 0052 DFD9     	 bls .L104
 473:../Libraries/XMCLib/src/xmc_dma.c ****     }
 474:../Libraries/XMCLib/src/xmc_dma.c ****   }
 475:../Libraries/XMCLib/src/xmc_dma.c **** }
 1948              	 .loc 2 475 0 is_stmt 1
 1949 0054 1C37     	 adds r7,r7,#28
 1950              	.LCFI124:
 1951              	 .cfi_def_cfa_offset 4
 1952 0056 BD46     	 mov sp,r7
 1953              	.LCFI125:
 1954              	 .cfi_def_cfa_register 13
 1955              	 
 1956 0058 5DF8047B 	 ldr r7,[sp],#4
 1957              	.LCFI126:
 1958              	 .cfi_restore 7
 1959              	 .cfi_def_cfa_offset 0
 1960 005c 7047     	 bx lr
 1961              	 .cfi_endproc
 1962              	.LFE179:
 1964 005e 00BF     	 .section .text.XMC_DMA_CH_DisableEvent,"ax",%progbits
 1965              	 .align 2
 1966              	 .global XMC_DMA_CH_DisableEvent
 1967              	 .thumb
 1968              	 .thumb_func
 1970              	XMC_DMA_CH_DisableEvent:
 1971              	.LFB180:
 476:../Libraries/XMCLib/src/xmc_dma.c **** 
 477:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable GPDMA event */
 478:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 479:../Libraries/XMCLib/src/xmc_dma.c **** {
 1972              	 .loc 2 479 0
 1973              	 .cfi_startproc
 1974              	 
 1975              	 
 1976              	 
 1977 0000 80B4     	 push {r7}
 1978              	.LCFI127:
 1979              	 .cfi_def_cfa_offset 4
 1980              	 .cfi_offset 7,-4
 1981 0002 87B0     	 sub sp,sp,#28
 1982              	.LCFI128:
 1983              	 .cfi_def_cfa_offset 32
 1984 0004 00AF     	 add r7,sp,#0
 1985              	.LCFI129:
 1986              	 .cfi_def_cfa_register 7
 1987 0006 F860     	 str r0,[r7,#12]
 1988 0008 0B46     	 mov r3,r1
 1989 000a 7A60     	 str r2,[r7,#4]
 1990 000c FB72     	 strb r3,[r7,#11]
 480:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 481:../Libraries/XMCLib/src/xmc_dma.c **** 
 482:../Libraries/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 1991              	 .loc 2 482 0
 1992 000e 0023     	 movs r3,#0
 1993 0010 7B61     	 str r3,[r7,#20]
 1994 0012 1CE0     	 b .L106
 1995              	.L108:
 483:../Libraries/XMCLib/src/xmc_dma.c ****   {
 484:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & ((uint32_t)0x1UL << event_idx))
 1996              	 .loc 2 484 0
 1997 0014 7B69     	 ldr r3,[r7,#20]
 1998 0016 7A68     	 ldr r2,[r7,#4]
 1999 0018 22FA03F3 	 lsr r3,r2,r3
 2000 001c 03F00103 	 and r3,r3,#1
 2001 0020 002B     	 cmp r3,#0
 2002 0022 11D0     	 beq .L107
 485:../Libraries/XMCLib/src/xmc_dma.c ****     {
 486:../Libraries/XMCLib/src/xmc_dma.c ****       dma->MASKCHEV[event_idx * 2UL] |= ((uint32_t)0x100UL << channel);
 2003              	 .loc 2 486 0
 2004 0024 7B69     	 ldr r3,[r7,#20]
 2005 0026 5A00     	 lsls r2,r3,#1
 2006 0028 7B69     	 ldr r3,[r7,#20]
 2007 002a 5900     	 lsls r1,r3,#1
 2008 002c FB68     	 ldr r3,[r7,#12]
 2009 002e C431     	 adds r1,r1,#196
 2010 0030 53F82110 	 ldr r1,[r3,r1,lsl#2]
 2011 0034 FB7A     	 ldrb r3,[r7,#11]
 2012 0036 4FF48070 	 mov r0,#256
 2013 003a 00FA03F3 	 lsl r3,r0,r3
 2014 003e 1943     	 orrs r1,r1,r3
 2015 0040 FB68     	 ldr r3,[r7,#12]
 2016 0042 C432     	 adds r2,r2,#196
 2017 0044 43F82210 	 str r1,[r3,r2,lsl#2]
 2018              	.L107:
 482:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2019              	 .loc 2 482 0 discriminator 2
 2020 0048 7B69     	 ldr r3,[r7,#20]
 2021 004a 0133     	 adds r3,r3,#1
 2022 004c 7B61     	 str r3,[r7,#20]
 2023              	.L106:
 482:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2024              	 .loc 2 482 0 is_stmt 0 discriminator 1
 2025 004e 7B69     	 ldr r3,[r7,#20]
 2026 0050 042B     	 cmp r3,#4
 2027 0052 DFD9     	 bls .L108
 487:../Libraries/XMCLib/src/xmc_dma.c ****     }
 488:../Libraries/XMCLib/src/xmc_dma.c ****   }
 489:../Libraries/XMCLib/src/xmc_dma.c **** }
 2028              	 .loc 2 489 0 is_stmt 1
 2029 0054 1C37     	 adds r7,r7,#28
 2030              	.LCFI130:
 2031              	 .cfi_def_cfa_offset 4
 2032 0056 BD46     	 mov sp,r7
 2033              	.LCFI131:
 2034              	 .cfi_def_cfa_register 13
 2035              	 
 2036 0058 5DF8047B 	 ldr r7,[sp],#4
 2037              	.LCFI132:
 2038              	 .cfi_restore 7
 2039              	 .cfi_def_cfa_offset 0
 2040 005c 7047     	 bx lr
 2041              	 .cfi_endproc
 2042              	.LFE180:
 2044 005e 00BF     	 .section .text.XMC_DMA_CH_ClearEventStatus,"ax",%progbits
 2045              	 .align 2
 2046              	 .global XMC_DMA_CH_ClearEventStatus
 2047              	 .thumb
 2048              	 .thumb_func
 2050              	XMC_DMA_CH_ClearEventStatus:
 2051              	.LFB181:
 490:../Libraries/XMCLib/src/xmc_dma.c **** 
 491:../Libraries/XMCLib/src/xmc_dma.c **** /* Clear GPDMA event */
 492:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 493:../Libraries/XMCLib/src/xmc_dma.c **** {
 2052              	 .loc 2 493 0
 2053              	 .cfi_startproc
 2054              	 
 2055              	 
 2056              	 
 2057 0000 80B4     	 push {r7}
 2058              	.LCFI133:
 2059              	 .cfi_def_cfa_offset 4
 2060              	 .cfi_offset 7,-4
 2061 0002 87B0     	 sub sp,sp,#28
 2062              	.LCFI134:
 2063              	 .cfi_def_cfa_offset 32
 2064 0004 00AF     	 add r7,sp,#0
 2065              	.LCFI135:
 2066              	 .cfi_def_cfa_register 7
 2067 0006 F860     	 str r0,[r7,#12]
 2068 0008 0B46     	 mov r3,r1
 2069 000a 7A60     	 str r2,[r7,#4]
 2070 000c FB72     	 strb r3,[r7,#11]
 494:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 495:../Libraries/XMCLib/src/xmc_dma.c **** 
 496:../Libraries/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 2071              	 .loc 2 496 0
 2072 000e 0023     	 movs r3,#0
 2073 0010 7B61     	 str r3,[r7,#20]
 2074 0012 13E0     	 b .L110
 2075              	.L112:
 497:../Libraries/XMCLib/src/xmc_dma.c ****   {
 498:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & (uint32_t)((uint32_t)0x1UL << event_idx))
 2076              	 .loc 2 498 0
 2077 0014 7B69     	 ldr r3,[r7,#20]
 2078 0016 7A68     	 ldr r2,[r7,#4]
 2079 0018 22FA03F3 	 lsr r3,r2,r3
 2080 001c 03F00103 	 and r3,r3,#1
 2081 0020 002B     	 cmp r3,#0
 2082 0022 08D0     	 beq .L111
 499:../Libraries/XMCLib/src/xmc_dma.c ****     {
 500:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
 2083              	 .loc 2 500 0
 2084 0024 7B69     	 ldr r3,[r7,#20]
 2085 0026 5A00     	 lsls r2,r3,#1
 2086 0028 FB7A     	 ldrb r3,[r7,#11]
 2087 002a 0121     	 movs r1,#1
 2088 002c 9940     	 lsls r1,r1,r3
 2089 002e FB68     	 ldr r3,[r7,#12]
 2090 0030 CE32     	 adds r2,r2,#206
 2091 0032 43F82210 	 str r1,[r3,r2,lsl#2]
 2092              	.L111:
 496:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2093              	 .loc 2 496 0 discriminator 2
 2094 0036 7B69     	 ldr r3,[r7,#20]
 2095 0038 0133     	 adds r3,r3,#1
 2096 003a 7B61     	 str r3,[r7,#20]
 2097              	.L110:
 496:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2098              	 .loc 2 496 0 is_stmt 0 discriminator 1
 2099 003c 7B69     	 ldr r3,[r7,#20]
 2100 003e 042B     	 cmp r3,#4
 2101 0040 E8D9     	 bls .L112
 501:../Libraries/XMCLib/src/xmc_dma.c ****     }
 502:../Libraries/XMCLib/src/xmc_dma.c ****   }
 503:../Libraries/XMCLib/src/xmc_dma.c **** 
 504:../Libraries/XMCLib/src/xmc_dma.c **** }
 2102              	 .loc 2 504 0 is_stmt 1
 2103 0042 1C37     	 adds r7,r7,#28
 2104              	.LCFI136:
 2105              	 .cfi_def_cfa_offset 4
 2106 0044 BD46     	 mov sp,r7
 2107              	.LCFI137:
 2108              	 .cfi_def_cfa_register 13
 2109              	 
 2110 0046 5DF8047B 	 ldr r7,[sp],#4
 2111              	.LCFI138:
 2112              	 .cfi_restore 7
 2113              	 .cfi_def_cfa_offset 0
 2114 004a 7047     	 bx lr
 2115              	 .cfi_endproc
 2116              	.LFE181:
 2118              	 .section .text.XMC_DMA_CH_GetEventStatus,"ax",%progbits
 2119              	 .align 2
 2120              	 .global XMC_DMA_CH_GetEventStatus
 2121              	 .thumb
 2122              	 .thumb_func
 2124              	XMC_DMA_CH_GetEventStatus:
 2125              	.LFB182:
 505:../Libraries/XMCLib/src/xmc_dma.c **** 
 506:../Libraries/XMCLib/src/xmc_dma.c **** /* Get GPDMA event status */
 507:../Libraries/XMCLib/src/xmc_dma.c **** uint32_t XMC_DMA_CH_GetEventStatus(XMC_DMA_t *const dma, const uint8_t channel)
 508:../Libraries/XMCLib/src/xmc_dma.c **** {
 2126              	 .loc 2 508 0
 2127              	 .cfi_startproc
 2128              	 
 2129              	 
 2130              	 
 2131 0000 80B4     	 push {r7}
 2132              	.LCFI139:
 2133              	 .cfi_def_cfa_offset 4
 2134              	 .cfi_offset 7,-4
 2135 0002 85B0     	 sub sp,sp,#20
 2136              	.LCFI140:
 2137              	 .cfi_def_cfa_offset 24
 2138 0004 00AF     	 add r7,sp,#0
 2139              	.LCFI141:
 2140              	 .cfi_def_cfa_register 7
 2141 0006 7860     	 str r0,[r7,#4]
 2142 0008 0B46     	 mov r3,r1
 2143 000a FB70     	 strb r3,[r7,#3]
 509:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 510:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t status = 0UL;
 2144              	 .loc 2 510 0
 2145 000c 0023     	 movs r3,#0
 2146 000e BB60     	 str r3,[r7,#8]
 511:../Libraries/XMCLib/src/xmc_dma.c **** 
 512:../Libraries/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 2147              	 .loc 2 512 0
 2148 0010 0023     	 movs r3,#0
 2149 0012 FB60     	 str r3,[r7,#12]
 2150 0014 18E0     	 b .L114
 2151              	.L117:
 513:../Libraries/XMCLib/src/xmc_dma.c ****   {
 514:../Libraries/XMCLib/src/xmc_dma.c ****     status |= (uint32_t)((dma->STATUSCHEV[event_idx * 2UL] & (uint32_t)((uint32_t)0x1UL << (uint32_
 2152              	 .loc 2 514 0
 2153 0016 FB68     	 ldr r3,[r7,#12]
 2154 0018 5A00     	 lsls r2,r3,#1
 2155 001a 7B68     	 ldr r3,[r7,#4]
 2156 001c BA32     	 adds r2,r2,#186
 2157 001e 53F82220 	 ldr r2,[r3,r2,lsl#2]
 2158 0022 FB78     	 ldrb r3,[r7,#3]
 2159 0024 22FA03F3 	 lsr r3,r2,r3
 2160 0028 03F00103 	 and r3,r3,#1
 2161 002c 002B     	 cmp r3,#0
 2162 002e 04D0     	 beq .L115
 2163              	 .loc 2 514 0 is_stmt 0 discriminator 1
 2164 0030 FB68     	 ldr r3,[r7,#12]
 2165 0032 0122     	 movs r2,#1
 2166 0034 02FA03F3 	 lsl r3,r2,r3
 2167 0038 00E0     	 b .L116
 2168              	.L115:
 2169              	 .loc 2 514 0 discriminator 2
 2170 003a 0023     	 movs r3,#0
 2171              	.L116:
 2172              	 .loc 2 514 0 discriminator 4
 2173 003c BA68     	 ldr r2,[r7,#8]
 2174 003e 1343     	 orrs r3,r3,r2
 2175 0040 BB60     	 str r3,[r7,#8]
 512:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2176              	 .loc 2 512 0 is_stmt 1 discriminator 4
 2177 0042 FB68     	 ldr r3,[r7,#12]
 2178 0044 0133     	 adds r3,r3,#1
 2179 0046 FB60     	 str r3,[r7,#12]
 2180              	.L114:
 512:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2181              	 .loc 2 512 0 is_stmt 0 discriminator 2
 2182 0048 FB68     	 ldr r3,[r7,#12]
 2183 004a 042B     	 cmp r3,#4
 2184 004c E3D9     	 bls .L117
 515:../Libraries/XMCLib/src/xmc_dma.c ****                          ((uint32_t)0x1UL << event_idx) : (uint32_t)0UL);
 516:../Libraries/XMCLib/src/xmc_dma.c ****   }
 517:../Libraries/XMCLib/src/xmc_dma.c **** 
 518:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 2185              	 .loc 2 518 0 is_stmt 1
 2186 004e BB68     	 ldr r3,[r7,#8]
 519:../Libraries/XMCLib/src/xmc_dma.c **** }
 2187              	 .loc 2 519 0
 2188 0050 1846     	 mov r0,r3
 2189 0052 1437     	 adds r7,r7,#20
 2190              	.LCFI142:
 2191              	 .cfi_def_cfa_offset 4
 2192 0054 BD46     	 mov sp,r7
 2193              	.LCFI143:
 2194              	 .cfi_def_cfa_register 13
 2195              	 
 2196 0056 5DF8047B 	 ldr r7,[sp],#4
 2197              	.LCFI144:
 2198              	 .cfi_restore 7
 2199              	 .cfi_def_cfa_offset 0
 2200 005a 7047     	 bx lr
 2201              	 .cfi_endproc
 2202              	.LFE182:
 2204              	 .section .text.XMC_DMA_CH_EnableSourceGather,"ax",%progbits
 2205              	 .align 2
 2206              	 .global XMC_DMA_CH_EnableSourceGather
 2207              	 .thumb
 2208              	 .thumb_func
 2210              	XMC_DMA_CH_EnableSourceGather:
 2211              	.LFB183:
 520:../Libraries/XMCLib/src/xmc_dma.c **** 
 521:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable source gather */
 522:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableSourceGather(XMC_DMA_t *const dma, const uint8_t channel, uint32_t interval, 
 523:../Libraries/XMCLib/src/xmc_dma.c **** {
 2212              	 .loc 2 523 0
 2213              	 .cfi_startproc
 2214              	 
 2215              	 
 2216              	 
 2217 0000 80B4     	 push {r7}
 2218              	.LCFI145:
 2219              	 .cfi_def_cfa_offset 4
 2220              	 .cfi_offset 7,-4
 2221 0002 85B0     	 sub sp,sp,#20
 2222              	.LCFI146:
 2223              	 .cfi_def_cfa_offset 24
 2224 0004 00AF     	 add r7,sp,#0
 2225              	.LCFI147:
 2226              	 .cfi_def_cfa_register 7
 2227 0006 F860     	 str r0,[r7,#12]
 2228 0008 7A60     	 str r2,[r7,#4]
 2229 000a 1A46     	 mov r2,r3
 2230 000c 0B46     	 mov r3,r1
 2231 000e FB72     	 strb r3,[r7,#11]
 2232 0010 1346     	 mov r3,r2
 2233 0012 3B81     	 strh r3,[r7,#8]
 524:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_SRC_GATHER_EN_Msk;
 2234              	 .loc 2 524 0
 2235 0014 FB7A     	 ldrb r3,[r7,#11]
 2236 0016 FA7A     	 ldrb r2,[r7,#11]
 2237 0018 F968     	 ldr r1,[r7,#12]
 2238 001a 5820     	 movs r0,#88
 2239 001c 00FB02F2 	 mul r2,r0,r2
 2240 0020 0A44     	 add r2,r2,r1
 2241 0022 1832     	 adds r2,r2,#24
 2242 0024 1268     	 ldr r2,[r2]
 2243 0026 42F40032 	 orr r2,r2,#131072
 2244 002a F968     	 ldr r1,[r7,#12]
 2245 002c 5820     	 movs r0,#88
 2246 002e 00FB03F3 	 mul r3,r0,r3
 2247 0032 0B44     	 add r3,r3,r1
 2248 0034 1833     	 adds r3,r3,#24
 2249 0036 1A60     	 str r2,[r3]
 525:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].SGR = ((uint32_t)interval << GPDMA0_CH_SGR_SGI_Pos) | ((uint32_t)count << GPDMA0
 2250              	 .loc 2 525 0
 2251 0038 FB7A     	 ldrb r3,[r7,#11]
 2252 003a 3A89     	 ldrh r2,[r7,#8]
 2253 003c 1105     	 lsls r1,r2,#20
 2254 003e 7A68     	 ldr r2,[r7,#4]
 2255 0040 0A43     	 orrs r2,r2,r1
 2256 0042 F968     	 ldr r1,[r7,#12]
 2257 0044 5820     	 movs r0,#88
 2258 0046 00FB03F3 	 mul r3,r0,r3
 2259 004a 0B44     	 add r3,r3,r1
 2260 004c 4833     	 adds r3,r3,#72
 2261 004e 1A60     	 str r2,[r3]
 526:../Libraries/XMCLib/src/xmc_dma.c **** }
 2262              	 .loc 2 526 0
 2263 0050 1437     	 adds r7,r7,#20
 2264              	.LCFI148:
 2265              	 .cfi_def_cfa_offset 4
 2266 0052 BD46     	 mov sp,r7
 2267              	.LCFI149:
 2268              	 .cfi_def_cfa_register 13
 2269              	 
 2270 0054 5DF8047B 	 ldr r7,[sp],#4
 2271              	.LCFI150:
 2272              	 .cfi_restore 7
 2273              	 .cfi_def_cfa_offset 0
 2274 0058 7047     	 bx lr
 2275              	 .cfi_endproc
 2276              	.LFE183:
 2278 005a 00BF     	 .section .text.XMC_DMA_CH_DisableSourceGather,"ax",%progbits
 2279              	 .align 2
 2280              	 .global XMC_DMA_CH_DisableSourceGather
 2281              	 .thumb
 2282              	 .thumb_func
 2284              	XMC_DMA_CH_DisableSourceGather:
 2285              	.LFB184:
 527:../Libraries/XMCLib/src/xmc_dma.c **** 
 528:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable source gather */
 529:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableSourceGather(XMC_DMA_t *const dma, const uint8_t channel)
 530:../Libraries/XMCLib/src/xmc_dma.c **** {
 2286              	 .loc 2 530 0
 2287              	 .cfi_startproc
 2288              	 
 2289              	 
 2290              	 
 2291 0000 80B4     	 push {r7}
 2292              	.LCFI151:
 2293              	 .cfi_def_cfa_offset 4
 2294              	 .cfi_offset 7,-4
 2295 0002 83B0     	 sub sp,sp,#12
 2296              	.LCFI152:
 2297              	 .cfi_def_cfa_offset 16
 2298 0004 00AF     	 add r7,sp,#0
 2299              	.LCFI153:
 2300              	 .cfi_def_cfa_register 7
 2301 0006 7860     	 str r0,[r7,#4]
 2302 0008 0B46     	 mov r3,r1
 2303 000a FB70     	 strb r3,[r7,#3]
 531:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~GPDMA0_CH_CTLL_SRC_GATHER_EN_Msk;
 2304              	 .loc 2 531 0
 2305 000c FB78     	 ldrb r3,[r7,#3]
 2306 000e FA78     	 ldrb r2,[r7,#3]
 2307 0010 7968     	 ldr r1,[r7,#4]
 2308 0012 5820     	 movs r0,#88
 2309 0014 00FB02F2 	 mul r2,r0,r2
 2310 0018 0A44     	 add r2,r2,r1
 2311 001a 1832     	 adds r2,r2,#24
 2312 001c 1268     	 ldr r2,[r2]
 2313 001e 22F40032 	 bic r2,r2,#131072
 2314 0022 7968     	 ldr r1,[r7,#4]
 2315 0024 5820     	 movs r0,#88
 2316 0026 00FB03F3 	 mul r3,r0,r3
 2317 002a 0B44     	 add r3,r3,r1
 2318 002c 1833     	 adds r3,r3,#24
 2319 002e 1A60     	 str r2,[r3]
 532:../Libraries/XMCLib/src/xmc_dma.c **** }
 2320              	 .loc 2 532 0
 2321 0030 0C37     	 adds r7,r7,#12
 2322              	.LCFI154:
 2323              	 .cfi_def_cfa_offset 4
 2324 0032 BD46     	 mov sp,r7
 2325              	.LCFI155:
 2326              	 .cfi_def_cfa_register 13
 2327              	 
 2328 0034 5DF8047B 	 ldr r7,[sp],#4
 2329              	.LCFI156:
 2330              	 .cfi_restore 7
 2331              	 .cfi_def_cfa_offset 0
 2332 0038 7047     	 bx lr
 2333              	 .cfi_endproc
 2334              	.LFE184:
 2336 003a 00BF     	 .section .text.XMC_DMA_CH_EnableDestinationScatter,"ax",%progbits
 2337              	 .align 2
 2338              	 .global XMC_DMA_CH_EnableDestinationScatter
 2339              	 .thumb
 2340              	 .thumb_func
 2342              	XMC_DMA_CH_EnableDestinationScatter:
 2343              	.LFB185:
 533:../Libraries/XMCLib/src/xmc_dma.c **** 
 534:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable destination scatter */
 535:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableDestinationScatter(XMC_DMA_t *const dma, const uint8_t channel, uint32_t inte
 536:../Libraries/XMCLib/src/xmc_dma.c **** {
 2344              	 .loc 2 536 0
 2345              	 .cfi_startproc
 2346              	 
 2347              	 
 2348              	 
 2349 0000 80B4     	 push {r7}
 2350              	.LCFI157:
 2351              	 .cfi_def_cfa_offset 4
 2352              	 .cfi_offset 7,-4
 2353 0002 85B0     	 sub sp,sp,#20
 2354              	.LCFI158:
 2355              	 .cfi_def_cfa_offset 24
 2356 0004 00AF     	 add r7,sp,#0
 2357              	.LCFI159:
 2358              	 .cfi_def_cfa_register 7
 2359 0006 F860     	 str r0,[r7,#12]
 2360 0008 7A60     	 str r2,[r7,#4]
 2361 000a 1A46     	 mov r2,r3
 2362 000c 0B46     	 mov r3,r1
 2363 000e FB72     	 strb r3,[r7,#11]
 2364 0010 1346     	 mov r3,r2
 2365 0012 3B81     	 strh r3,[r7,#8]
 537:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_DST_SCATTER_EN_Msk;
 2366              	 .loc 2 537 0
 2367 0014 FB7A     	 ldrb r3,[r7,#11]
 2368 0016 FA7A     	 ldrb r2,[r7,#11]
 2369 0018 F968     	 ldr r1,[r7,#12]
 2370 001a 5820     	 movs r0,#88
 2371 001c 00FB02F2 	 mul r2,r0,r2
 2372 0020 0A44     	 add r2,r2,r1
 2373 0022 1832     	 adds r2,r2,#24
 2374 0024 1268     	 ldr r2,[r2]
 2375 0026 42F48022 	 orr r2,r2,#262144
 2376 002a F968     	 ldr r1,[r7,#12]
 2377 002c 5820     	 movs r0,#88
 2378 002e 00FB03F3 	 mul r3,r0,r3
 2379 0032 0B44     	 add r3,r3,r1
 2380 0034 1833     	 adds r3,r3,#24
 2381 0036 1A60     	 str r2,[r3]
 538:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].DSR = ((uint32_t)interval << GPDMA0_CH_DSR_DSI_Pos) | ((uint32_t)count << GPDMA0
 2382              	 .loc 2 538 0
 2383 0038 FB7A     	 ldrb r3,[r7,#11]
 2384 003a 3A89     	 ldrh r2,[r7,#8]
 2385 003c 1105     	 lsls r1,r2,#20
 2386 003e 7A68     	 ldr r2,[r7,#4]
 2387 0040 0A43     	 orrs r2,r2,r1
 2388 0042 F968     	 ldr r1,[r7,#12]
 2389 0044 5820     	 movs r0,#88
 2390 0046 00FB03F3 	 mul r3,r0,r3
 2391 004a 0B44     	 add r3,r3,r1
 2392 004c 5033     	 adds r3,r3,#80
 2393 004e 1A60     	 str r2,[r3]
 539:../Libraries/XMCLib/src/xmc_dma.c **** }
 2394              	 .loc 2 539 0
 2395 0050 1437     	 adds r7,r7,#20
 2396              	.LCFI160:
 2397              	 .cfi_def_cfa_offset 4
 2398 0052 BD46     	 mov sp,r7
 2399              	.LCFI161:
 2400              	 .cfi_def_cfa_register 13
 2401              	 
 2402 0054 5DF8047B 	 ldr r7,[sp],#4
 2403              	.LCFI162:
 2404              	 .cfi_restore 7
 2405              	 .cfi_def_cfa_offset 0
 2406 0058 7047     	 bx lr
 2407              	 .cfi_endproc
 2408              	.LFE185:
 2410 005a 00BF     	 .section .text.XMC_DMA_CH_DisableDestinationScatter,"ax",%progbits
 2411              	 .align 2
 2412              	 .global XMC_DMA_CH_DisableDestinationScatter
 2413              	 .thumb
 2414              	 .thumb_func
 2416              	XMC_DMA_CH_DisableDestinationScatter:
 2417              	.LFB186:
 540:../Libraries/XMCLib/src/xmc_dma.c **** 
 541:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable destination scatter */
 542:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableDestinationScatter(XMC_DMA_t *const dma, const uint8_t channel)
 543:../Libraries/XMCLib/src/xmc_dma.c **** {
 2418              	 .loc 2 543 0
 2419              	 .cfi_startproc
 2420              	 
 2421              	 
 2422              	 
 2423 0000 80B4     	 push {r7}
 2424              	.LCFI163:
 2425              	 .cfi_def_cfa_offset 4
 2426              	 .cfi_offset 7,-4
 2427 0002 83B0     	 sub sp,sp,#12
 2428              	.LCFI164:
 2429              	 .cfi_def_cfa_offset 16
 2430 0004 00AF     	 add r7,sp,#0
 2431              	.LCFI165:
 2432              	 .cfi_def_cfa_register 7
 2433 0006 7860     	 str r0,[r7,#4]
 2434 0008 0B46     	 mov r3,r1
 2435 000a FB70     	 strb r3,[r7,#3]
 544:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~GPDMA0_CH_CTLL_DST_SCATTER_EN_Msk;
 2436              	 .loc 2 544 0
 2437 000c FB78     	 ldrb r3,[r7,#3]
 2438 000e FA78     	 ldrb r2,[r7,#3]
 2439 0010 7968     	 ldr r1,[r7,#4]
 2440 0012 5820     	 movs r0,#88
 2441 0014 00FB02F2 	 mul r2,r0,r2
 2442 0018 0A44     	 add r2,r2,r1
 2443 001a 1832     	 adds r2,r2,#24
 2444 001c 1268     	 ldr r2,[r2]
 2445 001e 22F48022 	 bic r2,r2,#262144
 2446 0022 7968     	 ldr r1,[r7,#4]
 2447 0024 5820     	 movs r0,#88
 2448 0026 00FB03F3 	 mul r3,r0,r3
 2449 002a 0B44     	 add r3,r3,r1
 2450 002c 1833     	 adds r3,r3,#24
 2451 002e 1A60     	 str r2,[r3]
 545:../Libraries/XMCLib/src/xmc_dma.c **** }
 2452              	 .loc 2 545 0
 2453 0030 0C37     	 adds r7,r7,#12
 2454              	.LCFI166:
 2455              	 .cfi_def_cfa_offset 4
 2456 0032 BD46     	 mov sp,r7
 2457              	.LCFI167:
 2458              	 .cfi_def_cfa_register 13
 2459              	 
 2460 0034 5DF8047B 	 ldr r7,[sp],#4
 2461              	.LCFI168:
 2462              	 .cfi_restore 7
 2463              	 .cfi_def_cfa_offset 0
 2464 0038 7047     	 bx lr
 2465              	 .cfi_endproc
 2466              	.LFE186:
 2468 003a 00BF     	 .section .text.XMC_DMA_CH_TriggerSourceRequest,"ax",%progbits
 2469              	 .align 2
 2470              	 .global XMC_DMA_CH_TriggerSourceRequest
 2471              	 .thumb
 2472              	 .thumb_func
 2474              	XMC_DMA_CH_TriggerSourceRequest:
 2475              	.LFB187:
 546:../Libraries/XMCLib/src/xmc_dma.c **** 
 547:../Libraries/XMCLib/src/xmc_dma.c **** /* Trigger source request */
 548:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_TriggerSourceRequest(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_
 549:../Libraries/XMCLib/src/xmc_dma.c **** {
 2476              	 .loc 2 549 0
 2477              	 .cfi_startproc
 2478              	 
 2479              	 
 2480              	 
 2481 0000 80B4     	 push {r7}
 2482              	.LCFI169:
 2483              	 .cfi_def_cfa_offset 4
 2484              	 .cfi_offset 7,-4
 2485 0002 83B0     	 sub sp,sp,#12
 2486              	.LCFI170:
 2487              	 .cfi_def_cfa_offset 16
 2488 0004 00AF     	 add r7,sp,#0
 2489              	.LCFI171:
 2490              	 .cfi_def_cfa_register 7
 2491 0006 7860     	 str r0,[r7,#4]
 2492 0008 0846     	 mov r0,r1
 2493 000a 1146     	 mov r1,r2
 2494 000c 1A46     	 mov r2,r3
 2495 000e 0346     	 mov r3,r0
 2496 0010 FB70     	 strb r3,[r7,#3]
 2497 0012 0B46     	 mov r3,r1
 2498 0014 BB70     	 strb r3,[r7,#2]
 2499 0016 1346     	 mov r3,r2
 2500 0018 7B70     	 strb r3,[r7,#1]
 550:../Libraries/XMCLib/src/xmc_dma.c ****   if ((uint32_t)type == (uint32_t)XMC_DMA_CH_TRANSACTION_TYPE_SINGLE)
 2501              	 .loc 2 550 0
 2502 001a BB78     	 ldrb r3,[r7,#2]
 2503 001c 002B     	 cmp r3,#0
 2504 001e 06D1     	 bne .L124
 551:../Libraries/XMCLib/src/xmc_dma.c ****   {  
 552:../Libraries/XMCLib/src/xmc_dma.c ****     dma->SGLREQSRCREG = ((uint32_t)0x101UL << channel);
 2505              	 .loc 2 552 0
 2506 0020 FB78     	 ldrb r3,[r7,#3]
 2507 0022 40F20112 	 movw r2,#257
 2508 0026 9A40     	 lsls r2,r2,r3
 2509 0028 7B68     	 ldr r3,[r7,#4]
 2510 002a C3F87823 	 str r2,[r3,#888]
 2511              	.L124:
 553:../Libraries/XMCLib/src/xmc_dma.c ****   }
 554:../Libraries/XMCLib/src/xmc_dma.c **** 
 555:../Libraries/XMCLib/src/xmc_dma.c ****   if (last == true)
 2512              	 .loc 2 555 0
 2513 002e 7B78     	 ldrb r3,[r7,#1]
 2514 0030 002B     	 cmp r3,#0
 2515 0032 06D0     	 beq .L125
 556:../Libraries/XMCLib/src/xmc_dma.c ****   {
 557:../Libraries/XMCLib/src/xmc_dma.c ****   dma->LSTSRCREG = (uint32_t)0x101UL << channel;
 2516              	 .loc 2 557 0
 2517 0034 FB78     	 ldrb r3,[r7,#3]
 2518 0036 40F20112 	 movw r2,#257
 2519 003a 9A40     	 lsls r2,r2,r3
 2520 003c 7B68     	 ldr r3,[r7,#4]
 2521 003e C3F88823 	 str r2,[r3,#904]
 2522              	.L125:
 558:../Libraries/XMCLib/src/xmc_dma.c ****   }
 559:../Libraries/XMCLib/src/xmc_dma.c ****   
 560:../Libraries/XMCLib/src/xmc_dma.c ****   dma->REQSRCREG = (uint32_t)0x101UL << channel;
 2523              	 .loc 2 560 0
 2524 0042 FB78     	 ldrb r3,[r7,#3]
 2525 0044 40F20112 	 movw r2,#257
 2526 0048 9A40     	 lsls r2,r2,r3
 2527 004a 7B68     	 ldr r3,[r7,#4]
 2528 004c C3F86823 	 str r2,[r3,#872]
 561:../Libraries/XMCLib/src/xmc_dma.c **** }
 2529              	 .loc 2 561 0
 2530 0050 0C37     	 adds r7,r7,#12
 2531              	.LCFI172:
 2532              	 .cfi_def_cfa_offset 4
 2533 0052 BD46     	 mov sp,r7
 2534              	.LCFI173:
 2535              	 .cfi_def_cfa_register 13
 2536              	 
 2537 0054 5DF8047B 	 ldr r7,[sp],#4
 2538              	.LCFI174:
 2539              	 .cfi_restore 7
 2540              	 .cfi_def_cfa_offset 0
 2541 0058 7047     	 bx lr
 2542              	 .cfi_endproc
 2543              	.LFE187:
 2545 005a 00BF     	 .section .text.XMC_DMA_CH_TriggerDestinationRequest,"ax",%progbits
 2546              	 .align 2
 2547              	 .global XMC_DMA_CH_TriggerDestinationRequest
 2548              	 .thumb
 2549              	 .thumb_func
 2551              	XMC_DMA_CH_TriggerDestinationRequest:
 2552              	.LFB188:
 562:../Libraries/XMCLib/src/xmc_dma.c **** 
 563:../Libraries/XMCLib/src/xmc_dma.c **** /* Trigger destination request */
 564:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_TriggerDestinationRequest(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DM
 565:../Libraries/XMCLib/src/xmc_dma.c **** {
 2553              	 .loc 2 565 0
 2554              	 .cfi_startproc
 2555              	 
 2556              	 
 2557              	 
 2558 0000 80B4     	 push {r7}
 2559              	.LCFI175:
 2560              	 .cfi_def_cfa_offset 4
 2561              	 .cfi_offset 7,-4
 2562 0002 83B0     	 sub sp,sp,#12
 2563              	.LCFI176:
 2564              	 .cfi_def_cfa_offset 16
 2565 0004 00AF     	 add r7,sp,#0
 2566              	.LCFI177:
 2567              	 .cfi_def_cfa_register 7
 2568 0006 7860     	 str r0,[r7,#4]
 2569 0008 0846     	 mov r0,r1
 2570 000a 1146     	 mov r1,r2
 2571 000c 1A46     	 mov r2,r3
 2572 000e 0346     	 mov r3,r0
 2573 0010 FB70     	 strb r3,[r7,#3]
 2574 0012 0B46     	 mov r3,r1
 2575 0014 BB70     	 strb r3,[r7,#2]
 2576 0016 1346     	 mov r3,r2
 2577 0018 7B70     	 strb r3,[r7,#1]
 566:../Libraries/XMCLib/src/xmc_dma.c ****   if(type == XMC_DMA_CH_TRANSACTION_TYPE_SINGLE)
 2578              	 .loc 2 566 0
 2579 001a BB78     	 ldrb r3,[r7,#2]
 2580 001c 002B     	 cmp r3,#0
 2581 001e 06D1     	 bne .L127
 567:../Libraries/XMCLib/src/xmc_dma.c ****   {  
 568:../Libraries/XMCLib/src/xmc_dma.c ****     dma->SGLREQDSTREG = (uint32_t)0x101UL << channel;
 2582              	 .loc 2 568 0
 2583 0020 FB78     	 ldrb r3,[r7,#3]
 2584 0022 40F20112 	 movw r2,#257
 2585 0026 9A40     	 lsls r2,r2,r3
 2586 0028 7B68     	 ldr r3,[r7,#4]
 2587 002a C3F88023 	 str r2,[r3,#896]
 2588              	.L127:
 569:../Libraries/XMCLib/src/xmc_dma.c ****   }
 570:../Libraries/XMCLib/src/xmc_dma.c **** 
 571:../Libraries/XMCLib/src/xmc_dma.c ****   if (last == true)
 2589              	 .loc 2 571 0
 2590 002e 7B78     	 ldrb r3,[r7,#1]
 2591 0030 002B     	 cmp r3,#0
 2592 0032 06D0     	 beq .L128
 572:../Libraries/XMCLib/src/xmc_dma.c ****   {
 573:../Libraries/XMCLib/src/xmc_dma.c ****     dma->LSTDSTREG = (uint32_t)0x101UL << channel;
 2593              	 .loc 2 573 0
 2594 0034 FB78     	 ldrb r3,[r7,#3]
 2595 0036 40F20112 	 movw r2,#257
 2596 003a 9A40     	 lsls r2,r2,r3
 2597 003c 7B68     	 ldr r3,[r7,#4]
 2598 003e C3F89023 	 str r2,[r3,#912]
 2599              	.L128:
 574:../Libraries/XMCLib/src/xmc_dma.c ****   }
 575:../Libraries/XMCLib/src/xmc_dma.c **** 
 576:../Libraries/XMCLib/src/xmc_dma.c ****   dma->REQDSTREG = (uint32_t)0x101UL << channel;
 2600              	 .loc 2 576 0
 2601 0042 FB78     	 ldrb r3,[r7,#3]
 2602 0044 40F20112 	 movw r2,#257
 2603 0048 9A40     	 lsls r2,r2,r3
 2604 004a 7B68     	 ldr r3,[r7,#4]
 2605 004c C3F87023 	 str r2,[r3,#880]
 577:../Libraries/XMCLib/src/xmc_dma.c **** }
 2606              	 .loc 2 577 0
 2607 0050 0C37     	 adds r7,r7,#12
 2608              	.LCFI178:
 2609              	 .cfi_def_cfa_offset 4
 2610 0052 BD46     	 mov sp,r7
 2611              	.LCFI179:
 2612              	 .cfi_def_cfa_register 13
 2613              	 
 2614 0054 5DF8047B 	 ldr r7,[sp],#4
 2615              	.LCFI180:
 2616              	 .cfi_restore 7
 2617              	 .cfi_def_cfa_offset 0
 2618 0058 7047     	 bx lr
 2619              	 .cfi_endproc
 2620              	.LFE188:
 2622 005a 00BF     	 .section .text.XMC_DMA_CH_EnableSourceAddressReload,"ax",%progbits
 2623              	 .align 2
 2624              	 .global XMC_DMA_CH_EnableSourceAddressReload
 2625              	 .thumb
 2626              	 .thumb_func
 2628              	XMC_DMA_CH_EnableSourceAddressReload:
 2629              	.LFB189:
 578:../Libraries/XMCLib/src/xmc_dma.c **** 
 579:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable source address reload */
 580:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableSourceAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 581:../Libraries/XMCLib/src/xmc_dma.c **** {
 2630              	 .loc 2 581 0
 2631              	 .cfi_startproc
 2632              	 
 2633              	 
 2634              	 
 2635 0000 80B4     	 push {r7}
 2636              	.LCFI181:
 2637              	 .cfi_def_cfa_offset 4
 2638              	 .cfi_offset 7,-4
 2639 0002 83B0     	 sub sp,sp,#12
 2640              	.LCFI182:
 2641              	 .cfi_def_cfa_offset 16
 2642 0004 00AF     	 add r7,sp,#0
 2643              	.LCFI183:
 2644              	 .cfi_def_cfa_register 7
 2645 0006 7860     	 str r0,[r7,#4]
 2646 0008 0B46     	 mov r3,r1
 2647 000a FB70     	 strb r3,[r7,#3]
 582:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 2648              	 .loc 2 582 0
 2649 000c FB78     	 ldrb r3,[r7,#3]
 2650 000e FA78     	 ldrb r2,[r7,#3]
 2651 0010 7968     	 ldr r1,[r7,#4]
 2652 0012 5820     	 movs r0,#88
 2653 0014 00FB02F2 	 mul r2,r0,r2
 2654 0018 0A44     	 add r2,r2,r1
 2655 001a 4032     	 adds r2,r2,#64
 2656 001c 1268     	 ldr r2,[r2]
 2657 001e 42F08042 	 orr r2,r2,#1073741824
 2658 0022 7968     	 ldr r1,[r7,#4]
 2659 0024 5820     	 movs r0,#88
 2660 0026 00FB03F3 	 mul r3,r0,r3
 2661 002a 0B44     	 add r3,r3,r1
 2662 002c 4033     	 adds r3,r3,#64
 2663 002e 1A60     	 str r2,[r3]
 583:../Libraries/XMCLib/src/xmc_dma.c **** }
 2664              	 .loc 2 583 0
 2665 0030 0C37     	 adds r7,r7,#12
 2666              	.LCFI184:
 2667              	 .cfi_def_cfa_offset 4
 2668 0032 BD46     	 mov sp,r7
 2669              	.LCFI185:
 2670              	 .cfi_def_cfa_register 13
 2671              	 
 2672 0034 5DF8047B 	 ldr r7,[sp],#4
 2673              	.LCFI186:
 2674              	 .cfi_restore 7
 2675              	 .cfi_def_cfa_offset 0
 2676 0038 7047     	 bx lr
 2677              	 .cfi_endproc
 2678              	.LFE189:
 2680 003a 00BF     	 .section .text.XMC_DMA_CH_DisableSourceAddressReload,"ax",%progbits
 2681              	 .align 2
 2682              	 .global XMC_DMA_CH_DisableSourceAddressReload
 2683              	 .thumb
 2684              	 .thumb_func
 2686              	XMC_DMA_CH_DisableSourceAddressReload:
 2687              	.LFB190:
 584:../Libraries/XMCLib/src/xmc_dma.c **** 
 585:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable source address reload */
 586:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableSourceAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 587:../Libraries/XMCLib/src/xmc_dma.c **** {
 2688              	 .loc 2 587 0
 2689              	 .cfi_startproc
 2690              	 
 2691              	 
 2692              	 
 2693 0000 80B4     	 push {r7}
 2694              	.LCFI187:
 2695              	 .cfi_def_cfa_offset 4
 2696              	 .cfi_offset 7,-4
 2697 0002 83B0     	 sub sp,sp,#12
 2698              	.LCFI188:
 2699              	 .cfi_def_cfa_offset 16
 2700 0004 00AF     	 add r7,sp,#0
 2701              	.LCFI189:
 2702              	 .cfi_def_cfa_register 7
 2703 0006 7860     	 str r0,[r7,#4]
 2704 0008 0B46     	 mov r3,r1
 2705 000a FB70     	 strb r3,[r7,#3]
 588:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 2706              	 .loc 2 588 0
 2707 000c FB78     	 ldrb r3,[r7,#3]
 2708 000e FA78     	 ldrb r2,[r7,#3]
 2709 0010 7968     	 ldr r1,[r7,#4]
 2710 0012 5820     	 movs r0,#88
 2711 0014 00FB02F2 	 mul r2,r0,r2
 2712 0018 0A44     	 add r2,r2,r1
 2713 001a 4032     	 adds r2,r2,#64
 2714 001c 1268     	 ldr r2,[r2]
 2715 001e 22F08042 	 bic r2,r2,#1073741824
 2716 0022 7968     	 ldr r1,[r7,#4]
 2717 0024 5820     	 movs r0,#88
 2718 0026 00FB03F3 	 mul r3,r0,r3
 2719 002a 0B44     	 add r3,r3,r1
 2720 002c 4033     	 adds r3,r3,#64
 2721 002e 1A60     	 str r2,[r3]
 589:../Libraries/XMCLib/src/xmc_dma.c **** }
 2722              	 .loc 2 589 0
 2723 0030 0C37     	 adds r7,r7,#12
 2724              	.LCFI190:
 2725              	 .cfi_def_cfa_offset 4
 2726 0032 BD46     	 mov sp,r7
 2727              	.LCFI191:
 2728              	 .cfi_def_cfa_register 13
 2729              	 
 2730 0034 5DF8047B 	 ldr r7,[sp],#4
 2731              	.LCFI192:
 2732              	 .cfi_restore 7
 2733              	 .cfi_def_cfa_offset 0
 2734 0038 7047     	 bx lr
 2735              	 .cfi_endproc
 2736              	.LFE190:
 2738 003a 00BF     	 .section .text.XMC_DMA_CH_EnableDestinationAddressReload,"ax",%progbits
 2739              	 .align 2
 2740              	 .global XMC_DMA_CH_EnableDestinationAddressReload
 2741              	 .thumb
 2742              	 .thumb_func
 2744              	XMC_DMA_CH_EnableDestinationAddressReload:
 2745              	.LFB191:
 590:../Libraries/XMCLib/src/xmc_dma.c **** 
 591:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable destination address reload */
 592:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableDestinationAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 593:../Libraries/XMCLib/src/xmc_dma.c **** {
 2746              	 .loc 2 593 0
 2747              	 .cfi_startproc
 2748              	 
 2749              	 
 2750              	 
 2751 0000 80B4     	 push {r7}
 2752              	.LCFI193:
 2753              	 .cfi_def_cfa_offset 4
 2754              	 .cfi_offset 7,-4
 2755 0002 83B0     	 sub sp,sp,#12
 2756              	.LCFI194:
 2757              	 .cfi_def_cfa_offset 16
 2758 0004 00AF     	 add r7,sp,#0
 2759              	.LCFI195:
 2760              	 .cfi_def_cfa_register 7
 2761 0006 7860     	 str r0,[r7,#4]
 2762 0008 0B46     	 mov r3,r1
 2763 000a FB70     	 strb r3,[r7,#3]
 594:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 2764              	 .loc 2 594 0
 2765 000c FB78     	 ldrb r3,[r7,#3]
 2766 000e FA78     	 ldrb r2,[r7,#3]
 2767 0010 7968     	 ldr r1,[r7,#4]
 2768 0012 5820     	 movs r0,#88
 2769 0014 00FB02F2 	 mul r2,r0,r2
 2770 0018 0A44     	 add r2,r2,r1
 2771 001a 4032     	 adds r2,r2,#64
 2772 001c 1268     	 ldr r2,[r2]
 2773 001e 42F00042 	 orr r2,r2,#-2147483648
 2774 0022 7968     	 ldr r1,[r7,#4]
 2775 0024 5820     	 movs r0,#88
 2776 0026 00FB03F3 	 mul r3,r0,r3
 2777 002a 0B44     	 add r3,r3,r1
 2778 002c 4033     	 adds r3,r3,#64
 2779 002e 1A60     	 str r2,[r3]
 595:../Libraries/XMCLib/src/xmc_dma.c **** }
 2780              	 .loc 2 595 0
 2781 0030 0C37     	 adds r7,r7,#12
 2782              	.LCFI196:
 2783              	 .cfi_def_cfa_offset 4
 2784 0032 BD46     	 mov sp,r7
 2785              	.LCFI197:
 2786              	 .cfi_def_cfa_register 13
 2787              	 
 2788 0034 5DF8047B 	 ldr r7,[sp],#4
 2789              	.LCFI198:
 2790              	 .cfi_restore 7
 2791              	 .cfi_def_cfa_offset 0
 2792 0038 7047     	 bx lr
 2793              	 .cfi_endproc
 2794              	.LFE191:
 2796 003a 00BF     	 .section .text.XMC_DMA_CH_DisableDestinationAddressReload,"ax",%progbits
 2797              	 .align 2
 2798              	 .global XMC_DMA_CH_DisableDestinationAddressReload
 2799              	 .thumb
 2800              	 .thumb_func
 2802              	XMC_DMA_CH_DisableDestinationAddressReload:
 2803              	.LFB192:
 596:../Libraries/XMCLib/src/xmc_dma.c **** 
 597:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable destination address reload */
 598:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableDestinationAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 599:../Libraries/XMCLib/src/xmc_dma.c **** {
 2804              	 .loc 2 599 0
 2805              	 .cfi_startproc
 2806              	 
 2807              	 
 2808              	 
 2809 0000 80B4     	 push {r7}
 2810              	.LCFI199:
 2811              	 .cfi_def_cfa_offset 4
 2812              	 .cfi_offset 7,-4
 2813 0002 83B0     	 sub sp,sp,#12
 2814              	.LCFI200:
 2815              	 .cfi_def_cfa_offset 16
 2816 0004 00AF     	 add r7,sp,#0
 2817              	.LCFI201:
 2818              	 .cfi_def_cfa_register 7
 2819 0006 7860     	 str r0,[r7,#4]
 2820 0008 0B46     	 mov r3,r1
 2821 000a FB70     	 strb r3,[r7,#3]
 600:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 2822              	 .loc 2 600 0
 2823 000c FB78     	 ldrb r3,[r7,#3]
 2824 000e FA78     	 ldrb r2,[r7,#3]
 2825 0010 7968     	 ldr r1,[r7,#4]
 2826 0012 5820     	 movs r0,#88
 2827 0014 00FB02F2 	 mul r2,r0,r2
 2828 0018 0A44     	 add r2,r2,r1
 2829 001a 4032     	 adds r2,r2,#64
 2830 001c 1268     	 ldr r2,[r2]
 2831 001e 22F00042 	 bic r2,r2,#-2147483648
 2832 0022 7968     	 ldr r1,[r7,#4]
 2833 0024 5820     	 movs r0,#88
 2834 0026 00FB03F3 	 mul r3,r0,r3
 2835 002a 0B44     	 add r3,r3,r1
 2836 002c 4033     	 adds r3,r3,#64
 2837 002e 1A60     	 str r2,[r3]
 601:../Libraries/XMCLib/src/xmc_dma.c **** }
 2838              	 .loc 2 601 0
 2839 0030 0C37     	 adds r7,r7,#12
 2840              	.LCFI202:
 2841              	 .cfi_def_cfa_offset 4
 2842 0032 BD46     	 mov sp,r7
 2843              	.LCFI203:
 2844              	 .cfi_def_cfa_register 13
 2845              	 
 2846 0034 5DF8047B 	 ldr r7,[sp],#4
 2847              	.LCFI204:
 2848              	 .cfi_restore 7
 2849              	 .cfi_def_cfa_offset 0
 2850 0038 7047     	 bx lr
 2851              	 .cfi_endproc
 2852              	.LFE192:
 2854 003a 00BF     	 .section .text.XMC_DMA_CH_RequestLastMultiblockTransfer,"ax",%progbits
 2855              	 .align 2
 2856              	 .global XMC_DMA_CH_RequestLastMultiblockTransfer
 2857              	 .thumb
 2858              	 .thumb_func
 2860              	XMC_DMA_CH_RequestLastMultiblockTransfer:
 2861              	.LFB193:
 602:../Libraries/XMCLib/src/xmc_dma.c **** 
 603:../Libraries/XMCLib/src/xmc_dma.c **** /* Request last multi-block transfer */
 604:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_RequestLastMultiblockTransfer(XMC_DMA_t *const dma, const uint8_t channel)
 605:../Libraries/XMCLib/src/xmc_dma.c **** {
 2862              	 .loc 2 605 0
 2863              	 .cfi_startproc
 2864              	 
 2865              	 
 2866              	 
 2867 0000 80B4     	 push {r7}
 2868              	.LCFI205:
 2869              	 .cfi_def_cfa_offset 4
 2870              	 .cfi_offset 7,-4
 2871 0002 83B0     	 sub sp,sp,#12
 2872              	.LCFI206:
 2873              	 .cfi_def_cfa_offset 16
 2874 0004 00AF     	 add r7,sp,#0
 2875              	.LCFI207:
 2876              	 .cfi_def_cfa_register 7
 2877 0006 7860     	 str r0,[r7,#4]
 2878 0008 0B46     	 mov r3,r1
 2879 000a FB70     	 strb r3,[r7,#3]
 606:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~(GPDMA0_CH_CFGL_RELOAD_SRC_Msk | GPDMA0_CH_CFGL_RELOAD_DST_Ms
 2880              	 .loc 2 606 0
 2881 000c FB78     	 ldrb r3,[r7,#3]
 2882 000e FA78     	 ldrb r2,[r7,#3]
 2883 0010 7968     	 ldr r1,[r7,#4]
 2884 0012 5820     	 movs r0,#88
 2885 0014 00FB02F2 	 mul r2,r0,r2
 2886 0018 0A44     	 add r2,r2,r1
 2887 001a 4032     	 adds r2,r2,#64
 2888 001c 1268     	 ldr r2,[r2]
 2889 001e 22F04042 	 bic r2,r2,#-1073741824
 2890 0022 7968     	 ldr r1,[r7,#4]
 2891 0024 5820     	 movs r0,#88
 2892 0026 00FB03F3 	 mul r3,r0,r3
 2893 002a 0B44     	 add r3,r3,r1
 2894 002c 4033     	 adds r3,r3,#64
 2895 002e 1A60     	 str r2,[r3]
 607:../Libraries/XMCLib/src/xmc_dma.c **** }
 2896              	 .loc 2 607 0
 2897 0030 0C37     	 adds r7,r7,#12
 2898              	.LCFI208:
 2899              	 .cfi_def_cfa_offset 4
 2900 0032 BD46     	 mov sp,r7
 2901              	.LCFI209:
 2902              	 .cfi_def_cfa_register 13
 2903              	 
 2904 0034 5DF8047B 	 ldr r7,[sp],#4
 2905              	.LCFI210:
 2906              	 .cfi_restore 7
 2907              	 .cfi_def_cfa_offset 0
 2908 0038 7047     	 bx lr
 2909              	 .cfi_endproc
 2910              	.LFE193:
 2912 003a 00BF     	 .section .text.XMC_DMA_CH_SetEventHandler,"ax",%progbits
 2913              	 .align 2
 2914              	 .global XMC_DMA_CH_SetEventHandler
 2915              	 .thumb
 2916              	 .thumb_func
 2918              	XMC_DMA_CH_SetEventHandler:
 2919              	.LFB194:
 608:../Libraries/XMCLib/src/xmc_dma.c **** 
 609:../Libraries/XMCLib/src/xmc_dma.c **** /* Set event handler */
 610:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_SetEventHandler(XMC_DMA_t *const dma, const uint8_t channel, XMC_DMA_CH_EVENT_HANDL
 611:../Libraries/XMCLib/src/xmc_dma.c **** {
 2920              	 .loc 2 611 0
 2921              	 .cfi_startproc
 2922              	 
 2923              	 
 2924              	 
 2925 0000 80B4     	 push {r7}
 2926              	.LCFI211:
 2927              	 .cfi_def_cfa_offset 4
 2928              	 .cfi_offset 7,-4
 2929 0002 85B0     	 sub sp,sp,#20
 2930              	.LCFI212:
 2931              	 .cfi_def_cfa_offset 24
 2932 0004 00AF     	 add r7,sp,#0
 2933              	.LCFI213:
 2934              	 .cfi_def_cfa_register 7
 2935 0006 F860     	 str r0,[r7,#12]
 2936 0008 0B46     	 mov r3,r1
 2937 000a 7A60     	 str r2,[r7,#4]
 2938 000c FB72     	 strb r3,[r7,#11]
 612:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 613:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 2939              	 .loc 2 613 0
 2940 000e FB68     	 ldr r3,[r7,#12]
 2941 0010 094A     	 ldr r2,.L137
 2942 0012 9342     	 cmp r3,r2
 2943 0014 05D1     	 bne .L135
 614:../Libraries/XMCLib/src/xmc_dma.c ****   {
 615:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 616:../Libraries/XMCLib/src/xmc_dma.c ****     dma0_event_handlers[channel] = event_handler;
 2944              	 .loc 2 616 0
 2945 0016 FB7A     	 ldrb r3,[r7,#11]
 2946 0018 0849     	 ldr r1,.L137+4
 2947 001a 7A68     	 ldr r2,[r7,#4]
 2948 001c 41F82320 	 str r2,[r1,r3,lsl#2]
 2949 0020 04E0     	 b .L134
 2950              	.L135:
 617:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 618:../Libraries/XMCLib/src/xmc_dma.c ****   }
 619:../Libraries/XMCLib/src/xmc_dma.c ****   else
 620:../Libraries/XMCLib/src/xmc_dma.c ****   {
 621:../Libraries/XMCLib/src/xmc_dma.c ****     dma1_event_handlers[channel] = event_handler;
 2951              	 .loc 2 621 0
 2952 0022 FB7A     	 ldrb r3,[r7,#11]
 2953 0024 0649     	 ldr r1,.L137+8
 2954 0026 7A68     	 ldr r2,[r7,#4]
 2955 0028 41F82320 	 str r2,[r1,r3,lsl#2]
 2956              	.L134:
 622:../Libraries/XMCLib/src/xmc_dma.c ****   }
 623:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 624:../Libraries/XMCLib/src/xmc_dma.c **** }
 2957              	 .loc 2 624 0
 2958 002c 1437     	 adds r7,r7,#20
 2959              	.LCFI214:
 2960              	 .cfi_def_cfa_offset 4
 2961 002e BD46     	 mov sp,r7
 2962              	.LCFI215:
 2963              	 .cfi_def_cfa_register 13
 2964              	 
 2965 0030 5DF8047B 	 ldr r7,[sp],#4
 2966              	.LCFI216:
 2967              	 .cfi_restore 7
 2968              	 .cfi_def_cfa_offset 0
 2969 0034 7047     	 bx lr
 2970              	.L138:
 2971 0036 00BF     	 .align 2
 2972              	.L137:
 2973 0038 00400150 	 .word 1342259200
 2974 003c 00000000 	 .word dma0_event_handlers
 2975 0040 00000000 	 .word dma1_event_handlers
 2976              	 .cfi_endproc
 2977              	.LFE194:
 2979              	 .section .text.XMC_DMA_CH_ClearSourcePeripheralRequest,"ax",%progbits
 2980              	 .align 2
 2981              	 .global XMC_DMA_CH_ClearSourcePeripheralRequest
 2982              	 .thumb
 2983              	 .thumb_func
 2985              	XMC_DMA_CH_ClearSourcePeripheralRequest:
 2986              	.LFB195:
 625:../Libraries/XMCLib/src/xmc_dma.c **** 
 626:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearSourcePeripheralRequest(XMC_DMA_t *const dma, uint8_t channel)
 627:../Libraries/XMCLib/src/xmc_dma.c **** {
 2987              	 .loc 2 627 0
 2988              	 .cfi_startproc
 2989              	 
 2990              	 
 2991 0000 80B5     	 push {r7,lr}
 2992              	.LCFI217:
 2993              	 .cfi_def_cfa_offset 8
 2994              	 .cfi_offset 7,-8
 2995              	 .cfi_offset 14,-4
 2996 0002 84B0     	 sub sp,sp,#16
 2997              	.LCFI218:
 2998              	 .cfi_def_cfa_offset 24
 2999 0004 00AF     	 add r7,sp,#0
 3000              	.LCFI219:
 3001              	 .cfi_def_cfa_register 7
 3002 0006 7860     	 str r0,[r7,#4]
 3003 0008 0B46     	 mov r3,r1
 3004 000a FB70     	 strb r3,[r7,#3]
 628:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t line;
 629:../Libraries/XMCLib/src/xmc_dma.c ****   line = (dma->CH[channel].CFGH & GPDMA0_CH_CFGH_SRC_PER_Msk) >> GPDMA0_CH_CFGH_SRC_PER_Pos;
 3005              	 .loc 2 629 0
 3006 000c FB78     	 ldrb r3,[r7,#3]
 3007 000e 7A68     	 ldr r2,[r7,#4]
 3008 0010 5821     	 movs r1,#88
 3009 0012 01FB03F3 	 mul r3,r1,r3
 3010 0016 1344     	 add r3,r3,r2
 3011 0018 4033     	 adds r3,r3,#64
 3012 001a 5B68     	 ldr r3,[r3,#4]
 3013 001c 03F4F063 	 and r3,r3,#1920
 3014 0020 DB09     	 lsrs r3,r3,#7
 3015 0022 FB60     	 str r3,[r7,#12]
 630:../Libraries/XMCLib/src/xmc_dma.c **** 
 631:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
 3016              	 .loc 2 631 0
 3017 0024 FB68     	 ldr r3,[r7,#12]
 3018 0026 DBB2     	 uxtb r3,r3
 3019 0028 7868     	 ldr r0,[r7,#4]
 3020 002a 1946     	 mov r1,r3
 3021 002c FFF7FEFF 	 bl XMC_DMA_ClearRequestLine
 632:../Libraries/XMCLib/src/xmc_dma.c **** }
 3022              	 .loc 2 632 0
 3023 0030 1037     	 adds r7,r7,#16
 3024              	.LCFI220:
 3025              	 .cfi_def_cfa_offset 8
 3026 0032 BD46     	 mov sp,r7
 3027              	.LCFI221:
 3028              	 .cfi_def_cfa_register 13
 3029              	 
 3030 0034 80BD     	 pop {r7,pc}
 3031              	 .cfi_endproc
 3032              	.LFE195:
 3034 0036 00BF     	 .section .text.XMC_DMA_CH_ClearDestinationPeripheralRequest,"ax",%progbits
 3035              	 .align 2
 3036              	 .global XMC_DMA_CH_ClearDestinationPeripheralRequest
 3037              	 .thumb
 3038              	 .thumb_func
 3040              	XMC_DMA_CH_ClearDestinationPeripheralRequest:
 3041              	.LFB196:
 633:../Libraries/XMCLib/src/xmc_dma.c **** 
 634:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearDestinationPeripheralRequest(XMC_DMA_t *const dma, uint8_t channel)
 635:../Libraries/XMCLib/src/xmc_dma.c **** {
 3042              	 .loc 2 635 0
 3043              	 .cfi_startproc
 3044              	 
 3045              	 
 3046 0000 80B5     	 push {r7,lr}
 3047              	.LCFI222:
 3048              	 .cfi_def_cfa_offset 8
 3049              	 .cfi_offset 7,-8
 3050              	 .cfi_offset 14,-4
 3051 0002 84B0     	 sub sp,sp,#16
 3052              	.LCFI223:
 3053              	 .cfi_def_cfa_offset 24
 3054 0004 00AF     	 add r7,sp,#0
 3055              	.LCFI224:
 3056              	 .cfi_def_cfa_register 7
 3057 0006 7860     	 str r0,[r7,#4]
 3058 0008 0B46     	 mov r3,r1
 3059 000a FB70     	 strb r3,[r7,#3]
 636:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t line;
 637:../Libraries/XMCLib/src/xmc_dma.c ****   line = (dma->CH[channel].CFGH & GPDMA0_CH_CFGH_DEST_PER_Msk) >> GPDMA0_CH_CFGH_DEST_PER_Pos;
 3060              	 .loc 2 637 0
 3061 000c FB78     	 ldrb r3,[r7,#3]
 3062 000e 7A68     	 ldr r2,[r7,#4]
 3063 0010 5821     	 movs r1,#88
 3064 0012 01FB03F3 	 mul r3,r1,r3
 3065 0016 1344     	 add r3,r3,r2
 3066 0018 4033     	 adds r3,r3,#64
 3067 001a 5B68     	 ldr r3,[r3,#4]
 3068 001c 03F4F043 	 and r3,r3,#30720
 3069 0020 DB0A     	 lsrs r3,r3,#11
 3070 0022 FB60     	 str r3,[r7,#12]
 638:../Libraries/XMCLib/src/xmc_dma.c **** 
 639:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
 3071              	 .loc 2 639 0
 3072 0024 FB68     	 ldr r3,[r7,#12]
 3073 0026 DBB2     	 uxtb r3,r3
 3074 0028 7868     	 ldr r0,[r7,#4]
 3075 002a 1946     	 mov r1,r3
 3076 002c FFF7FEFF 	 bl XMC_DMA_ClearRequestLine
 640:../Libraries/XMCLib/src/xmc_dma.c **** }
 3077              	 .loc 2 640 0
 3078 0030 1037     	 adds r7,r7,#16
 3079              	.LCFI225:
 3080              	 .cfi_def_cfa_offset 8
 3081 0032 BD46     	 mov sp,r7
 3082              	.LCFI226:
 3083              	 .cfi_def_cfa_register 13
 3084              	 
 3085 0034 80BD     	 pop {r7,pc}
 3086              	 .cfi_endproc
 3087              	.LFE196:
 3089 0036 00BF     	 .section .text.XMC_DMA_IRQHandler,"ax",%progbits
 3090              	 .align 2
 3091              	 .global XMC_DMA_IRQHandler
 3092              	 .thumb
 3093              	 .thumb_func
 3095              	XMC_DMA_IRQHandler:
 3096              	.LFB197:
 641:../Libraries/XMCLib/src/xmc_dma.c **** 
 642:../Libraries/XMCLib/src/xmc_dma.c **** /* Default DMA IRQ handler */
 643:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_IRQHandler(XMC_DMA_t *const dma)
 644:../Libraries/XMCLib/src/xmc_dma.c **** {
 3097              	 .loc 2 644 0
 3098              	 .cfi_startproc
 3099              	 
 3100              	 
 3101 0000 80B5     	 push {r7,lr}
 3102              	.LCFI227:
 3103              	 .cfi_def_cfa_offset 8
 3104              	 .cfi_offset 7,-8
 3105              	 .cfi_offset 14,-4
 3106 0002 88B0     	 sub sp,sp,#32
 3107              	.LCFI228:
 3108              	 .cfi_def_cfa_offset 40
 3109 0004 00AF     	 add r7,sp,#0
 3110              	.LCFI229:
 3111              	 .cfi_def_cfa_register 7
 3112 0006 7860     	 str r0,[r7,#4]
 645:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event;
 646:../Libraries/XMCLib/src/xmc_dma.c ****   int32_t channel;
 647:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t mask;
 648:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_EVENT_HANDLER_t *dma_event_handlers;
 649:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_EVENT_HANDLER_t event_handler;
 650:../Libraries/XMCLib/src/xmc_dma.c **** 
 651:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 652:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 3113              	 .loc 2 652 0
 3114 0008 7B68     	 ldr r3,[r7,#4]
 3115 000a 804A     	 ldr r2,.L174
 3116 000c 9342     	 cmp r3,r2
 3117 000e 02D1     	 bne .L142
 653:../Libraries/XMCLib/src/xmc_dma.c ****   {
 654:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 655:../Libraries/XMCLib/src/xmc_dma.c ****     dma_event_handlers = dma0_event_handlers;
 3118              	 .loc 2 655 0
 3119 0010 7F4B     	 ldr r3,.L174+4
 3120 0012 BB61     	 str r3,[r7,#24]
 3121 0014 01E0     	 b .L143
 3122              	.L142:
 656:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 657:../Libraries/XMCLib/src/xmc_dma.c ****   }
 658:../Libraries/XMCLib/src/xmc_dma.c ****   else
 659:../Libraries/XMCLib/src/xmc_dma.c ****   {
 660:../Libraries/XMCLib/src/xmc_dma.c ****     dma_event_handlers = dma1_event_handlers;
 3123              	 .loc 2 660 0
 3124 0016 7F4B     	 ldr r3,.L174+8
 3125 0018 BB61     	 str r3,[r7,#24]
 3126              	.L143:
 661:../Libraries/XMCLib/src/xmc_dma.c ****   }
 662:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 663:../Libraries/XMCLib/src/xmc_dma.c ****   
 664:../Libraries/XMCLib/src/xmc_dma.c ****   event = XMC_DMA_GetEventStatus(dma);
 3127              	 .loc 2 664 0
 3128 001a 7868     	 ldr r0,[r7,#4]
 3129 001c FFF7FEFF 	 bl XMC_DMA_GetEventStatus
 3130 0020 7861     	 str r0,[r7,#20]
 665:../Libraries/XMCLib/src/xmc_dma.c ****   channel = 0;
 3131              	 .loc 2 665 0
 3132 0022 0023     	 movs r3,#0
 3133 0024 FB61     	 str r3,[r7,#28]
 666:../Libraries/XMCLib/src/xmc_dma.c **** 
 667:../Libraries/XMCLib/src/xmc_dma.c ****   if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
 3134              	 .loc 2 667 0
 3135 0026 7B69     	 ldr r3,[r7,#20]
 3136 0028 03F01003 	 and r3,r3,#16
 3137 002c 002B     	 cmp r3,#0
 3138 002e 2AD0     	 beq .L144
 668:../Libraries/XMCLib/src/xmc_dma.c ****   {
 669:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsErrorStatus(dma);
 3139              	 .loc 2 669 0
 3140 0030 7868     	 ldr r0,[r7,#4]
 3141 0032 FFF7FEFF 	 bl XMC_DMA_GetChannelsErrorStatus
 3142 0036 7861     	 str r0,[r7,#20]
 670:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3143              	 .loc 2 670 0
 3144 0038 21E0     	 b .L145
 3145              	.L149:
 671:../Libraries/XMCLib/src/xmc_dma.c ****     {
 672:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3146              	 .loc 2 672 0
 3147 003a 0122     	 movs r2,#1
 3148 003c FB69     	 ldr r3,[r7,#28]
 3149 003e 02FA03F3 	 lsl r3,r2,r3
 3150 0042 3B61     	 str r3,[r7,#16]
 673:../Libraries/XMCLib/src/xmc_dma.c ****       if ((event & mask) != 0)
 3151              	 .loc 2 673 0
 3152 0044 7A69     	 ldr r2,[r7,#20]
 3153 0046 3B69     	 ldr r3,[r7,#16]
 3154 0048 1340     	 ands r3,r3,r2
 3155 004a 002B     	 cmp r3,#0
 3156 004c 14D0     	 beq .L146
 674:../Libraries/XMCLib/src/xmc_dma.c ****       {
 675:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3157              	 .loc 2 675 0
 3158 004e FB69     	 ldr r3,[r7,#28]
 3159 0050 9B00     	 lsls r3,r3,#2
 3160 0052 BA69     	 ldr r2,[r7,#24]
 3161 0054 1344     	 add r3,r3,r2
 3162 0056 1B68     	 ldr r3,[r3]
 3163 0058 FB60     	 str r3,[r7,#12]
 676:../Libraries/XMCLib/src/xmc_dma.c **** 
 677:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 678:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3164              	 .loc 2 678 0
 3165 005a FB68     	 ldr r3,[r7,#12]
 3166 005c 002B     	 cmp r3,#0
 3167 005e 02D0     	 beq .L147
 679:../Libraries/XMCLib/src/xmc_dma.c ****         {
 680:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_ERROR);
 3168              	 .loc 2 680 0
 3169 0060 FB68     	 ldr r3,[r7,#12]
 3170 0062 1020     	 movs r0,#16
 3171 0064 9847     	 blx r3
 3172              	.L147:
 681:../Libraries/XMCLib/src/xmc_dma.c ****         }
 682:../Libraries/XMCLib/src/xmc_dma.c **** 
 683:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_ERROR);
 3173              	 .loc 2 683 0
 3174 0066 FB69     	 ldr r3,[r7,#28]
 3175 0068 DBB2     	 uxtb r3,r3
 3176 006a 7868     	 ldr r0,[r7,#4]
 3177 006c 1946     	 mov r1,r3
 3178 006e 1022     	 movs r2,#16
 3179 0070 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 684:../Libraries/XMCLib/src/xmc_dma.c ****         
 685:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3180              	 .loc 2 685 0
 3181 0074 00BF     	 nop
 3182 0076 C5E0     	 b .L141
 3183              	.L146:
 686:../Libraries/XMCLib/src/xmc_dma.c ****       }
 687:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3184              	 .loc 2 687 0
 3185 0078 FB69     	 ldr r3,[r7,#28]
 3186 007a 0133     	 adds r3,r3,#1
 3187 007c FB61     	 str r3,[r7,#28]
 3188              	.L145:
 670:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3189              	 .loc 2 670 0
 3190 007e 7B69     	 ldr r3,[r7,#20]
 3191 0080 002B     	 cmp r3,#0
 3192 0082 DAD1     	 bne .L149
 3193 0084 BEE0     	 b .L141
 3194              	.L144:
 688:../Libraries/XMCLib/src/xmc_dma.c ****     }
 689:../Libraries/XMCLib/src/xmc_dma.c ****   }
 690:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
 3195              	 .loc 2 690 0
 3196 0086 7B69     	 ldr r3,[r7,#20]
 3197 0088 03F00103 	 and r3,r3,#1
 3198 008c 002B     	 cmp r3,#0
 3199 008e 2AD0     	 beq .L151
 691:../Libraries/XMCLib/src/xmc_dma.c ****   {
 692:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
 3200              	 .loc 2 692 0
 3201 0090 7868     	 ldr r0,[r7,#4]
 3202 0092 FFF7FEFF 	 bl XMC_DMA_GetChannelsTransferCompleteStatus
 3203 0096 7861     	 str r0,[r7,#20]
 693:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3204              	 .loc 2 693 0
 3205 0098 21E0     	 b .L152
 3206              	.L156:
 694:../Libraries/XMCLib/src/xmc_dma.c ****     {
 695:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3207              	 .loc 2 695 0
 3208 009a 0122     	 movs r2,#1
 3209 009c FB69     	 ldr r3,[r7,#28]
 3210 009e 02FA03F3 	 lsl r3,r2,r3
 3211 00a2 3B61     	 str r3,[r7,#16]
 696:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3212              	 .loc 2 696 0
 3213 00a4 7A69     	 ldr r2,[r7,#20]
 3214 00a6 3B69     	 ldr r3,[r7,#16]
 3215 00a8 1340     	 ands r3,r3,r2
 3216 00aa 002B     	 cmp r3,#0
 3217 00ac 14D0     	 beq .L153
 697:../Libraries/XMCLib/src/xmc_dma.c ****       {
 698:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3218              	 .loc 2 698 0
 3219 00ae FB69     	 ldr r3,[r7,#28]
 3220 00b0 9B00     	 lsls r3,r3,#2
 3221 00b2 BA69     	 ldr r2,[r7,#24]
 3222 00b4 1344     	 add r3,r3,r2
 3223 00b6 1B68     	 ldr r3,[r3]
 3224 00b8 FB60     	 str r3,[r7,#12]
 699:../Libraries/XMCLib/src/xmc_dma.c **** 
 700:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 701:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3225              	 .loc 2 701 0
 3226 00ba FB68     	 ldr r3,[r7,#12]
 3227 00bc 002B     	 cmp r3,#0
 3228 00be 02D0     	 beq .L154
 702:../Libraries/XMCLib/src/xmc_dma.c ****         {
 703:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 3229              	 .loc 2 703 0
 3230 00c0 FB68     	 ldr r3,[r7,#12]
 3231 00c2 0120     	 movs r0,#1
 3232 00c4 9847     	 blx r3
 3233              	.L154:
 704:../Libraries/XMCLib/src/xmc_dma.c ****         }
 705:../Libraries/XMCLib/src/xmc_dma.c **** 
 706:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TR
 3234              	 .loc 2 706 0
 3235 00c6 FB69     	 ldr r3,[r7,#28]
 3236 00c8 DBB2     	 uxtb r3,r3
 3237 00ca 7868     	 ldr r0,[r7,#4]
 3238 00cc 1946     	 mov r1,r3
 3239 00ce 0F22     	 movs r2,#15
 3240 00d0 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 707:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_BL
 708:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_SR
 709:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_DS
 710:../Libraries/XMCLib/src/xmc_dma.c **** 																	  
 711:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3241              	 .loc 2 711 0
 3242 00d4 00BF     	 nop
 3243 00d6 95E0     	 b .L141
 3244              	.L153:
 712:../Libraries/XMCLib/src/xmc_dma.c ****       }
 713:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3245              	 .loc 2 713 0
 3246 00d8 FB69     	 ldr r3,[r7,#28]
 3247 00da 0133     	 adds r3,r3,#1
 3248 00dc FB61     	 str r3,[r7,#28]
 3249              	.L152:
 693:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3250              	 .loc 2 693 0
 3251 00de 7B69     	 ldr r3,[r7,#20]
 3252 00e0 002B     	 cmp r3,#0
 3253 00e2 DAD1     	 bne .L156
 3254 00e4 8EE0     	 b .L141
 3255              	.L151:
 714:../Libraries/XMCLib/src/xmc_dma.c ****     }
 715:../Libraries/XMCLib/src/xmc_dma.c ****   }
 716:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
 3256              	 .loc 2 716 0
 3257 00e6 7B69     	 ldr r3,[r7,#20]
 3258 00e8 03F00203 	 and r3,r3,#2
 3259 00ec 002B     	 cmp r3,#0
 3260 00ee 2AD0     	 beq .L157
 717:../Libraries/XMCLib/src/xmc_dma.c ****   {
 718:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
 3261              	 .loc 2 718 0
 3262 00f0 7868     	 ldr r0,[r7,#4]
 3263 00f2 FFF7FEFF 	 bl XMC_DMA_GetChannelsBlockCompleteStatus
 3264 00f6 7861     	 str r0,[r7,#20]
 719:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3265              	 .loc 2 719 0
 3266 00f8 21E0     	 b .L158
 3267              	.L162:
 720:../Libraries/XMCLib/src/xmc_dma.c ****     {
 721:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3268              	 .loc 2 721 0
 3269 00fa 0122     	 movs r2,#1
 3270 00fc FB69     	 ldr r3,[r7,#28]
 3271 00fe 02FA03F3 	 lsl r3,r2,r3
 3272 0102 3B61     	 str r3,[r7,#16]
 722:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3273              	 .loc 2 722 0
 3274 0104 7A69     	 ldr r2,[r7,#20]
 3275 0106 3B69     	 ldr r3,[r7,#16]
 3276 0108 1340     	 ands r3,r3,r2
 3277 010a 002B     	 cmp r3,#0
 3278 010c 14D0     	 beq .L159
 723:../Libraries/XMCLib/src/xmc_dma.c ****       {
 724:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3279              	 .loc 2 724 0
 3280 010e FB69     	 ldr r3,[r7,#28]
 3281 0110 9B00     	 lsls r3,r3,#2
 3282 0112 BA69     	 ldr r2,[r7,#24]
 3283 0114 1344     	 add r3,r3,r2
 3284 0116 1B68     	 ldr r3,[r3]
 3285 0118 FB60     	 str r3,[r7,#12]
 725:../Libraries/XMCLib/src/xmc_dma.c **** 
 726:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 727:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3286              	 .loc 2 727 0
 3287 011a FB68     	 ldr r3,[r7,#12]
 3288 011c 002B     	 cmp r3,#0
 3289 011e 02D0     	 beq .L160
 728:../Libraries/XMCLib/src/xmc_dma.c ****         {
 729:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE);
 3290              	 .loc 2 729 0
 3291 0120 FB68     	 ldr r3,[r7,#12]
 3292 0122 0220     	 movs r0,#2
 3293 0124 9847     	 blx r3
 3294              	.L160:
 730:../Libraries/XMCLib/src/xmc_dma.c ****         }
 731:../Libraries/XMCLib/src/xmc_dma.c **** 
 732:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_BL
 3295              	 .loc 2 732 0
 3296 0126 FB69     	 ldr r3,[r7,#28]
 3297 0128 DBB2     	 uxtb r3,r3
 3298 012a 7868     	 ldr r0,[r7,#4]
 3299 012c 1946     	 mov r1,r3
 3300 012e 0E22     	 movs r2,#14
 3301 0130 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 733:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_SR
 734:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_DS
 735:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3302              	 .loc 2 735 0
 3303 0134 00BF     	 nop
 3304 0136 65E0     	 b .L141
 3305              	.L159:
 736:../Libraries/XMCLib/src/xmc_dma.c ****       }
 737:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3306              	 .loc 2 737 0
 3307 0138 FB69     	 ldr r3,[r7,#28]
 3308 013a 0133     	 adds r3,r3,#1
 3309 013c FB61     	 str r3,[r7,#28]
 3310              	.L158:
 719:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3311              	 .loc 2 719 0
 3312 013e 7B69     	 ldr r3,[r7,#20]
 3313 0140 002B     	 cmp r3,#0
 3314 0142 DAD1     	 bne .L162
 3315 0144 5EE0     	 b .L141
 3316              	.L157:
 738:../Libraries/XMCLib/src/xmc_dma.c ****     }
 739:../Libraries/XMCLib/src/xmc_dma.c ****   }
 740:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 3317              	 .loc 2 740 0
 3318 0146 7B69     	 ldr r3,[r7,#20]
 3319 0148 03F00403 	 and r3,r3,#4
 3320 014c 002B     	 cmp r3,#0
 3321 014e 2AD0     	 beq .L163
 741:../Libraries/XMCLib/src/xmc_dma.c ****   {
 742:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
 3322              	 .loc 2 742 0
 3323 0150 7868     	 ldr r0,[r7,#4]
 3324 0152 FFF7FEFF 	 bl XMC_DMA_GetChannelsSourceTransactionCompleteStatus
 3325 0156 7861     	 str r0,[r7,#20]
 743:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3326              	 .loc 2 743 0
 3327 0158 21E0     	 b .L164
 3328              	.L168:
 744:../Libraries/XMCLib/src/xmc_dma.c ****     {
 745:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3329              	 .loc 2 745 0
 3330 015a 0122     	 movs r2,#1
 3331 015c FB69     	 ldr r3,[r7,#28]
 3332 015e 02FA03F3 	 lsl r3,r2,r3
 3333 0162 3B61     	 str r3,[r7,#16]
 746:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3334              	 .loc 2 746 0
 3335 0164 7A69     	 ldr r2,[r7,#20]
 3336 0166 3B69     	 ldr r3,[r7,#16]
 3337 0168 1340     	 ands r3,r3,r2
 3338 016a 002B     	 cmp r3,#0
 3339 016c 14D0     	 beq .L165
 747:../Libraries/XMCLib/src/xmc_dma.c ****       {
 748:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3340              	 .loc 2 748 0
 3341 016e FB69     	 ldr r3,[r7,#28]
 3342 0170 9B00     	 lsls r3,r3,#2
 3343 0172 BA69     	 ldr r2,[r7,#24]
 3344 0174 1344     	 add r3,r3,r2
 3345 0176 1B68     	 ldr r3,[r3]
 3346 0178 FB60     	 str r3,[r7,#12]
 749:../Libraries/XMCLib/src/xmc_dma.c **** 
 750:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 751:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3347              	 .loc 2 751 0
 3348 017a FB68     	 ldr r3,[r7,#12]
 3349 017c 002B     	 cmp r3,#0
 3350 017e 02D0     	 beq .L166
 752:../Libraries/XMCLib/src/xmc_dma.c ****         {
 753:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 3351              	 .loc 2 753 0
 3352 0180 FB68     	 ldr r3,[r7,#12]
 3353 0182 0420     	 movs r0,#4
 3354 0184 9847     	 blx r3
 3355              	.L166:
 754:../Libraries/XMCLib/src/xmc_dma.c ****         }
 755:../Libraries/XMCLib/src/xmc_dma.c **** 
 756:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTI
 3356              	 .loc 2 756 0
 3357 0186 FB69     	 ldr r3,[r7,#28]
 3358 0188 DBB2     	 uxtb r3,r3
 3359 018a 7868     	 ldr r0,[r7,#4]
 3360 018c 1946     	 mov r1,r3
 3361 018e 0422     	 movs r2,#4
 3362 0190 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 757:../Libraries/XMCLib/src/xmc_dma.c ****         
 758:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3363              	 .loc 2 758 0
 3364 0194 00BF     	 nop
 3365 0196 35E0     	 b .L141
 3366              	.L165:
 759:../Libraries/XMCLib/src/xmc_dma.c ****       }
 760:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3367              	 .loc 2 760 0
 3368 0198 FB69     	 ldr r3,[r7,#28]
 3369 019a 0133     	 adds r3,r3,#1
 3370 019c FB61     	 str r3,[r7,#28]
 3371              	.L164:
 743:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3372              	 .loc 2 743 0
 3373 019e 7B69     	 ldr r3,[r7,#20]
 3374 01a0 002B     	 cmp r3,#0
 3375 01a2 DAD1     	 bne .L168
 3376 01a4 2EE0     	 b .L141
 3377              	.L163:
 761:../Libraries/XMCLib/src/xmc_dma.c ****     }
 762:../Libraries/XMCLib/src/xmc_dma.c ****   }
 763:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 3378              	 .loc 2 763 0
 3379 01a6 7B69     	 ldr r3,[r7,#20]
 3380 01a8 03F00803 	 and r3,r3,#8
 3381 01ac 002B     	 cmp r3,#0
 3382 01ae 29D0     	 beq .L141
 764:../Libraries/XMCLib/src/xmc_dma.c ****   {
 765:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
 3383              	 .loc 2 765 0
 3384 01b0 7868     	 ldr r0,[r7,#4]
 3385 01b2 FFF7FEFF 	 bl XMC_DMA_GetChannelsDestinationTransactionCompleteStatus
 3386 01b6 7861     	 str r0,[r7,#20]
 766:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3387              	 .loc 2 766 0
 3388 01b8 21E0     	 b .L169
 3389              	.L173:
 767:../Libraries/XMCLib/src/xmc_dma.c ****     {
 768:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3390              	 .loc 2 768 0
 3391 01ba 0122     	 movs r2,#1
 3392 01bc FB69     	 ldr r3,[r7,#28]
 3393 01be 02FA03F3 	 lsl r3,r2,r3
 3394 01c2 3B61     	 str r3,[r7,#16]
 769:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3395              	 .loc 2 769 0
 3396 01c4 7A69     	 ldr r2,[r7,#20]
 3397 01c6 3B69     	 ldr r3,[r7,#16]
 3398 01c8 1340     	 ands r3,r3,r2
 3399 01ca 002B     	 cmp r3,#0
 3400 01cc 14D0     	 beq .L170
 770:../Libraries/XMCLib/src/xmc_dma.c ****       {
 771:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3401              	 .loc 2 771 0
 3402 01ce FB69     	 ldr r3,[r7,#28]
 3403 01d0 9B00     	 lsls r3,r3,#2
 3404 01d2 BA69     	 ldr r2,[r7,#24]
 3405 01d4 1344     	 add r3,r3,r2
 3406 01d6 1B68     	 ldr r3,[r3]
 3407 01d8 FB60     	 str r3,[r7,#12]
 772:../Libraries/XMCLib/src/xmc_dma.c **** 
 773:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 774:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3408              	 .loc 2 774 0
 3409 01da FB68     	 ldr r3,[r7,#12]
 3410 01dc 002B     	 cmp r3,#0
 3411 01de 02D0     	 beq .L171
 775:../Libraries/XMCLib/src/xmc_dma.c ****         {
 776:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 3412              	 .loc 2 776 0
 3413 01e0 FB68     	 ldr r3,[r7,#12]
 3414 01e2 0820     	 movs r0,#8
 3415 01e4 9847     	 blx r3
 3416              	.L171:
 777:../Libraries/XMCLib/src/xmc_dma.c ****         }
 778:../Libraries/XMCLib/src/xmc_dma.c ****         
 779:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTI
 3417              	 .loc 2 779 0
 3418 01e6 FB69     	 ldr r3,[r7,#28]
 3419 01e8 DBB2     	 uxtb r3,r3
 3420 01ea 7868     	 ldr r0,[r7,#4]
 3421 01ec 1946     	 mov r1,r3
 3422 01ee 0822     	 movs r2,#8
 3423 01f0 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 780:../Libraries/XMCLib/src/xmc_dma.c **** 
 781:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3424              	 .loc 2 781 0
 3425 01f4 00BF     	 nop
 3426 01f6 05E0     	 b .L141
 3427              	.L170:
 782:../Libraries/XMCLib/src/xmc_dma.c ****       }
 783:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3428              	 .loc 2 783 0
 3429 01f8 FB69     	 ldr r3,[r7,#28]
 3430 01fa 0133     	 adds r3,r3,#1
 3431 01fc FB61     	 str r3,[r7,#28]
 3432              	.L169:
 766:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3433              	 .loc 2 766 0
 3434 01fe 7B69     	 ldr r3,[r7,#20]
 3435 0200 002B     	 cmp r3,#0
 3436 0202 DAD1     	 bne .L173
 3437              	.L141:
 784:../Libraries/XMCLib/src/xmc_dma.c ****     }
 785:../Libraries/XMCLib/src/xmc_dma.c ****   }
 786:../Libraries/XMCLib/src/xmc_dma.c ****   else
 787:../Libraries/XMCLib/src/xmc_dma.c ****   {
 788:../Libraries/XMCLib/src/xmc_dma.c ****     /* no active interrupt was found? */
 789:../Libraries/XMCLib/src/xmc_dma.c ****   }
 790:../Libraries/XMCLib/src/xmc_dma.c **** 
 791:../Libraries/XMCLib/src/xmc_dma.c **** }
 3438              	 .loc 2 791 0
 3439 0204 2037     	 adds r7,r7,#32
 3440              	.LCFI230:
 3441              	 .cfi_def_cfa_offset 8
 3442 0206 BD46     	 mov sp,r7
 3443              	.LCFI231:
 3444              	 .cfi_def_cfa_register 13
 3445              	 
 3446 0208 80BD     	 pop {r7,pc}
 3447              	.L175:
 3448 020a 00BF     	 .align 2
 3449              	.L174:
 3450 020c 00400150 	 .word 1342259200
 3451 0210 00000000 	 .word dma0_event_handlers
 3452 0214 00000000 	 .word dma1_event_handlers
 3453              	 .cfi_endproc
 3454              	.LFE197:
 3456              	 .text
 3457              	.Letext0:
 3458              	 .file 3 "e:\\davev4\\dave-4.1.4\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3459              	 .file 4 "e:\\davev4\\dave-4.1.4\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3460              	 .file 5 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest/Libraries/CMSIS/Infineon/XMC4700_series/Include/XMC4700.h"
 3461              	 .file 6 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest\\Libraries\\XMCLib\\inc/xmc4_scu.h"
 3462              	 .file 7 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest/Libraries/CMSIS/Include/core_cm4.h"
 3463              	 .file 8 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest/Libraries/CMSIS/Infineon/XMC4700_series/Include/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_dma.c
    {standard input}:20     .text.XMC_DMA_GetEventStatus:00000000 $t
    {standard input}:24     .text.XMC_DMA_GetEventStatus:00000000 XMC_DMA_GetEventStatus
    {standard input}:64     .text.XMC_DMA_GetChannelsTransferCompleteStatus:00000000 $t
    {standard input}:68     .text.XMC_DMA_GetChannelsTransferCompleteStatus:00000000 XMC_DMA_GetChannelsTransferCompleteStatus
    {standard input}:107    .text.XMC_DMA_GetChannelsBlockCompleteStatus:00000000 $t
    {standard input}:111    .text.XMC_DMA_GetChannelsBlockCompleteStatus:00000000 XMC_DMA_GetChannelsBlockCompleteStatus
    {standard input}:150    .text.XMC_DMA_GetChannelsSourceTransactionCompleteStatus:00000000 $t
    {standard input}:154    .text.XMC_DMA_GetChannelsSourceTransactionCompleteStatus:00000000 XMC_DMA_GetChannelsSourceTransactionCompleteStatus
    {standard input}:193    .text.XMC_DMA_GetChannelsDestinationTransactionCompleteStatus:00000000 $t
    {standard input}:197    .text.XMC_DMA_GetChannelsDestinationTransactionCompleteStatus:00000000 XMC_DMA_GetChannelsDestinationTransactionCompleteStatus
    {standard input}:236    .text.XMC_DMA_GetChannelsErrorStatus:00000000 $t
    {standard input}:240    .text.XMC_DMA_GetChannelsErrorStatus:00000000 XMC_DMA_GetChannelsErrorStatus
                            *COM*:00000020 dma0_event_handlers
                            *COM*:00000010 dma1_event_handlers
    {standard input}:281    .text.XMC_DMA_Init:00000000 $t
    {standard input}:286    .text.XMC_DMA_Init:00000000 XMC_DMA_Init
    {standard input}:326    .text.XMC_DMA_Enable:00000000 XMC_DMA_Enable
    {standard input}:321    .text.XMC_DMA_Enable:00000000 $t
    {standard input}:380    .text.XMC_DMA_Enable:00000038 $d
    {standard input}:387    .text.XMC_DMA_Disable:00000000 $t
    {standard input}:392    .text.XMC_DMA_Disable:00000000 XMC_DMA_Disable
    {standard input}:446    .text.XMC_DMA_Disable:00000038 $d
    {standard input}:453    .text.XMC_DMA_IsEnabled:00000000 $t
    {standard input}:458    .text.XMC_DMA_IsEnabled:00000000 XMC_DMA_IsEnabled
    {standard input}:603    .text.XMC_DMA_IsEnabled:000000d8 $d
    {standard input}:610    .text.XMC_DMA_EnableRequestLine:00000000 $t
    {standard input}:615    .text.XMC_DMA_EnableRequestLine:00000000 XMC_DMA_EnableRequestLine
    {standard input}:718    .text.XMC_DMA_EnableRequestLine:00000090 $d
    {standard input}:724    .text.XMC_DMA_DisableRequestLine:00000000 $t
    {standard input}:729    .text.XMC_DMA_DisableRequestLine:00000000 XMC_DMA_DisableRequestLine
    {standard input}:793    .text.XMC_DMA_DisableRequestLine:0000004c $d
    {standard input}:799    .text.XMC_DMA_ClearRequestLine:00000000 $t
    {standard input}:804    .text.XMC_DMA_ClearRequestLine:00000000 XMC_DMA_ClearRequestLine
    {standard input}:886    .text.XMC_DMA_ClearRequestLine:00000070 $d
    {standard input}:892    .text.XMC_DMA_GetOverrunStatus:00000000 $t
    {standard input}:897    .text.XMC_DMA_GetOverrunStatus:00000000 XMC_DMA_GetOverrunStatus
    {standard input}:967    .text.XMC_DMA_GetOverrunStatus:00000058 $d
    {standard input}:973    .text.XMC_DMA_ClearOverrunStatus:00000000 $t
    {standard input}:978    .text.XMC_DMA_ClearOverrunStatus:00000000 XMC_DMA_ClearOverrunStatus
    {standard input}:1040   .text.XMC_DMA_ClearOverrunStatus:00000048 $d
    {standard input}:1046   .text.XMC_DMA_CH_Disable:00000000 $t
    {standard input}:1051   .text.XMC_DMA_CH_Disable:00000000 XMC_DMA_CH_Disable
    {standard input}:1105   .text.XMC_DMA_CH_IsEnabled:00000000 $t
    {standard input}:1110   .text.XMC_DMA_CH_IsEnabled:00000000 XMC_DMA_CH_IsEnabled
    {standard input}:1159   .text.XMC_DMA_CH_Init:00000000 $t
    {standard input}:1164   .text.XMC_DMA_CH_Init:00000000 XMC_DMA_CH_Init
    {standard input}:2050   .text.XMC_DMA_CH_ClearEventStatus:00000000 XMC_DMA_CH_ClearEventStatus
    {standard input}:1480   .text.XMC_DMA_CH_Init:00000250 $d
    {standard input}:1489   .text.XMC_DMA_CH_Init:00000274 $t
    {standard input}:1623   .text.XMC_DMA_CH_Init:0000037c $d
    {standard input}:1626   .text.XMC_DMA_CH_Init:00000380 $t
    {standard input}:1712   .text.XMC_DMA_CH_Suspend:00000000 $t
    {standard input}:1717   .text.XMC_DMA_CH_Suspend:00000000 XMC_DMA_CH_Suspend
    {standard input}:1770   .text.XMC_DMA_CH_Resume:00000000 $t
    {standard input}:1775   .text.XMC_DMA_CH_Resume:00000000 XMC_DMA_CH_Resume
    {standard input}:1828   .text.XMC_DMA_CH_IsSuspended:00000000 $t
    {standard input}:1833   .text.XMC_DMA_CH_IsSuspended:00000000 XMC_DMA_CH_IsSuspended
    {standard input}:1885   .text.XMC_DMA_CH_EnableEvent:00000000 $t
    {standard input}:1890   .text.XMC_DMA_CH_EnableEvent:00000000 XMC_DMA_CH_EnableEvent
    {standard input}:1965   .text.XMC_DMA_CH_DisableEvent:00000000 $t
    {standard input}:1970   .text.XMC_DMA_CH_DisableEvent:00000000 XMC_DMA_CH_DisableEvent
    {standard input}:2045   .text.XMC_DMA_CH_ClearEventStatus:00000000 $t
    {standard input}:2119   .text.XMC_DMA_CH_GetEventStatus:00000000 $t
    {standard input}:2124   .text.XMC_DMA_CH_GetEventStatus:00000000 XMC_DMA_CH_GetEventStatus
    {standard input}:2205   .text.XMC_DMA_CH_EnableSourceGather:00000000 $t
    {standard input}:2210   .text.XMC_DMA_CH_EnableSourceGather:00000000 XMC_DMA_CH_EnableSourceGather
    {standard input}:2279   .text.XMC_DMA_CH_DisableSourceGather:00000000 $t
    {standard input}:2284   .text.XMC_DMA_CH_DisableSourceGather:00000000 XMC_DMA_CH_DisableSourceGather
    {standard input}:2337   .text.XMC_DMA_CH_EnableDestinationScatter:00000000 $t
    {standard input}:2342   .text.XMC_DMA_CH_EnableDestinationScatter:00000000 XMC_DMA_CH_EnableDestinationScatter
    {standard input}:2411   .text.XMC_DMA_CH_DisableDestinationScatter:00000000 $t
    {standard input}:2416   .text.XMC_DMA_CH_DisableDestinationScatter:00000000 XMC_DMA_CH_DisableDestinationScatter
    {standard input}:2469   .text.XMC_DMA_CH_TriggerSourceRequest:00000000 $t
    {standard input}:2474   .text.XMC_DMA_CH_TriggerSourceRequest:00000000 XMC_DMA_CH_TriggerSourceRequest
    {standard input}:2546   .text.XMC_DMA_CH_TriggerDestinationRequest:00000000 $t
    {standard input}:2551   .text.XMC_DMA_CH_TriggerDestinationRequest:00000000 XMC_DMA_CH_TriggerDestinationRequest
    {standard input}:2623   .text.XMC_DMA_CH_EnableSourceAddressReload:00000000 $t
    {standard input}:2628   .text.XMC_DMA_CH_EnableSourceAddressReload:00000000 XMC_DMA_CH_EnableSourceAddressReload
    {standard input}:2681   .text.XMC_DMA_CH_DisableSourceAddressReload:00000000 $t
    {standard input}:2686   .text.XMC_DMA_CH_DisableSourceAddressReload:00000000 XMC_DMA_CH_DisableSourceAddressReload
    {standard input}:2739   .text.XMC_DMA_CH_EnableDestinationAddressReload:00000000 $t
    {standard input}:2744   .text.XMC_DMA_CH_EnableDestinationAddressReload:00000000 XMC_DMA_CH_EnableDestinationAddressReload
    {standard input}:2797   .text.XMC_DMA_CH_DisableDestinationAddressReload:00000000 $t
    {standard input}:2802   .text.XMC_DMA_CH_DisableDestinationAddressReload:00000000 XMC_DMA_CH_DisableDestinationAddressReload
    {standard input}:2855   .text.XMC_DMA_CH_RequestLastMultiblockTransfer:00000000 $t
    {standard input}:2860   .text.XMC_DMA_CH_RequestLastMultiblockTransfer:00000000 XMC_DMA_CH_RequestLastMultiblockTransfer
    {standard input}:2913   .text.XMC_DMA_CH_SetEventHandler:00000000 $t
    {standard input}:2918   .text.XMC_DMA_CH_SetEventHandler:00000000 XMC_DMA_CH_SetEventHandler
    {standard input}:2973   .text.XMC_DMA_CH_SetEventHandler:00000038 $d
    {standard input}:2980   .text.XMC_DMA_CH_ClearSourcePeripheralRequest:00000000 $t
    {standard input}:2985   .text.XMC_DMA_CH_ClearSourcePeripheralRequest:00000000 XMC_DMA_CH_ClearSourcePeripheralRequest
    {standard input}:3035   .text.XMC_DMA_CH_ClearDestinationPeripheralRequest:00000000 $t
    {standard input}:3040   .text.XMC_DMA_CH_ClearDestinationPeripheralRequest:00000000 XMC_DMA_CH_ClearDestinationPeripheralRequest
    {standard input}:3090   .text.XMC_DMA_IRQHandler:00000000 $t
    {standard input}:3095   .text.XMC_DMA_IRQHandler:00000000 XMC_DMA_IRQHandler
    {standard input}:3450   .text.XMC_DMA_IRQHandler:0000020c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_CLOCK_GatePeripheralClock
XMC_SCU_RESET_IsPeripheralResetAsserted
XMC_SCU_CLOCK_IsPeripheralClockGated
