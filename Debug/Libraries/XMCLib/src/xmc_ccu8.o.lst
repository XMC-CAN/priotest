   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_ccu8.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_CCU8_StartPrescaler,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_CCU8_StartPrescaler:
  25              	.LFB130:
  26              	 .file 1 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest\\Libraries\\XMCLib\\inc/xmc_ccu8.h"
   1:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
   2:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @file xmc_ccu8.h
   3:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @date 2016-01-12
   4:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
   5:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @cond
   6:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  **************************************************************************************************
   7:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMClib v2.1.4 - XMC Peripheral Driver Library 
   8:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
   9:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * All rights reserved.                        
  11:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                                             
  12:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * following conditions are met:   
  14:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                                                                              
  15:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * disclaimer.                        
  17:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 
  18:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 
  21:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * products derived from this software without specific prior written permission.                  
  23:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                                                                              
  24:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                                                                              
  32:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  **************************************************************************************************
  35:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
  36:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Change History
  37:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * --------------
  38:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
  39:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 2015-02-20:
  40:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - Initial <br>
  41:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - Documentation updates <br>
  42:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
  43:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 2015-06-20:
  44:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  45:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - Added XMC_CCU8_SLICE_LoadSelector() API, to select which compare register value has to be 
  46:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *       during external load event.
  47:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
  48:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 2015-07-01:
  49:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - In XMC_CCU8_SLICE_CHECK_INTERRUPT macro, fixed the missing item for compare match down for
  50:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
  51:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 2015-07-24:
  52:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent() is updated to support XMC14 device. <br>
  53:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
  54:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 2015-08-17:
  55:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_PRESCALER_t enum is added to set the prescaler divider. <br>
  56:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t is added for all the devices except XMC45 devices, t
  57:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *       shadow transfer has to happen. <br>
  58:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - XMC_CCU8_SOURCE_OUT0_t, XMC_CCU8_SOURCE_OUT1_t, XMC_CCU8_SOURCE_OUT2_t, XMC_CCU8_SOURCE_OU
  59:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *       to maps one of the ST to OUT0, OUT1, OUT3, OUT4 signals.
  60:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - In XMC_CCU8_SLICE_COMPARE_CONFIG_t structure, selector_out0, selector_out1, selector_out2,
  61:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *       added to support XMC14 devices.
  62:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - XMC_CCU8_EnableShadowTransfer() API is made as inline, to improve the speed. <br>
  63:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_EnableCascadedShadowTransfer(), XMC_CCU8_SLICE_DisableCascadedShadowTransfe
  64:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *       XMC_CCU8_SLICE_SetShadowTransferMode() API are supported for all the devices except XMC45.
  65:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
  66:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 2015-09-29:
  67:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - In XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_t, two more enum items are added to support exte
  68:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *       settings.
  69:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
  70:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 2015-10-07:
  71:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_SetTimerCompareMatchChannel1(), XMC_CCU8_SLICE_SetTimerCompareMatchChannel2
  72:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *       added to update the respective compare registers directly.
  73:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_GetEvent() is made as inline.
  74:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_MULTI_IRQ_ID_t is added to support the XMC_CCU8_SLICE_EnableMultipleEvents(
  75:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *       XMC_CCU8_SLICE_DisableMultipleEvents() APIs.
  76:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - DOC updates for the newly added APIs.
  77:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
  78:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @endcond
  79:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
  80:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
  81:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #ifndef XMC_CCU8_H
  82:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #define XMC_CCU8_H
  83:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
  84:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**************************************************************************************************
  85:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * HEADER FILES
  86:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  **************************************************************************************************
  87:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #include "xmc_common.h"
  88:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
  89:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #if defined(CCU80)
  90:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
  91:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #if UC_FAMILY == XMC1
  92:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  #include "xmc1_ccu8_map.h"
  93:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
  94:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
  95:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #if UC_FAMILY == XMC4
  96:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  #include "xmc4_ccu8_map.h"
  97:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
  98:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
  99:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 100:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @addtogroup XMClib XMC Peripheral Library
 101:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @{
 102:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 103:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 104:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 105:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @addtogroup CCU8
 106:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
 107:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @brief Capture Compare Unit 8 (CCU8) low level driver for XMC family of microcontrollers<br>
 108:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
 109:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The CCU8 peripheral functions play a major role in applications that need complex Pulse Width Mo
 110:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * generation, with complementary high side and low side switches, multi phase control. These funct
 111:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * with a very flexible and programmable signal conditioning scheme, make the CCU8 the must have pe
 112:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * of the art motor control, multi phase and multi level power electronics systems.\n
 113:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Each CCU8 module is comprised of four identical 16 bit Capture/Compare Timer slices, CC8y (where
 114:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * timer slice can work in compare mode or in capture mode.
 115:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
 116:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * APIs provided in this file cover the following functional blocks of CCU8:
 117:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * -- Timer configuration, Capture configuration, Function/Event configuration, Interrupt configura
 118:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par Note:
 119:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 1. SLICE (APIs prefixed with e.g. XMC_CCU8_SLICE_)
 120:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 2. Module (APIs are not having any prefix e.g. XMC_CCU8_)
 121:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
 122:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par Timer(Compare mode) configuration:
 123:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This section of the LLD provides the configuration structure XMC_CCU8_SLICE_COMPARE_CONFIG_t, 
 124:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t and the initialization functions XMC_CCU8_SLICE_CompareInit(),
 125:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
 126:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * It can be used to:
 127:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * -# Start and Stop the timer. (XMC_CCU8_SLICE_StartTimer(), XMC_CCU8_SLICE_StopTimer())
 128:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * -# Update the period, compare, Dither, Prescaler  and Passive values. (XMC_CCU8_SLICE_SetTimerPe
 129:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    XMC_CCU8_SLICE_SetTimerCompareMatch(), XMC_CCU8_SLICE_SetPrescaler(), XMC_CCU8_SLICE_SetDithe
 130:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    XMC_CCU8_SLICE_SetPassiveLevel())
 131:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * -# Configure the dead time.(XMC_CCU8_SLICE_SetDeadTimeValue(), XMC_CCU8_SLICE_SetDeadTimePrescal
 132:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * -# Enable the slices to support multichannel mode. (XMC_CCU8_SLICE_EnableMultiChannelMode())
 133:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 
 134:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par Capture configuration:
 135:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This section of the LLD provides the configuration structure XMC_CCU8_SLICE_CAPTURE_CONFIG_t and
 136:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * function XMC_CCU8_SLICE_CaptureInit().
 137:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
 138:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * It can be used to:
 139:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * -# Configure the capture functionality. (XMC_CCU8_SLICE_Capture0Config(), XMC_CCU8_SLICE_Capture
 140:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * -# Read the captured values along with the status, which indicate the value is latest or not.
 141:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    (XMC_CCU8_SLICE_GetCaptureRegisterValue())
 142:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 
 143:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par Function/Event configuration:
 144:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This section of the LLD provides the configuration structure XMC_CCU8_SLICE_EVENT_CONFIG_t.
 145:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 
 146:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * It can be used to:
 147:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * -# Enable and Disable the events. (XMC_CCU8_SLICE_EnableEvent(), XMC_CCU8_SLICE_DisableEvent())
 148:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * -# Configure to start and stop the timer on external events.(XMC_CCU8_SLICE_StartConfig(), XMC_C
 149:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * -# Modulation, external load and Gating of the timer output.(XMC_CCU8_SLICE_ModulationConfig(), 
 150:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    XMC_CCU8_SLICE_LoadConfig(), XMC_CCU8_SLICE_GateConfig())
 151:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * -# Control the count direction of the timer based on the external event. (XMC_CCU8_SLICE_Directi
 152:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * -# Count the external events.(XMC_CCU8_SLICE_CountConfig())
 153:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * -# External Trap. Which can be used as protective feature.(XMC_CCU8_SLICE_EnableTrap(), XMC_CCU8
 154:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    XMC_CCU8_SLICE_TrapConfig())
 155:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
 156:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par Interrupt configuration:
 157:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This section of the LLD provides the function to configure the interrupt node to each event (XMC
 158:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
 159:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @{
 160:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 161:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 162:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**************************************************************************************************
 163:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * MACROS
 164:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  **************************************************************************************************
 165:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #define XMC_CCU8_SLICE_CHECK_INTERRUPT(interrupt) \
 166:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     ((interrupt == XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH)           || \
 167:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH)              || \
 168:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1)  || \
 169:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1)|| \
 170:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2)  || \
 171:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2)|| \
 172:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_EVENT0)                 || \
 173:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_EVENT1)                 || \
 174:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_EVENT2)                 || \
 175:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_TRAP))
 176:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****      
 177:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /* Macro to check if the slice ptr passed is valid */
 178:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #define XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(cmp_channel) \
 179:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     ((cmp_channel == XMC_CCU8_SLICE_COMPARE_CHANNEL_1) || \
 180:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****      (cmp_channel == XMC_CCU8_SLICE_COMPARE_CHANNEL_2))
 181:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 182:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**************************************************************************************************
 183:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * ENUMS
 184:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  **************************************************************************************************
 185:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 186:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 187:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Typedef for CCU8 Global data structure
 188:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 189:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef CCU8_GLOBAL_TypeDef XMC_CCU8_MODULE_t;
 190:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 191:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 192:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Typedef for CCU8 Slice data structure
 193:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 194:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef CCU8_CC8_TypeDef XMC_CCU8_SLICE_t;
 195:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 196:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 197:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Return Value of an API
 198:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 199:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_STATUS
 200:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 201:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_STATUS_OK      = 0U, /**< API fulfils request */
 202:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_STATUS_ERROR       , /**< API cannot fulfil request */
 203:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_STATUS_RUNNING     , /**< The timer slice is currently running */
 204:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_STATUS_IDLE          /**< The timer slice is currently idle */
 205:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_STATUS_t;
 206:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 207:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 208:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * CCU8 module clock
 209:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 210:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_CLOCK
 211:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 212:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_CLOCK_SCU        = 0U, /**< Select the fCCU as the clock */
 213:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_CLOCK_EXTERNAL_A     , /**< External clock-A */
 214:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_CLOCK_EXTERNAL_B     , /**< External clock-B */
 215:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_CLOCK_EXTERNAL_C       /**< External clock-C */
 216:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_CLOCK_t;
 217:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 218:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 219:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * CCU8 set the shadow transfer type for multichannel mode
 220:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 221:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER
 222:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 223:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE0       = (uint32_t)0x4000000, /**< Shadow transfe
 224:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                      only for slice
 225:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE0  = (uint32_t)0x4000400, /**< Shadow transfe
 226:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                      and hardware f
 227:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE1       = (uint32_t)0x8000000, /**< Shadow transfe
 228:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                      only for slice
 229:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE1  = (uint32_t)0x8000800, /**< Shadow transfe
 230:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                      and hardware f
 231:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE2       = (uint32_t)0x10000000, /**< Shadow transf
 232:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                       only for slic
 233:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE2  = (uint32_t)0x10001000, /**< Shadow transf
 234:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                       and hardware 
 235:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE3       = (uint32_t)0x20000000, /**< Shadow transf
 236:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                       only for slic
 237:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE3  = (uint32_t)0x20002000  /**< Shadow transf
 238:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                       and hardware 
 239:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_t;
 240:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 241:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 242:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Operational modes of CCU8 slice
 243:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 244:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MODE
 245:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 246:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODE_COMPARE  = 0U, /**< slice(CC8y) operates in Compare Mode */
 247:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODE_CAPTURE        /**< slice(CC8y) operates in Capture Mode */
 248:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MODE_t;
 249:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 250:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 251:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Slice Output selection
 252:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 253:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_OUTPUT
 254:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 255:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_0  = 1U, /**< Slice Output-0 */
 256:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_1  = 2U, /**< Slice Output-1 */
 257:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_2  = 4U, /**< Slice Output-2 */
 258:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_3  = 8U  /**< Slice Output-3 */
 259:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_OUTPUT_t;
 260:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 261:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 262:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Timer counting modes for the slice
 263:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 264:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_COUNT_MODE
 265:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 266:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA  = 0U, /**< Edge Aligned Mode */
 267:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA        /**< Centre Aligned Mode */
 268:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_COUNT_MODE_t;
 269:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 270:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 271:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Timer repetition mode for the slice
 272:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 273:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_REPEAT_MODE
 274:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 275:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT = 0U, /**< Repetitive mode: continuous mode of operation 
 276:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_REPEAT_MODE_SINGLE       /**< Single shot mode: Once a Period match/One matc
 277:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                      occurs timer goes to idle state */
 278:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t;
 279:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 280:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 281:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Timer counting direction for the CCU8 slice
 282:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 283:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_COUNT_DIR
 284:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 285:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_DIR_UP   = 0U, /**< Counting up */
 286:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_DIR_DOWN       /**< Counting down */
 287:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_COUNT_DIR_t;
 288:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 289:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 290:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Capture mode register sets
 291:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 292:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_CAP_REG_SET
 293:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 294:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_CAP_REG_SET_LOW  = 0U, /**< Capture register-0, Capture register-1 used */
 295:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_CAP_REG_SET_HIGH       /**< Capture register-0, Capture register-1 used */
 296:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_CAP_REG_SET_t;
 297:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 298:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 299:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Prescaler mode
 300:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 301:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_PRESCALER_MODE
 302:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 303:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_MODE_NORMAL = 0U, /**< Fixed division of module clock */
 304:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_MODE_FLOAT        /**< Floating divider */
 305:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_PRESCALER_MODE_t;
 306:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 307:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 308:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Timer output passive level
 309:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 310:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL
 311:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 312:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_LOW  = 0U, /**< Passive level = Low */
 313:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH       /**< Passive level = High */
 314:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t;
 315:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 316:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 317:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Compare Channel selection
 318:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 319:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_COMPARE_CHANNEL
 320:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 321:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_COMPARE_CHANNEL_1  = 0U, /**< Compare Channel-1 */
 322:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_COMPARE_CHANNEL_2        /**< Compare Channel-2 */
 323:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_COMPARE_CHANNEL_t;
 324:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 325:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 326:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Timer clock Divider
 327:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 328:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_PRESCALER
 329:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 330:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_1  = 0U, /**< Slice Clock = fccu8 */
 331:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_2      , /**< Slice Clock = fccu8/2 */
 332:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_4      , /**< Slice Clock = fccu8/4 */
 333:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_8      , /**< Slice Clock = fccu8/8 */
 334:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_16     , /**< Slice Clock = fccu8/16 */
 335:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_32     , /**< Slice Clock = fccu8/32 */
 336:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_64     , /**< Slice Clock = fccu8/64 */
 337:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_128    , /**< Slice Clock = fccu8/128 */
 338:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_256    , /**< Slice Clock = fccu8/256 */
 339:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_512    , /**< Slice Clock = fccu8/512 */
 340:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_1024   , /**< Slice Clock = fccu8/1024 */
 341:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_2048   , /**< Slice Clock = fccu8/2048 */
 342:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_4096   , /**< Slice Clock = fccu8/4096 */
 343:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_8192   , /**< Slice Clock = fccu8/8192 */
 344:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_16384  , /**< Slice Clock = fccu8/16384 */
 345:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_32768    /**< Slice Clock = fccu8/32768 */
 346:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_PRESCALER_t;
 347:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 348:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 349:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Dead Time Generator Clock Divider
 350:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 351:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_DTC_DIV
 352:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 353:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_1  = 0U, /**< DTC clock = Slice Clock */
 354:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_2      , /**< DTC clock = Slice Clock/2 */
 355:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_4      , /**< DTC clock = Slice Clock/4 */
 356:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_8        /**< DTC clock = Slice Clock/8 */
 357:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_DTC_DIV_t;
 358:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 359:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 360:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 361:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  The compare channel output which is routed to the slice output signal(STy).
 362:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 363:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_STATUS
 364:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 365:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_1        = 0U, /**< Channel-1 status connected to Slice Status */
 366:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_2            , /**< Channel-2 status connected to Slice Status */
 367:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_1_AND_2      , /**< \b Wired \b AND of Channel-1 and Channel-2 stat
 368:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                     Slice status */
 369:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #if ((UC_SERIES == XMC13) || (UC_SERIES == XMC14)) || defined(DOXYGEN)
 370:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_1_OR_2         /**< \b Wired \b OR of Channel-1 and Channel-2 statu
 371:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                     status. @note Only available for XMC1300 and XM
 372:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
 373:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_STATUS_t;
 374:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 375:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 376:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Compare channel for which modulation has to be applied
 377:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 378:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MODULATION_CHANNEL
 379:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 380:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_NONE  = 0U, /**< No modulation */
 381:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_1         , /**< Modulation for Compare Channel-1 */
 382:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_2         , /**< Modulation for Compare Channel-2 */
 383:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2     /**< Modulation for Compare Channel-1 and Compare C
 384:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MODULATION_CHANNEL_t;
 385:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 386:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 387:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  External Function list
 388:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 389:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_FUNCTION
 390:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 391:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_START           = 0U, /**< Start function */
 392:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_STOP                , /**< Stop function */
 393:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_CAPTURE_EVENT0      , /**< Capture Event-0 function, CCycapt0 signal is u
 394:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                      generation */
 395:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_CAPTURE_EVENT1      , /**< Capture Event-1 function, CCycapt1 signal is u
 396:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                      generation */
 397:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_GATING              , /**< Gating function */
 398:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_DIRECTION           , /**< Direction function */
 399:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_LOAD                , /**< Load function */
 400:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_COUNT               , /**< Counting function */
 401:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_OVERRIDE            , /**< Override function */
 402:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_MODULATION          , /**< Modulation function */
 403:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_TRAP                  /**< Trap function */
 404:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_FUNCTION_t;
 405:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 406:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 407:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  External Event list
 408:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 409:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT
 410:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 411:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_NONE  = 0U, /**< None */
 412:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_0         , /**< Event-0 */
 413:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_1         , /**< Event-1 */
 414:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_2           /**< Event-2 */
 415:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_t;
 416:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 417:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 418:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  External Event trigger criteria  - Edge sensitivity
 419:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 420:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY
 421:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 422:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_NONE          = 0U, /**< None */
 423:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE       , /**< Rising Edge of the input signal ge
 424:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                  event trigger */
 425:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE      , /**< Falling Edge of the input signal g
 426:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                  trigger */
 427:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_DUAL_EDGE           /**< Both Rising and Falling edges caus
 428:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_t;
 429:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 430:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 431:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  External Event trigger criteria  - Level sensitivity
 432:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 433:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY
 434:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 435:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH = 0U, /**< Level sensitive functions react to 
 436:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW  = 1U, /**< Level sensitive functions react to 
 437:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     /* Below enum items can be utilised specific to the functionality */
 438:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_LOW = 0U, /**< Timer counts up, during Low sta
 439:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_HIGH = 1U /**< Timer counts up, during High st
 440:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_t;
 441:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 442:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 443:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Low pass filter Configuration. The External Event input should be stable for a selected number 
 444:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 445:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT_FILTER
 446:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 447:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_DISABLED  = 0U, /**< No Low Pass Filtering is applied */
 448:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_3_CYCLES      , /**< Input should be stable for 3 clock cycles */
 449:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_5_CYCLES      , /**< Input should be stable for 5 clock cycles */
 450:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_7_CYCLES        /**< Input should be stable for 7 clock cycles */
 451:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_FILTER_t;
 452:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 453:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 454:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  External Event Input list. This list depicts the possible input connections to the CCU8 slice.
 455:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Interconnects are specific to each device.
 456:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 457:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef uint8_t XMC_CCU8_SLICE_INPUT_t;
 458:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 459:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 460:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 461:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Actions that can be performed upon detection of an external Timer STOP event
 462:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 463:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_END_MODE
 464:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 465:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_END_MODE_TIMER_STOP       = 0U, /**< Stops the timer, without clearing TIMER regis
 466:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_END_MODE_TIMER_CLEAR          , /**< Without stopping timer, clears the TIMER regi
 467:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_END_MODE_TIMER_STOP_CLEAR       /**< Stops the timer and clears the TIMER register
 468:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_END_MODE_t;
 469:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 470:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 471:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Actions that can be performed upon detection of an external Timer START event
 472:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 473:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_START_MODE
 474:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 475:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_START_MODE_TIMER_START       = 0U, /**< Start the timer from the current count of 
 476:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR       /**< Clears the TIMER register and start the ti
 477:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_START_MODE_t;
 478:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 479:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 480:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Modulation of timer output signals
 481:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 482:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MODULATION_MODE
 483:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 484:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_ST_OUT  = 0U, /**< Clear ST and OUT signals */
 485:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT           /**< Clear only the OUT signal */
 486:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MODULATION_MODE_t;
 487:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 488:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 489:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Trap exit mode
 490:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 491:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TRAP_EXIT_MODE
 492:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 493:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC = 0U, /**< Clear trap state as soon as the trap signal is
 494:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW              /**< Clear only when acknowledged by software */
 495:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TRAP_EXIT_MODE_t;
 496:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 497:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 498:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Timer clear on capture
 499:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 500:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_CLEAR_MODE
 501:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 502:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_NEVER    = 0U, /**< Never clear the timer on any capture event */
 503:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_CAP_HIGH     , /**< Clear only when timer value has been captured
 504:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_CAP_LOW      , /**< Clear only when timer value has been captured
 505:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_ALWAYS         /**< Always clear the timer upon detection of any 
 506:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_CLEAR_MODE_t;
 507:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 508:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 509:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Multi Channel Shadow transfer request configuration options
 510:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 511:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MCMS_ACTION
 512:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 513:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR          = 0U, /**< Transfer Compare and Period Shadow 
 514:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                 the actual registers upon MCS xfer 
 515:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP     = 1U, /**< Transfer Compare, Period and Presca
 516:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                 register values to the actual regis
 517:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                 request */
 518:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP_DIT = 3U  /**< Transfer Compare, Period ,Prescaler
 519:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                 Compare register values to the actu
 520:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                 MCS xfer request */
 521:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MCMS_ACTION_t;
 522:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 523:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 524:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Available Interrupt Event Ids
 525:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 526:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_IRQ_ID
 527:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 528:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH            = 0U , /**< Period match counting up */
 529:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH               = 1U , /**< One match counting down */
 530:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1   = 2U , /**< Compare match counting up for channel 1
 531:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1 = 3U , /**< Compare match counting down for channel
 532:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2   = 4U , /**< Compare match counting up for channel 2
 533:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2 = 5U , /**< Compare match counting down for channel
 534:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_EVENT0                  = 8U , /**< Event-0 occurrence */
 535:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_EVENT1                  = 9U , /**< Event-1 occurrence */
 536:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_EVENT2                  = 10U, /**< Event-2 occurrence */
 537:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_TRAP                    = 11U  /**< Trap occurrence */
 538:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_IRQ_ID_t;
 539:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 540:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 541:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Available Interrupt Event Ids, which is added to support multi event APIs
 542:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 543:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MULTI_IRQ_ID
 544:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 545:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_PERIOD_MATCH            = 0x1U,   /**< Period match counting up */
 546:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_ONE_MATCH               = 0x2U,   /**< One match counting down */
 547:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_UP_CH_1   = 0x4U,   /**< Compare match counting up for 
 548:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_DOWN_CH_1 = 0x8U,   /**< Compare match counting down fo
 549:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_UP_CH_2   = 0x10U,  /**< Compare match counting up for 
 550:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_DOWN_CH_2 = 0x20U,  /**< Compare match counting down fo
 551:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_EVENT0                  = 0x100U, /**< Event-0 occurrence */
 552:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_EVENT1                  = 0x200U, /**< Event-1 occurrence */
 553:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_EVENT2                  = 0x400U, /**< Event-2 occurrence */
 554:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MULTI_IRQ_ID_t;
 555:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 556:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 557:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Service Request Lines for CCU8. Event are mapped to these SR lines and these are used to generat
 558:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 559:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_SR_ID
 560:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 561:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_0    = 0U, /**< Service Request Line-0 selected  */
 562:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_1        , /**< Service Request Line-1 selected  */
 563:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_2        , /**< Service Request Line-2 selected  */
 564:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_3          /**< Service Request Line-3 selected  */
 565:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_SR_ID_t;
 566:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 567:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 568:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 569:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Slice shadow transfer options.
 570:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 571:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SHADOW_TRANSFER
 572:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 573:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_0            = CCU8_GCSS_S0SE_Msk,  /**< Transfer Period, Compare 
 574:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           shadow register values to
 575:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           SLICE-0 */
 576:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_0     = CCU8_GCSS_S0DSE_Msk, /**< Transfer Dither compare s
 577:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           to actual register for SL
 578:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_0  = CCU8_GCSS_S0PSE_Msk, /**< Transfer Prescaler shadow
 579:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           actual register for SLICE
 580:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_1            = CCU8_GCSS_S1SE_Msk,  /**< Transfer Period, Compare 
 581:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           shadow register values to
 582:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           SLICE-1 */
 583:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_1     = CCU8_GCSS_S1DSE_Msk, /**< Transfer Dither compare s
 584:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           to actual registers for S
 585:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_1  = CCU8_GCSS_S1PSE_Msk, /**< Transfer Prescaler shadow
 586:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           actual register for SLICE
 587:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_2            = CCU8_GCSS_S2SE_Msk,  /**< Transfer Period, Compare 
 588:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           shadow register values to
 589:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           SLICE-2 */
 590:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_2     = CCU8_GCSS_S2DSE_Msk, /**< Transfer Dither compare s
 591:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           to actual register for SL
 592:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_2  = CCU8_GCSS_S2PSE_Msk, /**< Transfer Prescaler shadow
 593:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           actual register for SLICE
 594:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_3            = CCU8_GCSS_S3SE_Msk,  /**< Transfer Period, Compare 
 595:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           shadow register values to
 596:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           SLICE-3 */
 597:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_3     = CCU8_GCSS_S3DSE_Msk, /**< Transfer Dither compare s
 598:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           to actual register for SL
 599:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_3  = CCU8_GCSS_S3PSE_Msk  /**< Transfer Prescaler shadow
 600:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           actual register for SLICE
 601:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SHADOW_TRANSFER_t;
 602:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 603:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #if (UC_SERIES != XMC45) || defined(DOXYGEN)
 604:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 605:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Slice shadow transfer mode options.
 606:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @note Not available for XMC4500 series
 607:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 608:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE
 609:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 610:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_IN_PERIOD_MATCH_AND_ONE_MATCH = 0U, /**< Shadow transfer is d
 611:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                One match. */
 612:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_PERIOD_MATCH = 1U,  /**< Shadow transfer is done only
 613:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_ONE_MATCH = 2U  /**< Shadow transfer is done only in 
 614:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t;
 615:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
 616:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 617:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #if defined(CCU8V3) || defined(DOXYGEN) /* Defined for XMC1400 devices only */
 618:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 619:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Output sources for OUTy0 signal
 620:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @note Only available for XMC1400 series
 621:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 622:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  typedef enum XMC_CCU8_SOURCE_OUT0
 623:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 624:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_ST1      = (uint32_t)0x0, /**< CCU8yST1 signal path is connected the CCU8x.O
 625:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_INV_ST1  = (uint32_t)0x1, /**< Inverted CCU8yST1 signal path is connected th
 626:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_ST2      = (uint32_t)0x2, /**< CCU8yST2 signal path is connected the CCU8x.O
 627:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_INV_ST2  = (uint32_t)0x3  /**< Inverted CCU8yST2 signal path is connected th
 628:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT0_t;
 629:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 630:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 631:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Output sources for OUTy1 signal
 632:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 633:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 634:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  typedef enum XMC_CCU8_SOURCE_OUT1
 635:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 636:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_ST1      = (uint32_t)0x1, /**< CCU8yST1 signal path is connected the CCU8x.O
 637:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_INV_ST1  = (uint32_t)0x0, /**< Inverted CCU8yST1 signal path is connected th
 638:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_ST2      = (uint32_t)0x3, /**< CCU8yST2 signal path is connected the CCU8x.O
 639:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_INV_ST2  = (uint32_t)0x2  /**< Inverted CCU8yST2 signal path is connected th
 640:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT1_t;
 641:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 642:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 643:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Output sources for OUTy2 signal
 644:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @note Only available for XMC1400 series
 645:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 646:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  typedef enum XMC_CCU8_SOURCE_OUT2
 647:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 648:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_ST2      = (uint32_t)0x0, /**< CCU8yST2 signal path is connected the CCU8x.O
 649:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_INV_ST2  = (uint32_t)0x1, /**< Inverted CCU8yST2 signal path is connected th
 650:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_ST1      = (uint32_t)0x2, /**< CCU8yST1 signal path is connected the CCU8x.O
 651:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_INV_ST1  = (uint32_t)0x3  /**< Inverted CCU8yST1 signal path is connected th
 652:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT2_t;
 653:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 654:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 655:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Output sources for OUTy3 signal
 656:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 657:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 658:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  typedef enum XMC_CCU8_SOURCE_OUT3
 659:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 660:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_ST2      = (uint32_t)0x1, /**< CCU8yST2 signal path is connected the CCU8x.O
 661:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_INV_ST2  = (uint32_t)0x0, /**< Inverted CCU8yST2 signal path is connected th
 662:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_ST1      = (uint32_t)0x3, /**< CCU8yST1 signal path is connected the CCU8x.O
 663:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_INV_ST1  = (uint32_t)0x2  /**< Inverted CCU8yST1 signal path is connected th
 664:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT3_t;
 665:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
 666:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 667:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 668:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 669:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Output selector for CCU8x.OUT0-3
 670:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 671:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #if !defined(CCU8V3) /* Defined for all devices except XMC1400 */
 672:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_OUT_PATH
 673:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 674:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_ST1      = (uint32_t)0x20000, /**< CCU8yST1 signal path is connected the C
 675:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_INV_ST1  = (uint32_t)0x20002, /**< Inverted CCU8yST1 signal path is connec
 676:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_ST1      = (uint32_t)0x40000, /**< CCU8yST1 signal path is connected the C
 677:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_INV_ST1  = (uint32_t)0x40004, /**< Inverted CCU8yST1 signal path is connec
 678:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_ST2      = (uint32_t)0x80000, /**< CCU8yST2 signal path is connected the C
 679:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_INV_ST2  = (uint32_t)0x80008, /**< Inverted CCU8yST2 signal path is connec
 680:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_ST2      = (uint32_t)0x100000,/**< CCU8yST2 signal path is connected the C
 681:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_INV_ST1  = (uint32_t)0x100010 /**< Inverted CCU8yST2 signal path is connec
 682:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_OUT_PATH_t;
 683:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #else
 684:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_OUT_PATH
 685:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 686:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_ST1      = (uint32_t)0x000C0, /**< CCU8yST1 signal path is connected the C
 687:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_INV_ST1  = (uint32_t)0x000D0, /**< Inverted CCU8yST1 signal path is connec
 688:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_ST2      = (uint32_t)0x000E0, /**< CCU8yST2 signal path is connected the C
 689:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_INV_ST2  = (uint32_t)0x000F0, /**< Inverted CCU8yST2 signal path is connec
 690:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_ST1      = (uint32_t)0x00D00, /**< CCU8yST1 signal path is connected the C
 691:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_INV_ST1  = (uint32_t)0x00C00, /**< Inverted CCU8yST1 signal path is connec
 692:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_ST2      = (uint32_t)0x00F00, /**< CCU8yST2 signal path is connected the C
 693:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_INV_ST2  = (uint32_t)0x00E00, /**< Inverted CCU8yST2 signal path is connec
 694:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_ST2      = (uint32_t)0x0C000, /**< CCU8yST2 signal path is connected the C
 695:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_INV_ST2  = (uint32_t)0x0D000, /**< Inverted CCU8yST2 signal path is connec
 696:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_ST1      = (uint32_t)0x0E000, /**< CCU8yST1 signal path is connected the C
 697:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_INV_ST1  = (uint32_t)0x0F000, /**< Inverted CCU8yST1 signal path is connec
 698:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_ST2      = (uint32_t)0xD0000, /**< CCU8yST2 signal path is connected the C
 699:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_INV_ST2  = (uint32_t)0xC0000, /**< Inverted CCU8yST2 signal path is connec
 700:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_ST1      = (uint32_t)0xF0000, /**< CCU8yST1 signal path is connected the C
 701:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_INV_ST1  = (uint32_t)0xE0000  /**< Inverted CCU8yST1 signal path is connec
 702:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_OUT_PATH_t;
 703:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 704:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 705:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Immediate write into configuration register
 706:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 707:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 708:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_WRITE_INTO
 709:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 710:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_PERIOD_CONFIGURATION = CCU8_CC8_STC_IRPC_Msk,                  /**< Imm
 711:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                 Wri
 712:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                 Con
 713:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_COMPARE1_CONFIGURATION = CCU8_CC8_STC_IRCC1_Msk,               /**< Imm
 714:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                 Wri
 715:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                 Con
 716:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_COMPARE2_CONFIGURATION = CCU8_CC8_STC_IRCC2_Msk,               /**< Imm
 717:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                 Wri
 718:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                 Con
 719:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_PASSIVE_LEVEL_CONFIGURATION = CCU8_CC8_STC_IRLC_Msk,           /**< Imm
 720:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                 Wri
 721:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                                                            Config
 722:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_DITHER_VALUE_CONFIGURATION = CCU8_CC8_STC_IRDC_Msk,            /**< Imm
 723:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                 Wri
 724:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                                                            Config
 725:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_FLOATING_PRESCALER_VALUE_CONFIGURATION = CCU8_CC8_STC_IRFC_Msk /**< Imm
 726:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                 Wri
 727:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                 Val
 728:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_WRITE_INTO_t;
 729:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 730:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 731:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 732:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Automatic Shadow Transfer request when writing into shadow register
 733:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 734:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 735:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO
 736:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 737:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PERIOD_SHADOW = CCU8_CC8_STC_ASPC_Msk,        
 738:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                                                                  
 739:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                    
 740:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                    
 741:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_COMPARE1_SHADOW = CCU8_CC8_STC_ASCC1_Msk,     
 742:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                                                                  
 743:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                                                                  
 744:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                                                                  
 745:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_COMPARE2_SHADOW = CCU8_CC8_STC_ASCC2_Msk,     
 746:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                                                                  
 747:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                                                                  
 748:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                                                                  
 749:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PASSIVE_LEVEL = CCU8_CC8_STC_ASLC_Msk,        
 750:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                                                                  
 751:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                    
 752:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_DITHER_SHADOW = CCU8_CC8_STC_ASDC_Msk,        
 753:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                    
 754:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                    
 755:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_FLOATING_PRESCALER_SHADOW = CCU8_CC8_STC_ASFC_
 756:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                                                                  
 757:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                    
 758:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                    
 759:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 760:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_t;
 761:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
 762:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 763:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  CCU8 slice mask which can be used for the APIs as input where multi slice support is available
 764:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 765:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MASK
 766:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 767:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_0  = 1U , /**< SLICE-0 */
 768:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_1  = 2U , /**< SLICE-1 */
 769:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_2  = 4U , /**< SLICE-2 */
 770:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_3  = 8U   /**< SLICE-3 */
 771:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MASK_t;
 772:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 773:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**************************************************************************************************
 774:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * DATA STRUCTURES
 775:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  **************************************************************************************************
 776:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 777:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 778:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Configuration data structure of an External Event(Event-0/1/2).
 779:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Needed to configure the various aspects of an External Event.
 780:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  This structure will not connect the external event with an external function.
 781:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 782:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_EVENT_CONFIG
 783:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 784:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_INPUT_t                   mapped_input; /**< Required input signal for the Event. 
 785:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_t  edge;         /**< Select the event edge of the input si
 786:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                               This is needed for an edge sensitive 
 787:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_t level;        /**< Select the event level of the input s
 788:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                               This is needed for an level sensitive
 789:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_t            duration;     /**< Low Pass filter duration in terms of 
 790:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_CONFIG_t;
 791:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 792:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /*Anonymous structure/union guard start*/
 793:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #if defined(__CC_ARM)
 794:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   #pragma push
 795:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   #pragma anon_unions
 796:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #elif defined(__TASKING__)
 797:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   #pragma warning 586
 798:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
 799:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 800:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 801:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Dead Time configuration
 802:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 803:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_DEAD_TIME_CONFIG
 804:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 805:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   union
 806:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   {
 807:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     struct
 808:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     {
 809:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t enable_dead_time_channel1 : 1; /**< Enable dead time for Compare Channel-1 */
 810:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t enable_dead_time_channel2 : 1; /**< Enable dead time for Compare Channel-2 */
 811:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t channel1_st_path : 1;          /**< Should dead time be applied to ST output of Comp
 812:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t channel1_inv_st_path : 1;      /**< Should dead time be applied to inverse ST output
 813:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                    Compare Channel-1? */
 814:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t channel2_st_path : 1;          /**< Should dead time be applied to ST output of Comp
 815:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t channel2_inv_st_path : 1;      /**< Should dead time be applied to inverse ST output
 816:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                    Compare Channel-2? */
 817:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t div : 2;                       /**< Dead time prescaler divider value.
 818:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                    Accepts enum ::XMC_CCU8_SLICE_DTC_DIV_t*/
 819:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 24;
 820:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     };
 821:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     uint32_t dtc;
 822:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   };
 823:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   union
 824:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   {
 825:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     struct
 826:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     {
 827:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t channel1_st_rising_edge_counter : 8; /**< Contains the delay value that is applied t
 828:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                       for compare channel-1. Range: [0x0 to 0xFF]
 829:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t channel1_st_falling_edge_counter : 8; /**< Contains the delay value that is applied 
 830:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                        for compare channel-1. Range: [0x0 to 0xFF
 831:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 16;
 832:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     };
 833:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     uint32_t dc1r;
 834:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   };
 835:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   union
 836:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   {
 837:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     struct
 838:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     {
 839:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t channel2_st_rising_edge_counter : 8; /**< Contains the delay value that is applied t
 840:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                     for compare channel-2. Range: [0x0 to 0xFF]*/
 841:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t channel2_st_falling_edge_counter : 8; /**< Contains the delay value that is applied 
 842:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                     for compare channel-2. Range: [0x0 to 0xFF]*/
 843:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 16;
 844:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     };
 845:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     uint32_t dc2r;
 846:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   };
 847:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t;
 848:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 849:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 850:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Configuration data structure for CCU8 slice. Specifically configures the CCU8 slice to compare 
 851:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  This excludes event and function configuration.
 852:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 853:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_COMPARE_CONFIG
 854:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 855:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   union
 856:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   {
 857:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     struct
 858:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     {
 859:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t timer_mode : 1;         /**< Edge aligned or Centre Aligned.
 860:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_TIMER_COUNT_MODE_t */
 861:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t monoshot : 1;           /**< Single shot or Continuous mode .
 862:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t */
 863:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t shadow_xfer_clear : 1; /**< Should PR and CR shadow xfer happen when timer is cleare
 864:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 10;
 865:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t dither_timer_period: 1; /**< Can the period of the timer dither? */
 866:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t dither_duty_cycle : 1;  /**< Can the compare match of the timer dither? */
 867:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 1;
 868:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t prescaler_mode: 1;      /**< Normal or floating prescaler mode.
 869:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_PRESCALER_MODE_t */
 870:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 8;
 871:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t mcm_ch1_enable : 1;     /**< Multi-Channel mode for compare channel 1 enable? */
 872:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t mcm_ch2_enable : 1;     /**< Multi-Channel mode for compare channel 2 enable? */
 873:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 2;
 874:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t slice_status : 2;       /**< Which of the two channels drives the slice status outpu
 875:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_STATUS_t*/
 876:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 1;
 877:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     };
 878:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     uint32_t tc;
 879:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   };
 880:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   union
 881:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   {
 882:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     struct
 883:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     {
 884:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t passive_level_out0 : 1; /**< ST and OUT passive levels Configuration for OUT0. 
 885:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 886:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t passive_level_out1 : 1; /**< ST and OUT passive levels Configuration for OUT1. 
 887:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 888:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t passive_level_out2 : 1; /**< ST and OUT passive levels Configuration for OUT2. 
 889:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 890:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t passive_level_out3 : 1; /**< ST and OUT passive levels Configuration for OUT3. 
 891:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 892:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 28;
 893:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     };
 894:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     uint32_t psl;
 895:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   };
 896:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   union
 897:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   {
 898:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     struct
 899:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     {
 900:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t asymmetric_pwm : 1;     /**< Should the PWM be a function of the 2 compare channels
 901:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             rather than period value? */
 902:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   #if !defined(CCU8V3)    /* Defined for all devices except XMC1400 */                             
 903:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t invert_out0 : 1;        /**< Should inverted ST of Channel-1 be connected to OUT0? *
 904:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t invert_out1 : 1;        /**< Should inverted ST of Channel-1 be connected to OUT1? *
 905:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t invert_out2 : 1;        /**< Should inverted ST of Channel-2 be connected to OUT2? *
 906:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t invert_out3 : 1;        /**< Should inverted ST of Channel-2 be connected to OUT3? *
 907:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 27;
 908:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   #else
 909:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 3;
 910:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t selector_out0 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
 911:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT0_t 
 912:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             refer OCS1 bit-field of CHC register. 
 913:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 											@note Only available for XMC1400 series */
 914:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 2;
 915:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t selector_out1 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
 916:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT1_t 
 917:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             refer OCS2 bit-field of CHC register. 
 918:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 											@note Only available for XMC1400 series */
 919:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 2;
 920:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t selector_out2 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
 921:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT2_t 
 922:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             refer OCS3 bit-field of CHC register.
 923:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 											@note Only available for XMC1400 series */
 924:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 2;
 925:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t selector_out3 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
 926:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT3_t 
 927:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             refer OCS4 bit-field of CHC register.
 928:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 											@note Only available for XMC1400 series */
 929:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 14;
 930:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   #endif
 931:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     };
 932:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     uint32_t chc;
 933:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   };
 934:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   uint32_t prescaler_initval : 4;      /**< Initial prescaler divider value 
 935:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_PRESCALER_t */
 936:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   uint32_t float_limit : 4;            /**< The max value which the prescaler divider can increment
 937:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             Range : [0 to 15] */
 938:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   uint32_t dither_limit : 4;           /**< The value that determines the spreading of dithering 
 939:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             Range : [0 to 15] */
 940:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   uint32_t timer_concatenation : 1;    /**< Enables the concatenation of the timer if true*/
 941:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_COMPARE_CONFIG_t;
 942:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 943:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 944:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Configuration data structure for CCU8 slice. Specifically configures the CCU8 slice to capture 
 945:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  This excludes event and function configuration.
 946:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 947:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_CAPTURE_CONFIG
 948:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 949:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   union
 950:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   {
 951:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     struct
 952:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     {
 953:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 4;
 954:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t fifo_enable : 1;      /**< Should the capture registers be setup as a FIFO?(Extended
 955:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t timer_clear_mode : 2; /**< How should the timer register be cleared upon detection o
 956:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                           Accepts enum ::XMC_CCU8_SLICE_TIMER_CLEAR_MODE_t */
 957:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 4;
 958:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t same_event : 1;       /**< Should the capture event for C1V/C0V and C3V/C2V be same 
 959:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t ignore_full_flag : 1; /**< Should updates to capture registers follow full flag rule
 960:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 3;
 961:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t prescaler_mode: 1;    /**< Normal or floating prescaler Accepts enum :: XMC_CCU8_SLI
 962:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 15;
 963:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     };
 964:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****     uint32_t tc;
 965:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   };
 966:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   uint32_t prescaler_initval : 4;    /**< Prescaler divider value */
 967:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   uint32_t float_limit : 4;          /**< The max value which the prescaler divider can increment t
 968:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   uint32_t timer_concatenation : 1;    /**< Enables the concatenation of the timer */
 969:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_CAPTURE_CONFIG_t;
 970:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /*Anonymous structure/union guard end*/
 971:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #if defined(__CC_ARM)
 972:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   #pragma pop
 973:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #elif defined(__TASKING__)
 974:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   #pragma warning restore
 975:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
 976:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**************************************************************************************************
 977:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * API Prototypes
 978:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  **************************************************************************************************
 979:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #ifdef __cplusplus
 980:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** extern "C" {
 981:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
 982:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 983:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_IsValidModule(const XMC_CCU8_MODULE_t *const module)
 984:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 985:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   bool tmp = false;
 986:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   
 987:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   tmp = (module == CCU80);
 988:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   
 989:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #if defined(CCU81)
 990:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   tmp = tmp || (module == CCU81);
 991:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
 992:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   
 993:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   return tmp;  
 994:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } 
 995:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 996:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_IsValidSlice(const XMC_CCU8_SLICE_t *const slice)
 997:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 998:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   bool tmp = false;
 999:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   
1000:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   tmp = (slice == CCU80_CC80);
1001:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #if defined(CCU80_CC81)  
1002:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU80_CC81);
1003:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
1004:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #if defined(CCU80_CC82)  
1005:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU80_CC82);
1006:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
1007:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #if defined(CCU80_CC83)  
1008:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU80_CC83);
1009:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
1010:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #if defined(CCU81)  
1011:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC80);
1012:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #if defined(CCU81_CC81)  
1013:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC81);
1014:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
1015:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #if defined(CCU81_CC82)  
1016:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC82);
1017:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
1018:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #if defined(CCU81_CC83)  
1019:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC83);
1020:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
1021:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif 
1022:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  
1023:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   return tmp;  
1024:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** } 
1025:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1026:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1027:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1028:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param mcs_action multi-channel shadow transfer request configuration
1029:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1030:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1031:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1032:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1033:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Initialization of global register GCTRL.\n\n
1034:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  As part of module initialization, behaviour of the module upon detection
1035:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Multi-Channel Mode trigger is configured. Will also invoke the XMC_CCU8_EnableModule().
1036:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  The API call would bring up the required CCU8 module and also initialize the module for
1037:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  the required multi-channel shadow transfer.
1038:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1039:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1040:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_CompareInit()<BR> XMC_CCU8_SLICE_CaptureInit().
1041:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1042:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action);
1043:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1044:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1045:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1046:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1047:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1048:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1049:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1050:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Enables the CCU8 module and brings it to active state.\n\n
1051:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Also disables the gating of the clock signal (if applicable depending on the device being select
1052:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Invoke this API before any operations are done on the CCU8 module. Invoked from  XMC_CCU8_Init()
1053:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1054:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1055:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_SetModuleClock()<BR>  XMC_CCU8_DisableModule()<BR>  XMC_CCU8_StartPrescaler().
1056:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1057:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module);
1058:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1059:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1060:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1061:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1062:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1063:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1064:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1065:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Brings the CCU8 module to reset state and enables gating of the clock signal(if applicable depen
1066:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * on the device being selected).\n\n
1067:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Invoke this API when a CCU8 module needs to be disabled completely.
1068:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Any operation on the CCU8 module will have no effect after this API is called.
1069:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1070:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1071:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_EnableModule()<BR> XMC_CCU8_DisableModule().
1072:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1073:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_DisableModule(XMC_CCU8_MODULE_t *const module);
1074:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1075:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1076:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1077:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param clock Choice of input clock to the module
1078:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1079:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1080:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1081:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1082:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Selects the Module Clock by configuring GCTRL.PCIS bits.\n\n
1083:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  There are 3 potential clock sources. This API helps to select the required clock source.
1084:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Call to this API is valid after the XMC_CCU8_Init().
1085:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1086:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1087:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * None.<BR>
1088:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1089:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SetModuleClock(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_CLOCK_t clock);
1090:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1091:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1092:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1093:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1094:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1095:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1096:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1097:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1098:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Starts the prescaler and restores clocks to the timer slices, by setting GIDLC.SPRB bit.<br>\n
1099:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Once the input to the prescaler has been chosen and the prescaler divider of all slices program
1100:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  the prescaler itself may be started. Invoke this  API after XMC_CCU8_Init()
1101:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  (Mandatory to fully initialize the module).
1102:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1103:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1104:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPres
1105:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_StopPrescaler().
1106:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1107:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
1108:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
  27              	 .loc 1 1108 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
1109:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1110:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
  43              	 .loc 1 1110 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a DB68     	 ldr r3,[r3,#12]
  46 000c 43F48072 	 orr r2,r3,#256
  47 0010 7B68     	 ldr r3,[r7,#4]
  48 0012 DA60     	 str r2,[r3,#12]
1111:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
  49              	 .loc 1 1111 0
  50 0014 0C37     	 adds r7,r7,#12
  51              	.LCFI3:
  52              	 .cfi_def_cfa_offset 4
  53 0016 BD46     	 mov sp,r7
  54              	.LCFI4:
  55              	 .cfi_def_cfa_register 13
  56              	 
  57 0018 5DF8047B 	 ldr r7,[sp],#4
  58              	.LCFI5:
  59              	 .cfi_restore 7
  60              	 .cfi_def_cfa_offset 0
  61 001c 7047     	 bx lr
  62              	 .cfi_endproc
  63              	.LFE130:
  65 001e 00BF     	 .section .text.XMC_CCU8_SLICE_StopTimer,"ax",%progbits
  66              	 .align 2
  67              	 .thumb
  68              	 .thumb_func
  70              	XMC_CCU8_SLICE_StopTimer:
  71              	.LFB144:
1112:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1113:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1114:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1115:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1116:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1117:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1118:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1119:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Stops the prescaler and blocks clocks to the timer slices, by setting GIDLS.CPRB bit.\n\n
1120:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Clears the run bit of the prescaler. Ensures that the module clock is not supplied to
1121:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * the slices of the module.
1122:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1123:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1124:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8
1125:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1126:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_StopPrescaler(XMC_CCU8_MODULE_t *const module)
1127:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1128:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_StopPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1129:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   module->GIDLS |= (uint32_t) CCU8_GIDLS_CPRB_Msk;
1130:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1131:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1132:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1133:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1134:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1135:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1136:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1137:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1138:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Returns the state of the prescaler, by reading GSTAT.PRB bit.\n\n
1139:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * If clock is being supplied to the slices of the  module then returns as true. 
1140:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1141:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1142:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler()<BR> XMC_CCU8_EnableClock()<BR>  XMC_CCU8
1143:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1144:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_IsPrescalerRunning(XMC_CCU8_MODULE_t *const module)
1145:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1146:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_IsPrescalerRunning:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1147:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   return((bool)((module->GSTAT & (uint32_t) CCU8_GSTAT_PRB_Msk) == CCU8_GSTAT_PRB_Msk));
1148:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1149:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1150:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1151:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1152:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param clock_mask Slices whose clocks are to be enabled simultaneously.
1153:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                   Bit location 0/1/2/3 represents slice-0/1/2/3 respectively. 
1154:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                   Range: [0x1 to 0xF]
1155:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1156:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1157:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1158:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1159:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Enables clocks of multiple slices at a time, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
1160:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * GIDLC.CS3I bits.\n\n
1161:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Takes an input clock_mask, which determines the slices that would receive the clock. Bring them 
1162:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * of the idle state simultaneously.
1163:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1164:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1165:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock().
1166:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1167:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_EnableMultipleClocks(XMC_CCU8_MODULE_t *const module, const uint8_t c
1168:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1169:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableMultipleClocks:Invalid Module Pointer", XMC_CCU8_IsValidModule(module)
1170:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableMultipleClocks:Invalid clock mask", (clock_mask < 16U));
1171:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1172:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   module->GIDLC |= (uint32_t) clock_mask;
1173:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1174:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1175:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1176:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1177:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param compare_init Pointer to slice configuration structure
1178:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1179:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1180:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1181:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1182:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Initialization of a CC8 slice to compare mode, by configuring CC8yTC, CC8yCMC, CC8yPSC, CC8yDITH
1183:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * CC8yFPCS, CC8yCHC registers.\n\n
1184:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * CC8 slice is configured with Timer configurations in this routine. Timer is stopped before initi
1185:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * by calling XMC_CCU8_SLICE_StopTimer(). After initialization user has to explicitly enable
1186:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * the shadow transfer for the required values by calling XMC_CCU8_EnableShadowTransfer() with appr
1187:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1188:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1189:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * None.
1190:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1191:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
1192:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init);
1193:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1194:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1195:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1196:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param capture_init Pointer to slice configuration structure
1197:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1198:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1199:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1200:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1201:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Initialization of a CC8 slice to capture mode, by configuring CC8yTC, CC8yCMC, CC8yPSC,CC8yFPCS 
1202:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * CC8 slice is configured with Capture configurations in  this routine. Timer is stopped before in
1203:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * by calling XMC_CCU8_SLICE_StopTimer(). After initialization user has to explicitly enable the sh
1204:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * for the required  values by calling XMC_CCU8_EnableShadowTransfer() with appropriate mask. 
1205:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1206:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1207:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_Capture0Config()<BR>  XMC_CCU8_SLICE_Capture1Config().
1208:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1209:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_CaptureInit(XMC_CCU8_SLICE_t *const slice,
1210:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_CAPTURE_CONFIG_t *const capture_init);
1211:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1212:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1213:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1214:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice_number Slice for which the clock should be Enabled.
1215:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                   Range: [0x0 to 0x3]
1216:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1217:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1218:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1219:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1220:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Enables the slice timer clock, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
1221:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  GIDLC.CS3I bits according to the selected \a slice_number.\n\n
1222:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  It is possible to enable/disable clock at slice level. This uses the \b slice_number to indicat
1223:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  slice whose clock needs to be enabled. Directly accessed register is GIDLC.
1224:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1225:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1226:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR> 
1227:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1228:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_numb
1229:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1230:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1231:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));
1232:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1233:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   module->GIDLC |= ((uint32_t) 1 << slice_number);
1234:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1235:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1236:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1237:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1238:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice_number Slice for which the clock should be disabled.
1239:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                   Range: [0x0 to 0x3]
1240:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1241:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1242:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1243:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1244:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Disables the slice timer clock, by configuring GIDLS.SS0I, GIDLS.SSS1I, GIDLS.SSS2I, 
1245:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * GIDLS.SSS3I bits according to the selected \a slice_number .\n\n
1246:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * It is possible to disable clock at slice level using the module pointer.
1247:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \b slice_number is used to disable the clock to a given slice of the module.
1248:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1249:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1250:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_EnableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  
1251:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1252:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_DisableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_num
1253:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1254:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_DisableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1255:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_DisableClock:Invalid Slice Number", (slice_number < 4U));
1256:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1257:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   module->GIDLS |= ((uint32_t) 1 << slice_number);
1258:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1259:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1260:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1261:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1262:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param out_path_msk configuration for output path selection.
1263:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *        combination of XMC_CCU8_OUT_PATH_t enum items can be used to create a mask.
1264:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 
1265:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1266:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1267:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1268:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1269:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Configure the out the path of the two compare channels with specified ST signal, by configuring 
1270:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  ^ CC8yCHC register.\n\n
1271:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 
1272:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * For the two compare channels it is possible to select either direct ST signal or inverted ST sig
1273:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \b out_path_msk is used to set the required out put path.
1274:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1275:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1276:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * None
1277:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** */
1278:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetOutPath(XMC_CCU8_SLICE_t *const slice, const uint32_t out_path_msk);
1279:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1280:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1281:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1282:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event Map an External event to the External Start Function
1283:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param start_mode Behaviour of slice when the start function is activated
1284:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1285:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1286:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1287:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1288:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Configures the Start Function of the slice, by configuring CC8yCMC.ENDS and CC8yTC.ENDM bits.\n
1289:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Start function is mapped with one of the 3 events. An external signal can control when a CC8 ti
1290:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Additionally, the behaviour of the slice upon activation of the start function is configured as
1291:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1292:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1293:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_StopConfig()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1294:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1295:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
1296:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_EVENT_t event,
1297:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_START_MODE_t start_mode);
1298:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1299:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1300:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1301:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event Map an External event to the External Stop Function
1302:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param end_mode Behaviour of slice when the stop function is activated
1303:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1304:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1305:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1306:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1307:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Configures the Stop function for the slice, by configuring CC8yCMC.STRTS and CC8yTC.STRM bits.\n
1308:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Stop function is mapped with one of the 3 events. An external signal can control when a CCU8 tim
1309:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Additionally, the behaviour of the slice upon activation of the stop function is configured as w
1310:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1311:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1312:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_StartConfig()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput()
1313:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1314:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_StopConfig(XMC_CCU8_SLICE_t *const slice,
1315:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                const XMC_CCU8_SLICE_EVENT_t event,
1316:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                const XMC_CCU8_SLICE_END_MODE_t end_mode);
1317:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1318:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1319:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1320:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event Map an External event to the External load Function
1321:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1322:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1323:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1324:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1325:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Configures the Load Function for the slice, by configuring CC8yCMC.LDS bit.\n\n
1326:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Load function is mapped with one of the 3 events. Up on occurrence of the event,\n
1327:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  if CC8yTCST.CDIR set to 0,CC8yTIMER register is reloaded with the value from compare channel 1 
1328:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                            compare channel 2\n
1329:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  if CC8yTCST.CDIR set to 1,CC8yTIMER register is reloaded with the value from period register\n
1330:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  
1331:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1332:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1333:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1334:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1335:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_LoadConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event);
1336:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1337:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1338:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1339:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param ch_num Select which compare channel value has to be loaded to the Timer register during e
1340:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1341:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1342:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1343:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1344:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Up on occurrence of the external load event, if CC8yTCST.CDIR set to 0, CC8yTIMER register can 
1345:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  with the value from compare channel 1 or compare channel 2\n
1346:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  If CC8yTC.TLS is 0, compare channel 1 value is loaded to the CC8yTIMER register\n
1347:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  If CC8yTC.TLS is 1, compare channel 2 value is loaded to the CC8yTIMER register\n
1348:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1349:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1350:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1351:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1352:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_LoadSelector(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_COMPARE_CHANNE
1353:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1354:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1355:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1356:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event Map an External event to the External Modulation Function
1357:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param mod_mode Desired Modulation mode
1358:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param channel Specify the channel(s) on which the modulation should be applied.
1359:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param synch_with_pwm Option to synchronize modulation with PWM start
1360:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                       Pass \b true if the modulation needs to be synchronized with PWM signal.
1361:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1362:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1363:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1364:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1365:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Configures the Output Modulation Function of the slice, by configuring CC8yCMC.MOS, CC8yTC.EMT a
1366:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * CC8yTC.EMS bits.\n\n
1367:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Modulation function is mapped with one of the 3 events. The output signal of the CCU can
1368:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * be modulated according to a external input.  Additionally, the behaviour of the slice upon activ
1369:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * of the modulation function is configured as well.
1370:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1371:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1372:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1373:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1374:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_ModulationConfig(XMC_CCU8_SLICE_t *const slice,
1375:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                      const XMC_CCU8_SLICE_EVENT_t event,
1376:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                      const XMC_CCU8_SLICE_MODULATION_MODE_t mod_mode,
1377:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                      const XMC_CCU8_SLICE_MODULATION_CHANNEL_t channel, 
1378:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                      const bool synch_with_pwm
1379:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                      );
1380:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1381:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1382:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1383:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event Map an External event to the External Count Function
1384:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1385:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1386:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1387:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1388:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Configures the Count Function of the slice, by configuring CC8yCMC.CNTS bit.\n\n
1389:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Count function is mapped with one of the 3 events. CCU8 slice can take an external
1390:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * signal to act as the counting event. The CCU8 slice would count the
1391:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * edges present on the \b event selected. 
1392:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1393:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1394:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1395:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1396:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_CountConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event);
1397:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1398:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1399:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1400:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event  Map an External event to the External Gating Function
1401:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1402:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1403:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1404:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1405:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Configures the Gating Function of the slice, by configuring CC8yCMC.GATES bit.\n\n
1406:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Gating function is mapped with one of the 3 events.  A CCU8 slice can use an input signal that w
1407:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * operate as counter gating. If the configured Active level is detected the counter will gate all 
1408:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1409:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1410:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1411:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1412:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_GateConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event);
1413:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1414:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1415:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1416:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event Map an External event to the Capture-0 Function
1417:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1418:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1419:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1420:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1421:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Configures the Capture-0 Function of the slice, by configuring CC8yCMC.CAP0S bit.\n\n
1422:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Capture function is mapped with one of the 3 events.  A CCU8 slice can be configured into captur
1423:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * with the selected \b event. In this mode the CCU8 will capture the timer value into CC8yC0V and 
1424:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1425:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1426:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1427:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1428:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_Capture0Config(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t even
1429:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1430:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1431:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1432:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event Map an External event to the Capture-1 Function
1433:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1434:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1435:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1436:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1437:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Configures the Capture-1 Function of the slice, by configuring CC8yCMC.CAP1S bit.\n\n
1438:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Capture function is mapped with one of the 3 events. A CCU8 slice can be configured into capture
1439:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * mode with the selected \b event. In this mode the CCU8 will capture the timer value into CC8yC2V
1440:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1441:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1442:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1443:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1444:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_Capture1Config(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t even
1445:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1446:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1447:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1448:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1449:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    bool would return true if the extended capture read back mode is enabled<BR>
1450:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1451:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1452:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Checks if Extended capture mode read is enabled for particular slice or not, by reading CC8yTC.E
1453:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * In this mode the there is only one associated read address for all the capture registers.
1454:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Individual capture registers can still be accessed in this mode.
1455:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1456:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1457:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_GetCapturedValueFromFifo().
1458:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1459:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsExtendedCapReadEnabled(const XMC_CCU8_SLICE_t *const slice)
1460:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1461:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_IsPrescalerRunning:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1462:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   return((bool)((slice->TC & (uint32_t) CCU8_CC8_TC_ECM_Msk) == (uint32_t)CCU8_CC8_TC_ECM_Msk));
1463:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1464:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1465:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #if defined(CCU8V1) /* Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices onl
1466:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1467:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1468:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice_number to check whether read value belongs to required slice or not
1469:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1470:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *   int32_t   Returns -1 if the FIFO value being retrieved is not from the \b slice_number.
1471:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *             Returns the value captured in the \b slice_number, if captured value is from the cor
1472:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                     Range: [0x0 to 0xFFFF]
1473:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1474:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1475:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Read captured value from FIFO(ECRD register).\n\n
1476:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1477:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1478:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1479:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * derived/inferred from the captured values.
1480:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1481:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1482:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsExtendedCapReadEnabled().
1483:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1484:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** int32_t XMC_CCU8_GetCapturedValueFromFifo(const XMC_CCU8_MODULE_t *const module, const uint8_t slic
1485:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #else
1486:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1487:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1488:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param set The capture register set from which the captured value is to be retrieved
1489:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1490:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    uint32_t Returns the value captured in the \b slice_number
1491:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *             Range: [0x0 to 0xFFFF]
1492:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1493:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1494:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Read captured value from FIFO(CC8yECRD0 and CC8yECRD1).\n\n
1495:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1496:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1497:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1498:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * derived/inferred from the captured values.
1499:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1500:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1501:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsExtendedCapReadEnabled().
1502:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @note Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices only. For other d
1503:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1504:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** uint32_t XMC_CCU8_SLICE_GetCapturedValueFromFifo(const XMC_CCU8_SLICE_t *const slice,
1505:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 		                                             const XMC_CCU8_SLICE_CAP_REG_SET_t set);
1506:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
1507:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1508:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1509:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1510:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event Map an External event to the External Count Direction Function
1511:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1512:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1513:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1514:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1515:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Configures the Count Direction of the slice, by configuring CC8yCMC.UDS bit.\n\n
1516:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Count direction function is mapped with one of the 3 events. A slice can be configured to change
1517:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * CC8yTIMER count direction depending on an external signal.
1518:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1519:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1520:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1521:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1522:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_DirectionConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t eve
1523:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1524:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1525:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1526:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1527:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1528:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1529:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1530:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Configures the status bit override Function of the slice, by configuring CC8yCMC.OFS bit.\n\n
1531:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Status bit override function is mapped with one of the 3 events. A slice can be configured to ch
1532:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * output of the timer's CC8yST1 signal depending on an external signal.
1533:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1534:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1535:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent().
1536:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1537:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_StatusBitOverrideConfig(XMC_CCU8_SLICE_t *const slice);
1538:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1539:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1540:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1541:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param exit_mode How should a previously logged trap state be exited?
1542:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param synch_with_pwm Should exit of trap state be synchronized with PWM cycle start?
1543:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1544:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1545:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1546:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1547:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1548:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Configures the Trap Function of the slice, by configuring CC8yCMC.TS, CC8yTC.TRPSE, and CC8yTC.T
1549:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Trap function is mapped with Event-2. Criteria for exiting the trap state is configured.
1550:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This trap function allows PWM outputs to react on the state of an input pin.
1551:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Thus PWM output can be forced to inactive state upon detection of a trap.
1552:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * It is also possible to synchronize the trap function with the PWM signal using the \b synch_with
1553:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1554:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1555:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1556:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1557:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
1558:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
1559:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                bool synch_with_pwm);
1560:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1561:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1562:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1563:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param ev1_config Pointer to event 1 configuration data
1564:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param ev2_config Pointer to event 2 configuration data
1565:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1566:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1567:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1568:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1569:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1570:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Map Status bit override function with an Event1 & Event 2 of the slice and configure CC8yINS reg
1571:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Details such as the input mapped to the event, event detection criteria and Low Pass filter opti
1572:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * by this routine for the events 1 & 2.  Event-1 input would be the trigger to override the value.
1573:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Event-2 input would be the override value.
1574:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1575:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1576:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StatusBitOverrideConfig().
1577:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1578:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU8_SLICE_t *const slice,
1579:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                     const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev1_
1580:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                     const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev2_
1581:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1582:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1583:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1584:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event The External Event which needs to be configured.
1585:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param config Pointer to event configuration data.
1586:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1587:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1588:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1589:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1590:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Configures an External Event of the slice, by updating CC8yINS register .\n\n
1591:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Details such as the input mapped to the event, event detection criteria and low pass filter
1592:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * options are programmed by this routine. The Event \b config  will configure the input selection,
1593:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * the edge selection, the level selection and the Low pass filter for the  event.
1594:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1595:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1596:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartConfig()<BR>  XMC_CCU8_SLICE_StopConfig()<BR>  XMC_CCU8_SLICE_LoadConfig()<
1597:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ModulationConfig()<BR>  XMC_CCU8_SLICE_CountConfig()<BR>  XMC_CCU8_SLICE_GateCon
1598:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_Capture0Config()<BR> XMC_CCU8_SLICE_Capture1Config()<BR>  XMC_CCU8_SLICE_Directi
1599:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StatusBitOverrideConfig()<BR>  XMC_CCU8_SLICE_TrapConfig().
1600:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1601:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
1602:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                    const XMC_CCU8_SLICE_EVENT_t event,
1603:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *config);
1604:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1605:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1606:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1607:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event The External Event which needs to be configured.
1608:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param input One of the 16 inputs meant to be mapped to the desired event
1609:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1610:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1611:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1612:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1613:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1614:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Selects an input for an external event, by configuring CC8yINS register.\n\n
1615:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * It is possible to select one of the possible 16 input signals for a given Event.
1616:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This configures the CC8yINS.EVxIS for the selected event.
1617:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1618:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1619:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartConfig()<BR>  XMC_CCU8_SLICE_StopConfig()<BR>  XMC_CCU8_SLICE_LoadConfig()<
1620:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ModulationConfig()<BR> XMC_CCU8_SLICE_CountConfig()<BR>  XMC_CCU8_SLICE_GateConf
1621:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_Capture0Config()<BR>  XMC_CCU8_SLICE_Capture1Config()<BR> XMC_CCU8_SLICE_Directi
1622:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StatusBitOverrideConfig()<BR>  XMC_CCU8_SLICE_TrapConfig().
1623:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1624:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetInput(XMC_CCU8_SLICE_t *const slice,
1625:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                              const XMC_CCU8_SLICE_EVENT_t event,
1626:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                              const XMC_CCU8_SLICE_INPUT_t input);
1627:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1628:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1629:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1630:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param out_mask  Output signals for which the Trap function needs to be activated.
1631:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                   Use ::XMC_CCU8_SLICE_OUTPUT_t enum items to create a mask of choice,
1632:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                   using a bit wise OR operation
1633:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                   Range: [0x1 to 0xF]
1634:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1635:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1636:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1637:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1638:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Enables the trap feature, by setting CC8yTC.TRAPE0, CC8yTC.TRAPE1, CC8yTC.TRAPE2 and CC8yTC.TRAP
1639:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \a out_mask.\n\n
1640:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * A particularly useful feature where the PWM output can be forced inactive upon detection of a tr
1641:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * can be the output of a sensing element which has just detected an abnormal electrical condition.
1642:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1643:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1644:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_TrapConfig()<BR>  XMC_CCU8_SLICE_DisableTrap()<BR>  XMC_CCU8_SLICE_ConfigureEven
1645:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetInput().
1646:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1647:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_EnableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_ma
1648:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1649:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1650:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->TC |= (uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos;
1651:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1652:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1653:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1654:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1655:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param out_mask  Output signals for which the Trap function needs to be deactivated.
1656:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                   Use ::XMC_CCU8_SLICE_OUTPUT_t enum items to create a mask of choice,
1657:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                   using a bit wise OR operation.
1658:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                   Range: [0x1 to 0xF]
1659:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1660:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1661:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1662:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1663:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Disables the trap feature, by clearing CC8yTC.TRAPE0, CC8yTC.TRAPE1, CC8yTC.TRAPE2 and CC8yTC.TR
1664:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \a out_mask.\n\n.\n\n
1665:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This API will revert the changes done by XMC_CCU8_SLICE_EnableTrap().
1666:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This Ensures that the TRAP function has no effect on the output of the CCU8 slice.
1667:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1668:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1669:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableTrap().
1670:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1671:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_m
1672:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1673:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1674:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   
1675:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->TC &= ~((uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos);
1676:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1677:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1678:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1679:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1680:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1681:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    bool returns \b true if the Timer is running else it returns \b false.
1682:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1683:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1684:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Returns the state of the timer (Either Running or stopped(idle)), by reading CC8yTCST.TRB bit.
1685:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1686:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1687:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartTimer()<BR>  XMC_CCU8_SLICE_StopTimer().
1688:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1689:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsTimerRunning(const XMC_CCU8_SLICE_t *const slice)
1690:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1691:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1692:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   return(bool)(((slice->TCST) & CCU8_CC8_TCST_TRB_Msk) == (uint32_t)CCU8_CC8_TCST_TRB_Msk);
1693:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1694:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1695:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1696:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Pointer to an instance of CC8 slice
1697:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1698:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    bool returns \b true if the dead time counter of Compare channel-1 is running else it returns
1699:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1700:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1701:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Returns the state of the  Dead time counter 1 (Either Running or stopped(idle)), by reading CC8y
1702:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This returns the state of the dead time counter which is linked to Compare channel-1.
1703:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1704:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1705:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsDeadTimeCntr2Running().
1706:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1707:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsDeadTimeCntr1Running(const XMC_CCU8_SLICE_t *const slice)
1708:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1709:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_IsDeadTimeCntr1Running:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(s
1710:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   return(bool)(((slice->TCST) & CCU8_CC8_TCST_DTR1_Msk) == (uint32_t)CCU8_CC8_TCST_DTR1_Msk);
1711:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1712:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1713:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1714:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Pointer to an instance of CC8 slice
1715:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1716:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    bool returns \b true if the dead time counter of Compare channel-2 is running else it returns
1717:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1718:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1719:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Returns the state of the  Dead time counter 2 (Either Running or stopped(idle)), by reading CC8y
1720:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This returns the state of the dead time counter which is linked to Compare channel-2.
1721:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1722:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1723:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsDeadTimeCntr1Running().
1724:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1725:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsDeadTimeCntr2Running(const XMC_CCU8_SLICE_t *const slice)
1726:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1727:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_IsDeadTimeCntr2Running:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(s
1728:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   return(bool)(((slice->TCST) & CCU8_CC8_TCST_DTR2_Msk) == (uint32_t)CCU8_CC8_TCST_DTR2_Msk);
1729:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1730:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1731:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1732:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1733:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1734:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *   ::XMC_CCU8_SLICE_TIMER_COUNT_DIR_t returns the direction in which the timer is counting.
1735:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1736:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1737:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Returns the timer counting direction, by reading CC8yTCST.CDIR bit.\n\n
1738:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This API will return the direction in which the timer is currently
1739:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * incrementing(XMC_CCU8_SLICE_TIMER_COUNT_DIR_UP) or decrementing (XMC_CCU8_SLICE_TIMER_COUNT_DIR_
1740:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1741:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1742:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  None.
1743:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1744:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_TIMER_COUNT_DIR_t XMC_CCU8_SLICE_GetCountingDir(const XMC_CCU8_SLICE
1745:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1746:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCountingDir:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1747:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   return((XMC_CCU8_SLICE_TIMER_COUNT_DIR_t)(((slice->TCST) & CCU8_CC8_TCST_CDIR_Msk) >> CCU8_CC8_TC
1748:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1749:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1750:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1751:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1752:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1753:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1754:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1755:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Starts the timer counting operation, by setting CC8yTCSET.TRBS bit.\n\n
1756:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * It is necessary to have configured the CC8 slice before starting its timer.
1757:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Before the Timer is started ensure that the clock is provided to the slice.
1758:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1759:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1760:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StopTimer().
1761:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1762:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
1763:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1764:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1765:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
1766:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1767:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1768:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1769:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1770:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1771:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1772:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1773:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1774:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Stops the Timer.\n\n
1775:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Timer counting operation can be stopped by invoking this API, by setting CC8yTCCLR.TRBC bit.
1776:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1777:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1778:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartTimer().
1779:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1780:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
1781:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
  72              	 .loc 1 1781 0
  73              	 .cfi_startproc
  74              	 
  75              	 
  76              	 
  77 0000 80B4     	 push {r7}
  78              	.LCFI6:
  79              	 .cfi_def_cfa_offset 4
  80              	 .cfi_offset 7,-4
  81 0002 83B0     	 sub sp,sp,#12
  82              	.LCFI7:
  83              	 .cfi_def_cfa_offset 16
  84 0004 00AF     	 add r7,sp,#0
  85              	.LCFI8:
  86              	 .cfi_def_cfa_register 7
  87 0006 7860     	 str r0,[r7,#4]
1782:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1783:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->TCCLR |= (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
  88              	 .loc 1 1783 0
  89 0008 7B68     	 ldr r3,[r7,#4]
  90 000a 1B69     	 ldr r3,[r3,#16]
  91 000c 43F00102 	 orr r2,r3,#1
  92 0010 7B68     	 ldr r3,[r7,#4]
  93 0012 1A61     	 str r2,[r3,#16]
1784:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
  94              	 .loc 1 1784 0
  95 0014 0C37     	 adds r7,r7,#12
  96              	.LCFI9:
  97              	 .cfi_def_cfa_offset 4
  98 0016 BD46     	 mov sp,r7
  99              	.LCFI10:
 100              	 .cfi_def_cfa_register 13
 101              	 
 102 0018 5DF8047B 	 ldr r7,[sp],#4
 103              	.LCFI11:
 104              	 .cfi_restore 7
 105              	 .cfi_def_cfa_offset 0
 106 001c 7047     	 bx lr
 107              	 .cfi_endproc
 108              	.LFE144:
 110 001e 00BF     	 .section .text.XMC_CCU8_SLICE_SetDitherCompareValue,"ax",%progbits
 111              	 .align 2
 112              	 .thumb
 113              	 .thumb_func
 115              	XMC_CCU8_SLICE_SetDitherCompareValue:
 116              	.LFB158:
1785:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1786:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1787:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1788:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1789:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1790:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1791:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1792:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Resets the timer count to zero, by setting CC8yTCCLR.TCC bit.\n\n
1793:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * A timer which has been stopped can still retain the last counted value.
1794:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * After invoking this API the timer value will be cleared.
1795:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1796:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1797:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartTimer().
1798:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1799:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ClearTimer(XMC_CCU8_SLICE_t *const slice)
1800:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1801:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1802:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->TCCLR |= (uint32_t) CCU8_CC8_TCCLR_TCC_Msk;
1803:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1804:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1805:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1806:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1807:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1808:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    ::XMC_CCU8_SLICE_MODE_t returns XMC_CCU8_SLICE_MODE_COMPARE if the slice is operating in comp
1809:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                          returns XMC_CCU8_SLICE_MODE_CAPTURE if the slice is operating in captur
1810:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1811:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1812:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Retrieves the current mode of operation in the slice (either Capture mode or Compare mode), by r
1813:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * CC8yTC.CMOD bit.\n\n
1814:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Ensure that before invoking this API the CCU8 slice should be configured otherwise the output of
1815:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * invalid.
1816:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1817:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1818:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  None.
1819:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1820:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_MODE_t XMC_CCU8_SLICE_GetSliceMode(const XMC_CCU8_SLICE_t *const sli
1821:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1822:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetSliceMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1823:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   return((XMC_CCU8_SLICE_MODE_t)(((slice->TC) & CCU8_CC8_TC_CMOD_Msk) >> CCU8_CC8_TC_CMOD_Pos));
1824:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1825:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1826:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1827:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1828:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param mode Desired repetition mode (Either single shot or Continuous)
1829:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1830:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1831:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1832:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1833:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Configures the Timer to either Single shot mode or continuous mode, by configuring CC8yTC.TSSM b
1834:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
1835:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * mode has been set to single shot. In the continuous mode of operation, the timer starts counting
1836:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * reaching the terminal count.
1837:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1838:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1839:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerRepeatMode().
1840:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1841:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerRepeatMode(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_TIMER_RE
1842:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1843:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1844:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1845:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <br>
1846:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  ::XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t returns XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT if continu
1847:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                                     returns XMC_CCU8_SLICE_TIMER_REPEAT_MODE_SINGLE if single sh
1848:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1849:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1850:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Retrieves the Timer repeat mode, either Single shot mode or continuous mode, by reading CC8yTC.T
1851:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The timer will count upto the terminal count as specified in the period register and stops immed
1852:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * mode has been set to single shot mode. In the continuous mode of operation, the timer starts cou
1853:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * all over again after reaching the terminal count.
1854:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1855:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1856:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerRepeatMode().
1857:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1858:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t XMC_CCU8_SLICE_GetTimerRepeatMode(
1859:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                     const XMC_CCU8_
1860:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1861:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice
1862:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   return((XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t)(((slice->TC) & CCU8_CC8_TC_TSSM_Msk) >> CCU8_CC8_TC_T
1863:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1864:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1865:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1866:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param mode Desired counting mode (Either Edge Aligned or Center Aligned)
1867:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1868:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1869:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1870:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1871:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Configures the timer counting mode either Edge Aligned or Center Aligned, by configuring CC8yTC.
1872:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * In the edge aligned mode, the timer counts from 0 to the terminal count. Once the timer count ha
1873:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * compare value, the timer status output asserts itself. It will now deassert only after the timer
1874:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * terminal count.\n In the center aligned mode, the timer first counts from 0 to the terminal coun
1875:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * During this upward and downward counting, the timer status output stays asserted as long as the 
1876:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * greater than the compare value.
1877:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1878:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1879:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerCountingMode().
1880:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1881:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerCountingMode(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_TIMER_
1882:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1883:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1884:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1885:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <br>
1886:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  ::XMC_CCU8_SLICE_TIMER_COUNT_MODE_t returns XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA if edge aligned 
1887:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                                     returns XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA if center aligned
1888:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1889:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1890:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Retrieves timer counting mode either Edge aligned or Center Aligned, by reading CC8yTC.TCM bit.\
1891:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1892:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1893:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerCountingMode().
1894:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1895:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_TIMER_COUNT_MODE_t XMC_CCU8_SLICE_GetTimerCountingMode(
1896:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 		                                                                            const XMC_CCU8_SLICE_
1897:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1898:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerCountingMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sli
1899:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   return((XMC_CCU8_SLICE_TIMER_COUNT_MODE_t)(((slice->TC) & CCU8_CC8_TC_TCM_Msk) >> CCU8_CC8_TC_TCM
1900:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1901:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1902:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1903:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param period_val Timer period value
1904:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *        Range: [0x0 to 0xFFFF]
1905:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1906:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1907:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1908:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1909:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Programs the timer period, by writing CC8yPRS register.\n\n
1910:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The frequency of counting/ PWM frequency is determined by this value. The period value is writte
1911:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * register. Explicitly enable the shadow transfer for the the period value by calling
1912:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_EnableShadowTransfer() with appropriate mask. If shadow transfer is enabled and the tim
1913:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * a period match transfers the value from the shadow register to the actual period register.
1914:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1915:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1916:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerPeriodMatch().
1917:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1918:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val);
1919:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1920:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1921:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1922:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1923:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *   uint16_t returns the current timer period value
1924:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *            Range: [0x0 to 0xFFFF]
1925:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1926:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1927:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Retrieves the timer period value currently effective, by reading CC8yPR register.\n\n
1928:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * If the timer is active then the value being returned is currently being used for the PWM period.
1929:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1930:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Note:</b><br>
1931:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The XMC_CCU8_SLICE_SetTimerPeriodMatch() would set the new period value to a shadow register.
1932:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This would only transfer the new values into the actual period register if the shadow transfer r
1933:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU8_SLICE_GetTimerPeri
1934:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * would not reflect the new values until the shadow transfer completes.
1935:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1936:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1937:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerPeriodMatch().
1938:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1939:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE uint16_t XMC_CCU8_SLICE_GetTimerPeriodMatch(const XMC_CCU8_SLICE_t *const slice)
1940:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1941:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slic
1942:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   return((uint16_t) slice->PR);
1943:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1944:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1945:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1946:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param channel Select the compare channel to which the \b compare_val has to programmed.
1947:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param compare_val Timer compare value
1948:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1949:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1950:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1951:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1952:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Programs the timer compare value, by writing CC8yCR1S and CC8yCR2S registers.\n\n
1953:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  The PWM duty cycle is determined by this value.\n\n
1954:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
1955:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * the the period/compare value by calling XMC_CCU8_EnableShadowTransfer() with
1956:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * appropriate mask.If shadow transfer is enabled and the timer is running,
1957:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * a period match transfers the value from the shadow register to the actual compare register.
1958:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1959:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1960:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_EnableShadowTransfer().
1961:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1962:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
1963:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                          const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
1964:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                          const uint16_t compare_val);
1965:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1966:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1967:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1968:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param compare_val Timer compare value
1969:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1970:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1971:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1972:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1973:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Programs the timer compare1 value, by writing CC8yCR1S register.\n\n
1974:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The PWM duty cycle is determined by this value.\n\n
1975:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
1976:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * the the period/compare value by calling XMC_CCU8_EnableShadowTransfer() with appropriate mask.
1977:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * If shadow transfer is enabled and the timer is running, a period match transfers the value from
1978:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * the shadow register to the actual compare register.
1979:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1980:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1981:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_EnableShadowTransfer().
1982:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1983:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetTimerCompareMatchChannel1(XMC_CCU8_SLICE_t *const slice, con
1984:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1985:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatchChannel1:Invalid Slice Pointer", XMC_CCU8_IsValidS
1986:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->CR1S = (uint32_t) compare_val;
1987:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1988:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1989:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1990:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1991:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param compare_val Timer compare value
1992:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1993:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1994:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1995:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1996:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Programs the timer compare2 value, by writing CC8yCR2S register.\n\n
1997:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The PWM duty cycle is determined by this value.\n\n
1998:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
1999:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * the the period/compare value by calling XMC_CCU8_EnableShadowTransfer() with appropriate mask.
2000:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * If shadow transfer is enabled and the timer is running, a period match transfers the value from
2001:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * the shadow register to the actual compare register.
2002:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2003:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2004:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_EnableShadowTransfer().
2005:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2006:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetTimerCompareMatchChannel2(XMC_CCU8_SLICE_t *const slice, con
2007:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
2008:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatchChannel2:Invalid Slice Pointer", XMC_CCU8_IsValidS
2009:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->CR2S = (uint32_t) compare_val;
2010:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
2011:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2012:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2013:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2014:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param channel Select the compare channel to retrieve from.
2015:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2016:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *   uint16_t returns the current timer compare value
2017:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *            Range: [0x0 to 0xFFFF]
2018:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2019:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2020:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Retrieves the timer compare value currently effective, by reading CC8yCR1S and CC8yCR2S register
2021:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * If the timer is active then the value being returned is currently being for the PWM duty cycle( 
2022:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2023:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Note:</b><br>
2024:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The XMC_CCU8_SLICE_SetTimerCompareMatch() would set the new compare value to a shadow register.
2025:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This would only transfer the new values into the actual compare register if the shadow transfer 
2026:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU8_SLICE_GetTimerComp
2027:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * would not reflect the new values until the shadow transfer completes.
2028:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2029:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2030:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerCompareMatch().
2031:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2032:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** uint16_t XMC_CCU8_SLICE_GetTimerCompareMatch(const XMC_CCU8_SLICE_t *const slice,
2033:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                              const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel);
2034:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2035:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2036:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
2037:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param shadow_transfer_msk Shadow transfer request mask for various transfers.
2038:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                            Use ::XMC_CCU8_SHADOW_TRANSFER_t enum items to create a mask of choic
2039:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                            using a bit wise OR operation.
2040:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2041:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
2042:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2043:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2044:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Requests of shadow transfer for Period, Compare, Passive level, dither and prescaler, by configu
2045:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * the GCSS register.\n\n
2046:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The transfer from the shadow registers to the actual registers is done in the immediate next occ
2047:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * shadow transfer trigger after the API is called.
2048:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2049:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Any call to XMC_CCU8_SLICE_SetTimerPeriodMatch()<BR>  XMC_CCU8_SLICE_SetTimerCompareMatch()<BR> 
2050:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_XMC_CCU8_SLICE_SetPrescaler()<BR> XMC_CCU8_SLICE_CompareInit()<BR> XMC_CCU8_SLICE_CaptureIni
2051:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * must be succeeded by this API.
2052:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2053:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2054:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  None.
2055:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2056:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t 
2057:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
2058:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module)
2059:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   module->GCSS |= (uint32_t)shadow_transfer_msk;  
2060:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
2061:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2062:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2063:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2064:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2065:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *   uint16_t returns the current timer value
2066:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *            Range: [0x0 to 0xFFFF]
2067:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2068:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2069:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Retrieves the latest timer value, from CC8yTIMER register.\n\n
2070:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2071:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2072:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerValue().
2073:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2074:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE uint16_t XMC_CCU8_SLICE_GetTimerValue(const XMC_CCU8_SLICE_t *const slice)
2075:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
2076:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2077:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   return((uint16_t) slice->TIMER);
2078:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
2079:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2080:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2081:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param timer_val The new timer value that has to be loaded into the TIMER register.
2082:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                  Range: [0x0 to 0xFFFF]
2083:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2084:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
2085:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2086:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2087:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Loads a new timer value, by setting CC8yTIMER register.\n\n
2088:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 
2089:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Note:</b><br>
2090:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Request to load is ignored if the timer is running.
2091:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2092:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2093:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerValue().
2094:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2095:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetTimerValue(XMC_CCU8_SLICE_t *const slice, const uint16_t tim
2096:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
2097:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2098:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->TIMER = (uint32_t) timer_val;
2099:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
2100:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2101:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2102:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param period_dither Boolean instruction on dithering of period match
2103:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param duty_dither Boolean instruction on dithering of compare match
2104:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param spread Dither compare value
2105:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2106:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
2107:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2108:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2109:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Enables dithering of PWM frequency and duty cycle, by configuring CC8yTC.DITHE and CC8yDITS bits
2110:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Some control loops are slow in updating PWM frequency and duty cycle. In such a case, a Bresenha
2111:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * can help reduce long term errors. Dithering can be applied to period and duty individually,
2112:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * this can be selected using the parameter \b period_dither and \b duty_dither.
2113:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The \b spread would provide the dither compare value. If the dither counter value is less than t
2114:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * the period/compare values would be dithered according to the dither mode selected. This API woul
2115:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_SetDitherCompareValue().
2116:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2117:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Note:</b><br>
2118:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * After this API call, XMC_CCU8_EnableShadowTransfer() has to be called with appropriate mask
2119:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * to transfer the dither value.
2120:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2121:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2122:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_DisableDithering().
2123:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2124:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_EnableDithering(XMC_CCU8_SLICE_t *const slice,
2125:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                     const bool period_dither,
2126:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                     const bool duty_dither,
2127:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****                                     const uint8_t spread);
2128:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2129:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2130:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2131:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2132:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
2133:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2134:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2135:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Disables dithering of PWM frequency and duty cycle, by clearing CC8yTC.DITHE bits.\n\n
2136:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This disables the Dither mode that was set in XMC_CCU8_SLICE_EnableDithering().
2137:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This API will not clear the dither compare value.
2138:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2139:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2140:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableDithering().
2141:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2142:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableDithering(XMC_CCU8_SLICE_t *const slice)
2143:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
2144:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableDithering:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice))
2145:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->TC &= ~((uint32_t) CCU8_CC8_TC_DITHE_Msk);
2146:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
2147:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2148:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2149:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2150:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2151:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
2152:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2153:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2154:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Enables the floating prescaler, by setting CC8yTC.FPE bit.\n\n
2155:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The prescaler divider starts with an initial value and increments upon every period match. It ke
2156:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * until a ceiling (prescaler compare value) is hit and thereafter rolls back to the original presc
2157:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * It is necessary to have programmed an initial divider value and a compare value before the featu
2158:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2159:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2160:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetFloatingPrescalerCompareValue()<BR>  XMC_CCU8_SLICE_DisableFloatingPrescaler(
2161:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_XMC_CCU8_SLICE_SetPrescaler().
2162:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2163:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_EnableFloatingPrescaler(XMC_CCU8_SLICE_t *const slice)
2164:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
2165:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(
2166:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->TC |= (uint32_t) CCU8_CC8_TC_FPE_Msk;
2167:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
2168:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2169:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2170:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2171:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2172:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
2173:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2174:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2175:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Disables the floating prescaler, by clearing CC8yTC.FPE bit.\n\n
2176:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This would return the prescaler to the normal mode.
2177:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The prescaler that would be applied is the value present in CC8yPSC.
2178:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2179:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   * \par<b>Related APIs:</b><br>
2180:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableFloatingPrescaler().
2181:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2182:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableFloatingPrescaler(XMC_CCU8_SLICE_t *const slice)
2183:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
2184:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice
2185:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->TC &= ~((uint32_t) CCU8_CC8_TC_FPE_Msk);
2186:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
2187:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2188:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2189:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2190:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param comp_val Dither compare value
2191:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                 Range: [0x0 to 0xF]
2192:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2193:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
2194:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2195:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2196:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Sets the dither spread/compare value, by setting CC8yDITS.DCVS bits.\n\n
2197:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This value is the cornerstone of PWM dithering feature. Dithering is applied/done when the value
2198:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * dithering counter is less than this compare/spread value. For all dithering counter values great
2199:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * the spread value, there is no dithering. After setting the value XMC_CCU8_EnableShadowTransfer()
2200:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  * called with appropriate mask.
2201:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2202:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   * \par<b>Related APIs:</b><br>
2203:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableDithering().
2204:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2205:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetDitherCompareValue(XMC_CCU8_SLICE_t *const slice, const uint
2206:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 117              	 .loc 1 2206 0
 118              	 .cfi_startproc
 119              	 
 120              	 
 121              	 
 122 0000 80B4     	 push {r7}
 123              	.LCFI12:
 124              	 .cfi_def_cfa_offset 4
 125              	 .cfi_offset 7,-4
 126 0002 83B0     	 sub sp,sp,#12
 127              	.LCFI13:
 128              	 .cfi_def_cfa_offset 16
 129 0004 00AF     	 add r7,sp,#0
 130              	.LCFI14:
 131              	 .cfi_def_cfa_register 7
 132 0006 7860     	 str r0,[r7,#4]
 133 0008 0B46     	 mov r3,r1
 134 000a FB70     	 strb r3,[r7,#3]
2207:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDitherCompareValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sl
2208:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDitherCompareValue:Invalid Dither compare value", (comp_val <= 15U)
2209:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2210:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->DITS = comp_val;
 135              	 .loc 1 2210 0
 136 000c FA78     	 ldrb r2,[r7,#3]
 137 000e 7B68     	 ldr r3,[r7,#4]
 138 0010 1A62     	 str r2,[r3,#32]
2211:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_ccu8.h **** }
 139              	 .loc 1 2211 0
 140 0012 0C37     	 adds r7,r7,#12
 141              	.LCFI15:
 142              	 .cfi_def_cfa_offset 4
 143 0014 BD46     	 mov sp,r7
 144              	.LCFI16:
 145              	 .cfi_def_cfa_register 13
 146              	 
 147 0016 5DF8047B 	 ldr r7,[sp],#4
 148              	.LCFI17:
 149              	 .cfi_restore 7
 150              	 .cfi_def_cfa_offset 0
 151 001a 7047     	 bx lr
 152              	 .cfi_endproc
 153              	.LFE158:
 155              	 .section .text.XMC_CCU8_lAssertReset,"ax",%progbits
 156              	 .align 2
 157              	 .thumb
 158              	 .thumb_func
 160              	XMC_CCU8_lAssertReset:
 161              	.LFB199:
 162              	 .file 2 "../Libraries/XMCLib/src/xmc_ccu8.c"
   1:../Libraries/XMCLib/src/xmc_ccu8.c **** /**
   2:../Libraries/XMCLib/src/xmc_ccu8.c ****  * @file xmc_ccu8.c
   3:../Libraries/XMCLib/src/xmc_ccu8.c ****  * @date 2016-01-12
   4:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
   5:../Libraries/XMCLib/src/xmc_ccu8.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_ccu8.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_ccu8.c ****  * XMClib v2.1.4 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
   9:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_ccu8.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_ccu8.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_ccu8.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_ccu8.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_ccu8.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 
  18:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_ccu8.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 
  21:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_ccu8.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_ccu8.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_ccu8.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_ccu8.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_ccu8.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_ccu8.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_ccu8.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_ccu8.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_ccu8.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_ccu8.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_ccu8.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_ccu8.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  36:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_ccu8.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  39:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  42:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 2015-06-20:
  43:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - Removed definition of GetDriverVersion API <br>
  44:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - Added XMC_CCU8_SLICE_LoadSelector() API, to select which compare register value has to be 
  45:../Libraries/XMCLib/src/xmc_ccu8.c ****  *       during external load event. 
  46:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  47:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 2015-07-24:
  48:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent() is updated to support XMC14 device. <br>
  49:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  50:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 2015-08-17:
  51:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - XMC_CCU8_SLICE_CHC_CONFIG_MASK is not applicable to XMC14 devices. <br>
  52:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - Start of prescaler XMC_CCU8_StartPrescaler() is invoked in XMC_CCU8_Init() API. <br>
  53:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - In XMC_CCU8_SLICE_CompareInit(), CHC register is updated according to the device. <br>
  54:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - Bug fix XMC_CCU8_SLICE_ConfigureEvent() during the level setting for XMC14 devices. <br>
  55:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - XMC_CCU8_EnableShadowTransfer() definition is removed, since the API is made as inline. <b
  56:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 
  57:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 2015-10-07:
  58:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - XMC_CCU8_SLICE_GetEvent() is made as inline.
  59:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - DOC updates for the newly added APIs.
  60:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  61:../Libraries/XMCLib/src/xmc_ccu8.c ****  * @endcond
  62:../Libraries/XMCLib/src/xmc_ccu8.c ****  */
  63:../Libraries/XMCLib/src/xmc_ccu8.c **** /**************************************************************************************************
  64:../Libraries/XMCLib/src/xmc_ccu8.c ****  * HEADER FILES
  65:../Libraries/XMCLib/src/xmc_ccu8.c ****  **************************************************************************************************
  66:../Libraries/XMCLib/src/xmc_ccu8.c **** #include "xmc_ccu8.h"
  67:../Libraries/XMCLib/src/xmc_ccu8.c **** 
  68:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU80)
  69:../Libraries/XMCLib/src/xmc_ccu8.c **** #include "xmc_scu.h"
  70:../Libraries/XMCLib/src/xmc_ccu8.c **** 
  71:../Libraries/XMCLib/src/xmc_ccu8.c **** /**************************************************************************************************
  72:../Libraries/XMCLib/src/xmc_ccu8.c ****  * MACROS
  73:../Libraries/XMCLib/src/xmc_ccu8.c ****  **************************************************************************************************
  74:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_NUM_SLICES_PER_MODULE          (4U)
  75:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_DITHER_PERIOD_MASK       (1U)
  76:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_DITHER_DUTYCYCLE_MASK    (2U)
  77:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK   (3U)
  78:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK  (1U)
  79:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK (3U)
  80:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU8V3) /* Defined for XMC1400 devices */
  81:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK  CCU8_CC8_INS1_EV0IS_Msk
  82:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
  83:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK  CCU8_CC8_INS_EV0IS_Msk
  84:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
  85:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_GIDLC_CLOCK_MASK               (15U)
  86:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_GCSS_SLICE0_MASK               (1U)
  87:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_GCSS_SLICE1_MASK               (16U)
  88:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_GCSS_SLICE2_MASK               (256U)
  89:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_GCSS_SLICE3_MASK               (4096U)
  90:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_DEAD_TIME_CONFIG_MASK    (63U)
  91:../Libraries/XMCLib/src/xmc_ccu8.c **** #if !defined(CCU8V3) /* Defined for all devices except XMC1400 */
  92:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHC_CONFIG_MASK          (20U)
  93:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
  94:../Libraries/XMCLib/src/xmc_ccu8.c **** 
  95:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_DTC_DIV(div) \
  96:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((div == XMC_CCU8_SLICE_DTC_DIV_1) || \
  97:../Libraries/XMCLib/src/xmc_ccu8.c ****      (div == XMC_CCU8_SLICE_DTC_DIV_2) || \
  98:../Libraries/XMCLib/src/xmc_ccu8.c ****      (div == XMC_CCU8_SLICE_DTC_DIV_4) || \
  99:../Libraries/XMCLib/src/xmc_ccu8.c ****      (div == XMC_CCU8_SLICE_DTC_DIV_8))
 100:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 101:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_CLOCK(clock) \
 102:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((clock == XMC_CCU8_CLOCK_SCU)        || \
 103:../Libraries/XMCLib/src/xmc_ccu8.c ****      (clock == XMC_CCU8_CLOCK_EXTERNAL_A) || \
 104:../Libraries/XMCLib/src/xmc_ccu8.c ****      (clock == XMC_CCU8_CLOCK_EXTERNAL_B) || \
 105:../Libraries/XMCLib/src/xmc_ccu8.c ****      (clock == XMC_CCU8_CLOCK_EXTERNAL_C))
 106:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 107:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_OUTPUT(out) \
 108:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((out == XMC_CCU8_SLICE_OUTPUT_0) || \
 109:../Libraries/XMCLib/src/xmc_ccu8.c ****      (out == XMC_CCU8_SLICE_OUTPUT_1) || \
 110:../Libraries/XMCLib/src/xmc_ccu8.c ****      (out == XMC_CCU8_SLICE_OUTPUT_2) || \
 111:../Libraries/XMCLib/src/xmc_ccu8.c ****      (out == XMC_CCU8_SLICE_OUTPUT_3))
 112:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 113:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_END_MODE(end_mode) \
 114:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((end_mode == XMC_CCU8_SLICE_END_MODE_TIMER_STOP) || \
 115:../Libraries/XMCLib/src/xmc_ccu8.c ****      (end_mode == XMC_CCU8_SLICE_END_MODE_TIMER_CLEAR) || \
 116:../Libraries/XMCLib/src/xmc_ccu8.c ****      (end_mode == XMC_CCU8_SLICE_END_MODE_TIMER_STOP_CLEAR))
 117:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 118:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_EVENT_ID(event_id) \
 119:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((event_id == XMC_CCU8_SLICE_EVENT_NONE)|| \
 120:../Libraries/XMCLib/src/xmc_ccu8.c ****      (event_id == XMC_CCU8_SLICE_EVENT_0)   || \
 121:../Libraries/XMCLib/src/xmc_ccu8.c ****      (event_id == XMC_CCU8_SLICE_EVENT_1)   || \
 122:../Libraries/XMCLib/src/xmc_ccu8.c ****      (event_id == XMC_CCU8_SLICE_EVENT_2))
 123:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 124:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_EDGE_SENSITIVITY(edge) \
 125:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((edge == XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_NONE)        || \
 126:../Libraries/XMCLib/src/xmc_ccu8.c ****      (edge == XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE) || \
 127:../Libraries/XMCLib/src/xmc_ccu8.c ****      (edge == XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE)|| \
 128:../Libraries/XMCLib/src/xmc_ccu8.c ****      (edge == XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_DUAL_EDGE))
 129:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 130:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_EVENT_FILTER(cycles) \
 131:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((cycles == XMC_CCU8_SLICE_EVENT_FILTER_DISABLED) || \
 132:../Libraries/XMCLib/src/xmc_ccu8.c ****      (cycles == XMC_CCU8_SLICE_EVENT_FILTER_3_CYCLES) || \
 133:../Libraries/XMCLib/src/xmc_ccu8.c ****      (cycles == XMC_CCU8_SLICE_EVENT_FILTER_5_CYCLES) || \
 134:../Libraries/XMCLib/src/xmc_ccu8.c ****      (cycles == XMC_CCU8_SLICE_EVENT_FILTER_7_CYCLES))
 135:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 136:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_CAP_TIMER_CLEAR_MODE(mode) \
 137:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((mode == XMC_CCU8_SLICE_TIMER_CLEAR_MODE_NEVER)   || \
 138:../Libraries/XMCLib/src/xmc_ccu8.c ****      (mode == XMC_CCU8_SLICE_TIMER_CLEAR_MODE_CAP_HIGH)|| \
 139:../Libraries/XMCLib/src/xmc_ccu8.c ****      (mode == XMC_CCU8_SLICE_TIMER_CLEAR_MODE_CAP_LOW) || \
 140:../Libraries/XMCLib/src/xmc_ccu8.c ****      (mode == XMC_CCU8_SLICE_TIMER_CLEAR_MODE_ALWAYS))
 141:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 142:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action) \
 143:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((mcs_action == XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR)      || \
 144:../Libraries/XMCLib/src/xmc_ccu8.c ****      (mcs_action == XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP) || \
 145:../Libraries/XMCLib/src/xmc_ccu8.c ****      (mcs_action == XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP_DIT))
 146:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 147:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_SR_ID(id) \
 148:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((id == XMC_CCU8_SLICE_SR_ID_0) || \
 149:../Libraries/XMCLib/src/xmc_ccu8.c ****      (id == XMC_CCU8_SLICE_SR_ID_1) || \
 150:../Libraries/XMCLib/src/xmc_ccu8.c ****      (id == XMC_CCU8_SLICE_SR_ID_2) || \
 151:../Libraries/XMCLib/src/xmc_ccu8.c ****      (id == XMC_CCU8_SLICE_SR_ID_3))
 152:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 153:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_MODULATION_CHANNEL(channel) \
 154:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((channel == XMC_CCU8_SLICE_MODULATION_CHANNEL_NONE) || \
 155:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_MODULATION_CHANNEL_1)    || \
 156:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_MODULATION_CHANNEL_2)    || \
 157:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2))
 158:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 159:../Libraries/XMCLib/src/xmc_ccu8.c **** #if((UC_SERIES == XMC13) || (UC_SERIES == XMC14))
 160:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_SLICE_STATUS(channel) \
 161:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((channel == XMC_CCU8_SLICE_STATUS_CHANNEL_1)       || \
 162:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_STATUS_CHANNEL_2)       || \
 163:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_STATUS_CHANNEL_1_AND_2) || \
 164:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_STATUS_CHANNEL_1_OR_2))
 165:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 166:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_SLICE_STATUS(channel) \
 167:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((channel == XMC_CCU8_SLICE_STATUS_CHANNEL_1)       || \
 168:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_STATUS_CHANNEL_2)       || \
 169:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_STATUS_CHANNEL_1_AND_2))
 170:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 171:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 172:../Libraries/XMCLib/src/xmc_ccu8.c **** /**************************************************************************************************
 173:../Libraries/XMCLib/src/xmc_ccu8.c ****  * LOCAL ROUTINES
 174:../Libraries/XMCLib/src/xmc_ccu8.c ****  **************************************************************************************************
 175:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 176:../Libraries/XMCLib/src/xmc_ccu8.c **** __STATIC_INLINE void XMC_CCU8_lAssertReset(const XMC_CCU8_MODULE_t *const module)
 177:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 163              	 .loc 2 177 0
 164              	 .cfi_startproc
 165              	 
 166              	 
 167 0000 80B5     	 push {r7,lr}
 168              	.LCFI18:
 169              	 .cfi_def_cfa_offset 8
 170              	 .cfi_offset 7,-8
 171              	 .cfi_offset 14,-4
 172 0002 82B0     	 sub sp,sp,#8
 173              	.LCFI19:
 174              	 .cfi_def_cfa_offset 16
 175 0004 00AF     	 add r7,sp,#0
 176              	.LCFI20:
 177              	 .cfi_def_cfa_register 7
 178 0006 7860     	 str r0,[r7,#4]
 178:../Libraries/XMCLib/src/xmc_ccu8.c ****   switch ((uint32_t)module)
 179              	 .loc 2 178 0
 180 0008 7B68     	 ldr r3,[r7,#4]
 181 000a 094A     	 ldr r2,.L9
 182 000c 9342     	 cmp r3,r2
 183 000e 03D0     	 beq .L6
 184 0010 084A     	 ldr r2,.L9+4
 185 0012 9342     	 cmp r3,r2
 186 0014 04D0     	 beq .L7
 179:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 180:../Libraries/XMCLib/src/xmc_ccu8.c ****     case (uint32_t)CCU80:
 181:../Libraries/XMCLib/src/xmc_ccu8.c ****       XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 182:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 183:../Libraries/XMCLib/src/xmc_ccu8.c ****       
 184:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU81)
 185:../Libraries/XMCLib/src/xmc_ccu8.c ****     case (uint32_t)CCU81:
 186:../Libraries/XMCLib/src/xmc_ccu8.c ****       XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 187:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 188:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 189:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 190:../Libraries/XMCLib/src/xmc_ccu8.c ****     default:
 191:../Libraries/XMCLib/src/xmc_ccu8.c ****       XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
 192:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;   
 187              	 .loc 2 192 0
 188 0016 08E0     	 b .L4
 189              	.L6:
 181:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 190              	 .loc 2 181 0
 191 0018 8020     	 movs r0,#128
 192 001a FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 182:../Libraries/XMCLib/src/xmc_ccu8.c ****       
 193              	 .loc 2 182 0
 194 001e 04E0     	 b .L4
 195              	.L7:
 186:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 196              	 .loc 2 186 0
 197 0020 4FF48070 	 mov r0,#256
 198 0024 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 187:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 199              	 .loc 2 187 0
 200 0028 00BF     	 nop
 201              	.L4:
 193:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 194:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 202              	 .loc 2 194 0
 203 002a 0837     	 adds r7,r7,#8
 204              	.LCFI21:
 205              	 .cfi_def_cfa_offset 8
 206 002c BD46     	 mov sp,r7
 207              	.LCFI22:
 208              	 .cfi_def_cfa_register 13
 209              	 
 210 002e 80BD     	 pop {r7,pc}
 211              	.L10:
 212              	 .align 2
 213              	.L9:
 214 0030 00000240 	 .word 1073872896
 215 0034 00400240 	 .word 1073889280
 216              	 .cfi_endproc
 217              	.LFE199:
 219              	 .section .text.XMC_CCU8_lDeassertReset,"ax",%progbits
 220              	 .align 2
 221              	 .thumb
 222              	 .thumb_func
 224              	XMC_CCU8_lDeassertReset:
 225              	.LFB200:
 195:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 196:../Libraries/XMCLib/src/xmc_ccu8.c **** __STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
 197:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 226              	 .loc 2 197 0
 227              	 .cfi_startproc
 228              	 
 229              	 
 230 0000 80B5     	 push {r7,lr}
 231              	.LCFI23:
 232              	 .cfi_def_cfa_offset 8
 233              	 .cfi_offset 7,-8
 234              	 .cfi_offset 14,-4
 235 0002 82B0     	 sub sp,sp,#8
 236              	.LCFI24:
 237              	 .cfi_def_cfa_offset 16
 238 0004 00AF     	 add r7,sp,#0
 239              	.LCFI25:
 240              	 .cfi_def_cfa_register 7
 241 0006 7860     	 str r0,[r7,#4]
 198:../Libraries/XMCLib/src/xmc_ccu8.c ****   switch ((uint32_t)module)
 242              	 .loc 2 198 0
 243 0008 7B68     	 ldr r3,[r7,#4]
 244 000a 094A     	 ldr r2,.L16
 245 000c 9342     	 cmp r3,r2
 246 000e 03D0     	 beq .L13
 247 0010 084A     	 ldr r2,.L16+4
 248 0012 9342     	 cmp r3,r2
 249 0014 04D0     	 beq .L14
 199:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 200:../Libraries/XMCLib/src/xmc_ccu8.c ****     case (uint32_t)CCU80:
 201:../Libraries/XMCLib/src/xmc_ccu8.c ****       XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 202:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 203:../Libraries/XMCLib/src/xmc_ccu8.c ****       
 204:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU81)
 205:../Libraries/XMCLib/src/xmc_ccu8.c ****     case (uint32_t)CCU81:
 206:../Libraries/XMCLib/src/xmc_ccu8.c ****       XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 207:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 208:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 209:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 210:../Libraries/XMCLib/src/xmc_ccu8.c ****     default:
 211:../Libraries/XMCLib/src/xmc_ccu8.c ****       XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
 212:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;   
 250              	 .loc 2 212 0
 251 0016 08E0     	 b .L11
 252              	.L13:
 201:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 253              	 .loc 2 201 0
 254 0018 8020     	 movs r0,#128
 255 001a FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 202:../Libraries/XMCLib/src/xmc_ccu8.c ****       
 256              	 .loc 2 202 0
 257 001e 04E0     	 b .L11
 258              	.L14:
 206:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 259              	 .loc 2 206 0
 260 0020 4FF48070 	 mov r0,#256
 261 0024 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 207:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 262              	 .loc 2 207 0
 263 0028 00BF     	 nop
 264              	.L11:
 213:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 214:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 265              	 .loc 2 214 0
 266 002a 0837     	 adds r7,r7,#8
 267              	.LCFI26:
 268              	 .cfi_def_cfa_offset 8
 269 002c BD46     	 mov sp,r7
 270              	.LCFI27:
 271              	 .cfi_def_cfa_register 13
 272              	 
 273 002e 80BD     	 pop {r7,pc}
 274              	.L17:
 275              	 .align 2
 276              	.L16:
 277 0030 00000240 	 .word 1073872896
 278 0034 00400240 	 .word 1073889280
 279              	 .cfi_endproc
 280              	.LFE200:
 282              	 .section .text.XMC_CCU8_lGateClock,"ax",%progbits
 283              	 .align 2
 284              	 .thumb
 285              	 .thumb_func
 287              	XMC_CCU8_lGateClock:
 288              	.LFB201:
 215:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 216:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 217:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CLOCK_GATING_SUPPORTED)
 218:../Libraries/XMCLib/src/xmc_ccu8.c **** __STATIC_INLINE void XMC_CCU8_lGateClock(XMC_CCU8_MODULE_t *const module)
 219:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 289              	 .loc 2 219 0
 290              	 .cfi_startproc
 291              	 
 292              	 
 293 0000 80B5     	 push {r7,lr}
 294              	.LCFI28:
 295              	 .cfi_def_cfa_offset 8
 296              	 .cfi_offset 7,-8
 297              	 .cfi_offset 14,-4
 298 0002 82B0     	 sub sp,sp,#8
 299              	.LCFI29:
 300              	 .cfi_def_cfa_offset 16
 301 0004 00AF     	 add r7,sp,#0
 302              	.LCFI30:
 303              	 .cfi_def_cfa_register 7
 304 0006 7860     	 str r0,[r7,#4]
 220:../Libraries/XMCLib/src/xmc_ccu8.c ****   switch ((uint32_t)module)
 305              	 .loc 2 220 0
 306 0008 7B68     	 ldr r3,[r7,#4]
 307 000a 094A     	 ldr r2,.L23
 308 000c 9342     	 cmp r3,r2
 309 000e 03D0     	 beq .L20
 310 0010 084A     	 ldr r2,.L23+4
 311 0012 9342     	 cmp r3,r2
 312 0014 04D0     	 beq .L21
 221:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 222:../Libraries/XMCLib/src/xmc_ccu8.c ****     case (uint32_t)CCU80:
 223:../Libraries/XMCLib/src/xmc_ccu8.c ****       XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
 224:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 225:../Libraries/XMCLib/src/xmc_ccu8.c ****       
 226:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU81)      
 227:../Libraries/XMCLib/src/xmc_ccu8.c ****     case (uint32_t)CCU81:
 228:../Libraries/XMCLib/src/xmc_ccu8.c ****       XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU81);
 229:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 230:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 231:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 232:../Libraries/XMCLib/src/xmc_ccu8.c ****     default:
 233:../Libraries/XMCLib/src/xmc_ccu8.c ****       XMC_ASSERT("XMC_CCU8_lGateClock:Invalid Module Pointer", 0);
 234:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;   
 313              	 .loc 2 234 0
 314 0016 08E0     	 b .L18
 315              	.L20:
 223:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 316              	 .loc 2 223 0
 317 0018 8020     	 movs r0,#128
 318 001a FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 224:../Libraries/XMCLib/src/xmc_ccu8.c ****       
 319              	 .loc 2 224 0
 320 001e 04E0     	 b .L18
 321              	.L21:
 228:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 322              	 .loc 2 228 0
 323 0020 4FF48070 	 mov r0,#256
 324 0024 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 229:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 325              	 .loc 2 229 0
 326 0028 00BF     	 nop
 327              	.L18:
 235:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 236:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 328              	 .loc 2 236 0
 329 002a 0837     	 adds r7,r7,#8
 330              	.LCFI31:
 331              	 .cfi_def_cfa_offset 8
 332 002c BD46     	 mov sp,r7
 333              	.LCFI32:
 334              	 .cfi_def_cfa_register 13
 335              	 
 336 002e 80BD     	 pop {r7,pc}
 337              	.L24:
 338              	 .align 2
 339              	.L23:
 340 0030 00000240 	 .word 1073872896
 341 0034 00400240 	 .word 1073889280
 342              	 .cfi_endproc
 343              	.LFE201:
 345              	 .section .text.XMC_CCU8_lUngateClock,"ax",%progbits
 346              	 .align 2
 347              	 .thumb
 348              	 .thumb_func
 350              	XMC_CCU8_lUngateClock:
 351              	.LFB202:
 237:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 238:../Libraries/XMCLib/src/xmc_ccu8.c **** __STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
 239:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 352              	 .loc 2 239 0
 353              	 .cfi_startproc
 354              	 
 355              	 
 356 0000 80B5     	 push {r7,lr}
 357              	.LCFI33:
 358              	 .cfi_def_cfa_offset 8
 359              	 .cfi_offset 7,-8
 360              	 .cfi_offset 14,-4
 361 0002 82B0     	 sub sp,sp,#8
 362              	.LCFI34:
 363              	 .cfi_def_cfa_offset 16
 364 0004 00AF     	 add r7,sp,#0
 365              	.LCFI35:
 366              	 .cfi_def_cfa_register 7
 367 0006 7860     	 str r0,[r7,#4]
 240:../Libraries/XMCLib/src/xmc_ccu8.c ****   switch ((uint32_t)module)
 368              	 .loc 2 240 0
 369 0008 7B68     	 ldr r3,[r7,#4]
 370 000a 094A     	 ldr r2,.L30
 371 000c 9342     	 cmp r3,r2
 372 000e 03D0     	 beq .L27
 373 0010 084A     	 ldr r2,.L30+4
 374 0012 9342     	 cmp r3,r2
 375 0014 04D0     	 beq .L28
 241:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 242:../Libraries/XMCLib/src/xmc_ccu8.c ****     case (uint32_t)CCU80:
 243:../Libraries/XMCLib/src/xmc_ccu8.c ****       XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
 244:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 245:../Libraries/XMCLib/src/xmc_ccu8.c ****       
 246:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU81)      
 247:../Libraries/XMCLib/src/xmc_ccu8.c ****     case (uint32_t)CCU81:
 248:../Libraries/XMCLib/src/xmc_ccu8.c ****       XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU81);
 249:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 250:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 251:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 252:../Libraries/XMCLib/src/xmc_ccu8.c ****     default:
 253:../Libraries/XMCLib/src/xmc_ccu8.c ****       XMC_ASSERT("XMC_CCU8_lUngateClock:Invalid Module Pointer", 0);
 254:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;   
 376              	 .loc 2 254 0
 377 0016 08E0     	 b .L25
 378              	.L27:
 243:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 379              	 .loc 2 243 0
 380 0018 8020     	 movs r0,#128
 381 001a FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 244:../Libraries/XMCLib/src/xmc_ccu8.c ****       
 382              	 .loc 2 244 0
 383 001e 04E0     	 b .L25
 384              	.L28:
 248:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 385              	 .loc 2 248 0
 386 0020 4FF48070 	 mov r0,#256
 387 0024 FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 249:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 388              	 .loc 2 249 0
 389 0028 00BF     	 nop
 390              	.L25:
 255:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 256:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 391              	 .loc 2 256 0
 392 002a 0837     	 adds r7,r7,#8
 393              	.LCFI36:
 394              	 .cfi_def_cfa_offset 8
 395 002c BD46     	 mov sp,r7
 396              	.LCFI37:
 397              	 .cfi_def_cfa_register 13
 398              	 
 399 002e 80BD     	 pop {r7,pc}
 400              	.L31:
 401              	 .align 2
 402              	.L30:
 403 0030 00000240 	 .word 1073872896
 404 0034 00400240 	 .word 1073889280
 405              	 .cfi_endproc
 406              	.LFE202:
 408              	 .section .text.XMC_CCU8_EnableModule,"ax",%progbits
 409              	 .align 2
 410              	 .global XMC_CCU8_EnableModule
 411              	 .thumb
 412              	 .thumb_func
 414              	XMC_CCU8_EnableModule:
 415              	.LFB203:
 257:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 258:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 259:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined (XMC_ASSERT_ENABLE)
 260:../Libraries/XMCLib/src/xmc_ccu8.c **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsInputvalid(XMC_CCU8_SLICE_INPUT_t input)
 261:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 262:../Libraries/XMCLib/src/xmc_ccu8.c **** #if (UC_SERIES == XMC14)
 263:../Libraries/XMCLib/src/xmc_ccu8.c ****   return (input < 48U);
 264:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 265:../Libraries/XMCLib/src/xmc_ccu8.c ****   return (input < 16U);
 266:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 267:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 268:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 269:../Libraries/XMCLib/src/xmc_ccu8.c **** /**************************************************************************************************
 270:../Libraries/XMCLib/src/xmc_ccu8.c ****  * API IMPLEMENTATION
 271:../Libraries/XMCLib/src/xmc_ccu8.c ****  **************************************************************************************************
 272:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 273:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to set the CCU8 module as active and enable the clock  */
 274:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
 275:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 416              	 .loc 2 275 0
 417              	 .cfi_startproc
 418              	 
 419              	 
 420 0000 80B5     	 push {r7,lr}
 421              	.LCFI38:
 422              	 .cfi_def_cfa_offset 8
 423              	 .cfi_offset 7,-8
 424              	 .cfi_offset 14,-4
 425 0002 82B0     	 sub sp,sp,#8
 426              	.LCFI39:
 427              	 .cfi_def_cfa_offset 16
 428 0004 00AF     	 add r7,sp,#0
 429              	.LCFI40:
 430              	 .cfi_def_cfa_register 7
 431 0006 7860     	 str r0,[r7,#4]
 276:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
 277:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 278:../Libraries/XMCLib/src/xmc_ccu8.c **** #if (UC_FAMILY == XMC4)
 279:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Enable CCU8 module clock */
 280:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 432              	 .loc 2 280 0
 433 0008 1020     	 movs r0,#16
 434 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_EnableClock
 281:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 282:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 283:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CLOCK_GATING_SUPPORTED)
 284:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_lUngateClock(module);
 435              	 .loc 2 284 0
 436 000e 7868     	 ldr r0,[r7,#4]
 437 0010 FFF7FEFF 	 bl XMC_CCU8_lUngateClock
 285:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 286:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 287:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 288:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_lDeassertReset(module);
 438              	 .loc 2 288 0
 439 0014 7868     	 ldr r0,[r7,#4]
 440 0016 FFF7FEFF 	 bl XMC_CCU8_lDeassertReset
 289:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 290:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 441              	 .loc 2 290 0
 442 001a 0837     	 adds r7,r7,#8
 443              	.LCFI41:
 444              	 .cfi_def_cfa_offset 8
 445 001c BD46     	 mov sp,r7
 446              	.LCFI42:
 447              	 .cfi_def_cfa_register 13
 448              	 
 449 001e 80BD     	 pop {r7,pc}
 450              	 .cfi_endproc
 451              	.LFE203:
 453              	 .section .text.XMC_CCU8_DisableModule,"ax",%progbits
 454              	 .align 2
 455              	 .global XMC_CCU8_DisableModule
 456              	 .thumb
 457              	 .thumb_func
 459              	XMC_CCU8_DisableModule:
 460              	.LFB204:
 291:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 292:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to set the CCU8 module as idle and disable the clock  */
 293:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_DisableModule(XMC_CCU8_MODULE_t *const module)
 294:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 461              	 .loc 2 294 0
 462              	 .cfi_startproc
 463              	 
 464              	 
 465 0000 80B5     	 push {r7,lr}
 466              	.LCFI43:
 467              	 .cfi_def_cfa_offset 8
 468              	 .cfi_offset 7,-8
 469              	 .cfi_offset 14,-4
 470 0002 82B0     	 sub sp,sp,#8
 471              	.LCFI44:
 472              	 .cfi_def_cfa_offset 16
 473 0004 00AF     	 add r7,sp,#0
 474              	.LCFI45:
 475              	 .cfi_def_cfa_register 7
 476 0006 7860     	 str r0,[r7,#4]
 295:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_DisableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
 296:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 297:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 298:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_lAssertReset(module);
 477              	 .loc 2 298 0
 478 0008 7868     	 ldr r0,[r7,#4]
 479 000a FFF7FEFF 	 bl XMC_CCU8_lAssertReset
 299:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 300:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 301:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CLOCK_GATING_SUPPORTED)
 302:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_lGateClock(module);
 480              	 .loc 2 302 0
 481 000e 7868     	 ldr r0,[r7,#4]
 482 0010 FFF7FEFF 	 bl XMC_CCU8_lGateClock
 303:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 304:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 483              	 .loc 2 304 0
 484 0014 0837     	 adds r7,r7,#8
 485              	.LCFI46:
 486              	 .cfi_def_cfa_offset 8
 487 0016 BD46     	 mov sp,r7
 488              	.LCFI47:
 489              	 .cfi_def_cfa_register 13
 490              	 
 491 0018 80BD     	 pop {r7,pc}
 492              	 .cfi_endproc
 493              	.LFE204:
 495 001a 00BF     	 .section .text.XMC_CCU8_Init,"ax",%progbits
 496              	 .align 2
 497              	 .global XMC_CCU8_Init
 498              	 .thumb
 499              	 .thumb_func
 501              	XMC_CCU8_Init:
 502              	.LFB205:
 305:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 306:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to initialize CCU8 global resources  */
 307:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
 308:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 503              	 .loc 2 308 0
 504              	 .cfi_startproc
 505              	 
 506              	 
 507 0000 80B5     	 push {r7,lr}
 508              	.LCFI48:
 509              	 .cfi_def_cfa_offset 8
 510              	 .cfi_offset 7,-8
 511              	 .cfi_offset 14,-4
 512 0002 84B0     	 sub sp,sp,#16
 513              	.LCFI49:
 514              	 .cfi_def_cfa_offset 24
 515 0004 00AF     	 add r7,sp,#0
 516              	.LCFI50:
 517              	 .cfi_def_cfa_register 7
 518 0006 7860     	 str r0,[r7,#4]
 519 0008 0B46     	 mov r3,r1
 520 000a FB70     	 strb r3,[r7,#3]
 309:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t gctrl;
 310:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 311:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
 312:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));
 313:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 314:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Enable CCU8 module */
 315:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_EnableModule(module);
 521              	 .loc 2 315 0
 522 000c 7868     	 ldr r0,[r7,#4]
 523 000e FFF7FEFF 	 bl XMC_CCU8_EnableModule
 316:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Start the prescaler */
 317:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_StartPrescaler(module);
 524              	 .loc 2 317 0
 525 0012 7868     	 ldr r0,[r7,#4]
 526 0014 FFF7FEFF 	 bl XMC_CCU8_StartPrescaler
 318:../Libraries/XMCLib/src/xmc_ccu8.c ****   
 319:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl = module->GCTRL;
 527              	 .loc 2 319 0
 528 0018 7B68     	 ldr r3,[r7,#4]
 529 001a 1B68     	 ldr r3,[r3]
 530 001c FB60     	 str r3,[r7,#12]
 320:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 531              	 .loc 2 320 0
 532 001e FB68     	 ldr r3,[r7,#12]
 533 0020 23F44043 	 bic r3,r3,#49152
 534 0024 FB60     	 str r3,[r7,#12]
 321:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 535              	 .loc 2 321 0
 536 0026 FB78     	 ldrb r3,[r7,#3]
 537 0028 9B03     	 lsls r3,r3,#14
 538 002a FA68     	 ldr r2,[r7,#12]
 539 002c 1343     	 orrs r3,r3,r2
 540 002e FB60     	 str r3,[r7,#12]
 322:../Libraries/XMCLib/src/xmc_ccu8.c ****   
 323:../Libraries/XMCLib/src/xmc_ccu8.c ****   module->GCTRL = gctrl;
 541              	 .loc 2 323 0
 542 0030 7B68     	 ldr r3,[r7,#4]
 543 0032 FA68     	 ldr r2,[r7,#12]
 544 0034 1A60     	 str r2,[r3]
 324:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 545              	 .loc 2 324 0
 546 0036 1037     	 adds r7,r7,#16
 547              	.LCFI51:
 548              	 .cfi_def_cfa_offset 8
 549 0038 BD46     	 mov sp,r7
 550              	.LCFI52:
 551              	 .cfi_def_cfa_register 13
 552              	 
 553 003a 80BD     	 pop {r7,pc}
 554              	 .cfi_endproc
 555              	.LFE205:
 557              	 .section .text.XMC_CCU8_SetModuleClock,"ax",%progbits
 558              	 .align 2
 559              	 .global XMC_CCU8_SetModuleClock
 560              	 .thumb
 561              	 .thumb_func
 563              	XMC_CCU8_SetModuleClock:
 564              	.LFB206:
 325:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 326:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to select CCU8 module clock */
 327:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SetModuleClock(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_CLOCK_t clock)
 328:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 565              	 .loc 2 328 0
 566              	 .cfi_startproc
 567              	 
 568              	 
 569              	 
 570 0000 80B4     	 push {r7}
 571              	.LCFI53:
 572              	 .cfi_def_cfa_offset 4
 573              	 .cfi_offset 7,-4
 574 0002 85B0     	 sub sp,sp,#20
 575              	.LCFI54:
 576              	 .cfi_def_cfa_offset 24
 577 0004 00AF     	 add r7,sp,#0
 578              	.LCFI55:
 579              	 .cfi_def_cfa_register 7
 580 0006 7860     	 str r0,[r7,#4]
 581 0008 0B46     	 mov r3,r1
 582 000a FB70     	 strb r3,[r7,#3]
 329:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t gctrl;
 330:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 331:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SetModuleClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
 332:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SetModuleClock:Invalid Module Clock", XMC_CCU8_SLICE_CHECK_CLOCK(clock));
 333:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 334:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl = module->GCTRL;
 583              	 .loc 2 334 0
 584 000c 7B68     	 ldr r3,[r7,#4]
 585 000e 1B68     	 ldr r3,[r3]
 586 0010 FB60     	 str r3,[r7,#12]
 335:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl &= ~((uint32_t) CCU8_GCTRL_PCIS_Msk);
 587              	 .loc 2 335 0
 588 0012 FB68     	 ldr r3,[r7,#12]
 589 0014 23F03003 	 bic r3,r3,#48
 590 0018 FB60     	 str r3,[r7,#12]
 336:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl |= ((uint32_t) clock) << CCU8_GCTRL_PCIS_Pos;
 591              	 .loc 2 336 0
 592 001a FB78     	 ldrb r3,[r7,#3]
 593 001c 1B01     	 lsls r3,r3,#4
 594 001e FA68     	 ldr r2,[r7,#12]
 595 0020 1343     	 orrs r3,r3,r2
 596 0022 FB60     	 str r3,[r7,#12]
 337:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 338:../Libraries/XMCLib/src/xmc_ccu8.c ****   module->GCTRL = gctrl;
 597              	 .loc 2 338 0
 598 0024 7B68     	 ldr r3,[r7,#4]
 599 0026 FA68     	 ldr r2,[r7,#12]
 600 0028 1A60     	 str r2,[r3]
 339:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 601              	 .loc 2 339 0
 602 002a 1437     	 adds r7,r7,#20
 603              	.LCFI56:
 604              	 .cfi_def_cfa_offset 4
 605 002c BD46     	 mov sp,r7
 606              	.LCFI57:
 607              	 .cfi_def_cfa_register 13
 608              	 
 609 002e 5DF8047B 	 ldr r7,[sp],#4
 610              	.LCFI58:
 611              	 .cfi_restore 7
 612              	 .cfi_def_cfa_offset 0
 613 0032 7047     	 bx lr
 614              	 .cfi_endproc
 615              	.LFE206:
 617              	 .section .text.XMC_CCU8_SLICE_CompareInit,"ax",%progbits
 618              	 .align 2
 619              	 .global XMC_CCU8_SLICE_CompareInit
 620              	 .thumb
 621              	 .thumb_func
 623              	XMC_CCU8_SLICE_CompareInit:
 624              	.LFB207:
 340:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 341:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure CC8 Slice in Compare mode */
 342:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
 343:../Libraries/XMCLib/src/xmc_ccu8.c ****                                 const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
 344:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 625              	 .loc 2 344 0
 626              	 .cfi_startproc
 627              	 
 628              	 
 629 0000 80B5     	 push {r7,lr}
 630              	.LCFI59:
 631              	 .cfi_def_cfa_offset 8
 632              	 .cfi_offset 7,-8
 633              	 .cfi_offset 14,-4
 634 0002 82B0     	 sub sp,sp,#8
 635              	.LCFI60:
 636              	 .cfi_def_cfa_offset 16
 637 0004 00AF     	 add r7,sp,#0
 638              	.LCFI61:
 639              	 .cfi_def_cfa_register 7
 640 0006 7860     	 str r0,[r7,#4]
 641 0008 3960     	 str r1,[r7]
 345:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 346:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
 347:../Libraries/XMCLib/src/xmc_ccu8.c ****              (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
 348:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Stops the timer */
 349:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_SLICE_StopTimer(slice);
 642              	 .loc 2 349 0
 643 000a 7868     	 ldr r0,[r7,#4]
 644 000c FFF7FEFF 	 bl XMC_CCU8_SLICE_StopTimer
 350:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program the timer mode */
 351:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = compare_init->tc;
 645              	 .loc 2 351 0
 646 0010 3B68     	 ldr r3,[r7]
 647 0012 1A68     	 ldr r2,[r3]
 648 0014 7B68     	 ldr r3,[r7,#4]
 649 0016 5A61     	 str r2,[r3,#20]
 352:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Enable the timer concatenation */
 353:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 650              	 .loc 2 353 0
 651 0018 3B68     	 ldr r3,[r7]
 652 001a 5B7B     	 ldrb r3,[r3,#13]
 653 001c C3F30013 	 ubfx r3,r3,#4,#1
 654 0020 DBB2     	 uxtb r3,r3
 655 0022 1A05     	 lsls r2,r3,#20
 656 0024 7B68     	 ldr r3,[r7,#4]
 657 0026 5A60     	 str r2,[r3,#4]
 354:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program initial prescaler divider value */
 355:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->PSC = (uint32_t) compare_init->prescaler_initval;
 658              	 .loc 2 355 0
 659 0028 3B68     	 ldr r3,[r7]
 660 002a 1B7B     	 ldrb r3,[r3,#12]
 661 002c C3F30303 	 ubfx r3,r3,#0,#4
 662 0030 DBB2     	 uxtb r3,r3
 663 0032 1A46     	 mov r2,r3
 664 0034 7B68     	 ldr r3,[r7,#4]
 665 0036 5A62     	 str r2,[r3,#36]
 356:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program floating prescaler compare value */
 357:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->FPCS = (uint32_t) compare_init->float_limit;
 666              	 .loc 2 357 0
 667 0038 3B68     	 ldr r3,[r7]
 668 003a 1B7B     	 ldrb r3,[r3,#12]
 669 003c C3F30313 	 ubfx r3,r3,#4,#4
 670 0040 DBB2     	 uxtb r3,r3
 671 0042 1A46     	 mov r2,r3
 672 0044 7B68     	 ldr r3,[r7,#4]
 673 0046 DA62     	 str r2,[r3,#44]
 358:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program the dither compare value */
 359:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DITS = (uint32_t) compare_init->dither_limit;
 674              	 .loc 2 359 0
 675 0048 3B68     	 ldr r3,[r7]
 676 004a 5B7B     	 ldrb r3,[r3,#13]
 677 004c C3F30303 	 ubfx r3,r3,#0,#4
 678 0050 DBB2     	 uxtb r3,r3
 679 0052 1A46     	 mov r2,r3
 680 0054 7B68     	 ldr r3,[r7,#4]
 681 0056 1A62     	 str r2,[r3,#32]
 360:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program timer output passive level */
 361:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->PSL = (uint32_t) compare_init->psl;
 682              	 .loc 2 361 0
 683 0058 3B68     	 ldr r3,[r7]
 684 005a 5A68     	 ldr r2,[r3,#4]
 685 005c 7B68     	 ldr r3,[r7,#4]
 686 005e 9A61     	 str r2,[r3,#24]
 362:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Asymmetric PWM and Slice output routing configuration */
 363:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU8V3) /* Defined for XMC1400 devices only */
 364:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CHC = (uint32_t) compare_init->chc;
 365:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 366:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 687              	 .loc 2 366 0
 688 0060 3B68     	 ldr r3,[r7]
 689 0062 9B68     	 ldr r3,[r3,#8]
 690 0064 83F01402 	 eor r2,r3,#20
 691 0068 7B68     	 ldr r3,[r7,#4]
 692 006a 9A64     	 str r2,[r3,#72]
 367:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 368:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 693              	 .loc 2 368 0
 694 006c 0837     	 adds r7,r7,#8
 695              	.LCFI62:
 696              	 .cfi_def_cfa_offset 8
 697 006e BD46     	 mov sp,r7
 698              	.LCFI63:
 699              	 .cfi_def_cfa_register 13
 700              	 
 701 0070 80BD     	 pop {r7,pc}
 702              	 .cfi_endproc
 703              	.LFE207:
 705 0072 00BF     	 .section .text.XMC_CCU8_SLICE_CaptureInit,"ax",%progbits
 706              	 .align 2
 707              	 .global XMC_CCU8_SLICE_CaptureInit
 708              	 .thumb
 709              	 .thumb_func
 711              	XMC_CCU8_SLICE_CaptureInit:
 712              	.LFB208:
 369:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 370:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure CC8 Slice in Capture mode */
 371:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_CaptureInit(XMC_CCU8_SLICE_t *const slice, 
 372:../Libraries/XMCLib/src/xmc_ccu8.c ****                                 const XMC_CCU8_SLICE_CAPTURE_CONFIG_t *const capture_init)
 373:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 713              	 .loc 2 373 0
 714              	 .cfi_startproc
 715              	 
 716              	 
 717 0000 80B5     	 push {r7,lr}
 718              	.LCFI64:
 719              	 .cfi_def_cfa_offset 8
 720              	 .cfi_offset 7,-8
 721              	 .cfi_offset 14,-4
 722 0002 82B0     	 sub sp,sp,#8
 723              	.LCFI65:
 724              	 .cfi_def_cfa_offset 16
 725 0004 00AF     	 add r7,sp,#0
 726              	.LCFI66:
 727              	 .cfi_def_cfa_register 7
 728 0006 7860     	 str r0,[r7,#4]
 729 0008 3960     	 str r1,[r7]
 374:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_CaptureInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 375:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_CaptureInit:Capture Init Pointer is NULL", 
 376:../Libraries/XMCLib/src/xmc_ccu8.c ****              (XMC_CCU8_SLICE_CAPTURE_CONFIG_t *) NULL != capture_init);
 377:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Stops the timer */
 378:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_SLICE_StopTimer(slice);
 730              	 .loc 2 378 0
 731 000a 7868     	 ldr r0,[r7,#4]
 732 000c FFF7FEFF 	 bl XMC_CCU8_SLICE_StopTimer
 379:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Capture mode configuration */
 380:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = capture_init->tc;
 733              	 .loc 2 380 0
 734 0010 3B68     	 ldr r3,[r7]
 735 0012 1A68     	 ldr r2,[r3]
 736 0014 7B68     	 ldr r3,[r7,#4]
 737 0016 5A61     	 str r2,[r3,#20]
 381:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Enable the timer concatenation */
 382:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = (uint32_t)capture_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 738              	 .loc 2 382 0
 739 0018 3B68     	 ldr r3,[r7]
 740 001a 5B79     	 ldrb r3,[r3,#5]
 741 001c C3F30003 	 ubfx r3,r3,#0,#1
 742 0020 DBB2     	 uxtb r3,r3
 743 0022 1A05     	 lsls r2,r3,#20
 744 0024 7B68     	 ldr r3,[r7,#4]
 745 0026 5A60     	 str r2,[r3,#4]
 383:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program floating prescaler compare value */
 384:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->FPCS = (uint32_t) capture_init->float_limit;
 746              	 .loc 2 384 0
 747 0028 3B68     	 ldr r3,[r7]
 748 002a 1B79     	 ldrb r3,[r3,#4]
 749 002c C3F30313 	 ubfx r3,r3,#4,#4
 750 0030 DBB2     	 uxtb r3,r3
 751 0032 1A46     	 mov r2,r3
 752 0034 7B68     	 ldr r3,[r7,#4]
 753 0036 DA62     	 str r2,[r3,#44]
 385:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program initial prescaler divider value */
 386:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->PSC = (uint32_t) capture_init->prescaler_initval;
 754              	 .loc 2 386 0
 755 0038 3B68     	 ldr r3,[r7]
 756 003a 1B79     	 ldrb r3,[r3,#4]
 757 003c C3F30303 	 ubfx r3,r3,#0,#4
 758 0040 DBB2     	 uxtb r3,r3
 759 0042 1A46     	 mov r2,r3
 760 0044 7B68     	 ldr r3,[r7,#4]
 761 0046 5A62     	 str r2,[r3,#36]
 387:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 762              	 .loc 2 387 0
 763 0048 0837     	 adds r7,r7,#8
 764              	.LCFI67:
 765              	 .cfi_def_cfa_offset 8
 766 004a BD46     	 mov sp,r7
 767              	.LCFI68:
 768              	 .cfi_def_cfa_register 13
 769              	 
 770 004c 80BD     	 pop {r7,pc}
 771              	 .cfi_endproc
 772              	.LFE208:
 774 004e 00BF     	 .section .text.XMC_CCU8_SLICE_SetOutPath,"ax",%progbits
 775              	 .align 2
 776              	 .global XMC_CCU8_SLICE_SetOutPath
 777              	 .thumb
 778              	 .thumb_func
 780              	XMC_CCU8_SLICE_SetOutPath:
 781              	.LFB209:
 388:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 389:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the each output of the slice with either STx or inverted STx. */
 390:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetOutPath(XMC_CCU8_SLICE_t *const slice, const uint32_t out_path_msk)
 391:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 782              	 .loc 2 391 0
 783              	 .cfi_startproc
 784              	 
 785              	 
 786              	 
 787 0000 80B4     	 push {r7}
 788              	.LCFI69:
 789              	 .cfi_def_cfa_offset 4
 790              	 .cfi_offset 7,-4
 791 0002 85B0     	 sub sp,sp,#20
 792              	.LCFI70:
 793              	 .cfi_def_cfa_offset 24
 794 0004 00AF     	 add r7,sp,#0
 795              	.LCFI71:
 796              	 .cfi_def_cfa_register 7
 797 0006 7860     	 str r0,[r7,#4]
 798 0008 3960     	 str r1,[r7]
 392:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t chc;
 393:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetOutPath:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 394:../Libraries/XMCLib/src/xmc_ccu8.c ****   chc = slice->CHC;
 799              	 .loc 2 394 0
 800 000a 7B68     	 ldr r3,[r7,#4]
 801 000c 9B6C     	 ldr r3,[r3,#72]
 802 000e FB60     	 str r3,[r7,#12]
 395:../Libraries/XMCLib/src/xmc_ccu8.c **** #if !defined(CCU8V3) /* Defined for all devices except XMC1400 */
 396:../Libraries/XMCLib/src/xmc_ccu8.c ****   chc &= ~((uint32_t)out_path_msk >> 16U);
 803              	 .loc 2 396 0
 804 0010 3B68     	 ldr r3,[r7]
 805 0012 1B0C     	 lsrs r3,r3,#16
 806 0014 DB43     	 mvns r3,r3
 807 0016 FA68     	 ldr r2,[r7,#12]
 808 0018 1340     	 ands r3,r3,r2
 809 001a FB60     	 str r3,[r7,#12]
 397:../Libraries/XMCLib/src/xmc_ccu8.c ****   chc |= ((uint32_t)out_path_msk & 0xFFFFU);
 810              	 .loc 2 397 0
 811 001c 3B68     	 ldr r3,[r7]
 812 001e 9BB2     	 uxth r3,r3
 813 0020 FA68     	 ldr r2,[r7,#12]
 814 0022 1343     	 orrs r3,r3,r2
 815 0024 FB60     	 str r3,[r7,#12]
 398:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 399:../Libraries/XMCLib/src/xmc_ccu8.c ****   chc &= ~((uint32_t)((uint32_t)(out_path_msk & 0xCCCC0U) >> 2U));
 400:../Libraries/XMCLib/src/xmc_ccu8.c ****   chc |= ((uint32_t)out_path_msk & 0x33330U);
 401:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 402:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CHC = chc;
 816              	 .loc 2 402 0
 817 0026 7B68     	 ldr r3,[r7,#4]
 818 0028 FA68     	 ldr r2,[r7,#12]
 819 002a 9A64     	 str r2,[r3,#72]
 403:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 820              	 .loc 2 403 0
 821 002c 1437     	 adds r7,r7,#20
 822              	.LCFI72:
 823              	 .cfi_def_cfa_offset 4
 824 002e BD46     	 mov sp,r7
 825              	.LCFI73:
 826              	 .cfi_def_cfa_register 13
 827              	 
 828 0030 5DF8047B 	 ldr r7,[sp],#4
 829              	.LCFI74:
 830              	 .cfi_restore 7
 831              	 .cfi_def_cfa_offset 0
 832 0034 7047     	 bx lr
 833              	 .cfi_endproc
 834              	.LFE209:
 836 0036 00BF     	 .section .text.XMC_CCU8_SetMultiChannelShadowTransferMode,"ax",%progbits
 837              	 .align 2
 838              	 .global XMC_CCU8_SetMultiChannelShadowTransferMode
 839              	 .thumb
 840              	 .thumb_func
 842              	XMC_CCU8_SetMultiChannelShadowTransferMode:
 843              	.LFB210:
 404:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 405:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the multichannel shadow transfer request via SW and via the CCU8x.MCSS input. *
 406:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SetMultiChannelShadowTransferMode(XMC_CCU8_MODULE_t *const module, const uint32_t sli
 407:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 844              	 .loc 2 407 0
 845              	 .cfi_startproc
 846              	 
 847              	 
 848              	 
 849 0000 80B4     	 push {r7}
 850              	.LCFI75:
 851              	 .cfi_def_cfa_offset 4
 852              	 .cfi_offset 7,-4
 853 0002 85B0     	 sub sp,sp,#20
 854              	.LCFI76:
 855              	 .cfi_def_cfa_offset 24
 856 0004 00AF     	 add r7,sp,#0
 857              	.LCFI77:
 858              	 .cfi_def_cfa_register 7
 859 0006 7860     	 str r0,[r7,#4]
 860 0008 3960     	 str r1,[r7]
 408:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t gctrl;
 409:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 410:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU8_IsValidM
 411:../Libraries/XMCLib/src/xmc_ccu8.c ****   
 412:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl = module->GCTRL;
 861              	 .loc 2 412 0
 862 000a 7B68     	 ldr r3,[r7,#4]
 863 000c 1B68     	 ldr r3,[r3]
 864 000e FB60     	 str r3,[r7,#12]
 413:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 865              	 .loc 2 413 0
 866 0010 3B68     	 ldr r3,[r7]
 867 0012 1B0C     	 lsrs r3,r3,#16
 868 0014 DB43     	 mvns r3,r3
 869 0016 FA68     	 ldr r2,[r7,#12]
 870 0018 1340     	 ands r3,r3,r2
 871 001a FB60     	 str r3,[r7,#12]
 414:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 872              	 .loc 2 414 0
 873 001c 3B68     	 ldr r3,[r7]
 874 001e 9BB2     	 uxth r3,r3
 875 0020 FA68     	 ldr r2,[r7,#12]
 876 0022 1343     	 orrs r3,r3,r2
 877 0024 FB60     	 str r3,[r7,#12]
 415:../Libraries/XMCLib/src/xmc_ccu8.c ****   module->GCTRL = gctrl;
 878              	 .loc 2 415 0
 879 0026 7B68     	 ldr r3,[r7,#4]
 880 0028 FA68     	 ldr r2,[r7,#12]
 881 002a 1A60     	 str r2,[r3]
 416:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 882              	 .loc 2 416 0
 883 002c 1437     	 adds r7,r7,#20
 884              	.LCFI78:
 885              	 .cfi_def_cfa_offset 4
 886 002e BD46     	 mov sp,r7
 887              	.LCFI79:
 888              	 .cfi_def_cfa_register 13
 889              	 
 890 0030 5DF8047B 	 ldr r7,[sp],#4
 891              	.LCFI80:
 892              	 .cfi_restore 7
 893              	 .cfi_def_cfa_offset 0
 894 0034 7047     	 bx lr
 895              	 .cfi_endproc
 896              	.LFE210:
 898 0036 00BF     	 .section .text.XMC_CCU8_SLICE_StartConfig,"ax",%progbits
 899              	 .align 2
 900              	 .global XMC_CCU8_SLICE_StartConfig
 901              	 .thumb
 902              	 .thumb_func
 904              	XMC_CCU8_SLICE_StartConfig:
 905              	.LFB211:
 417:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 418:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 419:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the Start trigger function of a slice*/
 420:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
 421:../Libraries/XMCLib/src/xmc_ccu8.c ****                                 const XMC_CCU8_SLICE_EVENT_t event,
 422:../Libraries/XMCLib/src/xmc_ccu8.c ****                                 const XMC_CCU8_SLICE_START_MODE_t start_mode)
 423:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 906              	 .loc 2 423 0
 907              	 .cfi_startproc
 908              	 
 909              	 
 910              	 
 911 0000 80B4     	 push {r7}
 912              	.LCFI81:
 913              	 .cfi_def_cfa_offset 4
 914              	 .cfi_offset 7,-4
 915 0002 85B0     	 sub sp,sp,#20
 916              	.LCFI82:
 917              	 .cfi_def_cfa_offset 24
 918 0004 00AF     	 add r7,sp,#0
 919              	.LCFI83:
 920              	 .cfi_def_cfa_register 7
 921 0006 7860     	 str r0,[r7,#4]
 922 0008 0B46     	 mov r3,r1
 923 000a FB70     	 strb r3,[r7,#3]
 924 000c 1346     	 mov r3,r2
 925 000e BB70     	 strb r3,[r7,#2]
 424:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 425:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 426:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 427:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 428:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
 429:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Start Mode", 
 430:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START) ||\
 431:../Libraries/XMCLib/src/xmc_ccu8.c ****               (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)));
 432:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 926              	 .loc 2 432 0
 927 0010 7B68     	 ldr r3,[r7,#4]
 928 0012 5B68     	 ldr r3,[r3,#4]
 929 0014 BB60     	 str r3,[r7,#8]
 433:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 434:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_STRTS_Msk);
 930              	 .loc 2 434 0
 931 0016 BB68     	 ldr r3,[r7,#8]
 932 0018 23F00303 	 bic r3,r3,#3
 933 001c BB60     	 str r3,[r7,#8]
 435:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_STRTS_Pos;
 934              	 .loc 2 435 0
 935 001e FB78     	 ldrb r3,[r7,#3]
 936 0020 BA68     	 ldr r2,[r7,#8]
 937 0022 1343     	 orrs r3,r3,r2
 938 0024 BB60     	 str r3,[r7,#8]
 436:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 437:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 939              	 .loc 2 437 0
 940 0026 7B68     	 ldr r3,[r7,#4]
 941 0028 BA68     	 ldr r2,[r7,#8]
 942 002a 5A60     	 str r2,[r3,#4]
 438:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 439:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc  = slice->TC;
 943              	 .loc 2 439 0
 944 002c 7B68     	 ldr r3,[r7,#4]
 945 002e 5B69     	 ldr r3,[r3,#20]
 946 0030 FB60     	 str r3,[r7,#12]
 440:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 441:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)
 947              	 .loc 2 441 0
 948 0032 BB78     	 ldrb r3,[r7,#2]
 949 0034 012B     	 cmp r3,#1
 950 0036 04D1     	 bne .L41
 442:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 443:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_STRM_Msk;
 951              	 .loc 2 443 0
 952 0038 FB68     	 ldr r3,[r7,#12]
 953 003a 43F48063 	 orr r3,r3,#1024
 954 003e FB60     	 str r3,[r7,#12]
 955 0040 03E0     	 b .L42
 956              	.L41:
 444:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 445:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 446:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 447:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_STRM_Msk);
 957              	 .loc 2 447 0
 958 0042 FB68     	 ldr r3,[r7,#12]
 959 0044 23F48063 	 bic r3,r3,#1024
 960 0048 FB60     	 str r3,[r7,#12]
 961              	.L42:
 448:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 449:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 450:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 962              	 .loc 2 450 0
 963 004a 7B68     	 ldr r3,[r7,#4]
 964 004c FA68     	 ldr r2,[r7,#12]
 965 004e 5A61     	 str r2,[r3,#20]
 451:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 966              	 .loc 2 451 0
 967 0050 1437     	 adds r7,r7,#20
 968              	.LCFI84:
 969              	 .cfi_def_cfa_offset 4
 970 0052 BD46     	 mov sp,r7
 971              	.LCFI85:
 972              	 .cfi_def_cfa_register 13
 973              	 
 974 0054 5DF8047B 	 ldr r7,[sp],#4
 975              	.LCFI86:
 976              	 .cfi_restore 7
 977              	 .cfi_def_cfa_offset 0
 978 0058 7047     	 bx lr
 979              	 .cfi_endproc
 980              	.LFE211:
 982 005a 00BF     	 .section .text.XMC_CCU8_SLICE_StopConfig,"ax",%progbits
 983              	 .align 2
 984              	 .global XMC_CCU8_SLICE_StopConfig
 985              	 .thumb
 986              	 .thumb_func
 988              	XMC_CCU8_SLICE_StopConfig:
 989              	.LFB212:
 452:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 453:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the Stop trigger function of a slice */
 454:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_StopConfig(XMC_CCU8_SLICE_t *const slice,
 455:../Libraries/XMCLib/src/xmc_ccu8.c ****                                const XMC_CCU8_SLICE_EVENT_t event,
 456:../Libraries/XMCLib/src/xmc_ccu8.c ****                                const XMC_CCU8_SLICE_END_MODE_t end_mode)
 457:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 990              	 .loc 2 457 0
 991              	 .cfi_startproc
 992              	 
 993              	 
 994              	 
 995 0000 80B4     	 push {r7}
 996              	.LCFI87:
 997              	 .cfi_def_cfa_offset 4
 998              	 .cfi_offset 7,-4
 999 0002 85B0     	 sub sp,sp,#20
 1000              	.LCFI88:
 1001              	 .cfi_def_cfa_offset 24
 1002 0004 00AF     	 add r7,sp,#0
 1003              	.LCFI89:
 1004              	 .cfi_def_cfa_register 7
 1005 0006 7860     	 str r0,[r7,#4]
 1006 0008 0B46     	 mov r3,r1
 1007 000a FB70     	 strb r3,[r7,#3]
 1008 000c 1346     	 mov r3,r2
 1009 000e BB70     	 strb r3,[r7,#2]
 458:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 459:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 460:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 461:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 462:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
 463:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid End Mode", XMC_CCU8_SLICE_CHECK_END_MODE(end_mode))
 464:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 465:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 1010              	 .loc 2 465 0
 1011 0010 7B68     	 ldr r3,[r7,#4]
 1012 0012 5B68     	 ldr r3,[r3,#4]
 1013 0014 FB60     	 str r3,[r7,#12]
 466:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the stop function */
 467:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_ENDS_Msk);
 1014              	 .loc 2 467 0
 1015 0016 FB68     	 ldr r3,[r7,#12]
 1016 0018 23F00C03 	 bic r3,r3,#12
 1017 001c FB60     	 str r3,[r7,#12]
 468:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_ENDS_Pos;
 1018              	 .loc 2 468 0
 1019 001e FB78     	 ldrb r3,[r7,#3]
 1020 0020 9B00     	 lsls r3,r3,#2
 1021 0022 FA68     	 ldr r2,[r7,#12]
 1022 0024 1343     	 orrs r3,r3,r2
 1023 0026 FB60     	 str r3,[r7,#12]
 469:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 470:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 1024              	 .loc 2 470 0
 1025 0028 7B68     	 ldr r3,[r7,#4]
 1026 002a FA68     	 ldr r2,[r7,#12]
 1027 002c 5A60     	 str r2,[r3,#4]
 471:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 472:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the stop mode */
 473:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc = slice->TC;
 1028              	 .loc 2 473 0
 1029 002e 7B68     	 ldr r3,[r7,#4]
 1030 0030 5B69     	 ldr r3,[r3,#20]
 1031 0032 BB60     	 str r3,[r7,#8]
 474:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc &= ~((uint32_t) CCU8_CC8_TC_ENDM_Msk);
 1032              	 .loc 2 474 0
 1033 0034 BB68     	 ldr r3,[r7,#8]
 1034 0036 23F44073 	 bic r3,r3,#768
 1035 003a BB60     	 str r3,[r7,#8]
 475:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc |= ((uint32_t) end_mode) << CCU8_CC8_TC_ENDM_Pos;
 1036              	 .loc 2 475 0
 1037 003c BB78     	 ldrb r3,[r7,#2]
 1038 003e 1B02     	 lsls r3,r3,#8
 1039 0040 BA68     	 ldr r2,[r7,#8]
 1040 0042 1343     	 orrs r3,r3,r2
 1041 0044 BB60     	 str r3,[r7,#8]
 476:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 477:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 1042              	 .loc 2 477 0
 1043 0046 7B68     	 ldr r3,[r7,#4]
 1044 0048 BA68     	 ldr r2,[r7,#8]
 1045 004a 5A61     	 str r2,[r3,#20]
 478:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1046              	 .loc 2 478 0
 1047 004c 1437     	 adds r7,r7,#20
 1048              	.LCFI90:
 1049              	 .cfi_def_cfa_offset 4
 1050 004e BD46     	 mov sp,r7
 1051              	.LCFI91:
 1052              	 .cfi_def_cfa_register 13
 1053              	 
 1054 0050 5DF8047B 	 ldr r7,[sp],#4
 1055              	.LCFI92:
 1056              	 .cfi_restore 7
 1057              	 .cfi_def_cfa_offset 0
 1058 0054 7047     	 bx lr
 1059              	 .cfi_endproc
 1060              	.LFE212:
 1062 0056 00BF     	 .section .text.XMC_CCU8_SLICE_LoadConfig,"ax",%progbits
 1063              	 .align 2
 1064              	 .global XMC_CCU8_SLICE_LoadConfig
 1065              	 .thumb
 1066              	 .thumb_func
 1068              	XMC_CCU8_SLICE_LoadConfig:
 1069              	.LFB213:
 479:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 480:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the Load trigger function of a slice*/
 481:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_LoadConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
 482:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1070              	 .loc 2 482 0
 1071              	 .cfi_startproc
 1072              	 
 1073              	 
 1074              	 
 1075 0000 80B4     	 push {r7}
 1076              	.LCFI93:
 1077              	 .cfi_def_cfa_offset 4
 1078              	 .cfi_offset 7,-4
 1079 0002 85B0     	 sub sp,sp,#20
 1080              	.LCFI94:
 1081              	 .cfi_def_cfa_offset 24
 1082 0004 00AF     	 add r7,sp,#0
 1083              	.LCFI95:
 1084              	 .cfi_def_cfa_register 7
 1085 0006 7860     	 str r0,[r7,#4]
 1086 0008 0B46     	 mov r3,r1
 1087 000a FB70     	 strb r3,[r7,#3]
 483:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 484:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 485:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 486:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
 487:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 488:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 1088              	 .loc 2 488 0
 1089 000c 7B68     	 ldr r3,[r7,#4]
 1090 000e 5B68     	 ldr r3,[r3,#4]
 1091 0010 FB60     	 str r3,[r7,#12]
 489:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 490:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the load function */
 491:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_LDS_Msk);
 1092              	 .loc 2 491 0
 1093 0012 FB68     	 ldr r3,[r7,#12]
 1094 0014 23F44053 	 bic r3,r3,#12288
 1095 0018 FB60     	 str r3,[r7,#12]
 492:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_LDS_Pos;
 1096              	 .loc 2 492 0
 1097 001a FB78     	 ldrb r3,[r7,#3]
 1098 001c 1B03     	 lsls r3,r3,#12
 1099 001e FA68     	 ldr r2,[r7,#12]
 1100 0020 1343     	 orrs r3,r3,r2
 1101 0022 FB60     	 str r3,[r7,#12]
 493:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 494:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 1102              	 .loc 2 494 0
 1103 0024 7B68     	 ldr r3,[r7,#4]
 1104 0026 FA68     	 ldr r2,[r7,#12]
 1105 0028 5A60     	 str r2,[r3,#4]
 495:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1106              	 .loc 2 495 0
 1107 002a 1437     	 adds r7,r7,#20
 1108              	.LCFI96:
 1109              	 .cfi_def_cfa_offset 4
 1110 002c BD46     	 mov sp,r7
 1111              	.LCFI97:
 1112              	 .cfi_def_cfa_register 13
 1113              	 
 1114 002e 5DF8047B 	 ldr r7,[sp],#4
 1115              	.LCFI98:
 1116              	 .cfi_restore 7
 1117              	 .cfi_def_cfa_offset 0
 1118 0032 7047     	 bx lr
 1119              	 .cfi_endproc
 1120              	.LFE213:
 1122              	 .section .text.XMC_CCU8_SLICE_LoadSelector,"ax",%progbits
 1123              	 .align 2
 1124              	 .global XMC_CCU8_SLICE_LoadSelector
 1125              	 .thumb
 1126              	 .thumb_func
 1128              	XMC_CCU8_SLICE_LoadSelector:
 1129              	.LFB214:
 496:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 497:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure, which compare register value has to be loaded during external load event */
 498:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_LoadSelector(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_COMPARE_CHANNE
 499:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1130              	 .loc 2 499 0
 1131              	 .cfi_startproc
 1132              	 
 1133              	 
 1134              	 
 1135 0000 80B4     	 push {r7}
 1136              	.LCFI99:
 1137              	 .cfi_def_cfa_offset 4
 1138              	 .cfi_offset 7,-4
 1139 0002 85B0     	 sub sp,sp,#20
 1140              	.LCFI100:
 1141              	 .cfi_def_cfa_offset 24
 1142 0004 00AF     	 add r7,sp,#0
 1143              	.LCFI101:
 1144              	 .cfi_def_cfa_register 7
 1145 0006 7860     	 str r0,[r7,#4]
 1146 0008 0B46     	 mov r3,r1
 1147 000a FB70     	 strb r3,[r7,#3]
 500:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 501:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 502:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 503:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Channel number", XMC_CCU8_SLICE_CHECK_COMP_CHANNE
 504:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 505:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc = slice->TC;
 1148              	 .loc 2 505 0
 1149 000c 7B68     	 ldr r3,[r7,#4]
 1150 000e 5B69     	 ldr r3,[r3,#20]
 1151 0010 FB60     	 str r3,[r7,#12]
 506:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 507:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the load function */
 508:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc &= ~((uint32_t) CCU8_CC8_TC_TLS_Msk);
 1152              	 .loc 2 508 0
 1153 0012 FB68     	 ldr r3,[r7,#12]
 1154 0014 23F08003 	 bic r3,r3,#128
 1155 0018 FB60     	 str r3,[r7,#12]
 509:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc |= (uint32_t)ch_num << CCU8_CC8_TC_TLS_Pos;
 1156              	 .loc 2 509 0
 1157 001a FB78     	 ldrb r3,[r7,#3]
 1158 001c DB01     	 lsls r3,r3,#7
 1159 001e FA68     	 ldr r2,[r7,#12]
 1160 0020 1343     	 orrs r3,r3,r2
 1161 0022 FB60     	 str r3,[r7,#12]
 510:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 511:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 1162              	 .loc 2 511 0
 1163 0024 7B68     	 ldr r3,[r7,#4]
 1164 0026 FA68     	 ldr r2,[r7,#12]
 1165 0028 5A61     	 str r2,[r3,#20]
 512:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1166              	 .loc 2 512 0
 1167 002a 1437     	 adds r7,r7,#20
 1168              	.LCFI102:
 1169              	 .cfi_def_cfa_offset 4
 1170 002c BD46     	 mov sp,r7
 1171              	.LCFI103:
 1172              	 .cfi_def_cfa_register 13
 1173              	 
 1174 002e 5DF8047B 	 ldr r7,[sp],#4
 1175              	.LCFI104:
 1176              	 .cfi_restore 7
 1177              	 .cfi_def_cfa_offset 0
 1178 0032 7047     	 bx lr
 1179              	 .cfi_endproc
 1180              	.LFE214:
 1182              	 .section .text.XMC_CCU8_SLICE_ModulationConfig,"ax",%progbits
 1183              	 .align 2
 1184              	 .global XMC_CCU8_SLICE_ModulationConfig
 1185              	 .thumb
 1186              	 .thumb_func
 1188              	XMC_CCU8_SLICE_ModulationConfig:
 1189              	.LFB215:
 513:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 514:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the slice modulation function */
 515:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_ModulationConfig(XMC_CCU8_SLICE_t *const slice,
 516:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const XMC_CCU8_SLICE_EVENT_t event,
 517:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const XMC_CCU8_SLICE_MODULATION_MODE_t mod_mode,
 518:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const XMC_CCU8_SLICE_MODULATION_CHANNEL_t channel,
 519:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const bool synch_with_pwm)
 520:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1190              	 .loc 2 520 0
 1191              	 .cfi_startproc
 1192              	 
 1193              	 
 1194              	 
 1195 0000 80B4     	 push {r7}
 1196              	.LCFI105:
 1197              	 .cfi_def_cfa_offset 4
 1198              	 .cfi_offset 7,-4
 1199 0002 85B0     	 sub sp,sp,#20
 1200              	.LCFI106:
 1201              	 .cfi_def_cfa_offset 24
 1202 0004 00AF     	 add r7,sp,#0
 1203              	.LCFI107:
 1204              	 .cfi_def_cfa_register 7
 1205 0006 7860     	 str r0,[r7,#4]
 1206 0008 0846     	 mov r0,r1
 1207 000a 1146     	 mov r1,r2
 1208 000c 1A46     	 mov r2,r3
 1209 000e 0346     	 mov r3,r0
 1210 0010 FB70     	 strb r3,[r7,#3]
 1211 0012 0B46     	 mov r3,r1
 1212 0014 BB70     	 strb r3,[r7,#2]
 1213 0016 1346     	 mov r3,r2
 1214 0018 7B70     	 strb r3,[r7,#1]
 521:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 522:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 523:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 524:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice))
 525:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(even
 526:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid channel for modulation", 
 527:../Libraries/XMCLib/src/xmc_ccu8.c ****              XMC_CCU8_SLICE_CHECK_MODULATION_CHANNEL(channel));
 528:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid Modulation Mode", 
 529:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_ST_OUT) ||\
 530:../Libraries/XMCLib/src/xmc_ccu8.c ****               (mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)));
 531:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 532:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 1215              	 .loc 2 532 0
 1216 001a 7B68     	 ldr r3,[r7,#4]
 1217 001c 5B68     	 ldr r3,[r3,#4]
 1218 001e BB60     	 str r3,[r7,#8]
 533:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 534:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the modulation function */
 535:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_MOS_Msk);
 1219              	 .loc 2 535 0
 1220 0020 BB68     	 ldr r3,[r7,#8]
 1221 0022 23F44023 	 bic r3,r3,#786432
 1222 0026 BB60     	 str r3,[r7,#8]
 536:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_MOS_Pos;
 1223              	 .loc 2 536 0
 1224 0028 FB78     	 ldrb r3,[r7,#3]
 1225 002a 9B04     	 lsls r3,r3,#18
 1226 002c BA68     	 ldr r2,[r7,#8]
 1227 002e 1343     	 orrs r3,r3,r2
 1228 0030 BB60     	 str r3,[r7,#8]
 537:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 538:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 1229              	 .loc 2 538 0
 1230 0032 7B68     	 ldr r3,[r7,#4]
 1231 0034 BA68     	 ldr r2,[r7,#8]
 1232 0036 5A60     	 str r2,[r3,#4]
 539:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 540:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc  = slice->TC;
 1233              	 .loc 2 540 0
 1234 0038 7B68     	 ldr r3,[r7,#4]
 1235 003a 5B69     	 ldr r3,[r3,#20]
 1236 003c FB60     	 str r3,[r7,#12]
 541:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 542:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, Modulation mode */
 543:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)
 1237              	 .loc 2 543 0
 1238 003e BB78     	 ldrb r3,[r7,#2]
 1239 0040 012B     	 cmp r3,#1
 1240 0042 04D1     	 bne .L47
 544:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 545:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_EMT_Msk;
 1241              	 .loc 2 545 0
 1242 0044 FB68     	 ldr r3,[r7,#12]
 1243 0046 43F08073 	 orr r3,r3,#16777216
 1244 004a FB60     	 str r3,[r7,#12]
 1245 004c 03E0     	 b .L48
 1246              	.L47:
 546:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 547:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 548:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 549:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_EMT_Msk);
 1247              	 .loc 2 549 0
 1248 004e FB68     	 ldr r3,[r7,#12]
 1249 0050 23F08073 	 bic r3,r3,#16777216
 1250 0054 FB60     	 str r3,[r7,#12]
 1251              	.L48:
 550:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 551:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 552:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Synchronization of modulation effect with PWM cycle */
 553:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(synch_with_pwm == true)
 1252              	 .loc 2 553 0
 1253 0056 3B7E     	 ldrb r3,[r7,#24]
 1254 0058 002B     	 cmp r3,#0
 1255 005a 04D0     	 beq .L49
 554:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 555:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_EMS_Msk;
 1256              	 .loc 2 555 0
 1257 005c FB68     	 ldr r3,[r7,#12]
 1258 005e 43F40003 	 orr r3,r3,#8388608
 1259 0062 FB60     	 str r3,[r7,#12]
 1260 0064 03E0     	 b .L50
 1261              	.L49:
 556:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 557:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 558:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 559:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_EMS_Msk);
 1262              	 .loc 2 559 0
 1263 0066 FB68     	 ldr r3,[r7,#12]
 1264 0068 23F40003 	 bic r3,r3,#8388608
 1265 006c FB60     	 str r3,[r7,#12]
 1266              	.L50:
 560:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 561:../Libraries/XMCLib/src/xmc_ccu8.c ****   
 562:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure on which channel external modulation to be applied */
 563:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc &= ~((uint32_t) CCU8_CC8_TC_EME_Msk);
 1267              	 .loc 2 563 0
 1268 006e FB68     	 ldr r3,[r7,#12]
 1269 0070 23F0C053 	 bic r3,r3,#402653184
 1270 0074 FB60     	 str r3,[r7,#12]
 564:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc |= (uint32_t)channel << CCU8_CC8_TC_EME_Pos;
 1271              	 .loc 2 564 0
 1272 0076 7B78     	 ldrb r3,[r7,#1]
 1273 0078 DB06     	 lsls r3,r3,#27
 1274 007a FA68     	 ldr r2,[r7,#12]
 1275 007c 1343     	 orrs r3,r3,r2
 1276 007e FB60     	 str r3,[r7,#12]
 565:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 566:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 1277              	 .loc 2 566 0
 1278 0080 7B68     	 ldr r3,[r7,#4]
 1279 0082 FA68     	 ldr r2,[r7,#12]
 1280 0084 5A61     	 str r2,[r3,#20]
 567:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1281              	 .loc 2 567 0
 1282 0086 1437     	 adds r7,r7,#20
 1283              	.LCFI108:
 1284              	 .cfi_def_cfa_offset 4
 1285 0088 BD46     	 mov sp,r7
 1286              	.LCFI109:
 1287              	 .cfi_def_cfa_register 13
 1288              	 
 1289 008a 5DF8047B 	 ldr r7,[sp],#4
 1290              	.LCFI110:
 1291              	 .cfi_restore 7
 1292              	 .cfi_def_cfa_offset 0
 1293 008e 7047     	 bx lr
 1294              	 .cfi_endproc
 1295              	.LFE215:
 1297              	 .section .text.XMC_CCU8_SLICE_CountConfig,"ax",%progbits
 1298              	 .align 2
 1299              	 .global XMC_CCU8_SLICE_CountConfig
 1300              	 .thumb
 1301              	 .thumb_func
 1303              	XMC_CCU8_SLICE_CountConfig:
 1304              	.LFB216:
 568:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 569:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the slice count function */
 570:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_CountConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
 571:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1305              	 .loc 2 571 0
 1306              	 .cfi_startproc
 1307              	 
 1308              	 
 1309              	 
 1310 0000 80B4     	 push {r7}
 1311              	.LCFI111:
 1312              	 .cfi_def_cfa_offset 4
 1313              	 .cfi_offset 7,-4
 1314 0002 85B0     	 sub sp,sp,#20
 1315              	.LCFI112:
 1316              	 .cfi_def_cfa_offset 24
 1317 0004 00AF     	 add r7,sp,#0
 1318              	.LCFI113:
 1319              	 .cfi_def_cfa_register 7
 1320 0006 7860     	 str r0,[r7,#4]
 1321 0008 0B46     	 mov r3,r1
 1322 000a FB70     	 strb r3,[r7,#3]
 572:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 573:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 574:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 575:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
 576:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 577:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 1323              	 .loc 2 577 0
 1324 000c 7B68     	 ldr r3,[r7,#4]
 1325 000e 5B68     	 ldr r3,[r3,#4]
 1326 0010 FB60     	 str r3,[r7,#12]
 578:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 579:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the count function */
 580:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_CNTS_Msk);
 1327              	 .loc 2 580 0
 1328 0012 FB68     	 ldr r3,[r7,#12]
 1329 0014 23F44043 	 bic r3,r3,#49152
 1330 0018 FB60     	 str r3,[r7,#12]
 581:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_CNTS_Pos;
 1331              	 .loc 2 581 0
 1332 001a FB78     	 ldrb r3,[r7,#3]
 1333 001c 9B03     	 lsls r3,r3,#14
 1334 001e FA68     	 ldr r2,[r7,#12]
 1335 0020 1343     	 orrs r3,r3,r2
 1336 0022 FB60     	 str r3,[r7,#12]
 582:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 583:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 1337              	 .loc 2 583 0
 1338 0024 7B68     	 ldr r3,[r7,#4]
 1339 0026 FA68     	 ldr r2,[r7,#12]
 1340 0028 5A60     	 str r2,[r3,#4]
 584:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1341              	 .loc 2 584 0
 1342 002a 1437     	 adds r7,r7,#20
 1343              	.LCFI114:
 1344              	 .cfi_def_cfa_offset 4
 1345 002c BD46     	 mov sp,r7
 1346              	.LCFI115:
 1347              	 .cfi_def_cfa_register 13
 1348              	 
 1349 002e 5DF8047B 	 ldr r7,[sp],#4
 1350              	.LCFI116:
 1351              	 .cfi_restore 7
 1352              	 .cfi_def_cfa_offset 0
 1353 0032 7047     	 bx lr
 1354              	 .cfi_endproc
 1355              	.LFE216:
 1357              	 .section .text.XMC_CCU8_SLICE_GateConfig,"ax",%progbits
 1358              	 .align 2
 1359              	 .global XMC_CCU8_SLICE_GateConfig
 1360              	 .thumb
 1361              	 .thumb_func
 1363              	XMC_CCU8_SLICE_GateConfig:
 1364              	.LFB217:
 585:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 586:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure slice gate function */
 587:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_GateConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
 588:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1365              	 .loc 2 588 0
 1366              	 .cfi_startproc
 1367              	 
 1368              	 
 1369              	 
 1370 0000 80B4     	 push {r7}
 1371              	.LCFI117:
 1372              	 .cfi_def_cfa_offset 4
 1373              	 .cfi_offset 7,-4
 1374 0002 85B0     	 sub sp,sp,#20
 1375              	.LCFI118:
 1376              	 .cfi_def_cfa_offset 24
 1377 0004 00AF     	 add r7,sp,#0
 1378              	.LCFI119:
 1379              	 .cfi_def_cfa_register 7
 1380 0006 7860     	 str r0,[r7,#4]
 1381 0008 0B46     	 mov r3,r1
 1382 000a FB70     	 strb r3,[r7,#3]
 589:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 590:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 591:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 592:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
 593:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 594:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 1383              	 .loc 2 594 0
 1384 000c 7B68     	 ldr r3,[r7,#4]
 1385 000e 5B68     	 ldr r3,[r3,#4]
 1386 0010 FB60     	 str r3,[r7,#12]
 595:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 596:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the gate function */
 597:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_GATES_Msk);
 1387              	 .loc 2 597 0
 1388 0012 FB68     	 ldr r3,[r7,#12]
 1389 0014 23F44073 	 bic r3,r3,#768
 1390 0018 FB60     	 str r3,[r7,#12]
 598:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_GATES_Pos;
 1391              	 .loc 2 598 0
 1392 001a FB78     	 ldrb r3,[r7,#3]
 1393 001c 1B02     	 lsls r3,r3,#8
 1394 001e FA68     	 ldr r2,[r7,#12]
 1395 0020 1343     	 orrs r3,r3,r2
 1396 0022 FB60     	 str r3,[r7,#12]
 599:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 600:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 1397              	 .loc 2 600 0
 1398 0024 7B68     	 ldr r3,[r7,#4]
 1399 0026 FA68     	 ldr r2,[r7,#12]
 1400 0028 5A60     	 str r2,[r3,#4]
 601:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1401              	 .loc 2 601 0
 1402 002a 1437     	 adds r7,r7,#20
 1403              	.LCFI120:
 1404              	 .cfi_def_cfa_offset 4
 1405 002c BD46     	 mov sp,r7
 1406              	.LCFI121:
 1407              	 .cfi_def_cfa_register 13
 1408              	 
 1409 002e 5DF8047B 	 ldr r7,[sp],#4
 1410              	.LCFI122:
 1411              	 .cfi_restore 7
 1412              	 .cfi_def_cfa_offset 0
 1413 0032 7047     	 bx lr
 1414              	 .cfi_endproc
 1415              	.LFE217:
 1417              	 .section .text.XMC_CCU8_SLICE_Capture0Config,"ax",%progbits
 1418              	 .align 2
 1419              	 .global XMC_CCU8_SLICE_Capture0Config
 1420              	 .thumb
 1421              	 .thumb_func
 1423              	XMC_CCU8_SLICE_Capture0Config:
 1424              	.LFB218:
 602:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 603:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure Capture-0 function */
 604:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_Capture0Config(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t even
 605:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1425              	 .loc 2 605 0
 1426              	 .cfi_startproc
 1427              	 
 1428              	 
 1429              	 
 1430 0000 80B4     	 push {r7}
 1431              	.LCFI123:
 1432              	 .cfi_def_cfa_offset 4
 1433              	 .cfi_offset 7,-4
 1434 0002 85B0     	 sub sp,sp,#20
 1435              	.LCFI124:
 1436              	 .cfi_def_cfa_offset 24
 1437 0004 00AF     	 add r7,sp,#0
 1438              	.LCFI125:
 1439              	 .cfi_def_cfa_register 7
 1440 0006 7860     	 str r0,[r7,#4]
 1441 0008 0B46     	 mov r3,r1
 1442 000a FB70     	 strb r3,[r7,#3]
 606:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 607:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 608:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_Capture0Config:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 609:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_Capture0Config:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event)
 610:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 611:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 1443              	 .loc 2 611 0
 1444 000c 7B68     	 ldr r3,[r7,#4]
 1445 000e 5B68     	 ldr r3,[r3,#4]
 1446 0010 FB60     	 str r3,[r7,#12]
 612:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 613:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the gate function */
 614:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_CAP0S_Msk);
 1447              	 .loc 2 614 0
 1448 0012 FB68     	 ldr r3,[r7,#12]
 1449 0014 23F03003 	 bic r3,r3,#48
 1450 0018 FB60     	 str r3,[r7,#12]
 615:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_CAP0S_Pos;
 1451              	 .loc 2 615 0
 1452 001a FB78     	 ldrb r3,[r7,#3]
 1453 001c 1B01     	 lsls r3,r3,#4
 1454 001e FA68     	 ldr r2,[r7,#12]
 1455 0020 1343     	 orrs r3,r3,r2
 1456 0022 FB60     	 str r3,[r7,#12]
 616:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 617:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 1457              	 .loc 2 617 0
 1458 0024 7B68     	 ldr r3,[r7,#4]
 1459 0026 FA68     	 ldr r2,[r7,#12]
 1460 0028 5A60     	 str r2,[r3,#4]
 618:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1461              	 .loc 2 618 0
 1462 002a 1437     	 adds r7,r7,#20
 1463              	.LCFI126:
 1464              	 .cfi_def_cfa_offset 4
 1465 002c BD46     	 mov sp,r7
 1466              	.LCFI127:
 1467              	 .cfi_def_cfa_register 13
 1468              	 
 1469 002e 5DF8047B 	 ldr r7,[sp],#4
 1470              	.LCFI128:
 1471              	 .cfi_restore 7
 1472              	 .cfi_def_cfa_offset 0
 1473 0032 7047     	 bx lr
 1474              	 .cfi_endproc
 1475              	.LFE218:
 1477              	 .section .text.XMC_CCU8_SLICE_Capture1Config,"ax",%progbits
 1478              	 .align 2
 1479              	 .global XMC_CCU8_SLICE_Capture1Config
 1480              	 .thumb
 1481              	 .thumb_func
 1483              	XMC_CCU8_SLICE_Capture1Config:
 1484              	.LFB219:
 619:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 620:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure Capture-1 function */
 621:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_Capture1Config(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t even
 622:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1485              	 .loc 2 622 0
 1486              	 .cfi_startproc
 1487              	 
 1488              	 
 1489              	 
 1490 0000 80B4     	 push {r7}
 1491              	.LCFI129:
 1492              	 .cfi_def_cfa_offset 4
 1493              	 .cfi_offset 7,-4
 1494 0002 85B0     	 sub sp,sp,#20
 1495              	.LCFI130:
 1496              	 .cfi_def_cfa_offset 24
 1497 0004 00AF     	 add r7,sp,#0
 1498              	.LCFI131:
 1499              	 .cfi_def_cfa_register 7
 1500 0006 7860     	 str r0,[r7,#4]
 1501 0008 0B46     	 mov r3,r1
 1502 000a FB70     	 strb r3,[r7,#3]
 623:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 624:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 625:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_Capture1Config:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 626:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_Capture1Config:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event)
 627:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 628:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 629:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 1503              	 .loc 2 629 0
 1504 000c 7B68     	 ldr r3,[r7,#4]
 1505 000e 5B68     	 ldr r3,[r3,#4]
 1506 0010 FB60     	 str r3,[r7,#12]
 630:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 631:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the gate function */
 632:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_CAP1S_Msk);
 1507              	 .loc 2 632 0
 1508 0012 FB68     	 ldr r3,[r7,#12]
 1509 0014 23F0C003 	 bic r3,r3,#192
 1510 0018 FB60     	 str r3,[r7,#12]
 633:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_CAP1S_Pos;
 1511              	 .loc 2 633 0
 1512 001a FB78     	 ldrb r3,[r7,#3]
 1513 001c 9B01     	 lsls r3,r3,#6
 1514 001e FA68     	 ldr r2,[r7,#12]
 1515 0020 1343     	 orrs r3,r3,r2
 1516 0022 FB60     	 str r3,[r7,#12]
 634:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 635:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 1517              	 .loc 2 635 0
 1518 0024 7B68     	 ldr r3,[r7,#4]
 1519 0026 FA68     	 ldr r2,[r7,#12]
 1520 0028 5A60     	 str r2,[r3,#4]
 636:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1521              	 .loc 2 636 0
 1522 002a 1437     	 adds r7,r7,#20
 1523              	.LCFI132:
 1524              	 .cfi_def_cfa_offset 4
 1525 002c BD46     	 mov sp,r7
 1526              	.LCFI133:
 1527              	 .cfi_def_cfa_register 13
 1528              	 
 1529 002e 5DF8047B 	 ldr r7,[sp],#4
 1530              	.LCFI134:
 1531              	 .cfi_restore 7
 1532              	 .cfi_def_cfa_offset 0
 1533 0032 7047     	 bx lr
 1534              	 .cfi_endproc
 1535              	.LFE219:
 1537              	 .section .text.XMC_CCU8_SLICE_DirectionConfig,"ax",%progbits
 1538              	 .align 2
 1539              	 .global XMC_CCU8_SLICE_DirectionConfig
 1540              	 .thumb
 1541              	 .thumb_func
 1543              	XMC_CCU8_SLICE_DirectionConfig:
 1544              	.LFB220:
 637:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 638:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure direction function */
 639:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_DirectionConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t eve
 640:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1545              	 .loc 2 640 0
 1546              	 .cfi_startproc
 1547              	 
 1548              	 
 1549              	 
 1550 0000 80B4     	 push {r7}
 1551              	.LCFI135:
 1552              	 .cfi_def_cfa_offset 4
 1553              	 .cfi_offset 7,-4
 1554 0002 85B0     	 sub sp,sp,#20
 1555              	.LCFI136:
 1556              	 .cfi_def_cfa_offset 24
 1557 0004 00AF     	 add r7,sp,#0
 1558              	.LCFI137:
 1559              	 .cfi_def_cfa_register 7
 1560 0006 7860     	 str r0,[r7,#4]
 1561 0008 0B46     	 mov r3,r1
 1562 000a FB70     	 strb r3,[r7,#3]
 641:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 642:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 643:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 644:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event
 645:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 646:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 1563              	 .loc 2 646 0
 1564 000c 7B68     	 ldr r3,[r7,#4]
 1565 000e 5B68     	 ldr r3,[r3,#4]
 1566 0010 FB60     	 str r3,[r7,#12]
 647:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 648:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the direction function */
 649:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_UDS_Msk);
 1567              	 .loc 2 649 0
 1568 0012 FB68     	 ldr r3,[r7,#12]
 1569 0014 23F44063 	 bic r3,r3,#3072
 1570 0018 FB60     	 str r3,[r7,#12]
 650:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_UDS_Pos;
 1571              	 .loc 2 650 0
 1572 001a FB78     	 ldrb r3,[r7,#3]
 1573 001c 9B02     	 lsls r3,r3,#10
 1574 001e FA68     	 ldr r2,[r7,#12]
 1575 0020 1343     	 orrs r3,r3,r2
 1576 0022 FB60     	 str r3,[r7,#12]
 651:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 652:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 1577              	 .loc 2 652 0
 1578 0024 7B68     	 ldr r3,[r7,#4]
 1579 0026 FA68     	 ldr r2,[r7,#12]
 1580 0028 5A60     	 str r2,[r3,#4]
 653:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1581              	 .loc 2 653 0
 1582 002a 1437     	 adds r7,r7,#20
 1583              	.LCFI138:
 1584              	 .cfi_def_cfa_offset 4
 1585 002c BD46     	 mov sp,r7
 1586              	.LCFI139:
 1587              	 .cfi_def_cfa_register 13
 1588              	 
 1589 002e 5DF8047B 	 ldr r7,[sp],#4
 1590              	.LCFI140:
 1591              	 .cfi_restore 7
 1592              	 .cfi_def_cfa_offset 0
 1593 0032 7047     	 bx lr
 1594              	 .cfi_endproc
 1595              	.LFE220:
 1597              	 .section .text.XMC_CCU8_SLICE_StatusBitOverrideConfig,"ax",%progbits
 1598              	 .align 2
 1599              	 .global XMC_CCU8_SLICE_StatusBitOverrideConfig
 1600              	 .thumb
 1601              	 .thumb_func
 1603              	XMC_CCU8_SLICE_StatusBitOverrideConfig:
 1604              	.LFB221:
 654:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 655:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure slice status bit override function */
 656:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_StatusBitOverrideConfig(XMC_CCU8_SLICE_t *const slice)
 657:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1605              	 .loc 2 657 0
 1606              	 .cfi_startproc
 1607              	 
 1608              	 
 1609              	 
 1610 0000 80B4     	 push {r7}
 1611              	.LCFI141:
 1612              	 .cfi_def_cfa_offset 4
 1613              	 .cfi_offset 7,-4
 1614 0002 85B0     	 sub sp,sp,#20
 1615              	.LCFI142:
 1616              	 .cfi_def_cfa_offset 24
 1617 0004 00AF     	 add r7,sp,#0
 1618              	.LCFI143:
 1619              	 .cfi_def_cfa_register 7
 1620 0006 7860     	 str r0,[r7,#4]
 658:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 659:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 660:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(
 661:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 662:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 1621              	 .loc 2 662 0
 1622 0008 7B68     	 ldr r3,[r7,#4]
 1623 000a 5B68     	 ldr r3,[r3,#4]
 1624 000c FB60     	 str r3,[r7,#12]
 663:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 664:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Map status bit trigger override to Event 1 &
 665:../Libraries/XMCLib/src/xmc_ccu8.c ****          status bit value override to Event 2 */
 666:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_OFS_Msk);
 1625              	 .loc 2 666 0
 1626 000e FB68     	 ldr r3,[r7,#12]
 1627 0010 23F48033 	 bic r3,r3,#65536
 1628 0014 FB60     	 str r3,[r7,#12]
 667:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_OFS_Pos;
 1629              	 .loc 2 667 0
 1630 0016 FB68     	 ldr r3,[r7,#12]
 1631 0018 43F48033 	 orr r3,r3,#65536
 1632 001c FB60     	 str r3,[r7,#12]
 668:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 669:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 1633              	 .loc 2 669 0
 1634 001e 7B68     	 ldr r3,[r7,#4]
 1635 0020 FA68     	 ldr r2,[r7,#12]
 1636 0022 5A60     	 str r2,[r3,#4]
 670:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1637              	 .loc 2 670 0
 1638 0024 1437     	 adds r7,r7,#20
 1639              	.LCFI144:
 1640              	 .cfi_def_cfa_offset 4
 1641 0026 BD46     	 mov sp,r7
 1642              	.LCFI145:
 1643              	 .cfi_def_cfa_register 13
 1644              	 
 1645 0028 5DF8047B 	 ldr r7,[sp],#4
 1646              	.LCFI146:
 1647              	 .cfi_restore 7
 1648              	 .cfi_def_cfa_offset 0
 1649 002c 7047     	 bx lr
 1650              	 .cfi_endproc
 1651              	.LFE221:
 1653 002e 00BF     	 .section .text.XMC_CCU8_SLICE_TrapConfig,"ax",%progbits
 1654              	 .align 2
 1655              	 .global XMC_CCU8_SLICE_TrapConfig
 1656              	 .thumb
 1657              	 .thumb_func
 1659              	XMC_CCU8_SLICE_TrapConfig:
 1660              	.LFB222:
 671:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 672:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure trap function*/
 673:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
 674:../Libraries/XMCLib/src/xmc_ccu8.c ****                                const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
 675:../Libraries/XMCLib/src/xmc_ccu8.c ****                                const bool synch_with_pwm)
 676:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1661              	 .loc 2 676 0
 1662              	 .cfi_startproc
 1663              	 
 1664              	 
 1665              	 
 1666 0000 80B4     	 push {r7}
 1667              	.LCFI147:
 1668              	 .cfi_def_cfa_offset 4
 1669              	 .cfi_offset 7,-4
 1670 0002 85B0     	 sub sp,sp,#20
 1671              	.LCFI148:
 1672              	 .cfi_def_cfa_offset 24
 1673 0004 00AF     	 add r7,sp,#0
 1674              	.LCFI149:
 1675              	 .cfi_def_cfa_register 7
 1676 0006 7860     	 str r0,[r7,#4]
 1677 0008 0B46     	 mov r3,r1
 1678 000a FB70     	 strb r3,[r7,#3]
 1679 000c 1346     	 mov r3,r2
 1680 000e BB70     	 strb r3,[r7,#2]
 677:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 678:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 679:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 680:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 681:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU8_SLICE_TRAP_EXIT
 682:../Libraries/XMCLib/src/xmc_ccu8.c ****                                                              (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT
 683:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 684:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 1681              	 .loc 2 684 0
 1682 0010 7B68     	 ldr r3,[r7,#4]
 1683 0012 5B68     	 ldr r3,[r3,#4]
 1684 0014 BB60     	 str r3,[r7,#8]
 685:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 686:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Map trap function to Event 2 */
 687:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_TS_Msk);
 1685              	 .loc 2 687 0
 1686 0016 BB68     	 ldr r3,[r7,#8]
 1687 0018 23F40033 	 bic r3,r3,#131072
 1688 001c BB60     	 str r3,[r7,#8]
 688:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_TS_Pos;
 1689              	 .loc 2 688 0
 1690 001e BB68     	 ldr r3,[r7,#8]
 1691 0020 43F40033 	 orr r3,r3,#131072
 1692 0024 BB60     	 str r3,[r7,#8]
 689:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 690:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 1693              	 .loc 2 690 0
 1694 0026 7B68     	 ldr r3,[r7,#4]
 1695 0028 BA68     	 ldr r2,[r7,#8]
 1696 002a 5A60     	 str r2,[r3,#4]
 691:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 692:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc = slice->TC;
 1697              	 .loc 2 692 0
 1698 002c 7B68     	 ldr r3,[r7,#4]
 1699 002e 5B69     	 ldr r3,[r3,#20]
 1700 0030 FB60     	 str r3,[r7,#12]
 693:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 694:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure synchronization option */
 695:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(synch_with_pwm == true)
 1701              	 .loc 2 695 0
 1702 0032 BB78     	 ldrb r3,[r7,#2]
 1703 0034 002B     	 cmp r3,#0
 1704 0036 04D0     	 beq .L58
 696:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 697:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_TRPSE_Msk;
 1705              	 .loc 2 697 0
 1706 0038 FB68     	 ldr r3,[r7,#12]
 1707 003a 43F40013 	 orr r3,r3,#2097152
 1708 003e FB60     	 str r3,[r7,#12]
 1709 0040 03E0     	 b .L59
 1710              	.L58:
 698:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 699:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 700:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 701:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_TRPSE_Msk);
 1711              	 .loc 2 701 0
 1712 0042 FB68     	 ldr r3,[r7,#12]
 1713 0044 23F40013 	 bic r3,r3,#2097152
 1714 0048 FB60     	 str r3,[r7,#12]
 1715              	.L59:
 702:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 703:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 704:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure exit mode */
 705:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)
 1716              	 .loc 2 705 0
 1717 004a FB78     	 ldrb r3,[r7,#3]
 1718 004c 012B     	 cmp r3,#1
 1719 004e 04D1     	 bne .L60
 706:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 707:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_TRPSW_Msk;
 1720              	 .loc 2 707 0
 1721 0050 FB68     	 ldr r3,[r7,#12]
 1722 0052 43F48003 	 orr r3,r3,#4194304
 1723 0056 FB60     	 str r3,[r7,#12]
 1724 0058 03E0     	 b .L61
 1725              	.L60:
 708:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 709:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 710:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 711:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_TRPSW_Msk);
 1726              	 .loc 2 711 0
 1727 005a FB68     	 ldr r3,[r7,#12]
 1728 005c 23F48003 	 bic r3,r3,#4194304
 1729 0060 FB60     	 str r3,[r7,#12]
 1730              	.L61:
 712:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 713:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 714:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 1731              	 .loc 2 714 0
 1732 0062 7B68     	 ldr r3,[r7,#4]
 1733 0064 FA68     	 ldr r2,[r7,#12]
 1734 0066 5A61     	 str r2,[r3,#20]
 715:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1735              	 .loc 2 715 0
 1736 0068 1437     	 adds r7,r7,#20
 1737              	.LCFI150:
 1738              	 .cfi_def_cfa_offset 4
 1739 006a BD46     	 mov sp,r7
 1740              	.LCFI151:
 1741              	 .cfi_def_cfa_register 13
 1742              	 
 1743 006c 5DF8047B 	 ldr r7,[sp],#4
 1744              	.LCFI152:
 1745              	 .cfi_restore 7
 1746              	 .cfi_def_cfa_offset 0
 1747 0070 7047     	 bx lr
 1748              	 .cfi_endproc
 1749              	.LFE222:
 1751 0072 00BF     	 .section .text.XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent,"ax",%progbits
 1752              	 .align 2
 1753              	 .global XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent
 1754              	 .thumb
 1755              	 .thumb_func
 1757              	XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:
 1758              	.LFB223:
 716:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 717:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure a slice Status Bit Override event */
 718:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU8_SLICE_t *const slice,
 719:../Libraries/XMCLib/src/xmc_ccu8.c ****                                                     const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev1_
 720:../Libraries/XMCLib/src/xmc_ccu8.c ****                                                     const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev2_
 721:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1759              	 .loc 2 721 0
 1760              	 .cfi_startproc
 1761              	 
 1762              	 
 1763              	 
 1764 0000 80B4     	 push {r7}
 1765              	.LCFI153:
 1766              	 .cfi_def_cfa_offset 4
 1767              	 .cfi_offset 7,-4
 1768 0002 87B0     	 sub sp,sp,#28
 1769              	.LCFI154:
 1770              	 .cfi_def_cfa_offset 32
 1771 0004 00AF     	 add r7,sp,#0
 1772              	.LCFI155:
 1773              	 .cfi_def_cfa_register 7
 1774 0006 F860     	 str r0,[r7,#12]
 1775 0008 B960     	 str r1,[r7,#8]
 1776 000a 7A60     	 str r2,[r7,#4]
 722:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t ins;
 723:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 724:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Slice Pointer", XMC_CCU8_IsVal
 725:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Input",
 726:../Libraries/XMCLib/src/xmc_ccu8.c **** 		     XMC_CCU8_SLICE_IsInputvalid(ev1_config->mapped_input));
 727:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Edge Sensitivity", 
 728:../Libraries/XMCLib/src/xmc_ccu8.c ****              XMC_CCU8_SLICE_CHECK_EDGE_SENSITIVITY(ev1_config->edge));
 729:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Level Sensitivity", 
 730:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((ev1_config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
 731:../Libraries/XMCLib/src/xmc_ccu8.c ****               (ev1_config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
 732:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Debounce Period",
 733:../Libraries/XMCLib/src/xmc_ccu8.c ****               XMC_CCU8_SLICE_CHECK_EVENT_FILTER(ev1_config->duration));
 734:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Input",
 735:../Libraries/XMCLib/src/xmc_ccu8.c **** 		      XMC_CCU8_SLICE_IsInputvalid(ev2_config->mapped_input));
 736:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Edge Sensitivity",
 737:../Libraries/XMCLib/src/xmc_ccu8.c ****               XMC_CCU8_SLICE_CHECK_EDGE_SENSITIVITY(ev2_config->edge));
 738:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Level Sensitivity",
 739:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((ev2_config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
 740:../Libraries/XMCLib/src/xmc_ccu8.c ****               (ev2_config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
 741:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Debounce Period",
 742:../Libraries/XMCLib/src/xmc_ccu8.c ****              XMC_CCU8_SLICE_CHECK_EVENT_FILTER(ev2_config->duration));
 743:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 744:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU8V3) /* Defined for XMC1400 devices only */
 745:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS2;
 746:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 747:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the edge sensitivity for event 1 */
 748:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS2_EV1EM_Pos);
 749:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->edge) << CCU8_CC8_INS2_EV1EM_Pos;
 750:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 751:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the edge sensitivity for event 2 */
 752:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS2_EV2EM_Pos);
 753:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->edge) << CCU8_CC8_INS2_EV2EM_Pos;
 754:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 755:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the level sensitivity for event 1 */
 756:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS2_EV1LM_Pos);
 757:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->level) << CCU8_CC8_INS2_EV1LM_Pos;
 758:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 759:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the level sensitivity for event 2 */
 760:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS2_EV2LM_Pos);
 761:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->level) << CCU8_CC8_INS2_EV2LM_Pos;
 762:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 763:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the debounce filter for event 1 */
 764:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS2_LPF1M_Pos);
 765:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->duration) << CCU8_CC8_INS2_LPF1M_Pos;
 766:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 767:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the debounce filter for event 2 */
 768:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS2_LPF2M_Pos);
 769:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->duration) << CCU8_CC8_INS2_LPF2M_Pos;
 770:../Libraries/XMCLib/src/xmc_ccu8.c ****   
 771:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS2 = ins; 
 772:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 773:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS1;
 774:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, the input for Event1 */
 775:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS1_EV1IS_Pos);
 776:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->mapped_input) << CCU8_CC8_INS1_EV1IS_Pos;
 777:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 778:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Finally, the input for Event2 */
 779:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS1_EV2IS_Pos);
 780:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS1_EV2IS_Pos;
 781:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 782:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS1 = ins;  
 783:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 784:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS;
 1777              	 .loc 2 784 0
 1778 000c FB68     	 ldr r3,[r7,#12]
 1779 000e 1B68     	 ldr r3,[r3]
 1780 0010 7B61     	 str r3,[r7,#20]
 785:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 786:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the edge sensitivity for event 1 */
 787:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV1EM_Pos);
 1781              	 .loc 2 787 0
 1782 0012 7B69     	 ldr r3,[r7,#20]
 1783 0014 23F44023 	 bic r3,r3,#786432
 1784 0018 7B61     	 str r3,[r7,#20]
 788:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->edge) << CCU8_CC8_INS_EV1EM_Pos;
 1785              	 .loc 2 788 0
 1786 001a BB68     	 ldr r3,[r7,#8]
 1787 001c 5B78     	 ldrb r3,[r3,#1]
 1788 001e 9B04     	 lsls r3,r3,#18
 1789 0020 7A69     	 ldr r2,[r7,#20]
 1790 0022 1343     	 orrs r3,r3,r2
 1791 0024 7B61     	 str r3,[r7,#20]
 789:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 790:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the edge sensitivity for event 2 */
 791:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV2EM_Pos);
 1792              	 .loc 2 791 0
 1793 0026 7B69     	 ldr r3,[r7,#20]
 1794 0028 23F44013 	 bic r3,r3,#3145728
 1795 002c 7B61     	 str r3,[r7,#20]
 792:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->edge) << CCU8_CC8_INS_EV2EM_Pos;
 1796              	 .loc 2 792 0
 1797 002e 7B68     	 ldr r3,[r7,#4]
 1798 0030 5B78     	 ldrb r3,[r3,#1]
 1799 0032 1B05     	 lsls r3,r3,#20
 1800 0034 7A69     	 ldr r2,[r7,#20]
 1801 0036 1343     	 orrs r3,r3,r2
 1802 0038 7B61     	 str r3,[r7,#20]
 793:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 794:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the level sensitivity for event 1 */
 795:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV1LM_Pos);
 1803              	 .loc 2 795 0
 1804 003a 7B69     	 ldr r3,[r7,#20]
 1805 003c 23F40003 	 bic r3,r3,#8388608
 1806 0040 7B61     	 str r3,[r7,#20]
 796:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->level) << CCU8_CC8_INS_EV1LM_Pos;
 1807              	 .loc 2 796 0
 1808 0042 BB68     	 ldr r3,[r7,#8]
 1809 0044 9B78     	 ldrb r3,[r3,#2]
 1810 0046 DB05     	 lsls r3,r3,#23
 1811 0048 7A69     	 ldr r2,[r7,#20]
 1812 004a 1343     	 orrs r3,r3,r2
 1813 004c 7B61     	 str r3,[r7,#20]
 797:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 798:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the level sensitivity for event 2 */
 799:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV2LM_Pos);
 1814              	 .loc 2 799 0
 1815 004e 7B69     	 ldr r3,[r7,#20]
 1816 0050 23F08073 	 bic r3,r3,#16777216
 1817 0054 7B61     	 str r3,[r7,#20]
 800:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->level) << CCU8_CC8_INS_EV2LM_Pos;
 1818              	 .loc 2 800 0
 1819 0056 7B68     	 ldr r3,[r7,#4]
 1820 0058 9B78     	 ldrb r3,[r3,#2]
 1821 005a 1B06     	 lsls r3,r3,#24
 1822 005c 7A69     	 ldr r2,[r7,#20]
 1823 005e 1343     	 orrs r3,r3,r2
 1824 0060 7B61     	 str r3,[r7,#20]
 801:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 802:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the debounce filter for event 1 */
 803:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF1M_Pos);
 1825              	 .loc 2 803 0
 1826 0062 7B69     	 ldr r3,[r7,#20]
 1827 0064 23F0C053 	 bic r3,r3,#402653184
 1828 0068 7B61     	 str r3,[r7,#20]
 804:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->duration) << CCU8_CC8_INS_LPF1M_Pos;
 1829              	 .loc 2 804 0
 1830 006a BB68     	 ldr r3,[r7,#8]
 1831 006c DB78     	 ldrb r3,[r3,#3]
 1832 006e DB06     	 lsls r3,r3,#27
 1833 0070 7A69     	 ldr r2,[r7,#20]
 1834 0072 1343     	 orrs r3,r3,r2
 1835 0074 7B61     	 str r3,[r7,#20]
 805:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 806:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the debounce filter for event 2 */
 807:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF2M_Pos);
 1836              	 .loc 2 807 0
 1837 0076 7B69     	 ldr r3,[r7,#20]
 1838 0078 23F0C043 	 bic r3,r3,#1610612736
 1839 007c 7B61     	 str r3,[r7,#20]
 808:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->duration) << CCU8_CC8_INS_LPF2M_Pos;
 1840              	 .loc 2 808 0
 1841 007e 7B68     	 ldr r3,[r7,#4]
 1842 0080 DB78     	 ldrb r3,[r3,#3]
 1843 0082 5B07     	 lsls r3,r3,#29
 1844 0084 7A69     	 ldr r2,[r7,#20]
 1845 0086 1343     	 orrs r3,r3,r2
 1846 0088 7B61     	 str r3,[r7,#20]
 809:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 810:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, the input for Event1 */
 811:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV1IS_Pos);
 1847              	 .loc 2 811 0
 1848 008a 7B69     	 ldr r3,[r7,#20]
 1849 008c 23F0F003 	 bic r3,r3,#240
 1850 0090 7B61     	 str r3,[r7,#20]
 812:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->mapped_input) << CCU8_CC8_INS_EV1IS_Pos;
 1851              	 .loc 2 812 0
 1852 0092 BB68     	 ldr r3,[r7,#8]
 1853 0094 1B78     	 ldrb r3,[r3]
 1854 0096 1B01     	 lsls r3,r3,#4
 1855 0098 7A69     	 ldr r2,[r7,#20]
 1856 009a 1343     	 orrs r3,r3,r2
 1857 009c 7B61     	 str r3,[r7,#20]
 813:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 814:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Finally, the input for Event2 */
 815:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV2IS_Pos);
 1858              	 .loc 2 815 0
 1859 009e 7B69     	 ldr r3,[r7,#20]
 1860 00a0 23F47063 	 bic r3,r3,#3840
 1861 00a4 7B61     	 str r3,[r7,#20]
 816:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS_EV2IS_Pos;
 1862              	 .loc 2 816 0
 1863 00a6 7B68     	 ldr r3,[r7,#4]
 1864 00a8 1B78     	 ldrb r3,[r3]
 1865 00aa 1B02     	 lsls r3,r3,#8
 1866 00ac 7A69     	 ldr r2,[r7,#20]
 1867 00ae 1343     	 orrs r3,r3,r2
 1868 00b0 7B61     	 str r3,[r7,#20]
 817:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 818:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS = ins;
 1869              	 .loc 2 818 0
 1870 00b2 FB68     	 ldr r3,[r7,#12]
 1871 00b4 7A69     	 ldr r2,[r7,#20]
 1872 00b6 1A60     	 str r2,[r3]
 819:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 820:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1873              	 .loc 2 820 0
 1874 00b8 1C37     	 adds r7,r7,#28
 1875              	.LCFI156:
 1876              	 .cfi_def_cfa_offset 4
 1877 00ba BD46     	 mov sp,r7
 1878              	.LCFI157:
 1879              	 .cfi_def_cfa_register 13
 1880              	 
 1881 00bc 5DF8047B 	 ldr r7,[sp],#4
 1882              	.LCFI158:
 1883              	 .cfi_restore 7
 1884              	 .cfi_def_cfa_offset 0
 1885 00c0 7047     	 bx lr
 1886              	 .cfi_endproc
 1887              	.LFE223:
 1889 00c2 00BF     	 .section .text.XMC_CCU8_SLICE_ConfigureEvent,"ax",%progbits
 1890              	 .align 2
 1891              	 .global XMC_CCU8_SLICE_ConfigureEvent
 1892              	 .thumb
 1893              	 .thumb_func
 1895              	XMC_CCU8_SLICE_ConfigureEvent:
 1896              	.LFB224:
 821:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 822:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure a slice trigger event */
 823:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
 824:../Libraries/XMCLib/src/xmc_ccu8.c ****                                    const XMC_CCU8_SLICE_EVENT_t event,
 825:../Libraries/XMCLib/src/xmc_ccu8.c ****                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *const config)
 826:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1897              	 .loc 2 826 0
 1898              	 .cfi_startproc
 1899              	 
 1900              	 
 1901              	 
 1902 0000 80B4     	 push {r7}
 1903              	.LCFI159:
 1904              	 .cfi_def_cfa_offset 4
 1905              	 .cfi_offset 7,-4
 1906 0002 89B0     	 sub sp,sp,#36
 1907              	.LCFI160:
 1908              	 .cfi_def_cfa_offset 40
 1909 0004 00AF     	 add r7,sp,#0
 1910              	.LCFI161:
 1911              	 .cfi_def_cfa_register 7
 1912 0006 F860     	 str r0,[r7,#12]
 1913 0008 0B46     	 mov r3,r1
 1914 000a 7A60     	 str r2,[r7,#4]
 1915 000c FB72     	 strb r3,[r7,#11]
 827:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t ins;
 828:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t  pos;
 829:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t  offset;
 830:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 831:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 832:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event)
 833:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Input",  XMC_CCU8_SLICE_IsInputvalid(config->ma
 834:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Edge Sensitivity",
 835:../Libraries/XMCLib/src/xmc_ccu8.c ****              XMC_CCU8_SLICE_CHECK_EDGE_SENSITIVITY(config->edge));
 836:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Level Sensitivity", 
 837:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
 838:../Libraries/XMCLib/src/xmc_ccu8.c ****               (config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
 839:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Debounce Period",
 840:../Libraries/XMCLib/src/xmc_ccu8.c ****              XMC_CCU8_SLICE_CHECK_EVENT_FILTER(config->duration));
 841:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 842:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Calculate offset with reference to event */
 843:../Libraries/XMCLib/src/xmc_ccu8.c ****   offset = ((uint8_t) event) - 1U;
 1916              	 .loc 2 843 0
 1917 000e FB7A     	 ldrb r3,[r7,#11]
 1918 0010 013B     	 subs r3,r3,#1
 1919 0012 FB77     	 strb r3,[r7,#31]
 844:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 845:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU8V3) /* Defined for XMC1400 devices only */
 846:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS2;
 847:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 848:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, configure the edge sensitivity */
 849:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS2_EV0EM_Pos) + (uint8_t)(offset << 2U);
 850:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 851:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->edge) << pos;
 852:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 853:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, the level */
 854:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS2_EV0LM_Pos) + (uint8_t)(offset << 2U);
 855:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 856:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) (config->level)) << pos;
 857:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 858:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, the debounce filter */
 859:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS2_LPF0M_Pos) + (uint8_t)(offset << 2U);
 860:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 861:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->duration) << pos;
 862:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 863:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS2 = ins;
 864:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 865:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS1;
 866:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 867:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Finally the input */
 868:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS1_EV0IS_Pos) + (uint8_t)(offset << 3U);
 869:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 870:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->mapped_input) << pos;
 871:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 872:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS1 = ins;
 873:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 874:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 875:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS;
 1920              	 .loc 2 875 0
 1921 0014 FB68     	 ldr r3,[r7,#12]
 1922 0016 1B68     	 ldr r3,[r3]
 1923 0018 BB61     	 str r3,[r7,#24]
 876:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 877:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, configure the edge sensitivity */
 878:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 1924              	 .loc 2 878 0
 1925 001a FB7F     	 ldrb r3,[r7,#31]
 1926 001c 5B00     	 lsls r3,r3,#1
 1927 001e DBB2     	 uxtb r3,r3
 1928 0020 1033     	 adds r3,r3,#16
 1929 0022 FB75     	 strb r3,[r7,#23]
 879:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 1930              	 .loc 2 879 0
 1931 0024 FB7D     	 ldrb r3,[r7,#23]
 1932 0026 0322     	 movs r2,#3
 1933 0028 02FA03F3 	 lsl r3,r2,r3
 1934 002c DB43     	 mvns r3,r3
 1935 002e BA69     	 ldr r2,[r7,#24]
 1936 0030 1340     	 ands r3,r3,r2
 1937 0032 BB61     	 str r3,[r7,#24]
 880:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->edge) << pos;
 1938              	 .loc 2 880 0
 1939 0034 7B68     	 ldr r3,[r7,#4]
 1940 0036 5B78     	 ldrb r3,[r3,#1]
 1941 0038 1A46     	 mov r2,r3
 1942 003a FB7D     	 ldrb r3,[r7,#23]
 1943 003c 02FA03F3 	 lsl r3,r2,r3
 1944 0040 BA69     	 ldr r2,[r7,#24]
 1945 0042 1343     	 orrs r3,r3,r2
 1946 0044 BB61     	 str r3,[r7,#24]
 881:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 882:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, the level */
 883:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
 1947              	 .loc 2 883 0
 1948 0046 FB7F     	 ldrb r3,[r7,#31]
 1949 0048 1633     	 adds r3,r3,#22
 1950 004a FB75     	 strb r3,[r7,#23]
 884:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 1951              	 .loc 2 884 0
 1952 004c FB7D     	 ldrb r3,[r7,#23]
 1953 004e 0122     	 movs r2,#1
 1954 0050 02FA03F3 	 lsl r3,r2,r3
 1955 0054 DB43     	 mvns r3,r3
 1956 0056 BA69     	 ldr r2,[r7,#24]
 1957 0058 1340     	 ands r3,r3,r2
 1958 005a BB61     	 str r3,[r7,#24]
 885:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) (config->level)) << pos;
 1959              	 .loc 2 885 0
 1960 005c 7B68     	 ldr r3,[r7,#4]
 1961 005e 9B78     	 ldrb r3,[r3,#2]
 1962 0060 1A46     	 mov r2,r3
 1963 0062 FB7D     	 ldrb r3,[r7,#23]
 1964 0064 02FA03F3 	 lsl r3,r2,r3
 1965 0068 BA69     	 ldr r2,[r7,#24]
 1966 006a 1343     	 orrs r3,r3,r2
 1967 006c BB61     	 str r3,[r7,#24]
 886:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 887:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, the debounce filter */
 888:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 1968              	 .loc 2 888 0
 1969 006e FB7F     	 ldrb r3,[r7,#31]
 1970 0070 5B00     	 lsls r3,r3,#1
 1971 0072 DBB2     	 uxtb r3,r3
 1972 0074 1933     	 adds r3,r3,#25
 1973 0076 FB75     	 strb r3,[r7,#23]
 889:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 1974              	 .loc 2 889 0
 1975 0078 FB7D     	 ldrb r3,[r7,#23]
 1976 007a 0322     	 movs r2,#3
 1977 007c 02FA03F3 	 lsl r3,r2,r3
 1978 0080 DB43     	 mvns r3,r3
 1979 0082 BA69     	 ldr r2,[r7,#24]
 1980 0084 1340     	 ands r3,r3,r2
 1981 0086 BB61     	 str r3,[r7,#24]
 890:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->duration) << pos;
 1982              	 .loc 2 890 0
 1983 0088 7B68     	 ldr r3,[r7,#4]
 1984 008a DB78     	 ldrb r3,[r3,#3]
 1985 008c 1A46     	 mov r2,r3
 1986 008e FB7D     	 ldrb r3,[r7,#23]
 1987 0090 02FA03F3 	 lsl r3,r2,r3
 1988 0094 BA69     	 ldr r2,[r7,#24]
 1989 0096 1343     	 orrs r3,r3,r2
 1990 0098 BB61     	 str r3,[r7,#24]
 891:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 892:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Finally the input */
 893:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 1991              	 .loc 2 893 0
 1992 009a FB7F     	 ldrb r3,[r7,#31]
 1993 009c 9B00     	 lsls r3,r3,#2
 1994 009e FB75     	 strb r3,[r7,#23]
 894:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 1995              	 .loc 2 894 0
 1996 00a0 FB7D     	 ldrb r3,[r7,#23]
 1997 00a2 0F22     	 movs r2,#15
 1998 00a4 02FA03F3 	 lsl r3,r2,r3
 1999 00a8 DB43     	 mvns r3,r3
 2000 00aa BA69     	 ldr r2,[r7,#24]
 2001 00ac 1340     	 ands r3,r3,r2
 2002 00ae BB61     	 str r3,[r7,#24]
 895:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->mapped_input) << pos;
 2003              	 .loc 2 895 0
 2004 00b0 7B68     	 ldr r3,[r7,#4]
 2005 00b2 1B78     	 ldrb r3,[r3]
 2006 00b4 1A46     	 mov r2,r3
 2007 00b6 FB7D     	 ldrb r3,[r7,#23]
 2008 00b8 02FA03F3 	 lsl r3,r2,r3
 2009 00bc BA69     	 ldr r2,[r7,#24]
 2010 00be 1343     	 orrs r3,r3,r2
 2011 00c0 BB61     	 str r3,[r7,#24]
 896:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 897:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS = ins;
 2012              	 .loc 2 897 0
 2013 00c2 FB68     	 ldr r3,[r7,#12]
 2014 00c4 BA69     	 ldr r2,[r7,#24]
 2015 00c6 1A60     	 str r2,[r3]
 898:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 899:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2016              	 .loc 2 899 0
 2017 00c8 2437     	 adds r7,r7,#36
 2018              	.LCFI162:
 2019              	 .cfi_def_cfa_offset 4
 2020 00ca BD46     	 mov sp,r7
 2021              	.LCFI163:
 2022              	 .cfi_def_cfa_register 13
 2023              	 
 2024 00cc 5DF8047B 	 ldr r7,[sp],#4
 2025              	.LCFI164:
 2026              	 .cfi_restore 7
 2027              	 .cfi_def_cfa_offset 0
 2028 00d0 7047     	 bx lr
 2029              	 .cfi_endproc
 2030              	.LFE224:
 2032 00d2 00BF     	 .section .text.XMC_CCU8_SLICE_SetInput,"ax",%progbits
 2033              	 .align 2
 2034              	 .global XMC_CCU8_SLICE_SetInput
 2035              	 .thumb
 2036              	 .thumb_func
 2038              	XMC_CCU8_SLICE_SetInput:
 2039              	.LFB225:
 900:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 901:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to bind an input to a slice trigger event */
 902:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetInput(XMC_CCU8_SLICE_t *const slice,
 903:../Libraries/XMCLib/src/xmc_ccu8.c ****                          const XMC_CCU8_SLICE_EVENT_t event,
 904:../Libraries/XMCLib/src/xmc_ccu8.c ****                              const XMC_CCU8_SLICE_INPUT_t input)
 905:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2040              	 .loc 2 905 0
 2041              	 .cfi_startproc
 2042              	 
 2043              	 
 2044              	 
 2045 0000 80B4     	 push {r7}
 2046              	.LCFI165:
 2047              	 .cfi_def_cfa_offset 4
 2048              	 .cfi_offset 7,-4
 2049 0002 85B0     	 sub sp,sp,#20
 2050              	.LCFI166:
 2051              	 .cfi_def_cfa_offset 24
 2052 0004 00AF     	 add r7,sp,#0
 2053              	.LCFI167:
 2054              	 .cfi_def_cfa_register 7
 2055 0006 7860     	 str r0,[r7,#4]
 2056 0008 0B46     	 mov r3,r1
 2057 000a FB70     	 strb r3,[r7,#3]
 2058 000c 1346     	 mov r3,r2
 2059 000e BB70     	 strb r3,[r7,#2]
 906:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t ins;
 907:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t  pos;
 908:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t  offset;
 909:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 910:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetInput:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 911:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetInput:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
 912:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetInput:Invalid Input", XMC_CCU8_SLICE_IsInputvalid(input));
 913:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 914:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Calculate offset with reference to event */
 915:../Libraries/XMCLib/src/xmc_ccu8.c ****   offset = ((uint8_t) event) - 1U;
 2060              	 .loc 2 915 0
 2061 0010 FB78     	 ldrb r3,[r7,#3]
 2062 0012 013B     	 subs r3,r3,#1
 2063 0014 FB73     	 strb r3,[r7,#15]
 916:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 917:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU8V3) /* Defined for XMC1400 devices only */
 918:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS1_EV0IS_Pos) + (uint8_t) (offset << 3U);
 919:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS1;
 920:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 921:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) input) << pos;
 922:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 923:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS1 = ins;
 924:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 925:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 926:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t) (offset << 2U);
 2064              	 .loc 2 926 0
 2065 0016 FB7B     	 ldrb r3,[r7,#15]
 2066 0018 9B00     	 lsls r3,r3,#2
 2067 001a BB73     	 strb r3,[r7,#14]
 927:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS;
 2068              	 .loc 2 927 0
 2069 001c 7B68     	 ldr r3,[r7,#4]
 2070 001e 1B68     	 ldr r3,[r3]
 2071 0020 BB60     	 str r3,[r7,#8]
 928:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 2072              	 .loc 2 928 0
 2073 0022 BB7B     	 ldrb r3,[r7,#14]
 2074 0024 0F22     	 movs r2,#15
 2075 0026 02FA03F3 	 lsl r3,r2,r3
 2076 002a DB43     	 mvns r3,r3
 2077 002c BA68     	 ldr r2,[r7,#8]
 2078 002e 1340     	 ands r3,r3,r2
 2079 0030 BB60     	 str r3,[r7,#8]
 929:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) input) << pos;
 2080              	 .loc 2 929 0
 2081 0032 BA78     	 ldrb r2,[r7,#2]
 2082 0034 BB7B     	 ldrb r3,[r7,#14]
 2083 0036 02FA03F3 	 lsl r3,r2,r3
 2084 003a BA68     	 ldr r2,[r7,#8]
 2085 003c 1343     	 orrs r3,r3,r2
 2086 003e BB60     	 str r3,[r7,#8]
 930:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 931:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS = ins;
 2087              	 .loc 2 931 0
 2088 0040 7B68     	 ldr r3,[r7,#4]
 2089 0042 BA68     	 ldr r2,[r7,#8]
 2090 0044 1A60     	 str r2,[r3]
 932:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 933:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2091              	 .loc 2 933 0
 2092 0046 1437     	 adds r7,r7,#20
 2093              	.LCFI168:
 2094              	 .cfi_def_cfa_offset 4
 2095 0048 BD46     	 mov sp,r7
 2096              	.LCFI169:
 2097              	 .cfi_def_cfa_register 13
 2098              	 
 2099 004a 5DF8047B 	 ldr r7,[sp],#4
 2100              	.LCFI170:
 2101              	 .cfi_restore 7
 2102              	 .cfi_def_cfa_offset 0
 2103 004e 7047     	 bx lr
 2104              	 .cfi_endproc
 2105              	.LFE225:
 2107              	 .section .text.XMC_CCU8_SLICE_SetTimerRepeatMode,"ax",%progbits
 2108              	 .align 2
 2109              	 .global XMC_CCU8_SLICE_SetTimerRepeatMode
 2110              	 .thumb
 2111              	 .thumb_func
 2113              	XMC_CCU8_SLICE_SetTimerRepeatMode:
 2114              	.LFB226:
 934:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 935:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to program timer repeat mode - Single shot vs repeat  */
 936:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetTimerRepeatMode(XMC_CCU8_SLICE_t *const slice,
 937:../Libraries/XMCLib/src/xmc_ccu8.c ****                                    const XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t mode)
 938:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2115              	 .loc 2 938 0
 2116              	 .cfi_startproc
 2117              	 
 2118              	 
 2119              	 
 2120 0000 80B4     	 push {r7}
 2121              	.LCFI171:
 2122              	 .cfi_def_cfa_offset 4
 2123              	 .cfi_offset 7,-4
 2124 0002 85B0     	 sub sp,sp,#20
 2125              	.LCFI172:
 2126              	 .cfi_def_cfa_offset 24
 2127 0004 00AF     	 add r7,sp,#0
 2128              	.LCFI173:
 2129              	 .cfi_def_cfa_register 7
 2130 0006 7860     	 str r0,[r7,#4]
 2131 0008 0B46     	 mov r3,r1
 2132 000a FB70     	 strb r3,[r7,#3]
 939:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 940:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 941:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice
 942:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerRepeatMode:Invalid Timer Repeat Mode", 
 943:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((mode == XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT) ||\
 944:../Libraries/XMCLib/src/xmc_ccu8.c ****               (mode == (mode == XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT))));
 945:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 946:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc = slice->TC;
 2133              	 .loc 2 946 0
 2134 000c 7B68     	 ldr r3,[r7,#4]
 2135 000e 5B69     	 ldr r3,[r3,#20]
 2136 0010 FB60     	 str r3,[r7,#12]
 947:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 948:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT == mode)
 2137              	 .loc 2 948 0
 2138 0012 FB78     	 ldrb r3,[r7,#3]
 2139 0014 002B     	 cmp r3,#0
 2140 0016 04D1     	 bne .L66
 949:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 950:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_TSSM_Msk);
 2141              	 .loc 2 950 0
 2142 0018 FB68     	 ldr r3,[r7,#12]
 2143 001a 23F00203 	 bic r3,r3,#2
 2144 001e FB60     	 str r3,[r7,#12]
 2145 0020 03E0     	 b .L67
 2146              	.L66:
 951:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 952:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 953:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 954:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_TSSM_Msk;
 2147              	 .loc 2 954 0
 2148 0022 FB68     	 ldr r3,[r7,#12]
 2149 0024 43F00203 	 orr r3,r3,#2
 2150 0028 FB60     	 str r3,[r7,#12]
 2151              	.L67:
 955:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 956:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 957:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 2152              	 .loc 2 957 0
 2153 002a 7B68     	 ldr r3,[r7,#4]
 2154 002c FA68     	 ldr r2,[r7,#12]
 2155 002e 5A61     	 str r2,[r3,#20]
 958:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2156              	 .loc 2 958 0
 2157 0030 1437     	 adds r7,r7,#20
 2158              	.LCFI174:
 2159              	 .cfi_def_cfa_offset 4
 2160 0032 BD46     	 mov sp,r7
 2161              	.LCFI175:
 2162              	 .cfi_def_cfa_register 13
 2163              	 
 2164 0034 5DF8047B 	 ldr r7,[sp],#4
 2165              	.LCFI176:
 2166              	 .cfi_restore 7
 2167              	 .cfi_def_cfa_offset 0
 2168 0038 7047     	 bx lr
 2169              	 .cfi_endproc
 2170              	.LFE226:
 2172 003a 00BF     	 .section .text.XMC_CCU8_SLICE_SetTimerCountingMode,"ax",%progbits
 2173              	 .align 2
 2174              	 .global XMC_CCU8_SLICE_SetTimerCountingMode
 2175              	 .thumb
 2176              	 .thumb_func
 2178              	XMC_CCU8_SLICE_SetTimerCountingMode:
 2179              	.LFB227:
 959:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 960:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Programs timer counting mode  */
 961:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetTimerCountingMode(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_TIMER_
 962:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2180              	 .loc 2 962 0
 2181              	 .cfi_startproc
 2182              	 
 2183              	 
 2184              	 
 2185 0000 80B4     	 push {r7}
 2186              	.LCFI177:
 2187              	 .cfi_def_cfa_offset 4
 2188              	 .cfi_offset 7,-4
 2189 0002 85B0     	 sub sp,sp,#20
 2190              	.LCFI178:
 2191              	 .cfi_def_cfa_offset 24
 2192 0004 00AF     	 add r7,sp,#0
 2193              	.LCFI179:
 2194              	 .cfi_def_cfa_register 7
 2195 0006 7860     	 str r0,[r7,#4]
 2196 0008 0B46     	 mov r3,r1
 2197 000a FB70     	 strb r3,[r7,#3]
 963:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 964:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 965:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCountingMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sli
 966:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCountingMode:Invalid Timer Count Mode",
 967:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((mode == XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA) ||\
 968:../Libraries/XMCLib/src/xmc_ccu8.c ****               (mode == XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA)));
 969:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 970:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc = slice->TC;
 2198              	 .loc 2 970 0
 2199 000c 7B68     	 ldr r3,[r7,#4]
 2200 000e 5B69     	 ldr r3,[r3,#20]
 2201 0010 FB60     	 str r3,[r7,#12]
 971:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 972:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA == mode)
 2202              	 .loc 2 972 0
 2203 0012 FB78     	 ldrb r3,[r7,#3]
 2204 0014 002B     	 cmp r3,#0
 2205 0016 04D1     	 bne .L69
 973:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 974:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_TCM_Msk);
 2206              	 .loc 2 974 0
 2207 0018 FB68     	 ldr r3,[r7,#12]
 2208 001a 23F00103 	 bic r3,r3,#1
 2209 001e FB60     	 str r3,[r7,#12]
 2210 0020 03E0     	 b .L70
 2211              	.L69:
 975:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 976:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 977:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 978:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_TCM_Msk;
 2212              	 .loc 2 978 0
 2213 0022 FB68     	 ldr r3,[r7,#12]
 2214 0024 43F00103 	 orr r3,r3,#1
 2215 0028 FB60     	 str r3,[r7,#12]
 2216              	.L70:
 979:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 980:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 981:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 2217              	 .loc 2 981 0
 2218 002a 7B68     	 ldr r3,[r7,#4]
 2219 002c FA68     	 ldr r2,[r7,#12]
 2220 002e 5A61     	 str r2,[r3,#20]
 982:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2221              	 .loc 2 982 0
 2222 0030 1437     	 adds r7,r7,#20
 2223              	.LCFI180:
 2224              	 .cfi_def_cfa_offset 4
 2225 0032 BD46     	 mov sp,r7
 2226              	.LCFI181:
 2227              	 .cfi_def_cfa_register 13
 2228              	 
 2229 0034 5DF8047B 	 ldr r7,[sp],#4
 2230              	.LCFI182:
 2231              	 .cfi_restore 7
 2232              	 .cfi_def_cfa_offset 0
 2233 0038 7047     	 bx lr
 2234              	 .cfi_endproc
 2235              	.LFE227:
 2237 003a 00BF     	 .section .text.XMC_CCU8_SLICE_SetTimerPeriodMatch,"ax",%progbits
 2238              	 .align 2
 2239              	 .global XMC_CCU8_SLICE_SetTimerPeriodMatch
 2240              	 .thumb
 2241              	 .thumb_func
 2243              	XMC_CCU8_SLICE_SetTimerPeriodMatch:
 2244              	.LFB228:
 983:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 984:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Programs period match value of the timer  */
 985:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
 986:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2245              	 .loc 2 986 0
 2246              	 .cfi_startproc
 2247              	 
 2248              	 
 2249              	 
 2250 0000 80B4     	 push {r7}
 2251              	.LCFI183:
 2252              	 .cfi_def_cfa_offset 4
 2253              	 .cfi_offset 7,-4
 2254 0002 83B0     	 sub sp,sp,#12
 2255              	.LCFI184:
 2256              	 .cfi_def_cfa_offset 16
 2257 0004 00AF     	 add r7,sp,#0
 2258              	.LCFI185:
 2259              	 .cfi_def_cfa_register 7
 2260 0006 7860     	 str r0,[r7,#4]
 2261 0008 0B46     	 mov r3,r1
 2262 000a 7B80     	 strh r3,[r7,#2]
 987:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slic
 988:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->PRS = (uint32_t) period_val;
 2263              	 .loc 2 988 0
 2264 000c 7A88     	 ldrh r2,[r7,#2]
 2265 000e 7B68     	 ldr r3,[r7,#4]
 2266 0010 5A63     	 str r2,[r3,#52]
 989:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2267              	 .loc 2 989 0
 2268 0012 0C37     	 adds r7,r7,#12
 2269              	.LCFI186:
 2270              	 .cfi_def_cfa_offset 4
 2271 0014 BD46     	 mov sp,r7
 2272              	.LCFI187:
 2273              	 .cfi_def_cfa_register 13
 2274              	 
 2275 0016 5DF8047B 	 ldr r7,[sp],#4
 2276              	.LCFI188:
 2277              	 .cfi_restore 7
 2278              	 .cfi_def_cfa_offset 0
 2279 001a 7047     	 bx lr
 2280              	 .cfi_endproc
 2281              	.LFE228:
 2283              	 .section .text.XMC_CCU8_SLICE_GetCaptureRegisterValue,"ax",%progbits
 2284              	 .align 2
 2285              	 .global XMC_CCU8_SLICE_GetCaptureRegisterValue
 2286              	 .thumb
 2287              	 .thumb_func
 2289              	XMC_CCU8_SLICE_GetCaptureRegisterValue:
 2290              	.LFB229:
 990:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 991:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Retrieves desired capture register value */
 992:../Libraries/XMCLib/src/xmc_ccu8.c **** uint32_t XMC_CCU8_SLICE_GetCaptureRegisterValue(const XMC_CCU8_SLICE_t *const slice, const uint8_t 
 993:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2291              	 .loc 2 993 0
 2292              	 .cfi_startproc
 2293              	 
 2294              	 
 2295              	 
 2296 0000 80B4     	 push {r7}
 2297              	.LCFI189:
 2298              	 .cfi_def_cfa_offset 4
 2299              	 .cfi_offset 7,-4
 2300 0002 83B0     	 sub sp,sp,#12
 2301              	.LCFI190:
 2302              	 .cfi_def_cfa_offset 16
 2303 0004 00AF     	 add r7,sp,#0
 2304              	.LCFI191:
 2305              	 .cfi_def_cfa_register 7
 2306 0006 7860     	 str r0,[r7,#4]
 2307 0008 0B46     	 mov r3,r1
 2308 000a FB70     	 strb r3,[r7,#3]
 994:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCaptureRegisterValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(
 995:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCaptureRegisterValue:Invalid register number", (reg_num < 4U));
 996:../Libraries/XMCLib/src/xmc_ccu8.c ****   return(slice->CV[reg_num]);
 2309              	 .loc 2 996 0
 2310 000c FB78     	 ldrb r3,[r7,#3]
 2311 000e 7A68     	 ldr r2,[r7,#4]
 2312 0010 1C33     	 adds r3,r3,#28
 2313 0012 9B00     	 lsls r3,r3,#2
 2314 0014 1344     	 add r3,r3,r2
 2315 0016 5B68     	 ldr r3,[r3,#4]
 997:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2316              	 .loc 2 997 0
 2317 0018 1846     	 mov r0,r3
 2318 001a 0C37     	 adds r7,r7,#12
 2319              	.LCFI192:
 2320              	 .cfi_def_cfa_offset 4
 2321 001c BD46     	 mov sp,r7
 2322              	.LCFI193:
 2323              	 .cfi_def_cfa_register 13
 2324              	 
 2325 001e 5DF8047B 	 ldr r7,[sp],#4
 2326              	.LCFI194:
 2327              	 .cfi_restore 7
 2328              	 .cfi_def_cfa_offset 0
 2329 0022 7047     	 bx lr
 2330              	 .cfi_endproc
 2331              	.LFE229:
 2333              	 .section .text.XMC_CCU8_SLICE_GetLastCapturedTimerValue,"ax",%progbits
 2334              	 .align 2
 2335              	 .global XMC_CCU8_SLICE_GetLastCapturedTimerValue
 2336              	 .thumb
 2337              	 .thumb_func
 2339              	XMC_CCU8_SLICE_GetLastCapturedTimerValue:
 2340              	.LFB230:
 998:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 999:../Libraries/XMCLib/src/xmc_ccu8.c **** /* @brief Retrieves the latest captured timer value */
1000:../Libraries/XMCLib/src/xmc_ccu8.c **** XMC_CCU8_STATUS_t XMC_CCU8_SLICE_GetLastCapturedTimerValue(const XMC_CCU8_SLICE_t *const slice,
1001:../Libraries/XMCLib/src/xmc_ccu8.c ****                                                            const XMC_CCU8_SLICE_CAP_REG_SET_t set,
1002:../Libraries/XMCLib/src/xmc_ccu8.c ****                                                            uint32_t *val_ptr)
1003:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2341              	 .loc 2 1003 0
 2342              	 .cfi_startproc
 2343              	 
 2344              	 
 2345              	 
 2346 0000 80B4     	 push {r7}
 2347              	.LCFI195:
 2348              	 .cfi_def_cfa_offset 4
 2349              	 .cfi_offset 7,-4
 2350 0002 87B0     	 sub sp,sp,#28
 2351              	.LCFI196:
 2352              	 .cfi_def_cfa_offset 32
 2353 0004 00AF     	 add r7,sp,#0
 2354              	.LCFI197:
 2355              	 .cfi_def_cfa_register 7
 2356 0006 F860     	 str r0,[r7,#12]
 2357 0008 0B46     	 mov r3,r1
 2358 000a 7A60     	 str r2,[r7,#4]
 2359 000c FB72     	 strb r3,[r7,#11]
1004:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1005:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_STATUS_t retval;
1006:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t i;
1007:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t start;
1008:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t end;
1009:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1010:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetLastCapturedTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlic
1011:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetLastCapturedTimerValue:Invalid Register Set",
1012:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((set == XMC_CCU8_SLICE_CAP_REG_SET_LOW) ||\
1013:../Libraries/XMCLib/src/xmc_ccu8.c ****               (set == XMC_CCU8_SLICE_CAP_REG_SET_HIGH)));
1014:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1015:../Libraries/XMCLib/src/xmc_ccu8.c ****   retval = XMC_CCU8_STATUS_ERROR;
 2360              	 .loc 2 1015 0
 2361 000e 0123     	 movs r3,#1
 2362 0010 FB75     	 strb r3,[r7,#23]
1016:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1017:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First check if extended capture mode is enabled */
1018:../Libraries/XMCLib/src/xmc_ccu8.c ****   if((slice->TC) & CCU8_CC8_TC_ECM_Msk)
 2363              	 .loc 2 1018 0
 2364 0012 FB68     	 ldr r3,[r7,#12]
 2365 0014 5B69     	 ldr r3,[r3,#20]
 2366 0016 03F01003 	 and r3,r3,#16
 2367 001a 002B     	 cmp r3,#0
 2368 001c 04D0     	 beq .L75
1019:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1020:../Libraries/XMCLib/src/xmc_ccu8.c ****     /* Extended capture mode has been enabled. So start with the lowest capture register and work y
1021:../Libraries/XMCLib/src/xmc_ccu8.c ****     start = 0U;
 2369              	 .loc 2 1021 0
 2370 001e 0023     	 movs r3,#0
 2371 0020 7B75     	 strb r3,[r7,#21]
1022:../Libraries/XMCLib/src/xmc_ccu8.c ****     end = XMC_CCU8_NUM_SLICES_PER_MODULE;
 2372              	 .loc 2 1022 0
 2373 0022 0423     	 movs r3,#4
 2374 0024 3B75     	 strb r3,[r7,#20]
 2375 0026 0BE0     	 b .L76
 2376              	.L75:
1023:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1024:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
1025:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1026:../Libraries/XMCLib/src/xmc_ccu8.c ****     /* Extended capture mode is not enabled */
1027:../Libraries/XMCLib/src/xmc_ccu8.c ****     if(set == XMC_CCU8_SLICE_CAP_REG_SET_HIGH)
 2377              	 .loc 2 1027 0
 2378 0028 FB7A     	 ldrb r3,[r7,#11]
 2379 002a 012B     	 cmp r3,#1
 2380 002c 04D1     	 bne .L77
1028:../Libraries/XMCLib/src/xmc_ccu8.c ****     {
1029:../Libraries/XMCLib/src/xmc_ccu8.c ****       start = ((uint8_t) XMC_CCU8_NUM_SLICES_PER_MODULE) >> 1U;
 2381              	 .loc 2 1029 0
 2382 002e 0223     	 movs r3,#2
 2383 0030 7B75     	 strb r3,[r7,#21]
1030:../Libraries/XMCLib/src/xmc_ccu8.c ****       end   = (uint8_t) XMC_CCU8_NUM_SLICES_PER_MODULE;
 2384              	 .loc 2 1030 0
 2385 0032 0423     	 movs r3,#4
 2386 0034 3B75     	 strb r3,[r7,#20]
 2387 0036 03E0     	 b .L76
 2388              	.L77:
1031:../Libraries/XMCLib/src/xmc_ccu8.c ****     }
1032:../Libraries/XMCLib/src/xmc_ccu8.c ****     else
1033:../Libraries/XMCLib/src/xmc_ccu8.c ****     {
1034:../Libraries/XMCLib/src/xmc_ccu8.c ****       start = 0U;
 2389              	 .loc 2 1034 0
 2390 0038 0023     	 movs r3,#0
 2391 003a 7B75     	 strb r3,[r7,#21]
1035:../Libraries/XMCLib/src/xmc_ccu8.c ****       end = ((uint8_t) XMC_CCU8_NUM_SLICES_PER_MODULE) >> 1U;
 2392              	 .loc 2 1035 0
 2393 003c 0223     	 movs r3,#2
 2394 003e 3B75     	 strb r3,[r7,#20]
 2395              	.L76:
1036:../Libraries/XMCLib/src/xmc_ccu8.c ****     }
1037:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1038:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1039:../Libraries/XMCLib/src/xmc_ccu8.c ****   for(i=start; i<end; i++)
 2396              	 .loc 2 1039 0
 2397 0040 7B7D     	 ldrb r3,[r7,#21]
 2398 0042 BB75     	 strb r3,[r7,#22]
 2399 0044 17E0     	 b .L78
 2400              	.L81:
1040:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1041:../Libraries/XMCLib/src/xmc_ccu8.c ****     if( (slice->CV[i]) & CCU8_CC8_CV_FFL_Msk )
 2401              	 .loc 2 1041 0
 2402 0046 BB7D     	 ldrb r3,[r7,#22]
 2403 0048 FA68     	 ldr r2,[r7,#12]
 2404 004a 1C33     	 adds r3,r3,#28
 2405 004c 9B00     	 lsls r3,r3,#2
 2406 004e 1344     	 add r3,r3,r2
 2407 0050 5B68     	 ldr r3,[r3,#4]
 2408 0052 03F48013 	 and r3,r3,#1048576
 2409 0056 002B     	 cmp r3,#0
 2410 0058 0AD0     	 beq .L79
1042:../Libraries/XMCLib/src/xmc_ccu8.c ****     {
1043:../Libraries/XMCLib/src/xmc_ccu8.c ****       *val_ptr = slice->CV[i];
 2411              	 .loc 2 1043 0
 2412 005a BB7D     	 ldrb r3,[r7,#22]
 2413 005c FA68     	 ldr r2,[r7,#12]
 2414 005e 1C33     	 adds r3,r3,#28
 2415 0060 9B00     	 lsls r3,r3,#2
 2416 0062 1344     	 add r3,r3,r2
 2417 0064 5A68     	 ldr r2,[r3,#4]
 2418 0066 7B68     	 ldr r3,[r7,#4]
 2419 0068 1A60     	 str r2,[r3]
1044:../Libraries/XMCLib/src/xmc_ccu8.c ****       retval = XMC_CCU8_STATUS_OK;
 2420              	 .loc 2 1044 0
 2421 006a 0023     	 movs r3,#0
 2422 006c FB75     	 strb r3,[r7,#23]
1045:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 2423              	 .loc 2 1045 0
 2424 006e 06E0     	 b .L80
 2425              	.L79:
1039:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 2426              	 .loc 2 1039 0 discriminator 2
 2427 0070 BB7D     	 ldrb r3,[r7,#22]
 2428 0072 0133     	 adds r3,r3,#1
 2429 0074 BB75     	 strb r3,[r7,#22]
 2430              	.L78:
1039:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 2431              	 .loc 2 1039 0 is_stmt 0 discriminator 1
 2432 0076 BA7D     	 ldrb r2,[r7,#22]
 2433 0078 3B7D     	 ldrb r3,[r7,#20]
 2434 007a 9A42     	 cmp r2,r3
 2435 007c E3D3     	 bcc .L81
 2436              	.L80:
1046:../Libraries/XMCLib/src/xmc_ccu8.c ****     }
1047:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1048:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1049:../Libraries/XMCLib/src/xmc_ccu8.c ****   return retval;
 2437              	 .loc 2 1049 0 is_stmt 1
 2438 007e FB7D     	 ldrb r3,[r7,#23]
1050:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2439              	 .loc 2 1050 0
 2440 0080 1846     	 mov r0,r3
 2441 0082 1C37     	 adds r7,r7,#28
 2442              	.LCFI198:
 2443              	 .cfi_def_cfa_offset 4
 2444 0084 BD46     	 mov sp,r7
 2445              	.LCFI199:
 2446              	 .cfi_def_cfa_register 13
 2447              	 
 2448 0086 5DF8047B 	 ldr r7,[sp],#4
 2449              	.LCFI200:
 2450              	 .cfi_restore 7
 2451              	 .cfi_def_cfa_offset 0
 2452 008a 7047     	 bx lr
 2453              	 .cfi_endproc
 2454              	.LFE230:
 2456              	 .section .text.XMC_CCU8_GetCapturedValueFromFifo,"ax",%progbits
 2457              	 .align 2
 2458              	 .global XMC_CCU8_GetCapturedValueFromFifo
 2459              	 .thumb
 2460              	 .thumb_func
 2462              	XMC_CCU8_GetCapturedValueFromFifo:
 2463              	.LFB231:
1051:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Retrieves timer capture value from a FIFO made of capture registers */
1052:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU8V1) /* Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices onl
1053:../Libraries/XMCLib/src/xmc_ccu8.c **** int32_t XMC_CCU8_GetCapturedValueFromFifo(const XMC_CCU8_MODULE_t *const module, const uint8_t slic
1054:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2464              	 .loc 2 1054 0
 2465              	 .cfi_startproc
 2466              	 
 2467              	 
 2468              	 
 2469 0000 80B4     	 push {r7}
 2470              	.LCFI201:
 2471              	 .cfi_def_cfa_offset 4
 2472              	 .cfi_offset 7,-4
 2473 0002 85B0     	 sub sp,sp,#20
 2474              	.LCFI202:
 2475              	 .cfi_def_cfa_offset 24
 2476 0004 00AF     	 add r7,sp,#0
 2477              	.LCFI203:
 2478              	 .cfi_def_cfa_register 7
 2479 0006 7860     	 str r0,[r7,#4]
 2480 0008 0B46     	 mov r3,r1
 2481 000a FB70     	 strb r3,[r7,#3]
1055:../Libraries/XMCLib/src/xmc_ccu8.c ****   int32_t  cap;
1056:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t extracted_slice;
1057:../Libraries/XMCLib/src/xmc_ccu8.c ****   
1058:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_GetCapturedValueFromFifo:Invalid Slice Pointer", XMC_CCU8_IsValidModule(modu
1059:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1060:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First read the global fifo register */
1061:../Libraries/XMCLib/src/xmc_ccu8.c ****   cap = (int32_t) module->ECRD;
 2482              	 .loc 2 1061 0
 2483 000c 7B68     	 ldr r3,[r7,#4]
 2484 000e 1B6D     	 ldr r3,[r3,#80]
 2485 0010 FB60     	 str r3,[r7,#12]
1062:../Libraries/XMCLib/src/xmc_ccu8.c ****     
1063:../Libraries/XMCLib/src/xmc_ccu8.c ****   extracted_slice = (((uint32_t) cap) & ((uint32_t) CCU8_ECRD_SPTR_Msk)) >> CCU8_ECRD_SPTR_Pos;
 2486              	 .loc 2 1063 0
 2487 0012 FB68     	 ldr r3,[r7,#12]
 2488 0014 03F44013 	 and r3,r3,#3145728
 2489 0018 1B0D     	 lsrs r3,r3,#20
 2490 001a BB60     	 str r3,[r7,#8]
1064:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1065:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Return captured result only if it were applicable to this slice */
1066:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(extracted_slice != ((uint32_t)slice_number))
 2491              	 .loc 2 1066 0
 2492 001c FA78     	 ldrb r2,[r7,#3]
 2493 001e BB68     	 ldr r3,[r7,#8]
 2494 0020 9A42     	 cmp r2,r3
 2495 0022 02D0     	 beq .L84
1067:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1068:../Libraries/XMCLib/src/xmc_ccu8.c ****     cap = -1;
 2496              	 .loc 2 1068 0
 2497 0024 4FF0FF33 	 mov r3,#-1
 2498 0028 FB60     	 str r3,[r7,#12]
 2499              	.L84:
1069:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1070:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1071:../Libraries/XMCLib/src/xmc_ccu8.c ****   return (cap);
 2500              	 .loc 2 1071 0
 2501 002a FB68     	 ldr r3,[r7,#12]
1072:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2502              	 .loc 2 1072 0
 2503 002c 1846     	 mov r0,r3
 2504 002e 1437     	 adds r7,r7,#20
 2505              	.LCFI204:
 2506              	 .cfi_def_cfa_offset 4
 2507 0030 BD46     	 mov sp,r7
 2508              	.LCFI205:
 2509              	 .cfi_def_cfa_register 13
 2510              	 
 2511 0032 5DF8047B 	 ldr r7,[sp],#4
 2512              	.LCFI206:
 2513              	 .cfi_restore 7
 2514              	 .cfi_def_cfa_offset 0
 2515 0036 7047     	 bx lr
 2516              	 .cfi_endproc
 2517              	.LFE231:
 2519              	 .section .text.XMC_CCU8_SLICE_EnableDithering,"ax",%progbits
 2520              	 .align 2
 2521              	 .global XMC_CCU8_SLICE_EnableDithering
 2522              	 .thumb
 2523              	 .thumb_func
 2525              	XMC_CCU8_SLICE_EnableDithering:
 2526              	.LFB232:
1073:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
1074:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Retrieves timer capture value from a FIFO made of capture registers */
1075:../Libraries/XMCLib/src/xmc_ccu8.c **** uint32_t XMC_CCU8_SLICE_GetCapturedValueFromFifo(const XMC_CCU8_SLICE_t *const slice, const XMC_CCU
1076:../Libraries/XMCLib/src/xmc_ccu8.c **** {
1077:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cap;
1078:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1079:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCapturedValueFromFifo:Invalid Slice Pointer", XMC_CCU8_IsValidSlice
1080:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCapturedValueFromFifo:Invalid Register Set", 
1081:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((set == XMC_CCU8_SLICE_CAP_REG_SET_LOW) ||\
1082:../Libraries/XMCLib/src/xmc_ccu8.c ****               (set == XMC_CCU8_SLICE_CAP_REG_SET_HIGH)));
1083:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1084:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(XMC_CCU8_SLICE_CAP_REG_SET_LOW == set)
1085:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1086:../Libraries/XMCLib/src/xmc_ccu8.c **** 	  cap = slice->ECRD0;
1087:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1088:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
1089:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1090:../Libraries/XMCLib/src/xmc_ccu8.c **** 	  cap = slice->ECRD1;
1091:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1092:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1093:../Libraries/XMCLib/src/xmc_ccu8.c ****   return cap;
1094:../Libraries/XMCLib/src/xmc_ccu8.c **** }
1095:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
1096:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1097:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Enables PWM dithering feature */
1098:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_EnableDithering(XMC_CCU8_SLICE_t *const slice,
1099:../Libraries/XMCLib/src/xmc_ccu8.c ****                                     const bool period_dither,
1100:../Libraries/XMCLib/src/xmc_ccu8.c ****                                     const bool duty_dither,
1101:../Libraries/XMCLib/src/xmc_ccu8.c ****                                     const uint8_t spread)
1102:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2527              	 .loc 2 1102 0
 2528              	 .cfi_startproc
 2529              	 
 2530              	 
 2531 0000 80B5     	 push {r7,lr}
 2532              	.LCFI207:
 2533              	 .cfi_def_cfa_offset 8
 2534              	 .cfi_offset 7,-8
 2535              	 .cfi_offset 14,-4
 2536 0002 84B0     	 sub sp,sp,#16
 2537              	.LCFI208:
 2538              	 .cfi_def_cfa_offset 24
 2539 0004 00AF     	 add r7,sp,#0
 2540              	.LCFI209:
 2541              	 .cfi_def_cfa_register 7
 2542 0006 7860     	 str r0,[r7,#4]
 2543 0008 0846     	 mov r0,r1
 2544 000a 1146     	 mov r1,r2
 2545 000c 1A46     	 mov r2,r3
 2546 000e 0346     	 mov r3,r0
 2547 0010 FB70     	 strb r3,[r7,#3]
 2548 0012 0B46     	 mov r3,r1
 2549 0014 BB70     	 strb r3,[r7,#2]
 2550 0016 1346     	 mov r3,r2
 2551 0018 7B70     	 strb r3,[r7,#1]
1103:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
1104:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1105:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableDithering:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1106:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1107:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc = slice->TC;
 2552              	 .loc 2 1107 0
 2553 001a 7B68     	 ldr r3,[r7,#4]
 2554 001c 5B69     	 ldr r3,[r3,#20]
 2555 001e FB60     	 str r3,[r7,#12]
1108:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc &= ~((uint32_t) CCU8_CC8_TC_DITHE_Msk);
 2556              	 .loc 2 1108 0
 2557 0020 FB68     	 ldr r3,[r7,#12]
 2558 0022 23F4C043 	 bic r3,r3,#24576
 2559 0026 FB60     	 str r3,[r7,#12]
1109:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1110:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(true == period_dither)
 2560              	 .loc 2 1110 0
 2561 0028 FB78     	 ldrb r3,[r7,#3]
 2562 002a 002B     	 cmp r3,#0
 2563 002c 03D0     	 beq .L87
1111:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1112:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (((uint32_t) XMC_CCU8_SLICE_DITHER_PERIOD_MASK) << CCU8_CC8_TC_DITHE_Pos);
 2564              	 .loc 2 1112 0
 2565 002e FB68     	 ldr r3,[r7,#12]
 2566 0030 43F40053 	 orr r3,r3,#8192
 2567 0034 FB60     	 str r3,[r7,#12]
 2568              	.L87:
1113:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1114:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(true == duty_dither)
 2569              	 .loc 2 1114 0
 2570 0036 BB78     	 ldrb r3,[r7,#2]
 2571 0038 002B     	 cmp r3,#0
 2572 003a 03D0     	 beq .L88
1115:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1116:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (((uint32_t) XMC_CCU8_SLICE_DITHER_DUTYCYCLE_MASK) << CCU8_CC8_TC_DITHE_Pos);
 2573              	 .loc 2 1116 0
 2574 003c FB68     	 ldr r3,[r7,#12]
 2575 003e 43F48043 	 orr r3,r3,#16384
 2576 0042 FB60     	 str r3,[r7,#12]
 2577              	.L88:
1117:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1118:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1119:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 2578              	 .loc 2 1119 0
 2579 0044 7B68     	 ldr r3,[r7,#4]
 2580 0046 FA68     	 ldr r2,[r7,#12]
 2581 0048 5A61     	 str r2,[r3,#20]
1120:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1121:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_SLICE_SetDitherCompareValue((XMC_CCU8_SLICE_t *)slice, (uint8_t)spread);
 2582              	 .loc 2 1121 0
 2583 004a 7B78     	 ldrb r3,[r7,#1]
 2584 004c 7868     	 ldr r0,[r7,#4]
 2585 004e 1946     	 mov r1,r3
 2586 0050 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetDitherCompareValue
1122:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2587              	 .loc 2 1122 0
 2588 0054 1037     	 adds r7,r7,#16
 2589              	.LCFI210:
 2590              	 .cfi_def_cfa_offset 8
 2591 0056 BD46     	 mov sp,r7
 2592              	.LCFI211:
 2593              	 .cfi_def_cfa_register 13
 2594              	 
 2595 0058 80BD     	 pop {r7,pc}
 2596              	 .cfi_endproc
 2597              	.LFE232:
 2599 005a 00BF     	 .section .text.XMC_CCU8_SLICE_SetPrescaler,"ax",%progbits
 2600              	 .align 2
 2601              	 .global XMC_CCU8_SLICE_SetPrescaler
 2602              	 .thumb
 2603              	 .thumb_func
 2605              	XMC_CCU8_SLICE_SetPrescaler:
 2606              	.LFB233:
1123:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1124:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Programs Pre-scaler divider  */
1125:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetPrescaler(XMC_CCU8_SLICE_t *const slice, const uint8_t div_val)
1126:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2607              	 .loc 2 1126 0
 2608              	 .cfi_startproc
 2609              	 
 2610              	 
 2611              	 
 2612 0000 80B4     	 push {r7}
 2613              	.LCFI212:
 2614              	 .cfi_def_cfa_offset 4
 2615              	 .cfi_offset 7,-4
 2616 0002 85B0     	 sub sp,sp,#20
 2617              	.LCFI213:
 2618              	 .cfi_def_cfa_offset 24
 2619 0004 00AF     	 add r7,sp,#0
 2620              	.LCFI214:
 2621              	 .cfi_def_cfa_register 7
 2622 0006 7860     	 str r0,[r7,#4]
 2623 0008 0B46     	 mov r3,r1
 2624 000a FB70     	 strb r3,[r7,#3]
1127:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t fpc;
1128:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1129:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1130:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1131:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* If the prescaler is not running, update directly the divider*/
1132:../Libraries/XMCLib/src/xmc_ccu8.c ****   fpc = slice->FPC;
 2625              	 .loc 2 1132 0
 2626 000c 7B68     	 ldr r3,[r7,#4]
 2627 000e 9B6A     	 ldr r3,[r3,#40]
 2628 0010 FB60     	 str r3,[r7,#12]
1133:../Libraries/XMCLib/src/xmc_ccu8.c ****   fpc &= ~((uint32_t) CCU8_CC8_FPC_PVAL_Msk);
 2629              	 .loc 2 1133 0
 2630 0012 FB68     	 ldr r3,[r7,#12]
 2631 0014 23F47063 	 bic r3,r3,#3840
 2632 0018 FB60     	 str r3,[r7,#12]
1134:../Libraries/XMCLib/src/xmc_ccu8.c ****   fpc |= ((uint32_t) div_val) << CCU8_CC8_FPC_PVAL_Pos;
 2633              	 .loc 2 1134 0
 2634 001a FB78     	 ldrb r3,[r7,#3]
 2635 001c 1B02     	 lsls r3,r3,#8
 2636 001e FA68     	 ldr r2,[r7,#12]
 2637 0020 1343     	 orrs r3,r3,r2
 2638 0022 FB60     	 str r3,[r7,#12]
1135:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->FPC = fpc;
 2639              	 .loc 2 1135 0
 2640 0024 7B68     	 ldr r3,[r7,#4]
 2641 0026 FA68     	 ldr r2,[r7,#12]
 2642 0028 9A62     	 str r2,[r3,#40]
1136:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1137:../Libraries/XMCLib/src/xmc_ccu8.c ****   /*
1138:../Libraries/XMCLib/src/xmc_ccu8.c ****    * In any case, update the initial value of the divider which is to be loaded once the prescaler 
1139:../Libraries/XMCLib/src/xmc_ccu8.c ****    * compare value.
1140:../Libraries/XMCLib/src/xmc_ccu8.c ****    */
1141:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->PSC = (uint32_t) div_val;
 2643              	 .loc 2 1141 0
 2644 002a FA78     	 ldrb r2,[r7,#3]
 2645 002c 7B68     	 ldr r3,[r7,#4]
 2646 002e 5A62     	 str r2,[r3,#36]
1142:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2647              	 .loc 2 1142 0
 2648 0030 1437     	 adds r7,r7,#20
 2649              	.LCFI215:
 2650              	 .cfi_def_cfa_offset 4
 2651 0032 BD46     	 mov sp,r7
 2652              	.LCFI216:
 2653              	 .cfi_def_cfa_register 13
 2654              	 
 2655 0034 5DF8047B 	 ldr r7,[sp],#4
 2656              	.LCFI217:
 2657              	 .cfi_restore 7
 2658              	 .cfi_def_cfa_offset 0
 2659 0038 7047     	 bx lr
 2660              	 .cfi_endproc
 2661              	.LFE233:
 2663 003a 00BF     	 .section .text.XMC_CCU8_SLICE_SetTimerCompareMatch,"ax",%progbits
 2664              	 .align 2
 2665              	 .global XMC_CCU8_SLICE_SetTimerCompareMatch
 2666              	 .thumb
 2667              	 .thumb_func
 2669              	XMC_CCU8_SLICE_SetTimerCompareMatch:
 2670              	.LFB234:
1143:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1144:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Programs timer compare match value for channel 1 or 2 */
1145:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
1146:../Libraries/XMCLib/src/xmc_ccu8.c ****                                          const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
1147:../Libraries/XMCLib/src/xmc_ccu8.c ****                                          const uint16_t compare_val)
1148:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2671              	 .loc 2 1148 0
 2672              	 .cfi_startproc
 2673              	 
 2674              	 
 2675              	 
 2676 0000 80B4     	 push {r7}
 2677              	.LCFI218:
 2678              	 .cfi_def_cfa_offset 4
 2679              	 .cfi_offset 7,-4
 2680 0002 83B0     	 sub sp,sp,#12
 2681              	.LCFI219:
 2682              	 .cfi_def_cfa_offset 16
 2683 0004 00AF     	 add r7,sp,#0
 2684              	.LCFI220:
 2685              	 .cfi_def_cfa_register 7
 2686 0006 7860     	 str r0,[r7,#4]
 2687 0008 0B46     	 mov r3,r1
 2688 000a FB70     	 strb r3,[r7,#3]
 2689 000c 1346     	 mov r3,r2
 2690 000e 3B80     	 strh r3,[r7]
1149:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sli
1150:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANN
1151:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1152:../Libraries/XMCLib/src/xmc_ccu8.c ****   if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 2691              	 .loc 2 1152 0
 2692 0010 FB78     	 ldrb r3,[r7,#3]
 2693 0012 002B     	 cmp r3,#0
 2694 0014 03D1     	 bne .L91
1153:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1154:../Libraries/XMCLib/src/xmc_ccu8.c ****     slice->CR1S = (uint32_t) compare_val;
 2695              	 .loc 2 1154 0
 2696 0016 3A88     	 ldrh r2,[r7]
 2697 0018 7B68     	 ldr r3,[r7,#4]
 2698 001a DA63     	 str r2,[r3,#60]
 2699 001c 02E0     	 b .L90
 2700              	.L91:
1155:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1156:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
1157:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1158:../Libraries/XMCLib/src/xmc_ccu8.c ****     slice->CR2S = (uint32_t) compare_val;
 2701              	 .loc 2 1158 0
 2702 001e 3A88     	 ldrh r2,[r7]
 2703 0020 7B68     	 ldr r3,[r7,#4]
 2704 0022 5A64     	 str r2,[r3,#68]
 2705              	.L90:
1159:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1160:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2706              	 .loc 2 1160 0
 2707 0024 0C37     	 adds r7,r7,#12
 2708              	.LCFI221:
 2709              	 .cfi_def_cfa_offset 4
 2710 0026 BD46     	 mov sp,r7
 2711              	.LCFI222:
 2712              	 .cfi_def_cfa_register 13
 2713              	 
 2714 0028 5DF8047B 	 ldr r7,[sp],#4
 2715              	.LCFI223:
 2716              	 .cfi_restore 7
 2717              	 .cfi_def_cfa_offset 0
 2718 002c 7047     	 bx lr
 2719              	 .cfi_endproc
 2720              	.LFE234:
 2722 002e 00BF     	 .section .text.XMC_CCU8_SLICE_GetTimerCompareMatch,"ax",%progbits
 2723              	 .align 2
 2724              	 .global XMC_CCU8_SLICE_GetTimerCompareMatch
 2725              	 .thumb
 2726              	 .thumb_func
 2728              	XMC_CCU8_SLICE_GetTimerCompareMatch:
 2729              	.LFB235:
1161:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1162:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Returns the timer compare match value for channel 1 or 2 */
1163:../Libraries/XMCLib/src/xmc_ccu8.c **** uint16_t XMC_CCU8_SLICE_GetTimerCompareMatch(const XMC_CCU8_SLICE_t *const slice,
1164:../Libraries/XMCLib/src/xmc_ccu8.c ****                                              const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel)
1165:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2730              	 .loc 2 1165 0
 2731              	 .cfi_startproc
 2732              	 
 2733              	 
 2734              	 
 2735 0000 80B4     	 push {r7}
 2736              	.LCFI224:
 2737              	 .cfi_def_cfa_offset 4
 2738              	 .cfi_offset 7,-4
 2739 0002 85B0     	 sub sp,sp,#20
 2740              	.LCFI225:
 2741              	 .cfi_def_cfa_offset 24
 2742 0004 00AF     	 add r7,sp,#0
 2743              	.LCFI226:
 2744              	 .cfi_def_cfa_register 7
 2745 0006 7860     	 str r0,[r7,#4]
 2746 0008 0B46     	 mov r3,r1
 2747 000a FB70     	 strb r3,[r7,#3]
1166:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint16_t compare_value;
1167:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1168:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1169:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(ch
1170:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1171:../Libraries/XMCLib/src/xmc_ccu8.c ****   if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 2748              	 .loc 2 1171 0
 2749 000c FB78     	 ldrb r3,[r7,#3]
 2750 000e 002B     	 cmp r3,#0
 2751 0010 03D1     	 bne .L94
1172:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1173:../Libraries/XMCLib/src/xmc_ccu8.c ****     compare_value = (uint16_t) slice->CR1;
 2752              	 .loc 2 1173 0
 2753 0012 7B68     	 ldr r3,[r7,#4]
 2754 0014 9B6B     	 ldr r3,[r3,#56]
 2755 0016 FB81     	 strh r3,[r7,#14]
 2756 0018 02E0     	 b .L95
 2757              	.L94:
1174:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1175:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
1176:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1177:../Libraries/XMCLib/src/xmc_ccu8.c ****     compare_value = (uint16_t) slice->CR2;
 2758              	 .loc 2 1177 0
 2759 001a 7B68     	 ldr r3,[r7,#4]
 2760 001c 1B6C     	 ldr r3,[r3,#64]
 2761 001e FB81     	 strh r3,[r7,#14]
 2762              	.L95:
1178:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1179:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1180:../Libraries/XMCLib/src/xmc_ccu8.c ****   return(compare_value);
 2763              	 .loc 2 1180 0
 2764 0020 FB89     	 ldrh r3,[r7,#14]
1181:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2765              	 .loc 2 1181 0
 2766 0022 1846     	 mov r0,r3
 2767 0024 1437     	 adds r7,r7,#20
 2768              	.LCFI227:
 2769              	 .cfi_def_cfa_offset 4
 2770 0026 BD46     	 mov sp,r7
 2771              	.LCFI228:
 2772              	 .cfi_def_cfa_register 13
 2773              	 
 2774 0028 5DF8047B 	 ldr r7,[sp],#4
 2775              	.LCFI229:
 2776              	 .cfi_restore 7
 2777              	 .cfi_def_cfa_offset 0
 2778 002c 7047     	 bx lr
 2779              	 .cfi_endproc
 2780              	.LFE235:
 2782 002e 00BF     	 .section .text.XMC_CCU8_SLICE_SetInterruptNode,"ax",%progbits
 2783              	 .align 2
 2784              	 .global XMC_CCU8_SLICE_SetInterruptNode
 2785              	 .thumb
 2786              	 .thumb_func
 2788              	XMC_CCU8_SLICE_SetInterruptNode:
 2789              	.LFB236:
1182:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1183:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Binds a capcom event to an NVIC node  */
1184:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetInterruptNode(XMC_CCU8_SLICE_t *const slice,
1185:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const XMC_CCU8_SLICE_IRQ_ID_t event,
1186:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const XMC_CCU8_SLICE_SR_ID_t sr)
1187:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2790              	 .loc 2 1187 0
 2791              	 .cfi_startproc
 2792              	 
 2793              	 
 2794              	 
 2795 0000 80B4     	 push {r7}
 2796              	.LCFI230:
 2797              	 .cfi_def_cfa_offset 4
 2798              	 .cfi_offset 7,-4
 2799 0002 87B0     	 sub sp,sp,#28
 2800              	.LCFI231:
 2801              	 .cfi_def_cfa_offset 32
 2802 0004 00AF     	 add r7,sp,#0
 2803              	.LCFI232:
 2804              	 .cfi_def_cfa_register 7
 2805 0006 7860     	 str r0,[r7,#4]
 2806 0008 0B46     	 mov r3,r1
 2807 000a FB70     	 strb r3,[r7,#3]
 2808 000c 1346     	 mov r3,r2
 2809 000e BB70     	 strb r3,[r7,#2]
1188:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t srs;
1189:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t mask;
1190:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t pos;
1191:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1192:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice))
1193:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
1194:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event)
1195:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1196:../Libraries/XMCLib/src/xmc_ccu8.c ****   srs = slice->SRS;
 2810              	 .loc 2 1196 0
 2811 0010 7B68     	 ldr r3,[r7,#4]
 2812 0012 D3F8A830 	 ldr r3,[r3,#168]
 2813 0016 FB60     	 str r3,[r7,#12]
1197:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1198:../Libraries/XMCLib/src/xmc_ccu8.c ****   switch(event)
 2814              	 .loc 2 1198 0
 2815 0018 FB78     	 ldrb r3,[r7,#3]
 2816 001a 092B     	 cmp r3,#9
 2817 001c 31D8     	 bhi .L98
 2818 001e 01A2     	 adr r2,.L100
 2819 0020 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 2820              	 .p2align 2
 2821              	.L100:
 2822 0024 4D000000 	 .word .L99+1
 2823 0028 4D000000 	 .word .L99+1
 2824 002c 57000000 	 .word .L101+1
 2825 0030 57000000 	 .word .L101+1
 2826 0034 61000000 	 .word .L102+1
 2827 0038 61000000 	 .word .L102+1
 2828 003c 83000000 	 .word .L98+1
 2829 0040 83000000 	 .word .L98+1
 2830 0044 6B000000 	 .word .L103+1
 2831 0048 77000000 	 .word .L104+1
 2832              	 .p2align 1
 2833              	.L99:
1199:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1200:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH:
1201:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH:
1202:../Libraries/XMCLib/src/xmc_ccu8.c ****       mask = ((uint32_t) CCU8_CC8_SRS_POSR_Msk);
 2834              	 .loc 2 1202 0
 2835 004c 0323     	 movs r3,#3
 2836 004e 7B61     	 str r3,[r7,#20]
1203:../Libraries/XMCLib/src/xmc_ccu8.c ****       pos  = CCU8_CC8_SRS_POSR_Pos;
 2837              	 .loc 2 1203 0
 2838 0050 0023     	 movs r3,#0
 2839 0052 3B61     	 str r3,[r7,#16]
1204:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 2840              	 .loc 2 1204 0
 2841 0054 1BE0     	 b .L105
 2842              	.L101:
1205:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1206:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1:
1207:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1:
1208:../Libraries/XMCLib/src/xmc_ccu8.c ****       mask = ((uint32_t) CCU8_CC8_SRS_CM1SR_Msk);
 2843              	 .loc 2 1208 0
 2844 0056 0C23     	 movs r3,#12
 2845 0058 7B61     	 str r3,[r7,#20]
1209:../Libraries/XMCLib/src/xmc_ccu8.c ****       pos  = CCU8_CC8_SRS_CM1SR_Pos;
 2846              	 .loc 2 1209 0
 2847 005a 0223     	 movs r3,#2
 2848 005c 3B61     	 str r3,[r7,#16]
1210:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 2849              	 .loc 2 1210 0
 2850 005e 16E0     	 b .L105
 2851              	.L102:
1211:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1212:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2:
1213:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2:
1214:../Libraries/XMCLib/src/xmc_ccu8.c ****       mask = ((uint32_t) CCU8_CC8_SRS_CM2SR_Msk);
 2852              	 .loc 2 1214 0
 2853 0060 3023     	 movs r3,#48
 2854 0062 7B61     	 str r3,[r7,#20]
1215:../Libraries/XMCLib/src/xmc_ccu8.c ****       pos  = CCU8_CC8_SRS_CM2SR_Pos;
 2855              	 .loc 2 1215 0
 2856 0064 0423     	 movs r3,#4
 2857 0066 3B61     	 str r3,[r7,#16]
1216:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 2858              	 .loc 2 1216 0
 2859 0068 11E0     	 b .L105
 2860              	.L103:
1217:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1218:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_EVENT0:
1219:../Libraries/XMCLib/src/xmc_ccu8.c ****       mask = ((uint32_t) CCU8_CC8_SRS_E0SR_Msk);
 2861              	 .loc 2 1219 0
 2862 006a 4FF44073 	 mov r3,#768
 2863 006e 7B61     	 str r3,[r7,#20]
1220:../Libraries/XMCLib/src/xmc_ccu8.c ****       pos  = CCU8_CC8_SRS_E0SR_Pos;
 2864              	 .loc 2 1220 0
 2865 0070 0823     	 movs r3,#8
 2866 0072 3B61     	 str r3,[r7,#16]
1221:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 2867              	 .loc 2 1221 0
 2868 0074 0BE0     	 b .L105
 2869              	.L104:
1222:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1223:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_EVENT1:
1224:../Libraries/XMCLib/src/xmc_ccu8.c ****       mask = ((uint32_t) CCU8_CC8_SRS_E1SR_Msk);
 2870              	 .loc 2 1224 0
 2871 0076 4FF44063 	 mov r3,#3072
 2872 007a 7B61     	 str r3,[r7,#20]
1225:../Libraries/XMCLib/src/xmc_ccu8.c ****       pos  = CCU8_CC8_SRS_E1SR_Pos;
 2873              	 .loc 2 1225 0
 2874 007c 0A23     	 movs r3,#10
 2875 007e 3B61     	 str r3,[r7,#16]
1226:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 2876              	 .loc 2 1226 0
 2877 0080 05E0     	 b .L105
 2878              	.L98:
1227:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1228:../Libraries/XMCLib/src/xmc_ccu8.c ****     default:
1229:../Libraries/XMCLib/src/xmc_ccu8.c ****       mask = ((uint32_t) CCU8_CC8_SRS_E2SR_Msk);
 2879              	 .loc 2 1229 0
 2880 0082 4FF44053 	 mov r3,#12288
 2881 0086 7B61     	 str r3,[r7,#20]
1230:../Libraries/XMCLib/src/xmc_ccu8.c ****       pos  = CCU8_CC8_SRS_E2SR_Pos;
 2882              	 .loc 2 1230 0
 2883 0088 0C23     	 movs r3,#12
 2884 008a 3B61     	 str r3,[r7,#16]
1231:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 2885              	 .loc 2 1231 0
 2886 008c 00BF     	 nop
 2887              	.L105:
1232:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1233:../Libraries/XMCLib/src/xmc_ccu8.c ****   
1234:../Libraries/XMCLib/src/xmc_ccu8.c ****   srs &= ~mask;
 2888              	 .loc 2 1234 0
 2889 008e 7B69     	 ldr r3,[r7,#20]
 2890 0090 DB43     	 mvns r3,r3
 2891 0092 FA68     	 ldr r2,[r7,#12]
 2892 0094 1340     	 ands r3,r3,r2
 2893 0096 FB60     	 str r3,[r7,#12]
1235:../Libraries/XMCLib/src/xmc_ccu8.c ****   srs |= (uint32_t)sr << pos;
 2894              	 .loc 2 1235 0
 2895 0098 BA78     	 ldrb r2,[r7,#2]
 2896 009a 3B69     	 ldr r3,[r7,#16]
 2897 009c 02FA03F3 	 lsl r3,r2,r3
 2898 00a0 FA68     	 ldr r2,[r7,#12]
 2899 00a2 1343     	 orrs r3,r3,r2
 2900 00a4 FB60     	 str r3,[r7,#12]
1236:../Libraries/XMCLib/src/xmc_ccu8.c ****   
1237:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->SRS = srs;
 2901              	 .loc 2 1237 0
 2902 00a6 7B68     	 ldr r3,[r7,#4]
 2903 00a8 FA68     	 ldr r2,[r7,#12]
 2904 00aa C3F8A820 	 str r2,[r3,#168]
1238:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2905              	 .loc 2 1238 0
 2906 00ae 1C37     	 adds r7,r7,#28
 2907              	.LCFI233:
 2908              	 .cfi_def_cfa_offset 4
 2909 00b0 BD46     	 mov sp,r7
 2910              	.LCFI234:
 2911              	 .cfi_def_cfa_register 13
 2912              	 
 2913 00b2 5DF8047B 	 ldr r7,[sp],#4
 2914              	.LCFI235:
 2915              	 .cfi_restore 7
 2916              	 .cfi_def_cfa_offset 0
 2917 00b6 7047     	 bx lr
 2918              	 .cfi_endproc
 2919              	.LFE236:
 2921              	 .section .text.XMC_CCU8_SLICE_SetPassiveLevel,"ax",%progbits
 2922              	 .align 2
 2923              	 .global XMC_CCU8_SLICE_SetPassiveLevel
 2924              	 .thumb
 2925              	 .thumb_func
 2927              	XMC_CCU8_SLICE_SetPassiveLevel:
 2928              	.LFB237:
1239:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1240:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Asserts passive level for the slice output */
1241:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetPassiveLevel(XMC_CCU8_SLICE_t *const slice,
1242:../Libraries/XMCLib/src/xmc_ccu8.c ****                                     const XMC_CCU8_SLICE_OUTPUT_t out,
1243:../Libraries/XMCLib/src/xmc_ccu8.c ****                                     const XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t level)
1244:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2929              	 .loc 2 1244 0
 2930              	 .cfi_startproc
 2931              	 
 2932              	 
 2933              	 
 2934 0000 80B4     	 push {r7}
 2935              	.LCFI236:
 2936              	 .cfi_def_cfa_offset 4
 2937              	 .cfi_offset 7,-4
 2938 0002 85B0     	 sub sp,sp,#20
 2939              	.LCFI237:
 2940              	 .cfi_def_cfa_offset 24
 2941 0004 00AF     	 add r7,sp,#0
 2942              	.LCFI238:
 2943              	 .cfi_def_cfa_register 7
 2944 0006 7860     	 str r0,[r7,#4]
 2945 0008 0B46     	 mov r3,r1
 2946 000a FB70     	 strb r3,[r7,#3]
 2947 000c 1346     	 mov r3,r2
 2948 000e BB70     	 strb r3,[r7,#2]
1245:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t psl;
1246:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1247:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetPassiveLevel:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1248:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetPassiveLevel:Invalid Slice Output", XMC_CCU8_SLICE_CHECK_OUTPUT(out
1249:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetPassiveLevel:Invalid Passive Level",
1250:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((level == XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_LOW) ||\
1251:../Libraries/XMCLib/src/xmc_ccu8.c ****               (level == XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH)));
1252:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1253:../Libraries/XMCLib/src/xmc_ccu8.c ****   psl = slice->PSL;
 2949              	 .loc 2 1253 0
 2950 0010 7B68     	 ldr r3,[r7,#4]
 2951 0012 9B69     	 ldr r3,[r3,#24]
 2952 0014 FB60     	 str r3,[r7,#12]
1254:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1255:../Libraries/XMCLib/src/xmc_ccu8.c ****   psl &= ~((uint32_t) out);
 2953              	 .loc 2 1255 0
 2954 0016 FB78     	 ldrb r3,[r7,#3]
 2955 0018 DB43     	 mvns r3,r3
 2956 001a FA68     	 ldr r2,[r7,#12]
 2957 001c 1340     	 ands r3,r3,r2
 2958 001e FB60     	 str r3,[r7,#12]
1256:../Libraries/XMCLib/src/xmc_ccu8.c ****   psl |= (uint32_t) level << ((uint32_t)out >> 1U);
 2959              	 .loc 2 1256 0
 2960 0020 BB78     	 ldrb r3,[r7,#2]
 2961 0022 FA78     	 ldrb r2,[r7,#3]
 2962 0024 5208     	 lsrs r2,r2,#1
 2963 0026 D2B2     	 uxtb r2,r2
 2964 0028 9340     	 lsls r3,r3,r2
 2965 002a FA68     	 ldr r2,[r7,#12]
 2966 002c 1343     	 orrs r3,r3,r2
 2967 002e FB60     	 str r3,[r7,#12]
1257:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1258:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program CC8 slice output passive level */
1259:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->PSL = psl;
 2968              	 .loc 2 1259 0
 2969 0030 7B68     	 ldr r3,[r7,#4]
 2970 0032 FA68     	 ldr r2,[r7,#12]
 2971 0034 9A61     	 str r2,[r3,#24]
1260:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2972              	 .loc 2 1260 0
 2973 0036 1437     	 adds r7,r7,#20
 2974              	.LCFI239:
 2975              	 .cfi_def_cfa_offset 4
 2976 0038 BD46     	 mov sp,r7
 2977              	.LCFI240:
 2978              	 .cfi_def_cfa_register 13
 2979              	 
 2980 003a 5DF8047B 	 ldr r7,[sp],#4
 2981              	.LCFI241:
 2982              	 .cfi_restore 7
 2983              	 .cfi_def_cfa_offset 0
 2984 003e 7047     	 bx lr
 2985              	 .cfi_endproc
 2986              	.LFE237:
 2988              	 .section .text.XMC_CCU8_SLICE_DeadTimeInit,"ax",%progbits
 2989              	 .align 2
 2990              	 .global XMC_CCU8_SLICE_DeadTimeInit
 2991              	 .thumb
 2992              	 .thumb_func
 2994              	XMC_CCU8_SLICE_DeadTimeInit:
 2995              	.LFB238:
1261:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1262:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Initializes Dead time configuration for the slice outputs */
1263:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_DeadTimeInit(XMC_CCU8_SLICE_t *const slice,
1264:../Libraries/XMCLib/src/xmc_ccu8.c ****                                  const XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t *const config)
1265:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2996              	 .loc 2 1265 0
 2997              	 .cfi_startproc
 2998              	 
 2999              	 
 3000              	 
 3001 0000 80B4     	 push {r7}
 3002              	.LCFI242:
 3003              	 .cfi_def_cfa_offset 4
 3004              	 .cfi_offset 7,-4
 3005 0002 83B0     	 sub sp,sp,#12
 3006              	.LCFI243:
 3007              	 .cfi_def_cfa_offset 16
 3008 0004 00AF     	 add r7,sp,#0
 3009              	.LCFI244:
 3010              	 .cfi_def_cfa_register 7
 3011 0006 7860     	 str r0,[r7,#4]
 3012 0008 3960     	 str r1,[r7]
1266:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice)
1267:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1268:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program dead time value for channel 1 */
1269:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DC1R = config->dc1r;
 3013              	 .loc 2 1269 0
 3014 000a 3B68     	 ldr r3,[r7]
 3015 000c 5A68     	 ldr r2,[r3,#4]
 3016 000e 7B68     	 ldr r3,[r7,#4]
 3017 0010 1A65     	 str r2,[r3,#80]
1270:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program dead time value for channel 2 */
1271:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DC2R = config->dc2r;
 3018              	 .loc 2 1271 0
 3019 0012 3B68     	 ldr r3,[r7]
 3020 0014 9A68     	 ldr r2,[r3,#8]
 3021 0016 7B68     	 ldr r3,[r7,#4]
 3022 0018 5A65     	 str r2,[r3,#84]
1272:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program dead time control configuration */
1273:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DTC = config->dtc;
 3023              	 .loc 2 1273 0
 3024 001a 3B68     	 ldr r3,[r7]
 3025 001c 1A68     	 ldr r2,[r3]
 3026 001e 7B68     	 ldr r3,[r7,#4]
 3027 0020 DA64     	 str r2,[r3,#76]
1274:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 3028              	 .loc 2 1274 0
 3029 0022 0C37     	 adds r7,r7,#12
 3030              	.LCFI245:
 3031              	 .cfi_def_cfa_offset 4
 3032 0024 BD46     	 mov sp,r7
 3033              	.LCFI246:
 3034              	 .cfi_def_cfa_register 13
 3035              	 
 3036 0026 5DF8047B 	 ldr r7,[sp],#4
 3037              	.LCFI247:
 3038              	 .cfi_restore 7
 3039              	 .cfi_def_cfa_offset 0
 3040 002a 7047     	 bx lr
 3041              	 .cfi_endproc
 3042              	.LFE238:
 3044              	 .section .text.XMC_CCU8_SLICE_ConfigureDeadTime,"ax",%progbits
 3045              	 .align 2
 3046              	 .global XMC_CCU8_SLICE_ConfigureDeadTime
 3047              	 .thumb
 3048              	 .thumb_func
 3050              	XMC_CCU8_SLICE_ConfigureDeadTime:
 3051              	.LFB239:
1275:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1276:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Activates or deactivates dead time for compare channel and ST path */
1277:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_ConfigureDeadTime(XMC_CCU8_SLICE_t *const slice, const uint8_t mask)
1278:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 3052              	 .loc 2 1278 0
 3053              	 .cfi_startproc
 3054              	 
 3055              	 
 3056              	 
 3057 0000 80B4     	 push {r7}
 3058              	.LCFI248:
 3059              	 .cfi_def_cfa_offset 4
 3060              	 .cfi_offset 7,-4
 3061 0002 83B0     	 sub sp,sp,#12
 3062              	.LCFI249:
 3063              	 .cfi_def_cfa_offset 16
 3064 0004 00AF     	 add r7,sp,#0
 3065              	.LCFI250:
 3066              	 .cfi_def_cfa_register 7
 3067 0006 7860     	 str r0,[r7,#4]
 3068 0008 0B46     	 mov r3,r1
 3069 000a FB70     	 strb r3,[r7,#3]
1279:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice)
1280:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Channel", (mask <= XMC_CCU8_SLICE_DEAD_TIME_
1281:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1282:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DTC &= ~((uint32_t) XMC_CCU8_SLICE_DEAD_TIME_CONFIG_MASK);
 3070              	 .loc 2 1282 0
 3071 000c 7B68     	 ldr r3,[r7,#4]
 3072 000e DB6C     	 ldr r3,[r3,#76]
 3073 0010 23F03F02 	 bic r2,r3,#63
 3074 0014 7B68     	 ldr r3,[r7,#4]
 3075 0016 DA64     	 str r2,[r3,#76]
1283:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DTC |= (uint32_t) mask;
 3076              	 .loc 2 1283 0
 3077 0018 7B68     	 ldr r3,[r7,#4]
 3078 001a DA6C     	 ldr r2,[r3,#76]
 3079 001c FB78     	 ldrb r3,[r7,#3]
 3080 001e 1A43     	 orrs r2,r2,r3
 3081 0020 7B68     	 ldr r3,[r7,#4]
 3082 0022 DA64     	 str r2,[r3,#76]
1284:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 3083              	 .loc 2 1284 0
 3084 0024 0C37     	 adds r7,r7,#12
 3085              	.LCFI251:
 3086              	 .cfi_def_cfa_offset 4
 3087 0026 BD46     	 mov sp,r7
 3088              	.LCFI252:
 3089              	 .cfi_def_cfa_register 13
 3090              	 
 3091 0028 5DF8047B 	 ldr r7,[sp],#4
 3092              	.LCFI253:
 3093              	 .cfi_restore 7
 3094              	 .cfi_def_cfa_offset 0
 3095 002c 7047     	 bx lr
 3096              	 .cfi_endproc
 3097              	.LFE239:
 3099 002e 00BF     	 .section .text.XMC_CCU8_SLICE_SetDeadTimeValue,"ax",%progbits
 3100              	 .align 2
 3101              	 .global XMC_CCU8_SLICE_SetDeadTimeValue
 3102              	 .thumb
 3103              	 .thumb_func
 3105              	XMC_CCU8_SLICE_SetDeadTimeValue:
 3106              	.LFB240:
1285:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1286:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Configures rising edge delay and falling edge delay for dead time */
1287:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetDeadTimeValue(XMC_CCU8_SLICE_t *const slice,
1288:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
1289:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const uint8_t rise_value,
1290:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const uint8_t fall_value)
1291:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 3107              	 .loc 2 1291 0
 3108              	 .cfi_startproc
 3109              	 
 3110              	 
 3111              	 
 3112 0000 80B4     	 push {r7}
 3113              	.LCFI254:
 3114              	 .cfi_def_cfa_offset 4
 3115              	 .cfi_offset 7,-4
 3116 0002 83B0     	 sub sp,sp,#12
 3117              	.LCFI255:
 3118              	 .cfi_def_cfa_offset 16
 3119 0004 00AF     	 add r7,sp,#0
 3120              	.LCFI256:
 3121              	 .cfi_def_cfa_register 7
 3122 0006 7860     	 str r0,[r7,#4]
 3123 0008 0846     	 mov r0,r1
 3124 000a 1146     	 mov r1,r2
 3125 000c 1A46     	 mov r2,r3
 3126 000e 0346     	 mov r3,r0
 3127 0010 FB70     	 strb r3,[r7,#3]
 3128 0012 0B46     	 mov r3,r1
 3129 0014 BB70     	 strb r3,[r7,#2]
 3130 0016 1346     	 mov r3,r2
 3131 0018 7B70     	 strb r3,[r7,#1]
1292:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDeadTimeValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice))
1293:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDeadTimeValue:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(c
1294:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1295:../Libraries/XMCLib/src/xmc_ccu8.c ****   if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 3132              	 .loc 2 1295 0
 3133 001a FB78     	 ldrb r3,[r7,#3]
 3134 001c 002B     	 cmp r3,#0
 3135 001e 06D1     	 bne .L110
1296:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1297:../Libraries/XMCLib/src/xmc_ccu8.c ****     slice->DC1R = (((uint32_t) fall_value) << CCU8_CC8_DC1R_DT1F_Pos) | ((uint32_t) rise_value);
 3136              	 .loc 2 1297 0
 3137 0020 7B78     	 ldrb r3,[r7,#1]
 3138 0022 1A02     	 lsls r2,r3,#8
 3139 0024 BB78     	 ldrb r3,[r7,#2]
 3140 0026 1A43     	 orrs r2,r2,r3
 3141 0028 7B68     	 ldr r3,[r7,#4]
 3142 002a 1A65     	 str r2,[r3,#80]
 3143 002c 05E0     	 b .L109
 3144              	.L110:
1298:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1299:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
1300:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1301:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DC2R = (((uint32_t) fall_value) << CCU8_CC8_DC2R_DT2F_Pos) | ((uint32_t) rise_value);
 3145              	 .loc 2 1301 0
 3146 002e 7B78     	 ldrb r3,[r7,#1]
 3147 0030 1A02     	 lsls r2,r3,#8
 3148 0032 BB78     	 ldrb r3,[r7,#2]
 3149 0034 1A43     	 orrs r2,r2,r3
 3150 0036 7B68     	 ldr r3,[r7,#4]
 3151 0038 5A65     	 str r2,[r3,#84]
 3152              	.L109:
1302:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1303:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 3153              	 .loc 2 1303 0
 3154 003a 0C37     	 adds r7,r7,#12
 3155              	.LCFI257:
 3156              	 .cfi_def_cfa_offset 4
 3157 003c BD46     	 mov sp,r7
 3158              	.LCFI258:
 3159              	 .cfi_def_cfa_register 13
 3160              	 
 3161 003e 5DF8047B 	 ldr r7,[sp],#4
 3162              	.LCFI259:
 3163              	 .cfi_restore 7
 3164              	 .cfi_def_cfa_offset 0
 3165 0042 7047     	 bx lr
 3166              	 .cfi_endproc
 3167              	.LFE240:
 3169              	 .section .text.XMC_CCU8_SLICE_SetDeadTimePrescaler,"ax",%progbits
 3170              	 .align 2
 3171              	 .global XMC_CCU8_SLICE_SetDeadTimePrescaler
 3172              	 .thumb
 3173              	 .thumb_func
 3175              	XMC_CCU8_SLICE_SetDeadTimePrescaler:
 3176              	.LFB241:
1304:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1305:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Configures clock division factor for dead time */
1306:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetDeadTimePrescaler(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_DTC_DI
1307:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 3177              	 .loc 2 1307 0
 3178              	 .cfi_startproc
 3179              	 
 3180              	 
 3181              	 
 3182 0000 80B4     	 push {r7}
 3183              	.LCFI260:
 3184              	 .cfi_def_cfa_offset 4
 3185              	 .cfi_offset 7,-4
 3186 0002 83B0     	 sub sp,sp,#12
 3187              	.LCFI261:
 3188              	 .cfi_def_cfa_offset 16
 3189 0004 00AF     	 add r7,sp,#0
 3190              	.LCFI262:
 3191              	 .cfi_def_cfa_register 7
 3192 0006 7860     	 str r0,[r7,#4]
 3193 0008 0B46     	 mov r3,r1
 3194 000a FB70     	 strb r3,[r7,#3]
1308:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDeadTimePrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sli
1309:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDeadTimePrescaler:Invalid divider value", XMC_CCU8_SLICE_CHECK_DTC_
1310:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1311:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DTC &= ~((uint32_t) CCU8_CC8_DTC_DTCC_Msk);
 3195              	 .loc 2 1311 0
 3196 000c 7B68     	 ldr r3,[r7,#4]
 3197 000e DB6C     	 ldr r3,[r3,#76]
 3198 0010 23F0C002 	 bic r2,r3,#192
 3199 0014 7B68     	 ldr r3,[r7,#4]
 3200 0016 DA64     	 str r2,[r3,#76]
1312:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DTC |= ((uint32_t) div_val) << CCU8_CC8_DTC_DTCC_Pos;
 3201              	 .loc 2 1312 0
 3202 0018 7B68     	 ldr r3,[r7,#4]
 3203 001a DA6C     	 ldr r2,[r3,#76]
 3204 001c FB78     	 ldrb r3,[r7,#3]
 3205 001e 9B01     	 lsls r3,r3,#6
 3206 0020 1A43     	 orrs r2,r2,r3
 3207 0022 7B68     	 ldr r3,[r7,#4]
 3208 0024 DA64     	 str r2,[r3,#76]
1313:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 3209              	 .loc 2 1313 0
 3210 0026 0C37     	 adds r7,r7,#12
 3211              	.LCFI263:
 3212              	 .cfi_def_cfa_offset 4
 3213 0028 BD46     	 mov sp,r7
 3214              	.LCFI264:
 3215              	 .cfi_def_cfa_register 13
 3216              	 
 3217 002a 5DF8047B 	 ldr r7,[sp],#4
 3218              	.LCFI265:
 3219              	 .cfi_restore 7
 3220              	 .cfi_def_cfa_offset 0
 3221 002e 7047     	 bx lr
 3222              	 .cfi_endproc
 3223              	.LFE241:
 3225              	 .section .text.XMC_CCU8_SLICE_ConfigureStatusBitOutput,"ax",%progbits
 3226              	 .align 2
 3227              	 .global XMC_CCU8_SLICE_ConfigureStatusBitOutput
 3228              	 .thumb
 3229              	 .thumb_func
 3231              	XMC_CCU8_SLICE_ConfigureStatusBitOutput:
 3232              	.LFB242:
1314:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1315:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Configures status ST1, ST2 mapping to STy */
1316:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_ConfigureStatusBitOutput(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_ST
1317:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 3233              	 .loc 2 1317 0
 3234              	 .cfi_startproc
 3235              	 
 3236              	 
 3237              	 
 3238 0000 80B4     	 push {r7}
 3239              	.LCFI266:
 3240              	 .cfi_def_cfa_offset 4
 3241              	 .cfi_offset 7,-4
 3242 0002 83B0     	 sub sp,sp,#12
 3243              	.LCFI267:
 3244              	 .cfi_def_cfa_offset 16
 3245 0004 00AF     	 add r7,sp,#0
 3246              	.LCFI268:
 3247              	 .cfi_def_cfa_register 7
 3248 0006 7860     	 str r0,[r7,#4]
 3249 0008 0B46     	 mov r3,r1
 3250 000a FB70     	 strb r3,[r7,#3]
1318:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOutput:Invalid Slice Pointer", XMC_CCU8_IsValidSlice
1319:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOutput:Invalid Channel", XMC_CCU8_SLICE_CHECK_SLICE_
1320:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1321:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC &= ~((uint32_t) CCU8_CC8_TC_STOS_Msk);
 3251              	 .loc 2 1321 0
 3252 000c 7B68     	 ldr r3,[r7,#4]
 3253 000e 5B69     	 ldr r3,[r3,#20]
 3254 0010 23F0C042 	 bic r2,r3,#1610612736
 3255 0014 7B68     	 ldr r3,[r7,#4]
 3256 0016 5A61     	 str r2,[r3,#20]
1322:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC |= ((uint32_t) channel) << CCU8_CC8_TC_STOS_Pos;
 3257              	 .loc 2 1322 0
 3258 0018 7B68     	 ldr r3,[r7,#4]
 3259 001a 5A69     	 ldr r2,[r3,#20]
 3260 001c FB78     	 ldrb r3,[r7,#3]
 3261 001e 5B07     	 lsls r3,r3,#29
 3262 0020 1A43     	 orrs r2,r2,r3
 3263 0022 7B68     	 ldr r3,[r7,#4]
 3264 0024 5A61     	 str r2,[r3,#20]
1323:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 3265              	 .loc 2 1323 0
 3266 0026 0C37     	 adds r7,r7,#12
 3267              	.LCFI269:
 3268              	 .cfi_def_cfa_offset 4
 3269 0028 BD46     	 mov sp,r7
 3270              	.LCFI270:
 3271              	 .cfi_def_cfa_register 13
 3272              	 
 3273 002a 5DF8047B 	 ldr r7,[sp],#4
 3274              	.LCFI271:
 3275              	 .cfi_restore 7
 3276              	 .cfi_def_cfa_offset 0
 3277 002e 7047     	 bx lr
 3278              	 .cfi_endproc
 3279              	.LFE242:
 3281              	 .text
 3282              	.Letext0:
 3283              	 .file 3 "e:\\davev4\\dave-4.1.4\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3284              	 .file 4 "e:\\davev4\\dave-4.1.4\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3285              	 .file 5 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest/Libraries/CMSIS/Infineon/XMC4700_series/Include/XMC4700.h"
 3286              	 .file 6 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest\\Libraries\\XMCLib\\inc/xmc4_scu.h"
 3287              	 .file 7 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest/Libraries/CMSIS/Include/core_cm4.h"
 3288              	 .file 8 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest/Libraries/CMSIS/Infineon/XMC4700_series/Include/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_ccu8.c
    {standard input}:20     .text.XMC_CCU8_StartPrescaler:00000000 $t
    {standard input}:24     .text.XMC_CCU8_StartPrescaler:00000000 XMC_CCU8_StartPrescaler
    {standard input}:66     .text.XMC_CCU8_SLICE_StopTimer:00000000 $t
    {standard input}:70     .text.XMC_CCU8_SLICE_StopTimer:00000000 XMC_CCU8_SLICE_StopTimer
    {standard input}:111    .text.XMC_CCU8_SLICE_SetDitherCompareValue:00000000 $t
    {standard input}:115    .text.XMC_CCU8_SLICE_SetDitherCompareValue:00000000 XMC_CCU8_SLICE_SetDitherCompareValue
    {standard input}:156    .text.XMC_CCU8_lAssertReset:00000000 $t
    {standard input}:160    .text.XMC_CCU8_lAssertReset:00000000 XMC_CCU8_lAssertReset
    {standard input}:214    .text.XMC_CCU8_lAssertReset:00000030 $d
    {standard input}:220    .text.XMC_CCU8_lDeassertReset:00000000 $t
    {standard input}:224    .text.XMC_CCU8_lDeassertReset:00000000 XMC_CCU8_lDeassertReset
    {standard input}:277    .text.XMC_CCU8_lDeassertReset:00000030 $d
    {standard input}:283    .text.XMC_CCU8_lGateClock:00000000 $t
    {standard input}:287    .text.XMC_CCU8_lGateClock:00000000 XMC_CCU8_lGateClock
    {standard input}:340    .text.XMC_CCU8_lGateClock:00000030 $d
    {standard input}:346    .text.XMC_CCU8_lUngateClock:00000000 $t
    {standard input}:350    .text.XMC_CCU8_lUngateClock:00000000 XMC_CCU8_lUngateClock
    {standard input}:403    .text.XMC_CCU8_lUngateClock:00000030 $d
    {standard input}:409    .text.XMC_CCU8_EnableModule:00000000 $t
    {standard input}:414    .text.XMC_CCU8_EnableModule:00000000 XMC_CCU8_EnableModule
    {standard input}:454    .text.XMC_CCU8_DisableModule:00000000 $t
    {standard input}:459    .text.XMC_CCU8_DisableModule:00000000 XMC_CCU8_DisableModule
    {standard input}:496    .text.XMC_CCU8_Init:00000000 $t
    {standard input}:501    .text.XMC_CCU8_Init:00000000 XMC_CCU8_Init
    {standard input}:558    .text.XMC_CCU8_SetModuleClock:00000000 $t
    {standard input}:563    .text.XMC_CCU8_SetModuleClock:00000000 XMC_CCU8_SetModuleClock
    {standard input}:618    .text.XMC_CCU8_SLICE_CompareInit:00000000 $t
    {standard input}:623    .text.XMC_CCU8_SLICE_CompareInit:00000000 XMC_CCU8_SLICE_CompareInit
    {standard input}:706    .text.XMC_CCU8_SLICE_CaptureInit:00000000 $t
    {standard input}:711    .text.XMC_CCU8_SLICE_CaptureInit:00000000 XMC_CCU8_SLICE_CaptureInit
    {standard input}:775    .text.XMC_CCU8_SLICE_SetOutPath:00000000 $t
    {standard input}:780    .text.XMC_CCU8_SLICE_SetOutPath:00000000 XMC_CCU8_SLICE_SetOutPath
    {standard input}:837    .text.XMC_CCU8_SetMultiChannelShadowTransferMode:00000000 $t
    {standard input}:842    .text.XMC_CCU8_SetMultiChannelShadowTransferMode:00000000 XMC_CCU8_SetMultiChannelShadowTransferMode
    {standard input}:899    .text.XMC_CCU8_SLICE_StartConfig:00000000 $t
    {standard input}:904    .text.XMC_CCU8_SLICE_StartConfig:00000000 XMC_CCU8_SLICE_StartConfig
    {standard input}:983    .text.XMC_CCU8_SLICE_StopConfig:00000000 $t
    {standard input}:988    .text.XMC_CCU8_SLICE_StopConfig:00000000 XMC_CCU8_SLICE_StopConfig
    {standard input}:1063   .text.XMC_CCU8_SLICE_LoadConfig:00000000 $t
    {standard input}:1068   .text.XMC_CCU8_SLICE_LoadConfig:00000000 XMC_CCU8_SLICE_LoadConfig
    {standard input}:1123   .text.XMC_CCU8_SLICE_LoadSelector:00000000 $t
    {standard input}:1128   .text.XMC_CCU8_SLICE_LoadSelector:00000000 XMC_CCU8_SLICE_LoadSelector
    {standard input}:1183   .text.XMC_CCU8_SLICE_ModulationConfig:00000000 $t
    {standard input}:1188   .text.XMC_CCU8_SLICE_ModulationConfig:00000000 XMC_CCU8_SLICE_ModulationConfig
    {standard input}:1298   .text.XMC_CCU8_SLICE_CountConfig:00000000 $t
    {standard input}:1303   .text.XMC_CCU8_SLICE_CountConfig:00000000 XMC_CCU8_SLICE_CountConfig
    {standard input}:1358   .text.XMC_CCU8_SLICE_GateConfig:00000000 $t
    {standard input}:1363   .text.XMC_CCU8_SLICE_GateConfig:00000000 XMC_CCU8_SLICE_GateConfig
    {standard input}:1418   .text.XMC_CCU8_SLICE_Capture0Config:00000000 $t
    {standard input}:1423   .text.XMC_CCU8_SLICE_Capture0Config:00000000 XMC_CCU8_SLICE_Capture0Config
    {standard input}:1478   .text.XMC_CCU8_SLICE_Capture1Config:00000000 $t
    {standard input}:1483   .text.XMC_CCU8_SLICE_Capture1Config:00000000 XMC_CCU8_SLICE_Capture1Config
    {standard input}:1538   .text.XMC_CCU8_SLICE_DirectionConfig:00000000 $t
    {standard input}:1543   .text.XMC_CCU8_SLICE_DirectionConfig:00000000 XMC_CCU8_SLICE_DirectionConfig
    {standard input}:1598   .text.XMC_CCU8_SLICE_StatusBitOverrideConfig:00000000 $t
    {standard input}:1603   .text.XMC_CCU8_SLICE_StatusBitOverrideConfig:00000000 XMC_CCU8_SLICE_StatusBitOverrideConfig
    {standard input}:1654   .text.XMC_CCU8_SLICE_TrapConfig:00000000 $t
    {standard input}:1659   .text.XMC_CCU8_SLICE_TrapConfig:00000000 XMC_CCU8_SLICE_TrapConfig
    {standard input}:1752   .text.XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:00000000 $t
    {standard input}:1757   .text.XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:00000000 XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent
    {standard input}:1890   .text.XMC_CCU8_SLICE_ConfigureEvent:00000000 $t
    {standard input}:1895   .text.XMC_CCU8_SLICE_ConfigureEvent:00000000 XMC_CCU8_SLICE_ConfigureEvent
    {standard input}:2033   .text.XMC_CCU8_SLICE_SetInput:00000000 $t
    {standard input}:2038   .text.XMC_CCU8_SLICE_SetInput:00000000 XMC_CCU8_SLICE_SetInput
    {standard input}:2108   .text.XMC_CCU8_SLICE_SetTimerRepeatMode:00000000 $t
    {standard input}:2113   .text.XMC_CCU8_SLICE_SetTimerRepeatMode:00000000 XMC_CCU8_SLICE_SetTimerRepeatMode
    {standard input}:2173   .text.XMC_CCU8_SLICE_SetTimerCountingMode:00000000 $t
    {standard input}:2178   .text.XMC_CCU8_SLICE_SetTimerCountingMode:00000000 XMC_CCU8_SLICE_SetTimerCountingMode
    {standard input}:2238   .text.XMC_CCU8_SLICE_SetTimerPeriodMatch:00000000 $t
    {standard input}:2243   .text.XMC_CCU8_SLICE_SetTimerPeriodMatch:00000000 XMC_CCU8_SLICE_SetTimerPeriodMatch
    {standard input}:2284   .text.XMC_CCU8_SLICE_GetCaptureRegisterValue:00000000 $t
    {standard input}:2289   .text.XMC_CCU8_SLICE_GetCaptureRegisterValue:00000000 XMC_CCU8_SLICE_GetCaptureRegisterValue
    {standard input}:2334   .text.XMC_CCU8_SLICE_GetLastCapturedTimerValue:00000000 $t
    {standard input}:2339   .text.XMC_CCU8_SLICE_GetLastCapturedTimerValue:00000000 XMC_CCU8_SLICE_GetLastCapturedTimerValue
    {standard input}:2457   .text.XMC_CCU8_GetCapturedValueFromFifo:00000000 $t
    {standard input}:2462   .text.XMC_CCU8_GetCapturedValueFromFifo:00000000 XMC_CCU8_GetCapturedValueFromFifo
    {standard input}:2520   .text.XMC_CCU8_SLICE_EnableDithering:00000000 $t
    {standard input}:2525   .text.XMC_CCU8_SLICE_EnableDithering:00000000 XMC_CCU8_SLICE_EnableDithering
    {standard input}:2600   .text.XMC_CCU8_SLICE_SetPrescaler:00000000 $t
    {standard input}:2605   .text.XMC_CCU8_SLICE_SetPrescaler:00000000 XMC_CCU8_SLICE_SetPrescaler
    {standard input}:2664   .text.XMC_CCU8_SLICE_SetTimerCompareMatch:00000000 $t
    {standard input}:2669   .text.XMC_CCU8_SLICE_SetTimerCompareMatch:00000000 XMC_CCU8_SLICE_SetTimerCompareMatch
    {standard input}:2723   .text.XMC_CCU8_SLICE_GetTimerCompareMatch:00000000 $t
    {standard input}:2728   .text.XMC_CCU8_SLICE_GetTimerCompareMatch:00000000 XMC_CCU8_SLICE_GetTimerCompareMatch
    {standard input}:2783   .text.XMC_CCU8_SLICE_SetInterruptNode:00000000 $t
    {standard input}:2788   .text.XMC_CCU8_SLICE_SetInterruptNode:00000000 XMC_CCU8_SLICE_SetInterruptNode
    {standard input}:2822   .text.XMC_CCU8_SLICE_SetInterruptNode:00000024 $d
    {standard input}:2832   .text.XMC_CCU8_SLICE_SetInterruptNode:0000004c $t
    {standard input}:2922   .text.XMC_CCU8_SLICE_SetPassiveLevel:00000000 $t
    {standard input}:2927   .text.XMC_CCU8_SLICE_SetPassiveLevel:00000000 XMC_CCU8_SLICE_SetPassiveLevel
    {standard input}:2989   .text.XMC_CCU8_SLICE_DeadTimeInit:00000000 $t
    {standard input}:2994   .text.XMC_CCU8_SLICE_DeadTimeInit:00000000 XMC_CCU8_SLICE_DeadTimeInit
    {standard input}:3045   .text.XMC_CCU8_SLICE_ConfigureDeadTime:00000000 $t
    {standard input}:3050   .text.XMC_CCU8_SLICE_ConfigureDeadTime:00000000 XMC_CCU8_SLICE_ConfigureDeadTime
    {standard input}:3100   .text.XMC_CCU8_SLICE_SetDeadTimeValue:00000000 $t
    {standard input}:3105   .text.XMC_CCU8_SLICE_SetDeadTimeValue:00000000 XMC_CCU8_SLICE_SetDeadTimeValue
    {standard input}:3170   .text.XMC_CCU8_SLICE_SetDeadTimePrescaler:00000000 $t
    {standard input}:3175   .text.XMC_CCU8_SLICE_SetDeadTimePrescaler:00000000 XMC_CCU8_SLICE_SetDeadTimePrescaler
    {standard input}:3226   .text.XMC_CCU8_SLICE_ConfigureStatusBitOutput:00000000 $t
    {standard input}:3231   .text.XMC_CCU8_SLICE_ConfigureStatusBitOutput:00000000 XMC_CCU8_SLICE_ConfigureStatusBitOutput
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_CLOCK_GatePeripheralClock
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_CLOCK_EnableClock
