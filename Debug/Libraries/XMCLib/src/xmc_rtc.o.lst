   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_rtc.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_SCU_GetMirrorStatus,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_SCU_GetMirrorStatus:
  25              	.LFB152:
  26              	 .file 1 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest\\Libraries\\XMCLib\\inc/xmc_scu.h"
   1:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**
   2:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @file xmc_scu.h
   3:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @date 2016-01-12
   4:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
   5:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @cond
   6:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  **************************************************************************************************
   7:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * XMClib v2.1.4 - XMC Peripheral Driver Library 
   8:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
   9:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * All rights reserved.                        
  11:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *                                             
  12:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * following conditions are met:   
  14:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *                                                                              
  15:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * disclaimer.                        
  17:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * 
  18:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * 
  21:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * products derived from this software without specific prior written permission.                  
  23:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *                                                                              
  24:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *                                                                              
  32:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  **************************************************************************************************
  35:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
  36:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Change History
  37:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * --------------
  38:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
  39:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * 2015-02-20:
  40:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *     - Initial <br>
  41:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
  42:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * 2015-05-20:
  43:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *     - Documentation improved <br>
  44:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *     - XMC_ASSERT() hanging issues have fixed for XMC4 devices. <br>
  45:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
  46:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * 2015-06-20:
  47:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  48:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *     - Removed STATIC_INLINE property for the below APIs and declared as void
  49:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *       XMC_SCU_INTERRUPT_EnableEvent, XMC_SCU_INTERRUPT_DisableEvent,
  50:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *       XMC_SCU_INTERRUPT_TriggerEvent, XMC_SCU_INTERUPT_GetEventStatus,
  51:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *       XMC_SCU_INTERUPT_ClearEventStatus
  52:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
  53:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * 2015-11-30:
  54:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *     - Documentation improved <br>
  55:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *      
  56:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @endcond 
  57:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
  58:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  */
  59:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** #ifndef XMC_SCU_H
  60:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** #define XMC_SCU_H
  61:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  
  62:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**************************************************************************************************
  63:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * HEADER FILES
  64:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  **************************************************************************************************
  65:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** #include <xmc_common.h>
  66:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** 
  67:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**
  68:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @addtogroup XMClib XMC Peripheral Library
  69:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @{
  70:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  */
  71:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  
  72:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**
  73:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @addtogroup SCU
  74:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @brief System Control Unit(SCU) driver for XMC microcontroller family.
  75:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
  76:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * System control unit is the SoC power, reset and a clock manager with additional responsibility o
  77:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * providing system stability protection and other auxiliary functions.<br>
  78:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * SCU provides the following features,
  79:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Power control
  80:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  \if XMC4 
  81:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Hibernate control 
  82:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  \endif
  83:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Reset control
  84:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Clock control
  85:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Miscellaneous control(boot mode, system interrupts etc.)<br><br>
  86:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
  87:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * The SCU driver is divided in to clock control logic, reset control logic, system interrupt contr
  88:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  \if XMC4
  89:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * , hibernate control logic, trap control logic, parity control logic 
  90:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  \endif
  91:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * and miscellaneous control logic.<br>
  92:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
  93:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Clock driver features:
  94:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows clock configuration using the structure XMC_SCU_CLOCK_CONFIG_t and API XMC_SCU_CLOCK_I
  95:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  \if XMC4
  96:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Provides structure XMC_SCU_CLOCK_SYSPLL_CONFIG_t for configuring the system PLL
  97:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows selection of clock source for system PLL, XMC_SCU_CLOCK_GetSystemPllClockSource()
  98:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Provides APIs for configuring different module clock frequencies XMC_SCU_CLOCK_SetWdtClockDiv
  99:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows selection of clock source for external output, XMC_SCU_CLOCK_SetExternalOutputClockSou
 100:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Provides APIs for enabling external high power oscillator and ultra low power oscillator, XMC
 101:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Provides APIs for getting various clock frequencies XMC_SCU_CLOCK_GetPeripheralClockFrequency
 102:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  XMC_SCU_CLOCK_GetCpuClockFrequency(), XMC_SCU_CLOCK_GetSystemClockFrequency()<br>
 103:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  \endif
 104:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  \if XMC1
 105:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows selection of peripheral clock frequency, XMC_SCU_CLOCK_SetFastPeripheralClockSource()
 106:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Provides API to get the peripheral clock frequency, XMC_SCU_CLOCK_GetFastPeripheralClockFrequ
 107:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  \endif
 108:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 109:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Reset driver features:
 110:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  \if XMC4
 111:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows to handle peripheral reset XMC_SCU_RESET_AssertPeripheralReset(), XMC_SCU_RESET_Deasse
 112:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows configuration of NMI generation for selected events, XMC_SCU_INTERRUPT_EnableNmiReques
 113:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  \endif
 114:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  \if XMC1
 115:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows to trigger device reset XMC_SCU_RESET_AssertMasterReset()
 116:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows to configure multiple sources for reset, XMC_SCU_RESET_EnableResetRequest()
 117:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  \endif <br>
 118:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 119:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Interrupt driver features:
 120:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Provides APIs for enabling/ disabling interrupt event generation XMC_SCU_INTERRUPT_EnableEven
 121:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  XMC_SCU_INTERRUPT_DisableEvent()
 122:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Provides API for registering callback function for events XMC_SCU_INTERRUPT_SetEventHandler()
 123:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 124:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  \if XMC4
 125:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Hibernate driver features:
 126:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows configuration of hibernate domain XMC_SCU_HIB_EnableHibernateDomain(), XMC_SCU_HIB_Dis
 127:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows selection of standby clock source, XMC_SCU_HIB_SetStandbyClockSource()
 128:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows selection of RTC clock source, XMC_SCU_HIB_SetRtcClockSource()
 129:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Provides API for enabling slow internal clock used for backup clock, XMC_SCU_HIB_EnableIntern
 130:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 131:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Trap driver features:
 132:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows handling of trap XMC_SCU_TRAP_Enable(), XMC_SCU_TRAP_GetStatus(), XMC_SCU_TRAP_Trigger
 133:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 134:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Parity driver features:
 135:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Parity error generated by on-chip RAM can be monitored, XMC_SCU_PARITY_Enable(), XMC_SCU_PARI
 136:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows configuration of trap generation on detection of parity error, XMC_SCU_PARITY_EnableTr
 137:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 138:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Power driver features:
 139:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows to power the USB module XMC_SCU_POWER_EnableUsb(), XMC_SCU_POWER_DisableUsb()
 140:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  \endif
 141:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 142:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Miscellaneous features:
 143:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows to trigger multiple capture compare unit(CCU) channels to be started together XMC_SCU_
 144:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  \if XMC4
 145:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Enables configuration of out of range comparator (ORC) XMC_SCU_EnableOutOfRangeComparator()
 146:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Enables configuration of die temperature sensor XMC_SCU_EnableTemperatureSensor(), XMC_SCU_Ca
 147:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Enables configuration of device boot mode XMC_SCU_SetBootMode()<br>
 148:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  \endif
 149:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  \if XMC1
 150:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Enables configuration of die temperature sensor XMC_SCU_StartTempMeasurement(), XMC_SCU_SetRa
 151:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows configuring supply monitor unit using the structure XMC_SCU_SUPPLYMONITOR_t and API XM
 152:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows handling of protected bits XMC_SCU_LockProtectedBits(), XMC_SCU_UnlockProtectedBits()<
 153:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  \endif
 154:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @{
 155:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  */
 156:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  
 157:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**************************************************************************************************
 158:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * MACROS
 159:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  **************************************************************************************************
 160:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** 
 161:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**************************************************************************************************
 162:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * ENUMS
 163:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  **************************************************************************************************
 164:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**
 165:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *  Defines the status of SCU API execution, used to verify the SCU related API calls.
 166:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  */
 167:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** typedef enum XMC_SCU_STATUS 
 168:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** {
 169:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****   XMC_SCU_STATUS_OK   = 0UL, /**< SCU related operation successfully completed.*/
 170:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****   XMC_SCU_STATUS_ERROR,      /**< SCU related operation failed. When API cannot fulfill request, th
 171:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****   XMC_SCU_STATUS_BUSY,       /**< Cannot execute the SCU related operation request because
 172:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****                                   another operation is in progress. \a XMC_SCU_STATUS_BUSY is retur
 173:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****                                   processing another request. */
 174:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** } XMC_SCU_STATUS_t;
 175:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** 
 176:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** 
 177:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**************************************************************************************************
 178:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * DATA TYPES
 179:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  **************************************************************************************************
 180:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** 
 181:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**
 182:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Function pointer type used for registering callback functions on SCU event occurrence.
 183:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  */
 184:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** typedef void (*XMC_SCU_INTERRUPT_EVENT_HANDLER_t)(void);
 185:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** 
 186:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**************************************************************************************************
 187:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * DEVICE EXTENSIONS
 188:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  **************************************************************************************************
 189:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** 
 190:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** #if (UC_FAMILY == XMC1)
 191:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** #include <xmc1_scu.h>
 192:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** #elif (UC_FAMILY == XMC4)
 193:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** #include <xmc4_scu.h>
 194:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** #else
 195:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** #error "Unspecified chipset"
 196:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** #endif
 197:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** 
 198:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**************************************************************************************************
 199:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * API Prototypes
 200:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  **************************************************************************************************
 201:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** 
 202:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** #ifdef __cplusplus
 203:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** extern "C" {
 204:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** #endif
 205:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** 
 206:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** 
 207:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**
 208:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 209:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @param trigger    CCU slices to be triggered synchronously via software. The value is a bitmask 
 210:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *                    in the register CCUCON. <br>
 211:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *                    \b Range: Use type @ref XMC_SCU_CCU_TRIGGER_t for bitmask of individual CCU s
 212:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *                    combined using \a OR operation.
 213:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 214:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @return None
 215:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 216:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 217:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Generates active edge(low to high) trigger for multiple CCU units at the same time.\n\n
 218:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Before executing this API, all the required CCU timers should configure external start.
 219:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * The edge of the start signal should be selected as active edge.
 220:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * The input signal for the CCU slice should be selected as SCU input.
 221:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * The above mentioned configurations can be made using the CCU LLD API XMC_CCU4_SLICE_StartConfig(
 222:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * CCU timer slice should be started using XMC_CCU4_SLICE_StartTimer() before triggering 
 223:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * the timer using this API.<BR>
 224:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 225:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerLow()\n\n\n
 226:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  */
 227:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** __STATIC_INLINE void XMC_SCU_SetCcuTriggerHigh(const uint32_t trigger)
 228:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** {
 229:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****   SCU_GENERAL->CCUCON |= (uint32_t)trigger;
 230:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** }
 231:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** 
 232:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**
 233:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 234:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @param trigger  CCU slices to be triggered synchronously via software. The value is a bitmask of
 235:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *                    in the register CCUCON. <br>
 236:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *                    \b Range: Use type @ref XMC_SCU_CCU_TRIGGER_t for bitmask of individual CCU s
 237:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *                    combined using \a OR operation.
 238:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 239:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @return None
 240:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 241:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 242:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Generates passive edge(high to low) trigger for multiple CCU units at the same time.\n\n
 243:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Before executing this API, all the required CCU timers should configure external start.
 244:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * The edge of the start signal should be selected as passive edge.
 245:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * The input signal for the CCU slice should be selected as SCU input.
 246:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * The above mentioned configurations can be made using the CCU LLD API XMC_CCU4_SLICE_StartConfig(
 247:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * CCU timer slice should be started using XMC_CCU4_SLICE_StartTimer() before triggering 
 248:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * the timer using this API.<BR>
 249:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 250:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerHigh()\n\n\n
 251:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  */
 252:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** __STATIC_INLINE void XMC_SCU_SetCcuTriggerLow(const uint32_t trigger)
 253:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** {
 254:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****   SCU_GENERAL->CCUCON &= (uint32_t)~trigger;
 255:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** }
 256:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** 
 257:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**
 258:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 259:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @param config Pointer to structure holding the clock prescaler values and divider values for 
 260:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *                configuring clock generators and clock tree.\n
 261:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *                \b Range: Configure the members of structure @ref XMC_SCU_CLOCK_CONFIG_t for vari
 262:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *                parameters of clock setup.
 263:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 264:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @return None
 265:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 266:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 267:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Initializes clock generators and clock tree.\n\n
 268:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \if XMC1
 269:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Peripheral clock and system clock are configured based on the input configuration \a config.
 270:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * The system clock frequency is tuned by configuring the FDIV and IDIV values of CLKCR register.
 271:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * The values of FDIV and IDIV can be provided as part of input configuration.
 272:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * The PCLK divider determines the ratio of peripheral clock to the system clock. 
 273:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * The source of RTC clock is set based on the input configuration. 
 274:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \a SystemCoreClock variable will be updated with the value of
 275:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * system clock frequency. Access to protected bit fields are handled internally.
 276:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \endif
 277:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \if XMC4
 278:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Enables the high precision oscillator(fOHP) input and configures the system and peripheral clock
 279:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Based on the system clock source selected in \a config, either fPLL or fOFI will be chosen as sy
 280:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Based on PLL mode(normal or prescaler mode) used, PLL ramps up in steps to achieve target freque
 281:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * The clock dividers for CPU, CCU and peripheral clocks will be set based on the input configurati
 282:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * The \a SystemCoreClock variable is set with the value of system clock frequency.
 283:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \endif
 284:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 285:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GetCpuClockFrequency() \n\n\n
 286:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  */
 287:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config);
 288:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** 
 289:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**
 290:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 291:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @param event  Bit mask of the event to enable. \b Range: Use type @ref XMC_SCU_INTERRUPT_EVENT_t
 292:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *                for providing the input value. Multiple events can be combined using the \a OR op
 293:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 294:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @return None
 295:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 296:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 297:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Enables the generation of interrupt for the input events.\n\n
 298:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * The events are enabled by setting the respective bit fields in the SRMSK register. \n
 299:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Note: User should separately enable the NVIC node responsible for handling the SCU interrupt.
 300:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * The interrupt will be generated when the respective event occurs.
 301:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 302:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * NVIC_EnableIRQ(), XMC_SCU_INTERRUPT_DisableEvent()\n\n\n
 303:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  */
 304:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event);
 305:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** 
 306:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** 
 307:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**
 308:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 309:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @param event  Bit mask of the event to disable. \b Range: Use type @ref XMC_SCU_INTERRUPT_EVENT_
 310:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *                for providing the input value. Multiple events can be combined using the \a OR op
 311:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 312:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @return None
 313:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 314:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 315:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Disables generation of interrupt on occurrence of the input event.\n\n
 316:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * The events are disabled by resetting the respective bit fields in the SRMSK register. \n
 317:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 318:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * NVIC_DisableIRQ(), XMC_SCU_INTERRUPT_EnableEvent()\n\n\n
 319:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  */
 320:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event);
 321:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** 
 322:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**
 323:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 324:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @param event Bit mask of the event to be triggered. \b Range: Use type @ref XMC_SCU_INTERRUPT_EV
 325:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *                for providing the input value. Multiple events can be combined using the \a OR op
 326:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 327:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @return None
 328:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 329:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 330:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Triggers the event as if the hardware raised it.\n\n
 331:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Event will be triggered by setting the respective bitfield in the SRSET register.\n
 332:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Note: User should enable the NVIC node that handles the respective event for interrupt generatio
 333:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 334:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * NVIC_EnableIRQ(), XMC_SCU_INTERUPT_GetEventStatus(), XMC_SCU_INTERRUPT_ClearEventStatus() \n\n\n
 335:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  */
 336:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t  event);
 337:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** 
 338:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**
 339:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @return uint32_t  Status of the SCU events.
 340:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 341:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 342:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Provides the status of all SCU events.\n\n
 343:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * The status is read from the SRRAW register. To check the status of a particular 
 344:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * event, the returned value should be masked with the bit mask of the event. The bitmask
 345:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * of events can be obtained using the type @ref XMC_SCU_INTERRUPT_EVENT_t. Multiple events'
 346:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * status can be checked by combining the bit masks using \a OR operation. 
 347:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * After detecting the event, the event status should be cleared using software to detect the event
 348:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 349:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * XMC_SCU_INTERRUPT_ClearEventStatus(), XMC_SCU_INTERRUPT_TriggerEvent(), XMC_SCU_INTERRUPT_SetEve
 350:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  */
 351:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void);
 352:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** 
 353:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**
 354:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 355:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @param event  Bit mask of the events to clear. \b Range: Use type @ref XMC_SCU_INTERRUPT_EVENT_t
 356:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *                for providing the input value. Multiple events can be combined using the \a OR op
 357:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 358:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @return None
 359:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 360:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 361:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Clears the event status bit in SRRAW register.\n\n
 362:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * The events are cleared by writing value 1 to their bit positions in the SRCLR register.
 363:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * The API can be used when polling method is used. After detecting the event, the event status
 364:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * should be cleared using software to detect the event again.
 365:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 366:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 367:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * XMC_SCU_INTERUPT_GetEventStatus(), XMC_SCU_INTERRUPT_TriggerEvent() \n\n\n
 368:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  */
 369:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event);
 370:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** 
 371:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**
 372:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 373:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @return uint32_t  Status representing the reason for device reset.
 374:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 375:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 376:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Provides the value representing the reason for device reset.\n\n
 377:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * The return value is an encoded word, which can indicate multiple reasons for the last reset. Eac
 378:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * returned word is representative of a last reset cause. The returned value should be appropriatel
 379:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * the cause of reset. 
 380:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * The cause of the last reset gets automatically stored in 
 381:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * the \a SCU_RSTSTAT register. The reset status shall be reset after each
 382:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * startup in order to ensure consistent source indication after the next reset.
 383:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \b Range: The type @ref XMC_SCU_RESET_REASON_t can be used to get the bit masks of the reset cau
 384:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 385:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 386:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * XMC_SCU_RESET_ClearDeviceResetReason() \n\n\n
 387:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  */
 388:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_RESET_GetDeviceResetReason(void)
 389:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** {
 390:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****   return ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_RSTSTAT_Msk);
 391:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** }
 392:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**
 393:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @return None 
 394:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 395:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 396:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Clears the reset reason bits in the reset status register. \n\n
 397:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Clearing of the reset status information in the \a SCU_RSTSTAT register via register bit \a RSTC
 398:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * recommended to ensure a clear indication of the cause of next reset.
 399:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 400:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 401:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * XMC_SCU_RESET_GetDeviceResetReason() \n\n\n
 402:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  */
 403:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** __STATIC_INLINE void XMC_SCU_RESET_ClearDeviceResetReason(void)
 404:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** {
 405:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****   /* Clear RSTSTAT.RSTSTAT bitfield */
 406:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****   SCU_RESET->RSTCLR |= (uint32_t)SCU_RESET_RSTCLR_RSCLR_Msk;
 407:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** }
 408:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  
 409:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**
 410:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @return uint32_t  Value of CPU clock frequency.
 411:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 412:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 413:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Provides the vlaue of CPU clock frequency.\n\n
 414:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * The value is stored in a global variable \a \b SystemCoreClock.
 415:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * It is updated when the clock configuration is done using the SCU LLD APIs.
 416:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * The value represents the frequency of clock used for CPU operation.
 417:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \b Range: Value is of type uint32_t, and gives the value of frequency in Hertz.
 418:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 419:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 420:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 421:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  */
 422:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
 423:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** {
 424:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****   return SystemCoreClock;
 425:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** }
 426:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** 
 427:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**
 428:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @return uint32_t  Value of peripheral clock frequency in Hertz.
 429:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 430:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 431:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Provides the vlaue of clock frequency at which the peripherals are working.\n\n
 432:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * The value is derived from the CPU frequency. \b Range: Value is of type uint32_t. It is represen
 433:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 434:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * XMC_SCU_CLOCK_GetCpuClockFrequency(),XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 435:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  */
 436:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void); 
 437:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** 
 438:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** #if(UC_SERIES != XMC45)
 439:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  
 440:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**
 441:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 442:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @param  peripheral The peripheral for which the clock has to be gated. \b Range: Use type @ref X
 443:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *                    to identify the peripheral clock to be gated.
 444:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 445:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @return None
 446:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 447:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 448:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Blocks the supply of clock to the selected peripheral.\n\n
 449:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Clock gating helps in reducing the power consumption. User can selectively gate the clocks of un
 450:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \if XMC1
 451:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * fPCLK is the source of clock to various peripherals. Some peripherals support clock gate. Such a
 452:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * the clock supply for the selected peripheral.
 453:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Software can request for individual gating of such peripheral clocks by enabling the \a SCU_CGAT
 454:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * register bit field. Every bit in \a SCU_CGATSET0 register is protected by the bit protection sch
 455:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * bit fields are handled internally.
 456:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \endif
 457:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \if XMC4
 458:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * fPERI is the source of clock to various peripherals. Some peripherals support clock gate. Such a
 459:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * the clock supply for the selected peripheral.
 460:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Software can request for individual gating of such peripheral clocks by enabling one of the \a
 461:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * SCU_CGATSET0, \a SCU_CGATSET1 or \a SCU_CGATSET2 register bitfields.
 462:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * 
 463:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \endif
 464:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Note: Clock gating shall not be activated unless the module is in reset state. So use \a
 465:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * XMC_SCU_CLOCK_IsPeripheralClockGated() API before enabling the gating of any peripheral.
 466:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 467:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * XMC_SCU_CLOCK_IsPeripheralClockGated(), XMC_SCU_CLOCK_UngatePeripheralClock() \n\n\n
 468:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  */
 469:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral);
 470:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  
 471:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**
 472:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 473:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @param  peripheral  The peripheral for which the clock has to be ungated. \b Range: Use type @re
 474:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *                    to identify the peripheral.
 475:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 476:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @return None
 477:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 478:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 479:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Enables the supply of clock to the selected peripheral.\n\n
 480:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * By default when the device powers on, the peripheral clock will be gated for the 
 481:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * peripherals that support clock gating.
 482:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * The peripheral clock should be enabled before using it for any functionality.
 483:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \if XMC1
 484:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * fPCLK is the source of clock to various peripherals. Some peripherals support clock gate.
 485:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Software can request for individual ungating of such peripheral clocks by setting respective bit
 486:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * in the \a SCU_CGATCLR0 register.
 487:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \endif
 488:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \if XMC4
 489:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * fPERI is the source of clock to various peripherals. Some peripherals support clock gate.
 490:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Software can request for individual ungating of such peripheral clocks by setting the respective
 491:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * SCU_CGATCLR0, \a SCU_CGATCLR1 or \a SCU_CGATCLR2 registers.
 492:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \endif
 493:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 494:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 495:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * XMC_SCU_CLOCK_IsPeripheralClockGated(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 496:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  */
 497:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral);
 498:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** 
 499:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**
 500:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 501:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @param  peripheral  The peripheral for which the check for clock gating has to be done. 
 502:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *                    \b Range: Use type @ref XMC_SCU_PERIPHERAL_CLOCK_t to identify the peripheral
 503:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 504:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @return bool Status of the peripheral clock gating. \b Range: true if the peripheral clock is ga
 505:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *              false if the peripheral clock ungated(gate de-asserted).
 506:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 507:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 508:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Gives the status of peripheral clock gating.\n\n
 509:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \if XMC1
 510:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Checks the status of peripheral clock gating using the register CGATSTAT0.
 511:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \endif
 512:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \if XMC4
 513:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Checks the status of peripheral clock gating using one of CGATSTAT0, CGATSTAT1 or CGATSTAT2 regi
 514:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \endif
 515:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * It is recommended to use this API before
 516:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * enabling the gating of any peripherals through \a XMC_SCU_CLOCK_GatePeripheralClock() API.
 517:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 518:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 519:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * XMC_SCU_CLOCK_UngatePeripheralClock(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 520:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  */
 521:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral);
 522:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** #endif
 523:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** 
 524:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** 
 525:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** /**
 526:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * @return  uint32_t  Status of the register mirror update.\n
 527:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *                    \b Range: Use the bit mask of the SCU_GENERAL_MIRRSTS register for the mirror
 528:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *                    interest. e.g.: SCU_GENERAL_MIRRSTS_RTC_CTR_Msk. Multiple update events can b
 529:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *                    using \a OR operation.
 530:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  *
 531:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 532:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Provides the status of hibernate domain register update, when the respective mirror registers ar
 533:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * The hibernate domain is connected to the core domain via SPI serial communication. MIRRSTS is a 
 534:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * representing the communication of changed value of a mirror register to its corresponding regist
 535:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * hibernate domain. The bit fields of the register indicate
 536:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * that a corresponding register of the hibernate domain is ready to accept a write or that the com
 537:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * is busy with executing the previous operation.\n
 538:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpos
 539:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****  */
 540:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
 541:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** {
  27              	 .loc 1 541 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 00AF     	 add r7,sp,#0
  37              	.LCFI1:
  38              	 .cfi_def_cfa_register 7
 542:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h ****   return(SCU_GENERAL->MIRRSTS);
  39              	 .loc 1 542 0
  40 0004 034B     	 ldr r3,.L3
  41 0006 D3F8C430 	 ldr r3,[r3,#196]
 543:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_scu.h **** }
  42              	 .loc 1 543 0
  43 000a 1846     	 mov r0,r3
  44 000c BD46     	 mov sp,r7
  45              	.LCFI2:
  46              	 .cfi_def_cfa_register 13
  47              	 
  48 000e 5DF8047B 	 ldr r7,[sp],#4
  49              	.LCFI3:
  50              	 .cfi_restore 7
  51              	 .cfi_def_cfa_offset 0
  52 0012 7047     	 bx lr
  53              	.L4:
  54              	 .align 2
  55              	.L3:
  56 0014 00400050 	 .word 1342193664
  57              	 .cfi_endproc
  58              	.LFE152:
  60              	 .section .text.XMC_RTC_Start,"ax",%progbits
  61              	 .align 2
  62              	 .global XMC_RTC_Start
  63              	 .thumb
  64              	 .thumb_func
  66              	XMC_RTC_Start:
  67              	.LFB157:
  68              	 .file 2 "../Libraries/XMCLib/src/xmc_rtc.c"
   1:../Libraries/XMCLib/src/xmc_rtc.c **** /**
   2:../Libraries/XMCLib/src/xmc_rtc.c ****  * @file xmc_rtc.c
   3:../Libraries/XMCLib/src/xmc_rtc.c ****  * @date 2016-01-12
   4:../Libraries/XMCLib/src/xmc_rtc.c ****  *
   5:../Libraries/XMCLib/src/xmc_rtc.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_rtc.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_rtc.c ****  * XMClib v2.1.4 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_rtc.c ****  *
   9:../Libraries/XMCLib/src/xmc_rtc.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_rtc.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_rtc.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_rtc.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_rtc.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_rtc.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_rtc.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_rtc.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_rtc.c ****  * 
  18:../Libraries/XMCLib/src/xmc_rtc.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_rtc.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_rtc.c ****  * 
  21:../Libraries/XMCLib/src/xmc_rtc.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_rtc.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_rtc.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_rtc.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_rtc.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_rtc.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_rtc.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_rtc.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_rtc.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_rtc.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_rtc.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_rtc.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_rtc.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_rtc.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_rtc.c ****  *
  36:../Libraries/XMCLib/src/xmc_rtc.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_rtc.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_rtc.c ****  *
  39:../Libraries/XMCLib/src/xmc_rtc.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_rtc.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_rtc.c ****  *      
  42:../Libraries/XMCLib/src/xmc_rtc.c ****  * 2015-06-20:
  43:../Libraries/XMCLib/src/xmc_rtc.c ****  *     - Removed GetDriverVersion API
  44:../Libraries/XMCLib/src/xmc_rtc.c ****  * @endcond 
  45:../Libraries/XMCLib/src/xmc_rtc.c ****  *
  46:../Libraries/XMCLib/src/xmc_rtc.c ****  */
  47:../Libraries/XMCLib/src/xmc_rtc.c **** 
  48:../Libraries/XMCLib/src/xmc_rtc.c **** /**
  49:../Libraries/XMCLib/src/xmc_rtc.c ****  *
  50:../Libraries/XMCLib/src/xmc_rtc.c ****  * @brief RTC driver for XMC microcontroller family.
  51:../Libraries/XMCLib/src/xmc_rtc.c ****  *
  52:../Libraries/XMCLib/src/xmc_rtc.c ****  */
  53:../Libraries/XMCLib/src/xmc_rtc.c **** 
  54:../Libraries/XMCLib/src/xmc_rtc.c **** /**************************************************************************************************
  55:../Libraries/XMCLib/src/xmc_rtc.c ****  * HEADER FILES
  56:../Libraries/XMCLib/src/xmc_rtc.c ****  **************************************************************************************************
  57:../Libraries/XMCLib/src/xmc_rtc.c ****  
  58:../Libraries/XMCLib/src/xmc_rtc.c **** #include "xmc_scu.h"
  59:../Libraries/XMCLib/src/xmc_rtc.c **** #include "xmc_rtc.h"
  60:../Libraries/XMCLib/src/xmc_rtc.c **** 
  61:../Libraries/XMCLib/src/xmc_rtc.c **** /**************************************************************************************************
  62:../Libraries/XMCLib/src/xmc_rtc.c ****  * MACROS
  63:../Libraries/XMCLib/src/xmc_rtc.c ****  **************************************************************************************************
  64:../Libraries/XMCLib/src/xmc_rtc.c **** 
  65:../Libraries/XMCLib/src/xmc_rtc.c **** #define XMC_RTC_MAXSECONDS  (59U)   /**< RTC time : Maximum seconds */
  66:../Libraries/XMCLib/src/xmc_rtc.c **** #define XMC_RTC_MAXMINUTES  (59U)   /**< RTC time : Maximum minutes */
  67:../Libraries/XMCLib/src/xmc_rtc.c **** #define XMC_RTC_MAXHOURS    (23U)   /**< RTC time : Maximum hours */
  68:../Libraries/XMCLib/src/xmc_rtc.c **** #define XMC_RTC_MAXDAYS     (31U)   /**< RTC time : Maximum days */
  69:../Libraries/XMCLib/src/xmc_rtc.c **** #define XMC_RTC_MAXDAYSOFWEEK  (7U) /**< RTC time : Maximum days of week */
  70:../Libraries/XMCLib/src/xmc_rtc.c **** #define XMC_RTC_MAXMONTH  (12U)     /**< RTC time : Maximum month */
  71:../Libraries/XMCLib/src/xmc_rtc.c **** #define XMC_RTC_MAXYEAR  (0xFFFFU)  /**< RTC time : Maximum year */
  72:../Libraries/XMCLib/src/xmc_rtc.c **** #define XMC_RTC_MAXPRESCALER  (0xFFFFU)  /**< RTC time : Maximum prescaler */
  73:../Libraries/XMCLib/src/xmc_rtc.c **** #define XMC_RTC_YEAR_OFFSET (1900U)      /**< RTC year offset : Year offset */
  74:../Libraries/XMCLib/src/xmc_rtc.c **** 
  75:../Libraries/XMCLib/src/xmc_rtc.c **** #if (UC_FAMILY == XMC4)
  76:../Libraries/XMCLib/src/xmc_rtc.c **** #define XMC_RTC_INIT_SEQUENCE  (1U)
  77:../Libraries/XMCLib/src/xmc_rtc.c **** #endif
  78:../Libraries/XMCLib/src/xmc_rtc.c **** #if (UC_FAMILY == XMC1)
  79:../Libraries/XMCLib/src/xmc_rtc.c **** #define XMC_RTC_INIT_SEQUENCE  (0U)
  80:../Libraries/XMCLib/src/xmc_rtc.c **** #endif
  81:../Libraries/XMCLib/src/xmc_rtc.c **** 
  82:../Libraries/XMCLib/src/xmc_rtc.c **** /**************************************************************************************************
  83:../Libraries/XMCLib/src/xmc_rtc.c ****  * API IMPLEMENTATION
  84:../Libraries/XMCLib/src/xmc_rtc.c ****  **************************************************************************************************
  85:../Libraries/XMCLib/src/xmc_rtc.c **** 
  86:../Libraries/XMCLib/src/xmc_rtc.c **** /*
  87:../Libraries/XMCLib/src/xmc_rtc.c ****  * Enables RTC peripheral to start counting time
  88:../Libraries/XMCLib/src/xmc_rtc.c ****  */
  89:../Libraries/XMCLib/src/xmc_rtc.c **** void XMC_RTC_Start(void)
  90:../Libraries/XMCLib/src/xmc_rtc.c **** {
  69              	 .loc 2 90 0
  70              	 .cfi_startproc
  71              	 
  72              	 
  73 0000 80B5     	 push {r7,lr}
  74              	.LCFI4:
  75              	 .cfi_def_cfa_offset 8
  76              	 .cfi_offset 7,-8
  77              	 .cfi_offset 14,-4
  78 0002 00AF     	 add r7,sp,#0
  79              	.LCFI5:
  80              	 .cfi_def_cfa_register 7
  91:../Libraries/XMCLib/src/xmc_rtc.c ****   while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
  81              	 .loc 2 91 0
  82 0004 00BF     	 nop
  83              	.L6:
  84              	 .loc 2 91 0 is_stmt 0 discriminator 1
  85 0006 FFF7FEFF 	 bl XMC_SCU_GetMirrorStatus
  86 000a 0346     	 mov r3,r0
  87 000c 03F48073 	 and r3,r3,#256
  88 0010 002B     	 cmp r3,#0
  89 0012 F8D1     	 bne .L6
  92:../Libraries/XMCLib/src/xmc_rtc.c ****   {
  93:../Libraries/XMCLib/src/xmc_rtc.c ****     /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  94:../Libraries/XMCLib/src/xmc_rtc.c ****   }
  95:../Libraries/XMCLib/src/xmc_rtc.c ****   RTC->CTR |= (uint32_t)RTC_CTR_ENB_Msk;
  90              	 .loc 2 95 0 is_stmt 1
  91 0014 034A     	 ldr r2,.L7
  92 0016 034B     	 ldr r3,.L7
  93 0018 5B68     	 ldr r3,[r3,#4]
  94 001a 43F00103 	 orr r3,r3,#1
  95 001e 5360     	 str r3,[r2,#4]
  96:../Libraries/XMCLib/src/xmc_rtc.c **** }
  96              	 .loc 2 96 0
  97 0020 80BD     	 pop {r7,pc}
  98              	.L8:
  99 0022 00BF     	 .align 2
 100              	.L7:
 101 0024 004A0050 	 .word 1342196224
 102              	 .cfi_endproc
 103              	.LFE157:
 105              	 .section .text.XMC_RTC_Stop,"ax",%progbits
 106              	 .align 2
 107              	 .global XMC_RTC_Stop
 108              	 .thumb
 109              	 .thumb_func
 111              	XMC_RTC_Stop:
 112              	.LFB158:
  97:../Libraries/XMCLib/src/xmc_rtc.c **** 
  98:../Libraries/XMCLib/src/xmc_rtc.c **** /*
  99:../Libraries/XMCLib/src/xmc_rtc.c ****  * Disables RTC peripheral to start counting time
 100:../Libraries/XMCLib/src/xmc_rtc.c ****  */
 101:../Libraries/XMCLib/src/xmc_rtc.c **** void XMC_RTC_Stop(void)
 102:../Libraries/XMCLib/src/xmc_rtc.c **** {
 113              	 .loc 2 102 0
 114              	 .cfi_startproc
 115              	 
 116              	 
 117 0000 80B5     	 push {r7,lr}
 118              	.LCFI6:
 119              	 .cfi_def_cfa_offset 8
 120              	 .cfi_offset 7,-8
 121              	 .cfi_offset 14,-4
 122 0002 00AF     	 add r7,sp,#0
 123              	.LCFI7:
 124              	 .cfi_def_cfa_register 7
 103:../Libraries/XMCLib/src/xmc_rtc.c ****   while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 125              	 .loc 2 103 0
 126 0004 00BF     	 nop
 127              	.L10:
 128              	 .loc 2 103 0 is_stmt 0 discriminator 1
 129 0006 FFF7FEFF 	 bl XMC_SCU_GetMirrorStatus
 130 000a 0346     	 mov r3,r0
 131 000c 03F48073 	 and r3,r3,#256
 132 0010 002B     	 cmp r3,#0
 133 0012 F8D1     	 bne .L10
 104:../Libraries/XMCLib/src/xmc_rtc.c ****   {
 105:../Libraries/XMCLib/src/xmc_rtc.c ****     /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 106:../Libraries/XMCLib/src/xmc_rtc.c ****   }
 107:../Libraries/XMCLib/src/xmc_rtc.c ****   RTC->CTR &= ~(uint32_t)RTC_CTR_ENB_Msk;
 134              	 .loc 2 107 0 is_stmt 1
 135 0014 034A     	 ldr r2,.L11
 136 0016 034B     	 ldr r3,.L11
 137 0018 5B68     	 ldr r3,[r3,#4]
 138 001a 23F00103 	 bic r3,r3,#1
 139 001e 5360     	 str r3,[r2,#4]
 108:../Libraries/XMCLib/src/xmc_rtc.c **** }
 140              	 .loc 2 108 0
 141 0020 80BD     	 pop {r7,pc}
 142              	.L12:
 143 0022 00BF     	 .align 2
 144              	.L11:
 145 0024 004A0050 	 .word 1342196224
 146              	 .cfi_endproc
 147              	.LFE158:
 149              	 .section .text.XMC_RTC_SetPrescaler,"ax",%progbits
 150              	 .align 2
 151              	 .global XMC_RTC_SetPrescaler
 152              	 .thumb
 153              	 .thumb_func
 155              	XMC_RTC_SetPrescaler:
 156              	.LFB159:
 109:../Libraries/XMCLib/src/xmc_rtc.c **** 
 110:../Libraries/XMCLib/src/xmc_rtc.c **** /*
 111:../Libraries/XMCLib/src/xmc_rtc.c ****  * Sets the RTC module prescaler value
 112:../Libraries/XMCLib/src/xmc_rtc.c ****  */
 113:../Libraries/XMCLib/src/xmc_rtc.c **** void XMC_RTC_SetPrescaler(uint16_t prescaler)
 114:../Libraries/XMCLib/src/xmc_rtc.c **** {
 157              	 .loc 2 114 0
 158              	 .cfi_startproc
 159              	 
 160              	 
 161 0000 80B5     	 push {r7,lr}
 162              	.LCFI8:
 163              	 .cfi_def_cfa_offset 8
 164              	 .cfi_offset 7,-8
 165              	 .cfi_offset 14,-4
 166 0002 82B0     	 sub sp,sp,#8
 167              	.LCFI9:
 168              	 .cfi_def_cfa_offset 16
 169 0004 00AF     	 add r7,sp,#0
 170              	.LCFI10:
 171              	 .cfi_def_cfa_register 7
 172 0006 0346     	 mov r3,r0
 173 0008 FB80     	 strh r3,[r7,#6]
 115:../Libraries/XMCLib/src/xmc_rtc.c ****   XMC_ASSERT("XMC_RTC_SetPrescaler:Wrong prescaler value", (prescaler < XMC_RTC_MAXPRESCALER));
 116:../Libraries/XMCLib/src/xmc_rtc.c ****   
 117:../Libraries/XMCLib/src/xmc_rtc.c ****   while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 174              	 .loc 2 117 0
 175 000a 00BF     	 nop
 176              	.L14:
 177              	 .loc 2 117 0 is_stmt 0 discriminator 1
 178 000c FFF7FEFF 	 bl XMC_SCU_GetMirrorStatus
 179 0010 0346     	 mov r3,r0
 180 0012 03F48073 	 and r3,r3,#256
 181 0016 002B     	 cmp r3,#0
 182 0018 F8D1     	 bne .L14
 118:../Libraries/XMCLib/src/xmc_rtc.c ****   {
 119:../Libraries/XMCLib/src/xmc_rtc.c ****     /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 120:../Libraries/XMCLib/src/xmc_rtc.c ****   }
 121:../Libraries/XMCLib/src/xmc_rtc.c ****   RTC->CTR = (RTC->CTR & ~(uint32_t)RTC_CTR_DIV_Msk) |
 183              	 .loc 2 121 0 is_stmt 1
 184 001a 0549     	 ldr r1,.L15
 185 001c 044B     	 ldr r3,.L15
 186 001e 5B68     	 ldr r3,[r3,#4]
 187 0020 9AB2     	 uxth r2,r3
 122:../Libraries/XMCLib/src/xmc_rtc.c ****              ((uint32_t)prescaler << (uint32_t)RTC_CTR_DIV_Pos);
 188              	 .loc 2 122 0
 189 0022 FB88     	 ldrh r3,[r7,#6]
 190 0024 1B04     	 lsls r3,r3,#16
 121:../Libraries/XMCLib/src/xmc_rtc.c ****              ((uint32_t)prescaler << (uint32_t)RTC_CTR_DIV_Pos);
 191              	 .loc 2 121 0
 192 0026 1343     	 orrs r3,r3,r2
 193 0028 4B60     	 str r3,[r1,#4]
 123:../Libraries/XMCLib/src/xmc_rtc.c **** }
 194              	 .loc 2 123 0
 195 002a 0837     	 adds r7,r7,#8
 196              	.LCFI11:
 197              	 .cfi_def_cfa_offset 8
 198 002c BD46     	 mov sp,r7
 199              	.LCFI12:
 200              	 .cfi_def_cfa_register 13
 201              	 
 202 002e 80BD     	 pop {r7,pc}
 203              	.L16:
 204              	 .align 2
 205              	.L15:
 206 0030 004A0050 	 .word 1342196224
 207              	 .cfi_endproc
 208              	.LFE159:
 210              	 .section .text.XMC_RTC_SetTime,"ax",%progbits
 211              	 .align 2
 212              	 .global XMC_RTC_SetTime
 213              	 .thumb
 214              	 .thumb_func
 216              	XMC_RTC_SetTime:
 217              	.LFB160:
 124:../Libraries/XMCLib/src/xmc_rtc.c **** 
 125:../Libraries/XMCLib/src/xmc_rtc.c **** /*
 126:../Libraries/XMCLib/src/xmc_rtc.c ****  * Sets the RTC_TIM0, RTC_TIM1 registers with time values
 127:../Libraries/XMCLib/src/xmc_rtc.c ****  */
 128:../Libraries/XMCLib/src/xmc_rtc.c **** void XMC_RTC_SetTime(const XMC_RTC_TIME_t *const time)
 129:../Libraries/XMCLib/src/xmc_rtc.c **** {
 218              	 .loc 2 129 0
 219              	 .cfi_startproc
 220              	 
 221              	 
 222 0000 80B5     	 push {r7,lr}
 223              	.LCFI13:
 224              	 .cfi_def_cfa_offset 8
 225              	 .cfi_offset 7,-8
 226              	 .cfi_offset 14,-4
 227 0002 82B0     	 sub sp,sp,#8
 228              	.LCFI14:
 229              	 .cfi_def_cfa_offset 16
 230 0004 00AF     	 add r7,sp,#0
 231              	.LCFI15:
 232              	 .cfi_def_cfa_register 7
 233 0006 7860     	 str r0,[r7,#4]
 130:../Libraries/XMCLib/src/xmc_rtc.c ****   XMC_ASSERT("XMC_RTC_SetTime:Wrong seconds value", ((uint32_t)time->seconds < XMC_RTC_MAXSECONDS))
 131:../Libraries/XMCLib/src/xmc_rtc.c ****   XMC_ASSERT("XMC_RTC_SetTime:Wrong minutes value", ((uint32_t)time->minutes < XMC_RTC_MAXMINUTES))
 132:../Libraries/XMCLib/src/xmc_rtc.c ****   XMC_ASSERT("XMC_RTC_SetTime:Wrong hours value", ((uint32_t)time->hours < XMC_RTC_MAXHOURS));
 133:../Libraries/XMCLib/src/xmc_rtc.c ****   XMC_ASSERT("XMC_RTC_SetTime:Wrong month day value", ((uint32_t)time->days < XMC_RTC_MAXDAYS));
 134:../Libraries/XMCLib/src/xmc_rtc.c ****   XMC_ASSERT("XMC_RTC_SetTime:Wrong week day value", ((uint32_t)time->daysofweek < XMC_RTC_MAXDAYSO
 135:../Libraries/XMCLib/src/xmc_rtc.c ****   XMC_ASSERT("XMC_RTC_SetTime:Wrong month value", ((uint32_t)time->month < XMC_RTC_MAXMONTH));
 136:../Libraries/XMCLib/src/xmc_rtc.c ****   XMC_ASSERT("XMC_RTC_SetTime:Wrong year value", ((uint32_t)time->year < XMC_RTC_MAXYEAR));
 137:../Libraries/XMCLib/src/xmc_rtc.c **** 
 138:../Libraries/XMCLib/src/xmc_rtc.c ****   #if (XMC_RTC_INIT_SEQUENCE == 1U)
 139:../Libraries/XMCLib/src/xmc_rtc.c ****       while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM0_Msk) != 0U)
 234              	 .loc 2 139 0
 235 0008 00BF     	 nop
 236              	.L18:
 237              	 .loc 2 139 0 is_stmt 0 discriminator 1
 238 000a FFF7FEFF 	 bl XMC_SCU_GetMirrorStatus
 239 000e 0346     	 mov r3,r0
 240 0010 03F40063 	 and r3,r3,#2048
 241 0014 002B     	 cmp r3,#0
 242 0016 F8D1     	 bne .L18
 140:../Libraries/XMCLib/src/xmc_rtc.c ****       { 
 141:../Libraries/XMCLib/src/xmc_rtc.c ****          /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 142:../Libraries/XMCLib/src/xmc_rtc.c ****       }
 143:../Libraries/XMCLib/src/xmc_rtc.c ****       RTC->TIM0 = time->raw0;
 243              	 .loc 2 143 0 is_stmt 1
 244 0018 094A     	 ldr r2,.L20
 245 001a 7B68     	 ldr r3,[r7,#4]
 246 001c 1B68     	 ldr r3,[r3]
 247 001e 1362     	 str r3,[r2,#32]
 144:../Libraries/XMCLib/src/xmc_rtc.c ****       
 145:../Libraries/XMCLib/src/xmc_rtc.c ****       while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM1_Msk) != 0U)
 248              	 .loc 2 145 0
 249 0020 00BF     	 nop
 250              	.L19:
 251              	 .loc 2 145 0 is_stmt 0 discriminator 1
 252 0022 FFF7FEFF 	 bl XMC_SCU_GetMirrorStatus
 253 0026 0346     	 mov r3,r0
 254 0028 03F48053 	 and r3,r3,#4096
 255 002c 002B     	 cmp r3,#0
 256 002e F8D1     	 bne .L19
 146:../Libraries/XMCLib/src/xmc_rtc.c ****       {
 147:../Libraries/XMCLib/src/xmc_rtc.c ****         /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 148:../Libraries/XMCLib/src/xmc_rtc.c ****       }
 149:../Libraries/XMCLib/src/xmc_rtc.c ****       RTC->TIM1 = time->raw1;	     
 257              	 .loc 2 149 0 is_stmt 1
 258 0030 034A     	 ldr r2,.L20
 259 0032 7B68     	 ldr r3,[r7,#4]
 260 0034 5B68     	 ldr r3,[r3,#4]
 261 0036 5362     	 str r3,[r2,#36]
 150:../Libraries/XMCLib/src/xmc_rtc.c ****   #endif
 151:../Libraries/XMCLib/src/xmc_rtc.c ****   #if (XMC_RTC_INIT_SEQUENCE == 0U)
 152:../Libraries/XMCLib/src/xmc_rtc.c ****       while ((XMC_SCU_GetMirrorStatus() & (SCU_GENERAL_MIRRSTS_RTC_TIM0_Msk | SCU_GENERAL_MIRRSTS_R
 153:../Libraries/XMCLib/src/xmc_rtc.c ****       {
 154:../Libraries/XMCLib/src/xmc_rtc.c ****         /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 155:../Libraries/XMCLib/src/xmc_rtc.c ****       }
 156:../Libraries/XMCLib/src/xmc_rtc.c ****       RTC->TIM0 = time->raw0;
 157:../Libraries/XMCLib/src/xmc_rtc.c ****       RTC->TIM1 = time->raw1;	; 
 158:../Libraries/XMCLib/src/xmc_rtc.c ****   #endif  
 159:../Libraries/XMCLib/src/xmc_rtc.c **** }
 262              	 .loc 2 159 0
 263 0038 0837     	 adds r7,r7,#8
 264              	.LCFI16:
 265              	 .cfi_def_cfa_offset 8
 266 003a BD46     	 mov sp,r7
 267              	.LCFI17:
 268              	 .cfi_def_cfa_register 13
 269              	 
 270 003c 80BD     	 pop {r7,pc}
 271              	.L21:
 272 003e 00BF     	 .align 2
 273              	.L20:
 274 0040 004A0050 	 .word 1342196224
 275              	 .cfi_endproc
 276              	.LFE160:
 278              	 .section .text.XMC_RTC_GetTime,"ax",%progbits
 279              	 .align 2
 280              	 .global XMC_RTC_GetTime
 281              	 .thumb
 282              	 .thumb_func
 284              	XMC_RTC_GetTime:
 285              	.LFB161:
 160:../Libraries/XMCLib/src/xmc_rtc.c **** 
 161:../Libraries/XMCLib/src/xmc_rtc.c **** /*
 162:../Libraries/XMCLib/src/xmc_rtc.c ****  * Gets the RTC module time value
 163:../Libraries/XMCLib/src/xmc_rtc.c ****  */
 164:../Libraries/XMCLib/src/xmc_rtc.c **** void XMC_RTC_GetTime(XMC_RTC_TIME_t *const time)
 165:../Libraries/XMCLib/src/xmc_rtc.c **** {
 286              	 .loc 2 165 0
 287              	 .cfi_startproc
 288              	 
 289              	 
 290              	 
 291 0000 80B4     	 push {r7}
 292              	.LCFI18:
 293              	 .cfi_def_cfa_offset 4
 294              	 .cfi_offset 7,-4
 295 0002 83B0     	 sub sp,sp,#12
 296              	.LCFI19:
 297              	 .cfi_def_cfa_offset 16
 298 0004 00AF     	 add r7,sp,#0
 299              	.LCFI20:
 300              	 .cfi_def_cfa_register 7
 301 0006 7860     	 str r0,[r7,#4]
 166:../Libraries/XMCLib/src/xmc_rtc.c ****   time->raw0 = RTC->TIM0;
 302              	 .loc 2 166 0
 303 0008 064B     	 ldr r3,.L23
 304 000a 1A6A     	 ldr r2,[r3,#32]
 305 000c 7B68     	 ldr r3,[r7,#4]
 306 000e 1A60     	 str r2,[r3]
 167:../Libraries/XMCLib/src/xmc_rtc.c ****   time->raw1 = RTC->TIM1;
 307              	 .loc 2 167 0
 308 0010 044B     	 ldr r3,.L23
 309 0012 5A6A     	 ldr r2,[r3,#36]
 310 0014 7B68     	 ldr r3,[r7,#4]
 311 0016 5A60     	 str r2,[r3,#4]
 168:../Libraries/XMCLib/src/xmc_rtc.c **** }
 312              	 .loc 2 168 0
 313 0018 0C37     	 adds r7,r7,#12
 314              	.LCFI21:
 315              	 .cfi_def_cfa_offset 4
 316 001a BD46     	 mov sp,r7
 317              	.LCFI22:
 318              	 .cfi_def_cfa_register 13
 319              	 
 320 001c 5DF8047B 	 ldr r7,[sp],#4
 321              	.LCFI23:
 322              	 .cfi_restore 7
 323              	 .cfi_def_cfa_offset 0
 324 0020 7047     	 bx lr
 325              	.L24:
 326 0022 00BF     	 .align 2
 327              	.L23:
 328 0024 004A0050 	 .word 1342196224
 329              	 .cfi_endproc
 330              	.LFE161:
 332              	 .section .text.XMC_RTC_GetTimeStdFormat,"ax",%progbits
 333              	 .align 2
 334              	 .global XMC_RTC_GetTimeStdFormat
 335              	 .thumb
 336              	 .thumb_func
 338              	XMC_RTC_GetTimeStdFormat:
 339              	.LFB162:
 169:../Libraries/XMCLib/src/xmc_rtc.c **** 
 170:../Libraries/XMCLib/src/xmc_rtc.c **** /*
 171:../Libraries/XMCLib/src/xmc_rtc.c ****  * Gets the RTC module time values in standard format
 172:../Libraries/XMCLib/src/xmc_rtc.c ****  */
 173:../Libraries/XMCLib/src/xmc_rtc.c **** void XMC_RTC_GetTimeStdFormat(struct tm *const stdtime)
 174:../Libraries/XMCLib/src/xmc_rtc.c **** {
 340              	 .loc 2 174 0
 341              	 .cfi_startproc
 342              	 
 343              	 
 344              	 
 345 0000 80B4     	 push {r7}
 346              	.LCFI24:
 347              	 .cfi_def_cfa_offset 4
 348              	 .cfi_offset 7,-4
 349 0002 85B0     	 sub sp,sp,#20
 350              	.LCFI25:
 351              	 .cfi_def_cfa_offset 24
 352 0004 00AF     	 add r7,sp,#0
 353              	.LCFI26:
 354              	 .cfi_def_cfa_register 7
 355 0006 7860     	 str r0,[r7,#4]
 175:../Libraries/XMCLib/src/xmc_rtc.c ****   XMC_RTC_TIME_t time;
 176:../Libraries/XMCLib/src/xmc_rtc.c ****   time.raw0 = RTC->TIM0;
 356              	 .loc 2 176 0
 357 0008 1C4B     	 ldr r3,.L26
 358 000a 1B6A     	 ldr r3,[r3,#32]
 359 000c BB60     	 str r3,[r7,#8]
 177:../Libraries/XMCLib/src/xmc_rtc.c ****   time.raw1 = RTC->TIM1;
 360              	 .loc 2 177 0
 361 000e 1B4B     	 ldr r3,.L26
 362 0010 5B6A     	 ldr r3,[r3,#36]
 363 0012 FB60     	 str r3,[r7,#12]
 178:../Libraries/XMCLib/src/xmc_rtc.c ****   
 179:../Libraries/XMCLib/src/xmc_rtc.c ****   stdtime->tm_sec = (int8_t)time.seconds;
 364              	 .loc 2 179 0
 365 0014 3B7A     	 ldrb r3,[r7,#8]
 366 0016 C3F30503 	 ubfx r3,r3,#0,#6
 367 001a DBB2     	 uxtb r3,r3
 368 001c 1A46     	 mov r2,r3
 369 001e 7B68     	 ldr r3,[r7,#4]
 370 0020 1A60     	 str r2,[r3]
 180:../Libraries/XMCLib/src/xmc_rtc.c ****   stdtime->tm_min = (int8_t)time.minutes;
 371              	 .loc 2 180 0
 372 0022 7B7A     	 ldrb r3,[r7,#9]
 373 0024 C3F30503 	 ubfx r3,r3,#0,#6
 374 0028 DBB2     	 uxtb r3,r3
 375 002a 1A46     	 mov r2,r3
 376 002c 7B68     	 ldr r3,[r7,#4]
 377 002e 5A60     	 str r2,[r3,#4]
 181:../Libraries/XMCLib/src/xmc_rtc.c ****   stdtime->tm_hour = (int8_t)time.hours;
 378              	 .loc 2 181 0
 379 0030 BB7A     	 ldrb r3,[r7,#10]
 380 0032 C3F30403 	 ubfx r3,r3,#0,#5
 381 0036 DBB2     	 uxtb r3,r3
 382 0038 1A46     	 mov r2,r3
 383 003a 7B68     	 ldr r3,[r7,#4]
 384 003c 9A60     	 str r2,[r3,#8]
 182:../Libraries/XMCLib/src/xmc_rtc.c ****   stdtime->tm_mday = ((int8_t)time.days + (int8_t)1);
 385              	 .loc 2 182 0
 386 003e FB7A     	 ldrb r3,[r7,#11]
 387 0040 C3F30403 	 ubfx r3,r3,#0,#5
 388 0044 DBB2     	 uxtb r3,r3
 389 0046 5A1C     	 adds r2,r3,#1
 390 0048 7B68     	 ldr r3,[r7,#4]
 391 004a DA60     	 str r2,[r3,#12]
 183:../Libraries/XMCLib/src/xmc_rtc.c ****   stdtime->tm_mon = (int8_t)time.month;
 392              	 .loc 2 183 0
 393 004c 7B7B     	 ldrb r3,[r7,#13]
 394 004e C3F30303 	 ubfx r3,r3,#0,#4
 395 0052 DBB2     	 uxtb r3,r3
 396 0054 1A46     	 mov r2,r3
 397 0056 7B68     	 ldr r3,[r7,#4]
 398 0058 1A61     	 str r2,[r3,#16]
 184:../Libraries/XMCLib/src/xmc_rtc.c ****   stdtime->tm_year = (int32_t)time.year - (int32_t)XMC_RTC_YEAR_OFFSET;
 399              	 .loc 2 184 0
 400 005a FB89     	 ldrh r3,[r7,#14]
 401 005c A3F26C72 	 subw r2,r3,#1900
 402 0060 7B68     	 ldr r3,[r7,#4]
 403 0062 5A61     	 str r2,[r3,#20]
 185:../Libraries/XMCLib/src/xmc_rtc.c ****   stdtime->tm_wday = (int8_t)time.daysofweek;
 404              	 .loc 2 185 0
 405 0064 3B7B     	 ldrb r3,[r7,#12]
 406 0066 C3F30203 	 ubfx r3,r3,#0,#3
 407 006a DBB2     	 uxtb r3,r3
 408 006c 1A46     	 mov r2,r3
 409 006e 7B68     	 ldr r3,[r7,#4]
 410 0070 9A61     	 str r2,[r3,#24]
 186:../Libraries/XMCLib/src/xmc_rtc.c **** }
 411              	 .loc 2 186 0
 412 0072 1437     	 adds r7,r7,#20
 413              	.LCFI27:
 414              	 .cfi_def_cfa_offset 4
 415 0074 BD46     	 mov sp,r7
 416              	.LCFI28:
 417              	 .cfi_def_cfa_register 13
 418              	 
 419 0076 5DF8047B 	 ldr r7,[sp],#4
 420              	.LCFI29:
 421              	 .cfi_restore 7
 422              	 .cfi_def_cfa_offset 0
 423 007a 7047     	 bx lr
 424              	.L27:
 425              	 .align 2
 426              	.L26:
 427 007c 004A0050 	 .word 1342196224
 428              	 .cfi_endproc
 429              	.LFE162:
 431              	 .section .text.XMC_RTC_SetAlarm,"ax",%progbits
 432              	 .align 2
 433              	 .global XMC_RTC_SetAlarm
 434              	 .thumb
 435              	 .thumb_func
 437              	XMC_RTC_SetAlarm:
 438              	.LFB163:
 187:../Libraries/XMCLib/src/xmc_rtc.c **** 
 188:../Libraries/XMCLib/src/xmc_rtc.c **** /*
 189:../Libraries/XMCLib/src/xmc_rtc.c ****  * Sets the RTC module alarm time value
 190:../Libraries/XMCLib/src/xmc_rtc.c ****  */
 191:../Libraries/XMCLib/src/xmc_rtc.c **** void XMC_RTC_SetAlarm(const XMC_RTC_ALARM_t *const alarm)
 192:../Libraries/XMCLib/src/xmc_rtc.c **** {
 439              	 .loc 2 192 0
 440              	 .cfi_startproc
 441              	 
 442              	 
 443 0000 80B5     	 push {r7,lr}
 444              	.LCFI30:
 445              	 .cfi_def_cfa_offset 8
 446              	 .cfi_offset 7,-8
 447              	 .cfi_offset 14,-4
 448 0002 82B0     	 sub sp,sp,#8
 449              	.LCFI31:
 450              	 .cfi_def_cfa_offset 16
 451 0004 00AF     	 add r7,sp,#0
 452              	.LCFI32:
 453              	 .cfi_def_cfa_register 7
 454 0006 7860     	 str r0,[r7,#4]
 193:../Libraries/XMCLib/src/xmc_rtc.c ****   XMC_ASSERT("XMC_RTC_SetAlarm:Wrong seconds value", ((uint32_t)alarm->seconds < XMC_RTC_MAXSECONDS
 194:../Libraries/XMCLib/src/xmc_rtc.c ****   XMC_ASSERT("XMC_RTC_SetAlarm:Wrong minutes value", ((uint32_t)alarm->minutes < XMC_RTC_MAXMINUTES
 195:../Libraries/XMCLib/src/xmc_rtc.c ****   XMC_ASSERT("XMC_RTC_SetAlarm:Wrong hours value", ((uint32_t)alarm->hours < XMC_RTC_MAXHOURS));
 196:../Libraries/XMCLib/src/xmc_rtc.c ****   XMC_ASSERT("XMC_RTC_SetAlarm:Wrong days value", ((uint32_t)alarm->days < XMC_RTC_MAXDAYS));
 197:../Libraries/XMCLib/src/xmc_rtc.c ****   XMC_ASSERT("XMC_RTC_SetAlarm:Wrong month value", ((uint32_t)alarm->month < XMC_RTC_MAXMONTH));
 198:../Libraries/XMCLib/src/xmc_rtc.c ****   XMC_ASSERT("XMC_RTC_SetAlarm:Wrong year value", ((uint32_t)alarm->year < XMC_RTC_MAXYEAR));
 199:../Libraries/XMCLib/src/xmc_rtc.c **** 
 200:../Libraries/XMCLib/src/xmc_rtc.c ****   #if (XMC_RTC_INIT_SEQUENCE == 1U)
 201:../Libraries/XMCLib/src/xmc_rtc.c ****       while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_ATIM0_Msk) != 0U)
 455              	 .loc 2 201 0
 456 0008 00BF     	 nop
 457              	.L29:
 458              	 .loc 2 201 0 is_stmt 0 discriminator 1
 459 000a FFF7FEFF 	 bl XMC_SCU_GetMirrorStatus
 460 000e 0346     	 mov r3,r0
 461 0010 03F40073 	 and r3,r3,#512
 462 0014 002B     	 cmp r3,#0
 463 0016 F8D1     	 bne .L29
 202:../Libraries/XMCLib/src/xmc_rtc.c ****       {
 203:../Libraries/XMCLib/src/xmc_rtc.c ****         /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 204:../Libraries/XMCLib/src/xmc_rtc.c ****       }
 205:../Libraries/XMCLib/src/xmc_rtc.c ****       RTC->ATIM0 = alarm->raw0;
 464              	 .loc 2 205 0 is_stmt 1
 465 0018 094A     	 ldr r2,.L31
 466 001a 7B68     	 ldr r3,[r7,#4]
 467 001c 1B68     	 ldr r3,[r3]
 468 001e 9361     	 str r3,[r2,#24]
 206:../Libraries/XMCLib/src/xmc_rtc.c ****       
 207:../Libraries/XMCLib/src/xmc_rtc.c ****       while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_ATIM1_Msk) != 0U)
 469              	 .loc 2 207 0
 470 0020 00BF     	 nop
 471              	.L30:
 472              	 .loc 2 207 0 is_stmt 0 discriminator 1
 473 0022 FFF7FEFF 	 bl XMC_SCU_GetMirrorStatus
 474 0026 0346     	 mov r3,r0
 475 0028 03F48063 	 and r3,r3,#1024
 476 002c 002B     	 cmp r3,#0
 477 002e F8D1     	 bne .L30
 208:../Libraries/XMCLib/src/xmc_rtc.c ****       {
 209:../Libraries/XMCLib/src/xmc_rtc.c ****         /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 210:../Libraries/XMCLib/src/xmc_rtc.c ****       }
 211:../Libraries/XMCLib/src/xmc_rtc.c ****       RTC->ATIM1 = alarm->raw1; 
 478              	 .loc 2 211 0 is_stmt 1
 479 0030 034A     	 ldr r2,.L31
 480 0032 7B68     	 ldr r3,[r7,#4]
 481 0034 5B68     	 ldr r3,[r3,#4]
 482 0036 D361     	 str r3,[r2,#28]
 212:../Libraries/XMCLib/src/xmc_rtc.c ****   #endif
 213:../Libraries/XMCLib/src/xmc_rtc.c ****   #if (XMC_RTC_INIT_SEQUENCE == 0U)
 214:../Libraries/XMCLib/src/xmc_rtc.c ****       while ((XMC_SCU_GetMirrorStatus() & (SCU_GENERAL_MIRRSTS_RTC_ATIM0_Msk | SCU_GENERAL_MIRRSTS_
 215:../Libraries/XMCLib/src/xmc_rtc.c ****       {
 216:../Libraries/XMCLib/src/xmc_rtc.c ****         /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 217:../Libraries/XMCLib/src/xmc_rtc.c ****       }
 218:../Libraries/XMCLib/src/xmc_rtc.c ****       RTC->ATIM0 = alarm->raw0;
 219:../Libraries/XMCLib/src/xmc_rtc.c ****       RTC->ATIM1 = alarm->raw1; 
 220:../Libraries/XMCLib/src/xmc_rtc.c ****   #endif  
 221:../Libraries/XMCLib/src/xmc_rtc.c **** }
 483              	 .loc 2 221 0
 484 0038 0837     	 adds r7,r7,#8
 485              	.LCFI33:
 486              	 .cfi_def_cfa_offset 8
 487 003a BD46     	 mov sp,r7
 488              	.LCFI34:
 489              	 .cfi_def_cfa_register 13
 490              	 
 491 003c 80BD     	 pop {r7,pc}
 492              	.L32:
 493 003e 00BF     	 .align 2
 494              	.L31:
 495 0040 004A0050 	 .word 1342196224
 496              	 .cfi_endproc
 497              	.LFE163:
 499              	 .section .text.XMC_RTC_GetAlarm,"ax",%progbits
 500              	 .align 2
 501              	 .global XMC_RTC_GetAlarm
 502              	 .thumb
 503              	 .thumb_func
 505              	XMC_RTC_GetAlarm:
 506              	.LFB164:
 222:../Libraries/XMCLib/src/xmc_rtc.c **** 
 223:../Libraries/XMCLib/src/xmc_rtc.c **** /*
 224:../Libraries/XMCLib/src/xmc_rtc.c ****  * Gets the RTC module alarm time value
 225:../Libraries/XMCLib/src/xmc_rtc.c ****  */
 226:../Libraries/XMCLib/src/xmc_rtc.c **** void XMC_RTC_GetAlarm(XMC_RTC_ALARM_t *const alarm)
 227:../Libraries/XMCLib/src/xmc_rtc.c **** {
 507              	 .loc 2 227 0
 508              	 .cfi_startproc
 509              	 
 510              	 
 511              	 
 512 0000 80B4     	 push {r7}
 513              	.LCFI35:
 514              	 .cfi_def_cfa_offset 4
 515              	 .cfi_offset 7,-4
 516 0002 83B0     	 sub sp,sp,#12
 517              	.LCFI36:
 518              	 .cfi_def_cfa_offset 16
 519 0004 00AF     	 add r7,sp,#0
 520              	.LCFI37:
 521              	 .cfi_def_cfa_register 7
 522 0006 7860     	 str r0,[r7,#4]
 228:../Libraries/XMCLib/src/xmc_rtc.c ****   alarm->raw0 = RTC->ATIM0;
 523              	 .loc 2 228 0
 524 0008 064B     	 ldr r3,.L34
 525 000a 9A69     	 ldr r2,[r3,#24]
 526 000c 7B68     	 ldr r3,[r7,#4]
 527 000e 1A60     	 str r2,[r3]
 229:../Libraries/XMCLib/src/xmc_rtc.c ****   alarm->raw1 = RTC->ATIM1;
 528              	 .loc 2 229 0
 529 0010 044B     	 ldr r3,.L34
 530 0012 DA69     	 ldr r2,[r3,#28]
 531 0014 7B68     	 ldr r3,[r7,#4]
 532 0016 5A60     	 str r2,[r3,#4]
 230:../Libraries/XMCLib/src/xmc_rtc.c **** }
 533              	 .loc 2 230 0
 534 0018 0C37     	 adds r7,r7,#12
 535              	.LCFI38:
 536              	 .cfi_def_cfa_offset 4
 537 001a BD46     	 mov sp,r7
 538              	.LCFI39:
 539              	 .cfi_def_cfa_register 13
 540              	 
 541 001c 5DF8047B 	 ldr r7,[sp],#4
 542              	.LCFI40:
 543              	 .cfi_restore 7
 544              	 .cfi_def_cfa_offset 0
 545 0020 7047     	 bx lr
 546              	.L35:
 547 0022 00BF     	 .align 2
 548              	.L34:
 549 0024 004A0050 	 .word 1342196224
 550              	 .cfi_endproc
 551              	.LFE164:
 553              	 .section .text.XMC_RTC_GetAlarmStdFormat,"ax",%progbits
 554              	 .align 2
 555              	 .global XMC_RTC_GetAlarmStdFormat
 556              	 .thumb
 557              	 .thumb_func
 559              	XMC_RTC_GetAlarmStdFormat:
 560              	.LFB165:
 231:../Libraries/XMCLib/src/xmc_rtc.c **** 
 232:../Libraries/XMCLib/src/xmc_rtc.c **** 
 233:../Libraries/XMCLib/src/xmc_rtc.c **** /*
 234:../Libraries/XMCLib/src/xmc_rtc.c ****  * Gets the RTC module alarm time value in standard format
 235:../Libraries/XMCLib/src/xmc_rtc.c ****  */
 236:../Libraries/XMCLib/src/xmc_rtc.c **** void XMC_RTC_GetAlarmStdFormat(struct tm *const stdtime)
 237:../Libraries/XMCLib/src/xmc_rtc.c **** {
 561              	 .loc 2 237 0
 562              	 .cfi_startproc
 563              	 
 564              	 
 565              	 
 566 0000 80B4     	 push {r7}
 567              	.LCFI41:
 568              	 .cfi_def_cfa_offset 4
 569              	 .cfi_offset 7,-4
 570 0002 85B0     	 sub sp,sp,#20
 571              	.LCFI42:
 572              	 .cfi_def_cfa_offset 24
 573 0004 00AF     	 add r7,sp,#0
 574              	.LCFI43:
 575              	 .cfi_def_cfa_register 7
 576 0006 7860     	 str r0,[r7,#4]
 238:../Libraries/XMCLib/src/xmc_rtc.c ****   XMC_RTC_ALARM_t alarm;
 239:../Libraries/XMCLib/src/xmc_rtc.c ****   
 240:../Libraries/XMCLib/src/xmc_rtc.c ****   alarm.raw0 = RTC->ATIM0;
 577              	 .loc 2 240 0
 578 0008 194B     	 ldr r3,.L37
 579 000a 9B69     	 ldr r3,[r3,#24]
 580 000c BB60     	 str r3,[r7,#8]
 241:../Libraries/XMCLib/src/xmc_rtc.c ****   alarm.raw1 = RTC->ATIM1;
 581              	 .loc 2 241 0
 582 000e 184B     	 ldr r3,.L37
 583 0010 DB69     	 ldr r3,[r3,#28]
 584 0012 FB60     	 str r3,[r7,#12]
 242:../Libraries/XMCLib/src/xmc_rtc.c **** 
 243:../Libraries/XMCLib/src/xmc_rtc.c ****   stdtime->tm_sec = (int8_t)alarm.seconds;
 585              	 .loc 2 243 0
 586 0014 3B7A     	 ldrb r3,[r7,#8]
 587 0016 C3F30503 	 ubfx r3,r3,#0,#6
 588 001a DBB2     	 uxtb r3,r3
 589 001c 1A46     	 mov r2,r3
 590 001e 7B68     	 ldr r3,[r7,#4]
 591 0020 1A60     	 str r2,[r3]
 244:../Libraries/XMCLib/src/xmc_rtc.c ****   stdtime->tm_min = (int8_t)alarm.minutes;
 592              	 .loc 2 244 0
 593 0022 7B7A     	 ldrb r3,[r7,#9]
 594 0024 C3F30503 	 ubfx r3,r3,#0,#6
 595 0028 DBB2     	 uxtb r3,r3
 596 002a 1A46     	 mov r2,r3
 597 002c 7B68     	 ldr r3,[r7,#4]
 598 002e 5A60     	 str r2,[r3,#4]
 245:../Libraries/XMCLib/src/xmc_rtc.c ****   stdtime->tm_hour = (int8_t)alarm.hours;
 599              	 .loc 2 245 0
 600 0030 BB7A     	 ldrb r3,[r7,#10]
 601 0032 C3F30403 	 ubfx r3,r3,#0,#5
 602 0036 DBB2     	 uxtb r3,r3
 603 0038 1A46     	 mov r2,r3
 604 003a 7B68     	 ldr r3,[r7,#4]
 605 003c 9A60     	 str r2,[r3,#8]
 246:../Libraries/XMCLib/src/xmc_rtc.c ****   stdtime->tm_mday = ((int8_t)alarm.days + (int8_t)1);
 606              	 .loc 2 246 0
 607 003e FB7A     	 ldrb r3,[r7,#11]
 608 0040 C3F30403 	 ubfx r3,r3,#0,#5
 609 0044 DBB2     	 uxtb r3,r3
 610 0046 5A1C     	 adds r2,r3,#1
 611 0048 7B68     	 ldr r3,[r7,#4]
 612 004a DA60     	 str r2,[r3,#12]
 247:../Libraries/XMCLib/src/xmc_rtc.c ****   stdtime->tm_mon = (int8_t)alarm.month;
 613              	 .loc 2 247 0
 614 004c 7B7B     	 ldrb r3,[r7,#13]
 615 004e C3F30303 	 ubfx r3,r3,#0,#4
 616 0052 DBB2     	 uxtb r3,r3
 617 0054 1A46     	 mov r2,r3
 618 0056 7B68     	 ldr r3,[r7,#4]
 619 0058 1A61     	 str r2,[r3,#16]
 248:../Libraries/XMCLib/src/xmc_rtc.c ****   stdtime->tm_year = (int32_t)alarm.year - (int32_t)XMC_RTC_YEAR_OFFSET;
 620              	 .loc 2 248 0
 621 005a FB89     	 ldrh r3,[r7,#14]
 622 005c A3F26C72 	 subw r2,r3,#1900
 623 0060 7B68     	 ldr r3,[r7,#4]
 624 0062 5A61     	 str r2,[r3,#20]
 249:../Libraries/XMCLib/src/xmc_rtc.c **** }
 625              	 .loc 2 249 0
 626 0064 1437     	 adds r7,r7,#20
 627              	.LCFI44:
 628              	 .cfi_def_cfa_offset 4
 629 0066 BD46     	 mov sp,r7
 630              	.LCFI45:
 631              	 .cfi_def_cfa_register 13
 632              	 
 633 0068 5DF8047B 	 ldr r7,[sp],#4
 634              	.LCFI46:
 635              	 .cfi_restore 7
 636              	 .cfi_def_cfa_offset 0
 637 006c 7047     	 bx lr
 638              	.L38:
 639 006e 00BF     	 .align 2
 640              	.L37:
 641 0070 004A0050 	 .word 1342196224
 642              	 .cfi_endproc
 643              	.LFE165:
 645              	 .section .text.XMC_RTC_GetEventStatus,"ax",%progbits
 646              	 .align 2
 647              	 .global XMC_RTC_GetEventStatus
 648              	 .thumb
 649              	 .thumb_func
 651              	XMC_RTC_GetEventStatus:
 652              	.LFB166:
 250:../Libraries/XMCLib/src/xmc_rtc.c **** 
 251:../Libraries/XMCLib/src/xmc_rtc.c **** /*
 252:../Libraries/XMCLib/src/xmc_rtc.c ****  * Gets the RTC periodic and alarm event(s) status
 253:../Libraries/XMCLib/src/xmc_rtc.c ****  */
 254:../Libraries/XMCLib/src/xmc_rtc.c **** uint32_t XMC_RTC_GetEventStatus(void)
 255:../Libraries/XMCLib/src/xmc_rtc.c **** {
 653              	 .loc 2 255 0
 654              	 .cfi_startproc
 655              	 
 656              	 
 657              	 
 658 0000 80B4     	 push {r7}
 659              	.LCFI47:
 660              	 .cfi_def_cfa_offset 4
 661              	 .cfi_offset 7,-4
 662 0002 00AF     	 add r7,sp,#0
 663              	.LCFI48:
 664              	 .cfi_def_cfa_register 7
 256:../Libraries/XMCLib/src/xmc_rtc.c ****   return RTC->STSSR;
 665              	 .loc 2 256 0
 666 0004 034B     	 ldr r3,.L41
 667 0006 DB68     	 ldr r3,[r3,#12]
 257:../Libraries/XMCLib/src/xmc_rtc.c **** }
 668              	 .loc 2 257 0
 669 0008 1846     	 mov r0,r3
 670 000a BD46     	 mov sp,r7
 671              	.LCFI49:
 672              	 .cfi_def_cfa_register 13
 673              	 
 674 000c 5DF8047B 	 ldr r7,[sp],#4
 675              	.LCFI50:
 676              	 .cfi_restore 7
 677              	 .cfi_def_cfa_offset 0
 678 0010 7047     	 bx lr
 679              	.L42:
 680 0012 00BF     	 .align 2
 681              	.L41:
 682 0014 004A0050 	 .word 1342196224
 683              	 .cfi_endproc
 684              	.LFE166:
 686              	 .text
 687              	.Letext0:
 688              	 .file 3 "e:\\davev4\\dave-4.1.4\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 689              	 .file 4 "e:\\davev4\\dave-4.1.4\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 690              	 .file 5 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest/Libraries/CMSIS/Infineon/XMC4700_series/Include/XMC4700.h"
 691              	 .file 6 "e:\\davev4\\dave-4.1.4\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\time.h"
 692              	 .file 7 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest\\Libraries\\XMCLib\\inc/xmc_rtc.h"
 693              	 .file 8 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest/Libraries/CMSIS/Include/core_cm4.h"
 694              	 .file 9 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest/Libraries/CMSIS/Infineon/XMC4700_series/Include/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_rtc.c
    {standard input}:20     .text.XMC_SCU_GetMirrorStatus:00000000 $t
    {standard input}:24     .text.XMC_SCU_GetMirrorStatus:00000000 XMC_SCU_GetMirrorStatus
    {standard input}:56     .text.XMC_SCU_GetMirrorStatus:00000014 $d
    {standard input}:61     .text.XMC_RTC_Start:00000000 $t
    {standard input}:66     .text.XMC_RTC_Start:00000000 XMC_RTC_Start
    {standard input}:101    .text.XMC_RTC_Start:00000024 $d
    {standard input}:106    .text.XMC_RTC_Stop:00000000 $t
    {standard input}:111    .text.XMC_RTC_Stop:00000000 XMC_RTC_Stop
    {standard input}:145    .text.XMC_RTC_Stop:00000024 $d
    {standard input}:150    .text.XMC_RTC_SetPrescaler:00000000 $t
    {standard input}:155    .text.XMC_RTC_SetPrescaler:00000000 XMC_RTC_SetPrescaler
    {standard input}:206    .text.XMC_RTC_SetPrescaler:00000030 $d
    {standard input}:211    .text.XMC_RTC_SetTime:00000000 $t
    {standard input}:216    .text.XMC_RTC_SetTime:00000000 XMC_RTC_SetTime
    {standard input}:274    .text.XMC_RTC_SetTime:00000040 $d
    {standard input}:279    .text.XMC_RTC_GetTime:00000000 $t
    {standard input}:284    .text.XMC_RTC_GetTime:00000000 XMC_RTC_GetTime
    {standard input}:328    .text.XMC_RTC_GetTime:00000024 $d
    {standard input}:333    .text.XMC_RTC_GetTimeStdFormat:00000000 $t
    {standard input}:338    .text.XMC_RTC_GetTimeStdFormat:00000000 XMC_RTC_GetTimeStdFormat
    {standard input}:427    .text.XMC_RTC_GetTimeStdFormat:0000007c $d
    {standard input}:432    .text.XMC_RTC_SetAlarm:00000000 $t
    {standard input}:437    .text.XMC_RTC_SetAlarm:00000000 XMC_RTC_SetAlarm
    {standard input}:495    .text.XMC_RTC_SetAlarm:00000040 $d
    {standard input}:500    .text.XMC_RTC_GetAlarm:00000000 $t
    {standard input}:505    .text.XMC_RTC_GetAlarm:00000000 XMC_RTC_GetAlarm
    {standard input}:549    .text.XMC_RTC_GetAlarm:00000024 $d
    {standard input}:554    .text.XMC_RTC_GetAlarmStdFormat:00000000 $t
    {standard input}:559    .text.XMC_RTC_GetAlarmStdFormat:00000000 XMC_RTC_GetAlarmStdFormat
    {standard input}:641    .text.XMC_RTC_GetAlarmStdFormat:00000070 $d
    {standard input}:646    .text.XMC_RTC_GetEventStatus:00000000 $t
    {standard input}:651    .text.XMC_RTC_GetEventStatus:00000000 XMC_RTC_GetEventStatus
    {standard input}:682    .text.XMC_RTC_GetEventStatus:00000014 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
