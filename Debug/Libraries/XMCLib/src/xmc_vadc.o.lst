   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_vadc.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_VADC_GROUP_ExternalMuxControlInit,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_VADC_GROUP_ExternalMuxControlInit:
  25              	.LFB167:
  26              	 .file 1 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest\\Libraries\\XMCLib\\inc/xmc_vadc.h"
   1:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
   2:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @file xmc_vadc.h
   3:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @date 2016-01-12
   4:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
   5:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @cond
   6:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** ***************************************************************************************************
   7:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMClib v2.1.4 - XMC Peripheral Driver Library 
   8:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
   9:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * All rights reserved.                        
  11:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                                             
  12:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * following conditions are met:   
  14:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                                                                              
  15:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * disclaimer.                        
  17:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * 
  18:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * 
  21:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * products derived from this software without specific prior written permission.                  
  23:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                                                                              
  24:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                                                                              
  32:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  **************************************************************************************************
  35:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
  36:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Change History
  37:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * --------------
  38:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
  39:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * 2015-02-15:
  40:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Initial <br>
  41:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *      
  42:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * 2015-02-20:
  43:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Revised for XMC1201 device.<br>
  44:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *   
  45:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * 2015-04-27:
  46:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Added new APIs for SHS.<br>
  47:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Added New APIs for trigger edge selection.<BR>
  48:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
  51:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * 2015-06-20:
  52:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * 2015-06-25:
  54:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - BFL configuration in channel initialization fixed.
  55:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
  56:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * 2015-07-28:
  57:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  58:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  59:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  60:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - New APIs Created.
  61:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  62:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  63:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAlias
  64:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetInputClass
  65:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  66:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  67:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  68:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  69:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
  70:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * 2015-12-01:
  71:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Added:
  72:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - XMC4300 device supported
  73:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
  74:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Fixed:
  75:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_TriggerEvent API updated. OR operation removed. 
  76:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_ClearEvent API updated. Multiple events triggering on clearing the event i
  77:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Wrong MACRO name defined in xmc_vadc_map.h file corrected for XMC4200/4100 devices.
  78:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *       XMC_VADC_G3_SAMPLE renamed to XMC_VADC_G1_SAMPLE
  79:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
  80:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * 2015-12-01:
  81:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - New APIs Created.
  82:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled
  83:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled
  84:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  85:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  86:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @endcond 
  87:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
  88:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
  89:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
  90:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #ifndef XMC_VADC_H
  91:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_H
  92:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  
  93:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**************************************************************************************************
  94:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * HEADER FILES
  95:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  **************************************************************************************************
  96:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #include <xmc_common.h>
  97:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #include <xmc_scu.h>
  98:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #include <xmc_vadc_map.h>
  99:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 100:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 101:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @addtogroup XMClib XMC Peripheral Library
 102:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @{
 103:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 104:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  
 105:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 106:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @addtogroup VADC
 107:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @brief Versatile Analog to Digital Converter (VADC) driver for XMC microcontroller family.
 108:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
 109:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * The XMC microcontroller provides a series of analog input channels connected to a cluster of Ana
 110:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Converters using the Successive Approximation Register (SAR) principle to convert analog input v
 111:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * to discrete digital values.
 112:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \if XMC1
 113:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * The XMC1x is based on Sample & Hold converters, where a cluster contains 2 Sample&Hold units whi
 114:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * converter.
 115:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \endif
 116:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
 117:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Each converter of the ADC cluster can operate independent of the others, controlled by a dedicat
 118:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * registers and triggered by a dedicated group request source. The results of each channel can be 
 119:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * dedicated channel-specific result register or in a group-specific result register.<BR>
 120:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
 121:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * The Versatile Analog to Digital Converter module (VADC) of the XMC comprises a set of converter 
 122:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * can be operated either independently or via a common request source that emulates a background c
 123:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Each converter block is equipped with a dedicated input multiplexer and dedicated request source
 124:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * which together build separate groups.
 125:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
 126:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \if XMC4
 127:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc4x.png"
 128:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \else
 129:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc1x.png"
 130:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \endif
 131:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
 132:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * The VADC LLD is split into GLOBAL and GROUP related APIs.<BR>
 133:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * <B>GLOBAL: </B><BR>
 134:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * <UL>
 135:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * <LI>Global APIs act on the entire ADC module. Configures global configuration registers</LI>
 136:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * <LI>Allows configuration of the background request source of the VADC.</LI>
 137:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * <LI>The clock related configurations for the VADC module are configured in the Global APIs/</LI>
 138:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * <LI>The Global API names are prefixed by the \b XMC_VADC_GLOBAL_ and they accept ::XMC_VADC_GLOB
 139:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 140:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * <LI>Configures the background request source of the VADC. The APIs which act on the background r
 141:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_Background</LI>
 142:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * <LI>Configures the sample and hold unit of the VADC. The APIs which act on the SHS related regis
 143:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_SHS_</LI>
 144:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * </UL><BR>
 145:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
 146:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * <B>GROUP: </B><BR>
 147:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * <UL>
 148:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * <LI>Group APIs act on a VADC group. Configures the group configuration registers</LI>
 149:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * <LI>Configures the queue request source of the VADC. The APIs which act on the queue related reg
 150:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Queue</LI>
 151:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * <LI>Configures the scan request source of the VADC. The APIs which act on the scan related regis
 152:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Scan</LI>
 153:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * <LI>Configuration of the channels of each group are done by the API which have a prefix as
 154:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     \b XMC_VADC_GROUP_Channel.</LI>
 155:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * <LI>The Group API names are prefixed by the \b XMC_VADC_GROUP_ and they accept ::XMC_VADC_GROUP_
 156:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 157:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * </UL><BR>
 158:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @{
 159:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 160:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  
 161:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**************************************************************************************************
 162:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * MACROS
 163:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  **************************************************************************************************
 164:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 165:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if ((UC_SERIES == XMC42)||(UC_SERIES == XMC41) || (UC_SERIES == XMC43))
 166:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 167:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 168:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 169:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 170:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     device*/
 171:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 172:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 173:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 174:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 175:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 176:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     operation for a particular device*/
 177:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 178:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 179:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 180:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 181:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if (UC_SERIES == XMC44 || UC_SERIES == XMC47 || UC_SERIES == XMC48)
 182:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 183:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 184:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 185:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 186:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     device*/
 187:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 188:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 189:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 190:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 191:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 192:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     operation for a particular device*/
 193:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 194:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 195:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 196:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 197:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if (UC_SERIES == XMC45)
 198:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 199:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 200:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 201:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 202:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     device*/
 203:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 204:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 205:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 206:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 207:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 208:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     operation for a particular device*/
 209:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 210:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 211:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 212:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 213:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if (UC_SERIES == XMC14 || UC_SERIES == XMC13 || UC_SERIES == XMC12)
 214:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 215:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 216:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 217:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 218:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     device*/
 219:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 220:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 221:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 222:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 223:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 224:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     operation for a particular device*/
 225:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 226:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 227:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 228:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 229:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if (UC_SERIES == XMC11)
 230:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (0U) /*  Defines the availability of group resource in a d
 231:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (0U) /*  Defines the availability of scan request resource
 232:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (0U) /*  Defines the availability of queue request resourc
 233:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (0U) /*  Defines the availability of external multiplexer 
 234:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     device*/
 235:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (0U) /*  Defines the availability of boundary check suppor
 236:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (0U) /*  Defines the availability of synchronous request s
 237:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 238:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 239:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_SHS_START_UP_CAL_ACTIVE (3U) /*  Defines the need for SHS startup calibration acti
 240:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     XMC1100 devices */
 241:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_CONV_ENABLE_FOR_XMC11   (*(uint32_t*) 0x40010500UL) /*  Defines the additional err
 242:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     XMC1100 device for effective working*/ 
 243:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 244:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     operation for a particular device*/
 245:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 246:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 247:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 248:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 249:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_NUM_PORTS               (16U) /* Defines the number of hardware ports that can be 
 250:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     as triggers and gating signals */
 251:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 252:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_NUM_RESULT_REGISTERS    (16U) /* Defines the number of result holding registers pe
 253:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 254:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_NUM_CHANNELS_PER_GROUP  (8U)  /**< Defines the number of ADC channels per group */
 255:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 256:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**************************************************************************************************
 257:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * ENUMS
 258:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  **************************************************************************************************
 259:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef uint16_t XMC_VADC_RESULT_SIZE_t; /**< Type defined the converted result size to unsigned 16
 260:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef VADC_GLOBAL_TypeDef XMC_VADC_GLOBAL_t; /**< Type defined the device header file vadc global
 261:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                              type to VADC type*/
 262:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 263:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_AVAILABLE == 1U)
 264:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef VADC_G_TypeDef XMC_VADC_GROUP_t; /**< Type defined the device header file vadc group regist
 265:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                              type to VADC Group type*/
 266:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 267:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 268:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 269:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef SHS_Type XMC_VADC_GLOBAL_SHS_t; /**< Type defined the sample and hold register structure*/
 270:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 271:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 272:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the return status after execution of VADC specific API's. Use @ref XMC_VADC_STATUS_t fo
 273:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 274:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_STATUS
 275:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 276:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_STATUS_SUCCESS = 0,   /**< Returned when the API has been able to fulfill the callers re
 277:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_STATUS_ERROR          /**< Returned when the API cannot fulfill the request */
 278:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_STATUS_t;
 279:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 280:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 281:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the various service requests lines. Each group can raise up to 4 service requests indep
 282:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  all groups together have the possibility of raising 4 module wide service requests. Use @ref XM
 283:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  enumeration.
 284:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 285:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_SR
 286:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 287:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR0 = 0, /**< Group specific Service Request-0 */
 288:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR1,     /**< Group specific Service Request-1 */
 289:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR2,     /**< Group specific Service Request-2 */
 290:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR3,     /**< Group specific Service Request-3 */
 291:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR0,    /**< Module Wide Common Service Request-0 */
 292:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR1,    /**< Module Wide Common Service Request-1 */
 293:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR2,    /**< Module Wide Common Service Request-2 */
 294:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR3    /**< Module Wide Common Service Request-3 */
 295:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_SR_t;
 296:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 297:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 298:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the mode of operation of a channel, when an ongoing conversion gets interrupted in betw
 299:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_STARTMODE_t for this enumeration.
 300:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 301:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_STARTMODE
 302:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 303:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_WFS = 0, /**< An ongoing conversion completes without interruption */
 304:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CIR,     /**< An ongoing conversion can be interrupted and resumed later*/
 305:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CNR     /**< An ongoing conversion can be interrupted and never resumed */
 306:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_STARTMODE_t;
 307:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 308:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 309:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the edge sensitivity of the trigger signal which can assert a conversion.
 310:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_EDGE_t for this enumeration.
 311:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 312:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_EDGE
 313:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 314:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_NONE = 0, /**< No external trigger. Conversion request can be asserted by s
 315:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_FALLING,  /**< The falling edge of the external trigger can assert conversi
 316:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_RISING,   /**< The rising edge of the external trigger can assert conversio
 317:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_ANY       /**< Both the edges can assert conversion request */
 318:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_EDGE_t;
 319:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 320:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 321:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the external trigger input selection possibilities, to assert a conversion. Refer the V
 322:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  section of the reference manual for details of peripherals which can be used. Also refer xmc_va
 323:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  detailed definitions of the peripherals which can take the control of these enumeration items.
 324:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_INPUT_SELECT_t for this enumeration.
 325:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 326:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_INPUT_SELECT
 327:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 328:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_A = 0, /**< Trigger select signal A */
 329:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_B,     /**< Trigger select signal B */
 330:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_C,     /**< Trigger select signal C */
 331:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_D,     /**< Trigger select signal D */
 332:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_E,     /**< Trigger select signal E */
 333:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_F,     /**< Trigger select signal F */
 334:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_G,     /**< Trigger select signal G */
 335:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_H,     /**< Trigger select signal H */
 336:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_I,     /**< Trigger select signal I */
 337:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_J,     /**< Trigger select signal J */
 338:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_K,     /**< Trigger select signal K */
 339:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_L,     /**< Trigger select signal L */
 340:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_M,     /**< Trigger select signal M */
 341:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_N,     /**< Trigger select signal N */
 342:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_O,     /**< Trigger select signal O */
 343:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_P      /**< Trigger select signal P */
 344:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   
 345:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_INPUT_SELECT_t;
 346:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 347:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 348:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the external gating input selection possibilities, to gate the conversion requests. Ref
 349:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  interconnects section of the reference manual for details of peripherals which can be used. Als
 350:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  xmc_vadc_map.h file for detailed definitions of the peripherals which can take the control of t
 351:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  items. Use @ref XMC_VADC_GATE_INPUT_SELECT_t for this enumeration.
 352:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 353:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GATE_INPUT_SELECT
 354:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 355:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_A = 0, /**< Gating select signal A */
 356:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_B,     /**< Gating select signal B */
 357:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_C,     /**< Gating select signal C */
 358:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_D,     /**< Gating select signal D */
 359:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_E,     /**< Gating select signal E */
 360:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_F,     /**< Gating select signal F */
 361:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_G,     /**< Gating select signal G */
 362:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_H,     /**< Gating select signal H */
 363:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_I,     /**< Gating select signal I */
 364:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_J,     /**< Gating select signal J */
 365:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_K,     /**< Gating select signal K */
 366:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_L,     /**< Gating select signal L */
 367:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_M,     /**< Gating select signal M */
 368:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_N,     /**< Gating select signal N */
 369:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_O,     /**< Gating select signal O */
 370:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_P      /**< Gating select signal P */
 371:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   
 372:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GATE_INPUT_SELECT_t;
 373:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 374:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 375:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the condition for gating the conversion requests. It can be used to set the ENGT field
 376:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * of ASMR/BSMR/QMR register respectively for auto_scan/background_scan/queue request sources.
 377:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Use @ref XMC_VADC_GATEMODE_t for this enumeration.
 378:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 379:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GATEMODE
 380:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 381:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_BLOCK = 0,  /**< External triggers are permanently blocked */
 382:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_IGNORE,     /**< External triggers are unconditionally passed */
 383:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVEHIGH, /**< External trigger is passed only if the gate signal is high */
 384:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVELOW  /**< External trigger is passed only if the gate signal is low */
 385:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GATEMODE_t;
 386:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 387:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 388:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the conversion result handling mode. Use @ref XMC_VADC_DMM_t for this enumeration.
 389:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 390:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_DMM
 391:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 392:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_DMM_REDUCTION_MODE = 0, /**< Standard Data reduction mode*/
 393:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_DMM_FILTERING_MODE,     /**< Provide option to select Finite Impulse Response Filter (FI
 394:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                         Infinite Impulse Response Filter (IIR)*/
 395:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_DMM_DIFFERENCE_MODE,    /**< Difference mode is selected*/
 396:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_DMM_t;
 397:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 398:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 399:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the conversion mode. It defines the resolution of conversion. Use XMC_VADC_CONVMODE_t f
 400:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 401:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_CONVMODE
 402:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 403:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_12BIT       = 0,  /**< Results of conversion are 12bits wide */
 404:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_10BIT       = 1,  /**< Results of conversion are 10bits wide */
 405:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_8BIT        = 2,  /**< Results of conversion are 8bits wide */
 406:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_FASTCOMPARE = 5  /**< Input signal compared with a preset range */
 407:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_CONVMODE_t;
 408:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 409:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 410:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the output of a fast compare mode. Use @ref XMC_VADC_FAST_COMPARE_t for
 411:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  this enumeration.
 412:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 413:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_FAST_COMPARE
 414:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 415:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_LOW = 0, /**< Input lower than than programmed reference */
 416:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_HIGH ,   /**< Input higher than than programmed reference */
 417:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_UNKNOWN  /**< Unknown, Conversion probably still ongoing */
 418:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_FAST_COMPARE_t;
 419:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  
 420:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 421:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the type of scan request source to be used. It can choose between auto scan and backgrou
 422:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * source methods. Use @ref XMC_VADC_SCAN_TYPE_t for this enumeration.
 423:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 424:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_TYPE
 425:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 426:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_GROUPSCAN = 0, /**< Auto scan mode of operation selected. Also called as Group
 427:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_BACKGROUND    /**< Background scan mode of operation selected. Also called as 
 428:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_SCAN_TYPE_t;
 429:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 430:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 431:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the behavior of load event for the scan request source. Use @ref XMC_VADC_SCAN_LOAD_t fo
 432:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 433:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_LOAD
 434:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 435:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_OVERWRITE = 0, /**< The old set of channels is discarded in favor of the new s
 436:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                          awaiting conversion */
 437:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_COMBINE       /**< The new set of channels are combined with the pending chann
 438:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                          previous set */
 439:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_SCAN_LOAD_t;
 440:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 441:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 442:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the conversion classes that can be selected for each channel. The enumeration members ho
 443:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * global classes. The conversion classes decides the properties of conversion, like resolution, sa
 444:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Use @ref XMC_VADC_CHANNEL_CONV_t for this enumeration.
 445:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 446:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 447:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_CONV
 448:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 449:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 = 0, /**< Conversion property set-0 specific to the group */
 450:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS1,     /**< Conversion property set-1 specific to the group */
 451:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS0,    /**< Conversion property set-0, Module wide */
 452:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1    /**< Conversion property set-1, Module wide */
 453:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONV_t;
 454:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 455:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 456:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the references to boundary values used for limit checking feature. Each of these can be 
 457:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * either an upper bound or a lower bound. Use @ref XMC_VADC_CHANNEL_BOUNDARY_t for this enumeratio
 458:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 459:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 460:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY
 461:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 462:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 = 0, /**< Group specific Boundary-0 value */
 463:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1,     /**< Group specific Boundary-1 value */
 464:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0,    /**< Module wide Boundary-0 value */
 465:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1    /**< Module wide Boundary-1 value */
 466:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_t;
 467:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 468:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 469:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the voltage which the capacitor is charged to. Used in Broken wire detection feature. Us
 470:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @ref XMC_VADC_CHANNEL_BWDCH_t for this enumeration.
 471:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 472:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BWDCH
 473:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 474:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAGND = 0, /**< Capacitor pre-charged to ground*/
 475:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAREF     /**< Capacitor pre-charged to reference voltage*/
 476:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BWDCH_t;
 477:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 478:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 479:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *   Defines the criteria for event generation by the channel. Use @ref XMC_VADC_CHANNEL_EVGEN_t fo
 480:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 481:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_EVGEN
 482:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 483:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_NEVER     = 0,  /**< No event generated */
 484:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_INBOUND   = 1U, /**< Event generated when the result is within the normal 
 485:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPHIGH  = 1U, /**< Event generated when the result of fast compare opera
 486:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_OUTBOUND  = 2U, /**< Event generated when the result is outside the normal
 487:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPLOW   = 2U, /**< Event generated when the result result of fast compar
 488:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_ALWAYS    = 3U /**< Event generated always after conversion - unconditiona
 489:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_EVGEN_t;
 490:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 491:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 492:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the reference voltage selection for conversion. Use @ref XMC_VADC_CHANNEL_REF_t for this
 493:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 494:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_REF
 495:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 496:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_INTREF = 0, /**< Internal VARef */
 497:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_ALT_CH0    /**< External voltage available on Channel-0 of the perticular gr
 498:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_REF_t;
 499:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  
 500:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 501:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the criteria for boundary flag assertion. Use @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t
 502:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * enumeration.
 503:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 504:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY_CONDITION
 505:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 506:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_ABOVE_BAND = 0, /**< Set Boundary condition criteria to asser
 507:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_BELOW_BAND     /**< Set Boundary condition criteria to assert
 508:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t;
 509:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  
 510:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 511:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the event which can lead to a global service request assertion. Use @ref XMC_VADC_GLOBAL
 512:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * enumeration.
 513:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 514:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_EVENT
 515:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 516:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE = VADC_GLOBEFLAG_SEVGLB_Msk, /**< Background scan request sourc
 517:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_RESULT      = VADC_GLOBEFLAG_REVGLB_Msk  /**< Global result event */
 518:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_EVENT_t;
 519:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  
 520:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 521:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the power modes of a VADC Group. Use @ref XMC_VADC_GROUP_POWERMODE_t for this enumeratio
 522:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 523:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_POWERMODE
 524:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 525:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_OFF       = 0, /**< Group is powered down */
 526:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED1,     /**< Reserved */
 527:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED2,     /**< Reserved */
 528:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_NORMAL        /**< Group is powered up */
 529:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GROUP_POWERMODE_t;
 530:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 531:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 532:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the status of a VADC group (also known as kernel). Use @ref XMC_VADC_GROUP_STATE_t for 
 533:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 534:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_STATE
 535:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 536:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_IDLE = 0, /**< Idle and can convert if requested */
 537:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_BUSY      /**< Busy with an ongoing conversion */
 538:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GROUP_STATE_t;
 539:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 540:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 541:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the reference to sample time and conversion mode settings. Use @ref XMC_VADC_GROUP_CONV
 542:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  enumeration.
 543:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 544:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_CONV
 545:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 546:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_STD = 0, /**< Settings pertaining to channels directly attached to VADC modul
 547:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_EMUX    /**< Settings pertaining to channels connected to VADC via EMUX */
 548:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONV_t;
 549:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 550:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 551:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the request source arbiter behavior. Use @ref XMC_VADC_GROUP_ARBMODE_t for this enumera
 552:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 553:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_ARBMODE
 554:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 555:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ALWAYS = 0, /**< Arbiter runs all the time */
 556:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ONDEMAND    /**< Arbiter runs only if a conversion request is asserted by 
 557:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                           request sources */
 558:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GROUP_ARBMODE_t;
 559:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 560:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 561:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the EMUX mode of operation. Use @ref XMC_VADC_GROUP_EMUXMODE_t for this enumeration.
 562:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 563:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXMODE
 564:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 565:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SWCTRL = 0,     /**< Perform EMUX in Software control mode*/
 566:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_STEADYMODE,     /**< Perform EMUX in Steady mode (Use EMUX set value)*/
 567:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SINGLEMODE,     /**< Perform EMUX in Single step mode*/
 568:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SEQUENCEMODE,   /**< Perform EMUX in Sequence mode*/
 569:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXMODE_t;
 570:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 571:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 572:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the EMUX channel selection encoding scheme. Use @ref XMC_VADC_GROUP_EMUXCODE_t for this
 573:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 574:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXCODE
 575:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 576:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_BINARY = 0, /**< A linearly incrementing code serves are MUX-SEL */
 577:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_GRAY       /**< The MUX-SEL is gray encoded */
 578:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCODE_t;
 579:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 580:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 581:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the service request set used. Use @ref XMC_VADC_GROUP_IRQ_t for this enumeration.
 582:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 583:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_IRQ
 584:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 585:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_KERNEL = 0, /**< Refers to Group specific service request */
 586:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_SHARED     /**< Refers to Module wide service request */
 587:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GROUP_IRQ_t;
 588:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 589:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 590:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the alignment of the converted result. Use @ref XMC_VADC_RESULT_ALIGN_t for this enumer
 591:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 592:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_ALIGN
 593:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 594:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_LEFT = 0,  /**< Always align result to left */
 595:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_RIGHT      /**< Always align result to right */
 596:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_RESULT_ALIGN_t;
 597:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 598:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_SUBTRATION 
 599:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 600:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_LEFT_ALIGN  = 0U,  /**< Always align result to left */
 601:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 602:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_LEFT_ALIGN  = 2U,  /**< Always align result to left */
 603:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 604:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_LEFT_ALIGN   = 4U,  /**< Always align result to left */
 605:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_RIGHT_ALIGN  = 0U,  /**< Always align result to right */
 606:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_RESULT_SUBTRATION_t;
 607:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 608:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 609:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the request source arbitration priority. Use @ref XMC_VADC_GROUP_RS_PRIORITY_t for this
 610:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 611:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_RS_PRIORITY
 612:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 613:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_0 = 0, /**< Lowest priority for the request source*/
 614:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_1,     /**< Second lowest priority for the request source*/
 615:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_2,     /**< Second highest priority for the request source*/
 616:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_3,     /**< Highest priority for the request source*/
 617:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }XMC_VADC_GROUP_RS_PRIORITY_t;
 618:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 619:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 620:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the various modes for the boundary flag. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t f
 621:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 622:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_BOUNDARY_FLAG_MODE
 623:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 624:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_DISABLED = 0,       /**< Disable boundary flag*/
 625:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED,            /**< Always enable boundary*/
 626:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_LOW, /**< Enable boundary flag when gate level
 627:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_HIGH /**< Enable boundary flag when gate level
 628:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t;
 629:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 630:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 631:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 632:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the boundary select for Channel. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t for this 
 633:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 634:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_SELECT
 635:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 636:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_LOWER_BOUND = 0U,       /**< Select the lower boundary*/
 637:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_UPPER_BOUND = 2U        /**< Selects the upper boundary*/
 638:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_SELECT_t;
 639:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 640:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 641:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 642:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the group indices. Use @ref XMC_VADC_GROUP_INDEX_t for this enumeration.
 643:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 644:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_INDEX
 645:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 646:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_0   = 0,
 647:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_1,
 648:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 649:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_2,
 650:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_3
 651:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 652:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }XMC_VADC_GROUP_INDEX_t;
 653:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 654:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 655:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** * Defines channel alias.
 656:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** * All enum items are available for channels 0 and 1. Other Channels can accept only XMC_VADC_CHANNE
 657:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** */
 658:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_ALIAS
 659:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 660:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_DISABLED = -1,
 661:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH0 = 0,
 662:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH1 = 1,
 663:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH2 = 2,
 664:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH3 = 3,
 665:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH4 = 4,
 666:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH5 = 5,
 667:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH6 = 6,
 668:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH7 = 7
 669:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_ALIAS_t;
 670:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 671:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 672:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 673:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the gain calibration selection.
 674:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 675:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_GAIN_LEVEL
 676:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 677:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_0 = SHS_CALOC0_CALOFFVAL0_Pos, /**< Select the calibration value for gain
 678:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_1 = SHS_CALOC0_CALOFFVAL1_Pos, /**< Select the calibration value for gain
 679:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_2 = SHS_CALOC0_CALOFFVAL2_Pos, /**< Select the calibration value for gain
 680:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_3 = SHS_CALOC0_CALOFFVAL3_Pos  /**< Select the calibration value for gain
 681:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }XMC_VADC_SHS_GAIN_LEVEL_t;
 682:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 683:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 684:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the Delta sigma loop.
 685:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 686:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_LOOP_CH
 687:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 688:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_0 = SHS_LOOP_LPCH0_Pos, /**< Select Delta-sigma loop 0*/
 689:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_1 = SHS_LOOP_LPCH1_Pos /**< Select Delta-sigma loop 1*/
 690:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }XMC_VADC_SHS_LOOP_CH_t;
 691:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 692:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 693:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Provides the order in which the SHS should do the calibration
 694:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 695:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER
 696:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 697:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_POST_CONV = 0, /**< Calibration occur after conversion take
 698:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_PRE_CONV   /**< Calibration occur before conversion takes p
 699:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t;
 700:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 701:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 702:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 703:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 704:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Provides possible routing values for the boundary flag.
 705:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 706:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_NODE
 707:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 708:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_0 = 0U, /**<Route the Group boundary flag to Common b
 709:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_1,      /**<Route the Group boundary flag to Common b
 710:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_2,      /**<Route the Group boundary flag to Common b
 711:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_3,      /**<Route the Group boundary flag to Common b
 712:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_0,  /**<Route the Group boundary flag to Common Service Req
 713:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_1,  /**<Route the Group boundary flag to Common Service Req
 714:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_2,  /**<Route the Group boundary flag to Common Service Req
 715:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_3   /**<Route the Group boundary flag to Common Service Req
 716:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_NODE_t;
 717:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 718:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**************************************************************************************************
 719:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * DATA STRUCTURES
 720:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  **************************************************************************************************
 721:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /*Anonymous structure/union guard start*/
 722:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if defined(__CC_ARM)
 723:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   #pragma push
 724:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   #pragma anon_unions
 725:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #elif defined(__TASKING__)
 726:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   #pragma warning 586
 727:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 728:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 729:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 730:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Structure initializing the VADC scan request source. Use type @ref XMC_VADC_SCAN_CONFIG_t for t
 731:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 732:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef struct XMC_VADC_SCAN_CONFIG
 733:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 734:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 735:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                          group. This field determines how scan request source would
 736:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 737:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter. If the Conversion
 738:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                          selected as Cancel inject repeat/Never mode then this fiel
 739:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                          priority of scan request source. Uses @ref XMC_VADC_GROUP_
 740:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     union
 741:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     {
 742:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
 743:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        {
 744:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 745:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Use any one Group related result register as 
 746:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 747:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 748:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #else
 749:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 4;
 750:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 751:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 4;
 752:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 753:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_INPUT_SELECT_t enumeration*/
 754:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 1;
 755:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal. Uses @ref
 756:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_EDGE_t */
 757:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 1;
 758:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 759:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       XMC_VADC_GATE_INPUT_SELECT_t */
 760:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 8;
 761:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Decides whether timer mode for equi-distant s
 762:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       activated or not.*/
 763:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 3;
 764:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        };
 765:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t asctrl;
 766:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     };
 767:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     union
 768:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     {
 769:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
 770:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        {
 771:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                    : 2;
 772:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversions be initiated by external hardware trig
 773:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t req_src_interrupt  : 1;  /**< Request source event can be generated after a conv
 774:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t enable_auto_scan   : 1;  /**< Enables the continuous conversion mode. Conversion
 775:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                  of the last channel in a scan sequence will cause 
 776:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t load_mode          : 1;  /**< Selects load event mode. Uses @ref XMC_VADC_SCAN_L
 777:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                    : 26;
 778:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        };
 779:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t asmr;
 780:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     };
 781:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_SCAN_CONFIG_t;
 782:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 783:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 784:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef XMC_VADC_SCAN_CONFIG_t XMC_VADC_BACKGROUND_CONFIG_t; /**< Type defined the scan configurati
 785:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                                  structure for background Request S
 786:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 787:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 788:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Structure initializing the VADC channel. Use type XMC_VADC_CHANNEL_CONFIG_t for this enumeratio
 789:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 790:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef struct XMC_VADC_CHANNEL_CONFIG
 791:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 792:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     union
 793:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     {
 794:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
 795:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        {
 796:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t input_class                : 2;  /**< Input conversion class selection.
 797:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_CONV_t */
 798:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                            : 2;
 799:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t lower_boundary_select      : 2;  /**< Which boundary register serves as lower bo
 800:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 801:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t upper_boundary_select      : 2;  /**< Which boundary register serves as upper bo
 802:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 803:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t event_gen_criteria         : 2;  /**< When should an event be generated?
 804:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_EVGEN_t */
 805:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t sync_conversion            : 1;  /**< Enables synchronous conversion for the con
 806:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t alternate_reference        : 1;  /**< Input reference voltage selection either V
 807:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_REF_t*/
 808:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                            : 4;
 809:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t result_reg_number          : 4;  /**< Group result register number */
 810:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t use_global_result          : 1;  /**< Use global result register for background 
 811:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t result_alignment           : 1;  /**< Alignment of the results read in the resul
 812:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_RESULT_ALIGN_t */
 813:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                            : 6;
 814:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t broken_wire_detect_channel : 2;  /**< Source to be used to charge the capacitor 
 815:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BWDCH_t. */
 816:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t broken_wire_detect         : 1;  /**< Configures extra phase before the capacito
 817:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        };
 818:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t chctr;
 819:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     };
 820:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     union
 821:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     {
 822:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
 823:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        {
 824:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                           : 8;
 825:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 826:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch0 : 1; /**< Condition for which the boundary flag should
 827:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                        Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITIO
 828:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch1 : 1; /**< Condition for which the boundary flag should
 829:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 830:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch2 : 1; /**< Condition for which the boundary flag should
 831:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 832:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch3 : 1; /**< Condition for which the boundary flag should
 833:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 834:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #else
 835:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                           : 4;
 836:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 837:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                           : 4;
 838:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 839:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch0  : 1; /**< Inverts boundary flag output.*/
 840:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch1  : 1; /**< Inverts boundary flag output.*/
 841:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch2  : 1; /**< Inverts boundary flag output.*/
 842:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch3  : 1; /**< Inverts boundary flag output.*/
 843:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 844:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #else
 845:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch0  : 1; /**< Enable the boundary flag output on the speci
 846:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch1  : 1; /**< Enable the boundary flag output on the speci
 847:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch2  : 1; /**< Enable the boundary flag output on the speci
 848:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch3  : 1; /**< Enable the boundary flag output on the speci
 849:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 850:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                           : 12;
 851:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        };
 852:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t bfl;
 853:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     };
 854:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 855:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     union
 856:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     {
 857:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
 858:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        {
 859:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch0    : 4; /**< Specify the basic operation of boundary flag 
 860:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 861:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch1    : 4; /**< Specify the basic operation of boundary flag 
 862:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 863:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch2    : 4; /**< Specify the basic operation of boundary flag 
 864:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 865:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch3    : 4; /**< Specify the basic operation of boundary flag 
 866:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 867:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****          uint32_t                           : 16;
 868:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        };
 869:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t bflc;
 870:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     };
 871:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 872:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     bool    channel_priority;  /**< Only non priority channels can be converted by Background Reque
 873:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     int8_t  alias_channel;     /**< Specifies the channel which has to be aliased with CH0/CH1 (whi
 874:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                     Force the value to \b(int8_t)-1 to bypass alias feature.
 875:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                     Uses @ref XMC_VADC_CHANNEL_ALIAS_t  for configuration.*/
 876:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONFIG_t;
 877:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 878:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 879:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Structure to initialize a queue entry. Use type @ref XMC_VADC_QUEUE_ENTRY_t.
 880:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 881:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_ENTRY
 882:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 883:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     union
 884:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     {
 885:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
 886:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        {
 887:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t channel_num        : 5;  /**< Channel number associated with this queue entry.<B
 888:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t refill_needed      : 1;  /**< Conversion completed channel gets inserted back in
 889:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t generate_interrupt : 1;  /**< Generates a queue request source event */
 890:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversion requests are raised on an external trig
 891:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                    : 24;
 892:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 893:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        };
 894:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t qinr0;
 895:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     };
 896:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_QUEUE_ENTRY_t;
 897:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 898:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 899:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Structure initializing a VADC queue request source. Use type @ref XMC_VADC_QUEUE_CONFIG_t.
 900:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 901:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_CONFIG
 902:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 903:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 904:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                          group. This field determines how queue request source woul
 905:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 906:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter.Uses @ref XMC_VADC
 907:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     union
 908:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     {
 909:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
 910:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        {
 911:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 912:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Uses any one Group related result register as
 913:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 914:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 915:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #else
 916:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 4;
 917:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 918:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 4;
 919:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 920:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_INPUT_SELECT_t */
 921:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 1;
 922:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal.
 923:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_EDGE_t */
 924:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 1;
 925:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 926:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GATE_INPUT_SELECT_t */
 927:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 8;
 928:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Timer mode for equi-distant sampling shall be
 929:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 3;
 930:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        };
 931:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t qctrl0;
 932:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     };
 933:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     union
 934:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     {
 935:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
 936:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        {
 937:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                   : 2;
 938:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t external_trigger  : 1;  /**< Are external triggers supported? */
 939:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                   : 29;
 940:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        };
 941:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t qmr0;
 942:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     };
 943:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_QUEUE_CONFIG_t;
 944:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 945:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 946:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 947:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Structure to initialize the global input class configuration. Configured parameters are sample 
 948:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  conversion Mode.
 949:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 950:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLASS
 951:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 952:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     union
 953:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     {
 954:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
 955:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        {
 956:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
 957:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
 958:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                                 : 3;
 959:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
 960:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
 961:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                                 : 5;
 962:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 963:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
 964:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
 965:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                                 : 3;
 966:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
 967:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
 968:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                                 : 5;
 969:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #else
 970:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                                 : 16;
 971:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 972:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        };
 973:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t globiclass;
 974:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     };
 975:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLASS_t;
 976:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 977:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
 978:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 979:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *   Structure to initialize converter and arbiter clock configuration
 980:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 981:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLOCK
 982:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 983:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     union
 984:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     {
 985:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
 986:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        {
 987:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
 988:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t analog_clock_divider     : 5;  /**< Clock for the converter. <BR>Range: [0x0 to 
 989:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                          : 2;
 990:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t msb_conversion_clock     : 1;  /**< Additional clock cycle for analog converter 
 991:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t arbiter_clock_divider    : 2;  /**< Request source arbiter clock divider. <BR>Ra
 992:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                          : 5;
 993:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                          : 17;
 994:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        };
 995:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t globcfg;
 996:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     };
 997:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLOCK_t;
 998:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 999:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1000:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1001:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1002:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *   Structure to initialize the VADC Global functions
1003:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1004:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CONFIG
1005:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
1006:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     union
1007:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     {
1008:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
1009:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        {
1010:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1011:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t            : 4;
1012:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1013:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t            : 4;
1014:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        };
1015:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t globbound;
1016:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     };
1017:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1018:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLOCK_t clock_config; /**< ADC clock configurations*/
1019:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
1020:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class0;      /**< ADC input conversion configurations for GLOBICLASS[0
1021:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class1;      /**< ADC input conversion configurations for GLOBICLASS[1
1022:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     union
1023:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     {
1024:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
1025:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        {
1026:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 16;
1027:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Data reduction stages */
1028:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 4;
1029:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Results of the next conversion will not be ov
1030:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       result register until the previous value is r
1031:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 6;
1032:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1033:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        };
1034:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t globrcr;
1035:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     };
1036:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     union
1037:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     {
1038:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
1039:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        {
1040:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t module_disable              : 1;  /**< Disables the module clock.*/
1041:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                             : 2;
1042:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t disable_sleep_mode_control  : 1;  /**< Set it to true in order to disable the Sl
1043:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                             : 28;
1044:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        };
1045:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t clc;
1046:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     };
1047:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CONFIG_t;
1048:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1049:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1050:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1051:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Structure to initialize the group input class configuration. Configured parameters are sample t
1052:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  conversion Mode.
1053:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1054:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CLASS
1055:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
1056:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     union
1057:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     {
1058:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
1059:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        {
1060:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1061:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1062:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                                 : 3;
1063:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1064:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1065:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                                 : 5;
1066:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1067:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1068:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                                 : 3;
1069:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1070:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1071:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                                 : 5;
1072:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        };
1073:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t g_iclass0;
1074:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     };
1075:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GROUP_CLASS_t;
1076:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1077:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1078:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1079:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  EMUX related configuration structure.
1080:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1081:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_EMUXCFG
1082:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
1083:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     union
1084:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     {
1085:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
1086:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        {
1087:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t starting_external_channel : 3;  /**< External channel number to which the VADC w
1088:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                         generate a control signal (needed to select
1089:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                         the analog multiplexer)*/
1090:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                           : 13;
1091:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1092:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t connected_channel         : 10; /**< The Channel to which the EMUX is connected.
1093:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #else
1094:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t connected_channel         : 5;  /**< The Channel to which the EMUX is connected.
1095:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                           : 5;
1096:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
1097:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t emux_mode                 : 2;  /**< Selects the external multiplexer modes: Ste
1098:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                         Uses @ref XMC_VADC_GROUP_EMUXMODE_t*/
1099:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t emux_coding               : 1;  /**< Select Binary or Gray coding. Uses @ref XMC
1100:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t stce_usage                : 1;  /**< Use STCE for each conversion of an external
1101:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1102:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t emux_channel_select_style : 1;  /**< Selects the style of configuring the \b con
1103:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                         (Each bit represents the channel or entire 
1104:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                           : 1;
1105:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #else
1106:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                           : 2;
1107:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
1108:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        };
1109:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t g_emuxctr;
1110:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     };
1111:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCFG_t;
1112:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1113:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1114:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1115:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *   Group Configuration Data Structures
1116:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1117:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1118:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CONFIG
1119:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
1120:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_EMUXCFG_t emux_config;    /**< External multiplexer related configurations */
1121:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class0;           /**< ADC input conversion configurations for GxICLASS[
1122:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class1;           /**< ADC input conversion configurations for GxICLASS[
1123:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     union
1124:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     {
1125:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
1126:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        {
1127:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1128:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t            : 4;
1129:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1130:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t            : 4;
1131:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        };
1132:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t g_bound;
1133:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     };
1134:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     union
1135:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     {
1136:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
1137:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        {
1138:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                          : 4;
1139:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t arbitration_round_length : 2;  /**< Number of arbiter slots to be considered */
1140:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                          : 1;
1141:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t arbiter_mode             : 1;  /**< Arbiter mode - Select either Continuous mode
1142:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_ARBMODE_t */
1143:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                          : 24;
1144:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        };
1145:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t g_arbcfg;
1146:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     };
1147:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONFIG_t;
1148:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1149:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1150:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *   Structure to initialize VADC Group result register.
1151:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1152:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1153:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef struct XMC_VADC_RESULT_CONFIG
1154:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
1155:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     union
1156:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     {
1157:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
1158:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        {
1159:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 16;
1160:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Configures the data reduction stages */
1161:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t post_processing_mode    : 2;  /**< Result data processing mode. Uses @ref  XMC_V
1162:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       For normal operation select
1163:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       XMC_VADC_DMM_t::XMC_VADC_DMM_REDUCTION_MODE
1164:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       and data_reduction_control as 0*/
1165:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 2;
1166:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Allow the conversion only after previous resu
1167:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t part_of_fifo            : 2;  /**< Make the result register a part of Result FIF
1168:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 4;
1169:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1170:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        };
1171:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t g_rcr;
1172:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     };
1173:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_RESULT_CONFIG_t;
1174:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1175:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1176:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1177:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Structure to initialize the Stepper configurations
1178:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1179:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_STEP_CONFIG
1180:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
1181:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   union
1182:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   {
1183:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     struct
1184:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     {
1185:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t sh_unit_step0            :3;  /**< Select a Sample and hold unit for the stepper's s
1186:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1187:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t enable_step0             :1;  /**< Should the step be added to the sequence */
1188:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t sh_unit_step1            :3;  /**< Select a Sample and hold unit for the stepper's s
1189:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1190:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t enable_step1             :1;  /**< Should the step be added to the sequence */
1191:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t sh_unit_step2            :3;  /**< Select a Sample and hold unit for the stepper's s
1192:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1193:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t enable_step2             :1;  /**< Should the step be added to the sequence */
1194:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t sh_unit_step3            :3;  /**< Select a Sample and hold unit for the stepper's s
1195:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1196:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t enable_step3             :1;  /**< Should the step be added to the sequence */
1197:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t sh_unit_step4            :3;  /**< Select a Sample and hold unit for the stepper's s
1198:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1199:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t enable_step4             :1;  /**< Should the step be added to the sequence */
1200:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t sh_unit_step5            :3;  /**< Select a Sample and hold unit for the stepper's s
1201:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1202:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t enable_step5             :1;  /**< Should the step be added to the sequence */
1203:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t sh_unit_step6            :3;  /**< Select a Sample and hold unit for the stepper's s
1204:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1205:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t enable_step6             :1;  /**< Should the step be added to the sequence */
1206:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t sh_unit_step7            :3;  /**< Select a Sample and hold unit for the stepper's s
1207:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1208:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t enable_step7             :1;  /**< Should the step be added to the sequence */
1209:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1210:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     };
1211:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     uint32_t stepcfg;
1212:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   };
1213:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t;
1214:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1215:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1216:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Sample and hold Initialization structure
1217:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1218:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_CONFIG
1219:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
1220:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   union
1221:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   {
1222:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     struct
1223:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     {
1224:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t shs_clock_divider        :4; /**< The divider value for the SHS clock. Range: [0x0 t
1225:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t                          :6;
1226:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t analog_reference_select  :2; /**< It is possible to different reference voltage for 
1227:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                  */
1228:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t                          :20;
1229:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     };
1230:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     uint32_t shscfg;
1231:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   };
1232:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1233:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t calibration_order; /**< order in which the calibration sh
1234:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1235:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CONFIG_t;
1236:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1237:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
1238:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1239:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Detailed result structure
1240:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1241:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  typedef struct XMC_VADC_DETAILED_RESULT
1242:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
1243:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   union
1244:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   {
1245:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     struct
1246:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     {
1247:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t result                   :16;  /**< Result of the Analog to digital conversion*/
1248:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t data_reduction_counter   :4;   /**< Results reduction counter value*/
1249:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t channel_number           :5;   /**< Converted channel number*/
1250:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t emux_channel_number      :3;   /**< Converted external multiplexer channel number.
1251:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1252:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t converted_request_source :2;   /**< Converted request source*/
1253:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t fast_compare_result      :1;   /**< Fast compare result if conversion mode is fast c
1254:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t vaild_result             :1;   /**< Valid flag is set when a new result is available
1255:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     };
1256:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     uint32_t res;
1257:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   };
1258:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }XMC_VADC_DETAILED_RESULT_t;
1259:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  
1260:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1261:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /*Anonymous structure/union guard end*/
1262:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if defined(__CC_ARM)
1263:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   #pragma pop
1264:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #elif defined(__TASKING__)
1265:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   #pragma warning restore
1266:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
1267:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**************************************************************************************************
1268:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * static inline functions
1269:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  **************************************************************************************************
1270:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1271:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U) 
1272:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_CHECK_GROUP_PTR(XMC_VADC_GROUP_t *const group_ptr)
1273:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
1274:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
1275:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1) || (group_ptr == VADC_G2) || (group_ptr =
1276:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #else
1277:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1));
1278:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
1279:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
1280:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
1281:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**************************************************************************************************
1282:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * API Prototypes
1283:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  **************************************************************************************************
1284:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1285:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #ifdef __cplusplus
1286:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** extern "C" {
1287:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
1288:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1289:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1290:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param None
1291:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1292:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1293:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1294:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1295:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables the VADC module.<BR>\n
1296:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API would ungate the clock to the VADC module (if applicable). Also this API would bring
1297:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the VADC module out of reset state(if applicable), by asserting the appropriate registers.
1298:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_UngatePeripheralClock() and XMC_SCU_RESET_DeassertPeripheral
1299:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * if needed. Directly accessed register is  COMPARATOR.ORCCTRL (Refer to the errata for XMC1100).
1300:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1301:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1302:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableModule().
1303:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1304:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_EnableModule(void);
1305:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1306:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1307:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param None
1308:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1309:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1310:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1311:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1312:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disables the VADC module.<BR>\n
1313:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API would gate the clock to the VADC module (if applicable). Also this API would put
1314:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the VADC module into the reset state(if applicable) by asserting the appropriate registers.
1315:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_GatePeripheralClock() and XMC_SCU_RESET_AssertPeripheralRese
1316:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1317:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1318:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModule().
1319:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1320:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_DisableModule(void);
1321:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1322:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1323:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1324:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module.
1325:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param config Pointer to initialization data structure
1326:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1327:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1328:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1329:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1330:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Initializes the VADC global module with the associated configuration structure pointed by \a con
1331:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * enables the global access to registers by configuring reset and clock un-gating for selected dev
1332:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * initializes global class, boundary , result resources by setting GLOBICLASS,GLOBBOUND,GLOBRCR re
1333:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * configures the global analog and digital clock dividers by setting GLOBCFG register. Refer relat
1334:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the configurations later in the program.
1335:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1336:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1337:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_ClockInit()<BR>
1338:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1339:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
1340:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1341:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1342:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1343:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1344:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1345:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1346:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1347:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1348:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables the VADC module clock.\n\n Call this API before any further configuration of VADC. It se
1349:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * register to enable.
1350:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1351:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1352:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1353:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1354:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1355:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1356:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
1357:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Enable:Wrong Module Pointer", (global_ptr == VADC))
1358:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_DISR_Msk);
1359:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
1360:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1361:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1362:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1363:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1364:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1365:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1366:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1367:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1368:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disables the VADC module clock.\n\n After this API call, no conversion will occur. Call
1369:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModuleClock() to enable the VADC module later in the program.
1370:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1371:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1372:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1373:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1374:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1375:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1376:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
1377:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Disable:Wrong Module Pointer", (global_ptr == VADC))
1378:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_DISR_Pos);
1379:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
1380:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1381:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1382:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1383:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1384:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1385:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1386:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1387:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1388:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables VADC module to sleep if a sleep request comes.\n\n
1389:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * It resets the EDIS bit of CLC register for enabling the sleep mode.
1390:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1391:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1392:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableSleepMode().
1393:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1394:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1395:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
1396:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1397:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_EDIS_Msk);
1398:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
1399:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1400:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1401:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1402:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1403:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1404:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1405:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1406:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1407:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Ignores the sleep mode request for the VADC.\n\n
1408:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * With the sleep feature enabled, the module will respond to sleep
1409:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * requests by going into a low power mode. It resets the EDIS bit of CLC register for enabling the
1410:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1411:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1412:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableSleepMode().
1413:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1414:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1415:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
1416:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1417:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_EDIS_Pos);
1418:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
1419:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1420:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1421:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1422:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1423:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1424:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param config  Pointer to the data structure containing clock configuration data
1425:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1426:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1427:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1428:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1429:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configures the VADC clock.<BR>\n
1430:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Sets up the clock configuration of the VADC module using the config structure pointed by \a conf
1431:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * The clock to the analog converter and to the request source arbiter is configured by setting the
1432:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1433:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1434:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1435:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1436:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1437:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClockInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_
1438:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
1439:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClockInit:Wrong Module Pointer", (global_ptr == VADC))
1440:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1441:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   /* Write the Clock configuration into the GLOBCFG register */
1442:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->GLOBCFG = (uint32_t)(config->globcfg | (VADC_GLOBCFG_DIVWC_Msk));
1443:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
1444:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
1445:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1446:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1447:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1448:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1449:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param config  Conversion class parameter structure
1450:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param conv_type configure the input call for either standard conversion or EMUX related convers
1451:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
1452:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                Range: [0x0, 0x1]
1453:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1454:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1455:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configures the ADC conversion settings like sample time and resolution.<BR>\n
1456:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc global resource associated with \a config structure. It
1457:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
1458:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the GLOBALICLASS register specified by \a set_num with the required settings.
1459:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1460:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1461:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1462:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1463:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1464:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1465:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1466:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
1467:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
1468:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1469:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1470:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1471:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC global module
1472:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param config  Pointer to result configuration data structure
1473:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1474:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1475:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1476:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1477:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Initializes global result register.<BR>\n
1478:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Initializes Global Result Register with specified settings configured in the \a config structure
1479:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * results in configuration of GLOBRCR register. This helps in configuring the Data reduction mode,
1480:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * , wait for read mode on the GLOBRES register.
1481:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1482:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1483:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1484:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1485:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1486:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1487:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1488:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_ResultInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
1489:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  {
1490:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ResultInit:Wrong Module Pointer", (global_ptr == VADC))
1491:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1492:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   /* Configure GLOBRCR*/
1493:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->GLOBRCR = config->g_rcr;
1494:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  }
1495:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  
1496:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1497:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1498:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1499:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1500:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1501:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1502:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1503:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of G
1504:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * enable the startup calibration feature. After turning it on, it loops until all active groups fi
1505:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Call XMC_VADC_GLOBAL_Enable() and XMC_VADC_GLOBAL_ClockInit() before calling this API in sequenc
1506:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableStartupCalibration() can disable the calibration feature at runtime.
1507:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1508:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1509:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1510:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1511:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1512:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1513:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr);
1514:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1515:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1516:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1517:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1518:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr  Constant pointer to the VADC module.
1519:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1520:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1521:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1522:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1523:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of 
1524:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * disable the startup calibration feature. Calling the API XMC_VADC_GLOBAL_EnsableStartupCalibrati
1525:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * calibration feature at runtime.
1526:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1527:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1528:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1529:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1530:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1531:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableStartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
1532:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
1533:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableStartupCalibration:Wrong Module Pointer", (global_ptr == VADC)
1534:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= ~((uint32_t)VADC_GLOBCFG_SUCAL_Msk);
1535:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
1536:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1537:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1538:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1539:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1540:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1541:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be disabled. <BR>
1542:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1543:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1544:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1545:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1546:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1547:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disables the post calibration for a particular group specified as \a group_number.\n\n It config
1548:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * of GLOBCFG register to disable the post calibration feature. Call XMC_VADC_GLOBAL_Enable() and
1549:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit() before calling this API in sequence. Calling the API
1550:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnablePostCalibration() can enable back the calibration feature at runtime.
1551:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1552:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1553:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1554:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1555:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1556:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1557:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1558:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1559:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, ui
1560:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
1561:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1562:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1563:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_numbe
1564:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
1565:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1566:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1567:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1568:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1569:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be enabled. <BR>
1570:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1571:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1572:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1573:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1574:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1575:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables the post calibration for a particular group specified as \a group_number.\n\n It configu
1576:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * of GLOBCFG register to enable the post calibration feature. Calling the API XMC_VADC_GLOBAL_Disa
1577:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * can disable the calibration feature at runtime.
1578:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1579:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1580:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1581:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1582:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1583:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uin
1584:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
1585:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1586:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1587:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= (~ (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_nu
1588:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
1589:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
1590:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1591:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
1592:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1593:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1594:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1595:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>Range[0 - 4095]
1596:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>Range[0 - 4095]
1597:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1598:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1599:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1600:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1601:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
1602:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * absolute boundaries. They define a range against which the result of a conversion can be compare
1603:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
1604:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
1605:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * GLOBBOUND1 who will derive their values from this palette.
1606:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1607:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1608:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1609:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1610:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1611:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t boundary0, c
1612:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1613:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1614:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1615:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1616:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
1617:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param boundary_value  Boundary Value<BR>Range[0 - 4095]
1618:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1619:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1620:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1621:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1622:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Programs either the boundary 0 or boundary 1 for result comparison.\n\n This defines a range aga
1623:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
1624:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * capability to a compare value.
1625:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1626:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1627:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1628:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1629:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1630:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
1631:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                            const XMC_VADC_CHANNEL_BOUNDARY_t selection,
1632:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                            const uint16_t boundary_value); 
1633:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
1634:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1635:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_AVAILABLE== 1U)
1636:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1637:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1638:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module
1639:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param emuxif       The EMUX interface<BR>Range[0x0 - 0x1]
1640:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group        The VADC group which must be bound to the desired emux
1641:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1642:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1643:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1644:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1645:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Binds a VADC \a group to an EMUX interface specified in \a emuxif.<BR>\n
1646:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Selects which group's scan request source will control the EMUX interface (set of control select
1647:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * By passing \b group it would configure that group's scan request source to control the EMUX sele
1648:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \b emuxif.
1649:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1650:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1651:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1652:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1653:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
1654:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
1655:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1656:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1657:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1658:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1659:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1660:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return uint32_t Complete global result register value GLOBRES
1661:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1662:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1663:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Retrieves the complete result from the global result register associated with the \a global_ptr.
1664:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the result register GLOBRES for the validity of the data. If the validity is assured, data is fi
1665:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the global result register, cached locally next and subsequently returned to the caller.
1666:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1667:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1668:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetResult()
1669:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1670:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GLOBAL_GetDetailedResult(XMC_VADC_GLOBAL_t *const global_ptr)
1671:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
1672:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetDetailedResult:Wrong Module Pointer", (global_ptr == VADC))
1673:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1674:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  return(global_ptr->GLOBRES);
1675:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
1676:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1677:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1678:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1679:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1680:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1681:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return XMC_VADC_RESULT_SIZE_t 16 bit result register value.<BR>
1682:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *         Range[0x0 - 0X0FFF]
1683:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1684:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1685:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Retrieves the conversion result from the global result register associated with the \a global_pt
1686:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * lightweight version of XMC_VADC_GLOBAL_GetDetailedResult(). The behavior is exactly the same, ju
1687:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * only the 16 bit numeric result returned back to the application instead of the complete GLOBRES 
1688:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1689:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1690:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetDetailedResult()
1691:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1692:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GLOBAL_GetResult(XMC_VADC_GLOBAL_t *const global_pt
1693:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
1694:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetResult:Wrong Module Pointer", (global_ptr == VADC))
1695:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1696:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   return ((XMC_VADC_RESULT_SIZE_t)global_ptr->GLOBRES);
1697:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
1698:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1699:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1700:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1701:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1702:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param compare_val Compare value which the result of a conversion will be compared against.
1703:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *         <BR>Range[0x0 - 0X0FFF]
1704:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1705:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1706:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1707:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1708:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Set compare value in the global result register for fast compare mode.\n\n The result of a conve
1709:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * be compared to the compare value entered as part of \a compare_val. The prerequisite is that the
1710:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * with this global register must select an ICLASS which has the conversion mode configured as fast
1711:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @ref XMC_VADC_GLOBAL_GetCompareResult() after this API to
1712:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1713:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1714:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1715:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1716:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
1717:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1718:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1719:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1720:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1721:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return compare high or low. Refer @ref XMC_VADC_FAST_COMPARE_t enum
1722:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1723:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1724:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1725:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1726:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Determines the result of fast compare operation.\n\n This API returns the result of fast compare
1727:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the valid flag in the global result register GLOBRES is set.
1728:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1729:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1730:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1731:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1732:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr);
1733:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1734:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1735:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1736:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr         Constant pointer to the VADC module
1737:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param event_type   Desired event that must be manually asserted
1738:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1739:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1740:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1741:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1742:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Manually asserts an event that can lead to an interrupt.\n\n This API manually asserts the reque
1743:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * (Background request source event or a global result event) by setting the GLOBEVFLAG register wi
1744:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \a event_type.
1745:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1746:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1747:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1748:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1749:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1750:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_TriggerEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32
1751:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
1752:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Module Pointer", (global_ptr == VADC))
1753:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Global Event", 
1754:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1755:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1756:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = event_type;
1757:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
1758:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1759:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1760:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1761:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1762:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param event_type Event that must be acknowledged
1763:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1764:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1765:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1766:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1767:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1768:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Acknowledges an event that has been asserted manually or automatically.\n\n This API acknowledge
1769:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * by clearing GLOBEFLAG sticky flag.
1770:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1771:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1772:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1773:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1774:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClearEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t
1775:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
1776:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Module Pointer", (global_ptr == VADC))
1777:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Global Event", 
1778:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1779:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1780:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = ((uint32_t)(event_type << (uint32_t)16));
1781:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
1782:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1783:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1784:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1785:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1786:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param sr The service request to which the global result event is connected. Refer @ref XMC_VADC
1787:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1788:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1789:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1790:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1791:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Binds the global result event to one of the 4 shared service requests.\n\n This API binds the g
1792:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  to one of the 4 module wide shared service requests .Sets GLOBEVNP register with the correspond
1793:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1794:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1795:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode()
1796:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1797:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
1798:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1799:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1800:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1801:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1802:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param sr The service request to which the global request source event is connected. Refer @ref 
1803:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1804:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1805:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1806:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1807:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Binds the background request source event to one of the 4 shared service requests.\n\n This API 
1808:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * request source event to one of the 4 module wide shared service requests. Sets GLOBEVNP register
1809:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * corresponding \a sr line.
1810:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1811:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1812:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SetResultEventInterruptNode()
1813:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1814:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
1815:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1816:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1817:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1818:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1819:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  config Struct consisting of various SHS related configurations.
1820:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1821:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1822:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1823:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1824:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configure the basic SHS parameters.<BR>\n
1825:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * API would initialize the clock divider configuration, the analog reference selection and
1826:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the calibration order for the Sample and Hold unit.
1827:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1828:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1829:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None.
1830:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1831:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONF
1832:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1833:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  /**
1834:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1835:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   * @param  config Struct consisting of various step configurations.
1836:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   *
1837:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   * @return None
1838:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   *
1839:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1840:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   * Configures the stepper sequence for the converter.<BR>\n
1841:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   * Stepper of the SHS can be configured to take up a specific sequence of groups for conversion.
1842:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   * The stepper sequence is configured using this API.
1843:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   *
1844:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1845:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   * None.
1846:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   */
1847:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetStepperSequence(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1848:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                              const XMC_VADC_GLOBAL_SHS_STEP_CONFIG_
1849:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  {
1850:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
1851:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1852:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong config pointer",
1853:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****              (config == (XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t*)NULL))
1854:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1855:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   shs_ptr->STEPCFG = (uint32_t) config->stepcfg;
1856:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  }
1857:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1858:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1859:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  /**
1860:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1861:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   *
1862:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   * @return bool returns true if the analog converter is operable
1863:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   *              returns false if the analog converter is powered down
1864:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   *
1865:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1866:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   * Returns the converter status.<BR>\n
1867:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   * Returns the ANRDY bit field of the SHSCFG register.
1868:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   *
1869:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1870:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   * None.
1871:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   */
1872:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  __STATIC_INLINE bool XMC_VADC_GLOBAL_SHS_IsConverterReady(XMC_VADC_GLOBAL_SHS_t *const shs_ptr)
1873:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  {
1874:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_IsConverterReady:Wrong SHS Pointer",(shs_ptr == (XMC_VADC_GLOBAL_
1875:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1876:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   return((bool)((shs_ptr->STEPCFG >> (uint32_t)SHS_SHSCFG_ANRDY_Pos) & (uint32_t)0x1));
1877:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  }
1878:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1879:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1880:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1881:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1882:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
1883:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1884:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1885:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1886:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1887:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
1888:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
1889:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * this mode the ADC module will convert the input depending on the value stored in the SST bit of 
1890:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API would configure the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
1891:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1892:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1893:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None.
1894:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1895:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP_
1896:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1897:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1898:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1899:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be disabled.<BR>Range: [0x
1900:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1901:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1902:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1903:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1904:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
1905:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API is needed when a switch from accelerated mode to compatible mode of conversion is neede
1906:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API would clear the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
1907:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1908:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1909:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None.
1910:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1911:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP
1912:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1913:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1914:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1915:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
1916:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param sst_value Value of short sample time that needs to be configured.<BR>
1917:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                  Range: [0x0 to 0x3F]
1918:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1919:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1920:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1921:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1922:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configures the Accelerated timing mode sample time.<BR>\n
1923:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
1924:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Accelerated mode the ADC module will convert the input depending on the value stored in the SST 
1925:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  SHS0_TIMCFGx. This API would configure the shot sample time either in SHS0_TIMCFG0.SST or SHS0_
1926:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1927:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1928:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None.
1929:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1930:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1931:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                             XMC_VADC_GROUP_INDEX_t group_num,
1932:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                             uint8_t sst_value);
1933:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1934:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1935:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1936:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1937:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  divs_value The clock divider value that is possible
1938:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                    <BR>Range:[0x0 to 0xF]
1939:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1940:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1941:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1942:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configure Sample and hold clock divider value.<BR>\n
1943:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * API would initialize the clock divider configuration. This determines the frequency of conversio
1944:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * of the Sample and hold converter.
1945:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1946:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1947:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None.
1948:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1949:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetClockDivider(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, uint
1950:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
1951:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong SHS Pointer",
1952:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1953:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong divide factor selected",
1954:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****              (divs_value < (uint32_t)0x10))
1955:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1956:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   shs_ptr->SHSCFG =  (shs_ptr->SHSCFG & (~(uint32_t)SHS_SHSCFG_DIVS_Msk)) | (uint32_t)SHS_SHSCFG_SC
1957:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   shs_ptr->SHSCFG |=  ((uint32_t)divs_value << SHS_SHSCFG_DIVS_Pos) | (uint32_t)SHS_SHSCFG_SCWC_Msk
1958:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
1959:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1960:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1961:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1962:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  gain_value gain value possible
1963:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                    Range:[0x0 to 0x3]
1964:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
1965:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  ch_num The channel number for which the gain has to be configured
1966:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1967:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1968:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1969:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configure the gain value for SHS.<BR>\n
1970:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * API would set the gain factor for a selected channel.
1971:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1972:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1973:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None.
1974:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1975:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1976:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                        uint8_t gain_value,
1977:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                        XMC_VADC_GROUP_INDEX_t group_num,
1978:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                        uint8_t ch_num);
1979:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1980:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
1981:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1982:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1983:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  max_calibration_time calibration time
1984:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                              Range:[0x0 to 0x3F]
1985:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1986:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1987:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1988:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configure the Maximum calibration timing.<BR>\n
1989:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * API would initialize the Maximum time after which the calibration should occur. If no adc conver
1990:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * occur during this duration then the calibration would run irrespective of conversions. The max t
1991:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * converter can go without a calibration is set in this API.
1992:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1993:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1994:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None.
1995:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1996:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetMaxCalTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1997:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                        uint32_t max_calibration_time)
1998:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
1999:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetMaxCalTime:Wrong SHS Pointer",
2000:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2001:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2002:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALMAX_Msk);
2003:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   shs_ptr->CALCTR |=  ((uint32_t)max_calibration_time << SHS_CALCTR_CALMAX_Pos);
2004:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
2005:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2006:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2007:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2008:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2009:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2010:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2011:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2012:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2013:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enable the Gain and offset calibration.<BR>\n
2014:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enable the gain and offset calibration for all the Sample and hold units.
2015:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2016:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2017:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations()<BR>.
2018:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2019:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2020:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                          XMC_VADC_GROUP_INDEX_t group_num);
2021:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2022:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2023:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2024:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2025:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2026:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2027:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2028:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disable the Gain and offset calibration.<BR>\n
2029:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disable the gain and offset calibration for all the Sample and hold units.
2030:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2031:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2032:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2033:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2034:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2035:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                           XMC_VADC_GROUP_INDEX_t group_num);
2036:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2037:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2038:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2039:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2040:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2041:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2042:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2043:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2044:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Read the calibration value for the selected gain level.<BR>\n
2045:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would return the offset calibration val
2046:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * selected gain level. This is applicable for all the channels in the group that use the particula
2047:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2048:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2049:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue()<BR>.
2050:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2051:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2052:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       XMC_VADC_GROUP_INDEX_t group_num,
2053:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       XMC_VADC_SHS_GAIN_LEVEL_t gain_level);
2054:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2055:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2056:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2057:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2058:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2059:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  offset_calibration_value The offset calibration value to be set.
2060:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2061:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2062:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2063:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Set the calibration value for the selected gain level.<BR>\n
2064:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would set the offset value of the selec
2065:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2066:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2067:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue()<BR>.
2068:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2069:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2070:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                    XMC_VADC_GROUP_INDEX_t group_num,
2071:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                    XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
2072:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                    uint8_t offset_calibration_value);
2073:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2074:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2075:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2076:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2077:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2078:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  ch_num Channel number for which the configurations applies
2079:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2080:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2081:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2082:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configures the delta sigma loop of the SHS.<BR>\n
2083:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * There are 2 Delta-Sigma loops that can be configured. This API would configure the loop (loop_se
2084:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * with the appropriate group_num and channel_num.
2085:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configures the SHS_LOOP bit fields.
2086:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2087:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2088:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop()<BR>.
2089:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2090:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2091:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                            XMC_VADC_GROUP_INDEX_t group_num,
2092:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                            XMC_VADC_SHS_LOOP_CH_t loop_select,
2093:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                            uint8_t ch_num);
2094:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2095:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2096:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2097:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2098:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2099:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2100:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2101:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enable the selected Delta-Sigma loop.<BR>\n
2102:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2103:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2104:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2105:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2106:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2107:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2108:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2109:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                               XMC_VADC_SHS_LOOP_CH_t loop_select)
2110:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
2111:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong SHS Pointer",
2112:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2113:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2114:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2115:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2116:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   shs_ptr->LOOP |= (uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select;
2117:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
2118:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2119:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2120:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2121:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2122:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2123:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2124:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2125:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disable the selected delta sigma loop.<BR>\n
2126:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2127:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2128:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2129:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2130:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2131:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2132:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr
2133:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                                XMC_VADC_SHS_LOOP_CH_t loop_select)
2134:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
2135:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong SHS Pointer",
2136:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2137:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2138:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2139:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2140:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   shs_ptr->LOOP &= ~((uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select);
2141:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2142:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
2143:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2144:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
2145:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
2146:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2147:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2148:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the VADC group.
2149:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param config Pointer to the initialization data structure
2150:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2151:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2152:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2153:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2154:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Initializes the VADC group module with the associated configuration structure pointed by \a conf
2155:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * initializes the group specified as part of the \a group_ptr. It initializes group conversion cla
2156:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * configuration , boundary configuration by setting GxICLASS,GxARBCFG,GxBOUND, registers. It also
2157:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * configures the EMUX control register if applicable. Refer related API's to change the configurat
2158:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  program.
2159:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2160:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2161:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_InputClassInit()<BR>
2162:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetPowerMode()<BR>
2163:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetBoundaries()<BR>
2164:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ExternalMuxControlInit()<BR>
2165:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2166:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_Init(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config);
2167:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2168:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2169:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2170:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group.
2171:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param config  group related conversion class parameter structure
2172:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param conv_type Use direct channels or EMUX channels. Refer @ref XMC_VADC_GROUP_CONV_t enum
2173:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
2174:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                Range[0x0, 0x1]
2175:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2176:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2177:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2178:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2179:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc group resource associated with \a config structure. It 
2180:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
2181:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the G_ICLASS register specified by \a set_num with the required settings.
2182:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2183:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2184:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2185:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GROUP_Init()
2186:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2187:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2188:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
2189:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num);
2190:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2191:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2192:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2193:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC Group which must be set as a slave
2194:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param master_grp The master group number<BR>
2195:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2196:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param slave_group The slave group number<BR>
2197:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2198:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2199:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2200:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2201:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2202:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configures a VADC Group as a slave group.\n\n Conversion of identically numbered channels across
2203:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2204:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is the
2205:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * master group while Groups-0 and 3 are the slave groups. It uses the SYNCCTR register for the con
2206:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2207:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2208:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GROUP_SetSyncMaster()<BR>
2209:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR>
2210:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GROUP_EnableChannelSyncRequest()<BR>
2211:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2212:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2213:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
2214:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2215:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2216:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2217:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC Group.
2218:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param power_mode  Desired power mode
2219:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2220:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2221:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2222:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2223:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configures the power mode of a VADC group.\n\n For a VADC group to actually convert an analog si
2224:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * converter must be turned on.
2225:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2226:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2227:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
2228:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2229:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
2230:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2231:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2232:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2233:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2234:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2235:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2236:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2237:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2238:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configures a VADC Group as a master group.<BR>\n
2239:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Conversion of identically numbered channels across groups can be
2240:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2241:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is therefore the mast
2242:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Groups-0 and 3 are the slave groups.
2243:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2244:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2245:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
2246:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2247:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr);
2248:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2249:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2250:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2251:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2252:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2253:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                     <BR>Range: [0x0 to 0x3]
2254:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2255:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2256:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2257:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configures the ready signal for master group.<BR>\n
2258:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API would read the \b slave_group number and determine which EVAL configuration to apply fo
2259:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * slave set. Checks the readiness of slaves in synchronized conversions. Conversion of identically
2260:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * across groups can be synchronized. For example, when the trigger to convert CH-1 of Group-2 is r
2261:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * possible to simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this ex
2262:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * therefore the master group while Groups-0 and 3 are the slave groups. Before the master can requ
2263:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * for synchronized conversion, it has the option of checking the readiness of the slaves.
2264:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2265:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2266:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()
2267:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2268:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2269:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2270:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2271:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2272:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the master VADC Group
2273:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2274:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2275:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2276:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2277:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Clears the ready signal for master group.<BR>\n
2278:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Ignores the readiness of slaves in synchronized conversions.This API would read the \b slave_gro
2279:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * determine which EVAL configuration to apply for the given master slave set. Then clears the conf
2280:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API is called when the master should issue the conversion request without waiting for the s
2281:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * assert a ready signal. The ready signal is asserted by the slave group(s) when the conversion is
2282:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * in these channels.
2283:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2284:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2285:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()<BR>
2286:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2287:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2288:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2289:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2290:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2291:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the master VADC Group
2292:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param ch_num  Channel whose conversion triggers conversion in slave groups
2293:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2294:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2295:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2296:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Sets up a channel for synchronized conversion.\n\n Conversion of identically numbered channels a
2297:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * can be synchronized. For example, when the trigger to
2298:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * convert CH-1 of Group-2 is received, it is possible to simultaneously request conversion of CH-1
2299:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Group-3. Group-2 in this example is therefore the master group while Groups-0 and 3 are the slav
2300:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Before the master can request its slaves for synchronized conversion, it has the option of check
2301:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * of the slaves.
2302:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2303:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2304:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
2305:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2306:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
2307:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2308:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2309:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2310:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2311:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param ch_num     Channel whose conversion triggers conversion in slave groups
2312:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2313:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2314:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2315:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disable the synchronization request for the particular channel specified as ch_num. To enable th
2316:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * call the API @ref XMC_VADC_GROUP_EnableChannelSyncRequest().
2317:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2318:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2319:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
2320:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2321:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
2322:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2323:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2324:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2325:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2326:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2327:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return retuns IDLE if converter is free else returns busy. Refer @ref XMC_VADC_GROUP_STATE_t en
2328:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2329:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2330:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Checks the live status of the analog to digital converter. The converter can either idle doing n
2331:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * sampling + converting.
2332:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2333:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2334:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
2335:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2336:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr);
2337:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2338:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2339:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2340:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group whose global boundary registers are to be pr
2341:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>
2342:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2343:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>
2344:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2345:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2346:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2347:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2348:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2349:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
2350:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * absolute boundaries. They defines a range against which the result of a conversion can be compar
2351:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
2352:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
2353:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * G_BOUND1 who will derive their values from this palette.
2354:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2355:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2356:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
2357:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2358:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2359:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, 
2360:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                   const uint32_t boundary0, 
2361:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                   const uint32_t boundary1);
2362:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2363:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2364:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2365:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
2366:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param boundary_value Select the boundary value.
2367:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2368:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2369:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2370:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2371:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Programs the boundary with \a boundary_value for result comparison.\n\n This defines a range aga
2372:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
2373:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * capability to a compare value.
2374:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2375:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2376:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None.
2377:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2378:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
2379:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                           const XMC_VADC_CHANNEL_BOUNDARY_t selection,
2380:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                           const uint16_t boundary_value); 
2381:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2382:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2383:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2384:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param sr_num   The service request number (0 through 3)
2385:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param type     IRQ type (Kernel specific interrupt vs Module wide shared interrupt )
2386:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2387:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2388:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2389:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Activates a Service Request line(manually trigger).<BR>\n
2390:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * VADC provides few SR lines for each group and a few more which is shared across all the groups.
2391:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * These SR lines can be connected to an NVIC node which in-turn would generate an interrupt.
2392:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API would manually trigger the given SR line. Could be used for evaluation and testing purp
2393:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2394:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2395:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
2396:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2397:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr, 
2398:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                           const uint32_t sr_num, 
2399:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_IRQ_t type);
2400:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2401:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2402:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2403:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group
2404:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param emux_cfg   EMUX configuration structure
2405:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2406:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2407:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2408:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configures group EMUX parameters associated with the \a emux_cfg configuration structure.\n\n An
2409:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * interface allows additional channels to be connected to a VADC group. The conversion properties
2410:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * of such channels can be different from the standard channels which are directly connected to the
2411:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API configures conversion properties of channels connected via EMUX interface.
2412:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2413:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2414:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
2415:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2416:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
2417:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                            const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
2418:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
  27              	 .loc 1 2418 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 85B0     	 sub sp,sp,#20
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 24
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 3960     	 str r1,[r7]
2419:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   uint32_t   emux_config;
2420:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2421:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
2422:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2423:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_P
  44              	 .loc 1 2423 0
  45 000a 3B78     	 ldrb r3,[r7]
  46 000c C3F30203 	 ubfx r3,r3,#0,#3
  47 0010 DBB2     	 uxtb r3,r3
  48 0012 1A46     	 mov r2,r3
2424:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****               ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
  49              	 .loc 1 2424 0
  50 0014 7B88     	 ldrh r3,[r7,#2]
  51 0016 C3F30903 	 ubfx r3,r3,#0,#10
  52 001a 9BB2     	 uxth r3,r3
  53 001c 1B04     	 lsls r3,r3,#16
2423:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****               ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
  54              	 .loc 1 2423 0
  55 001e 1343     	 orrs r3,r3,r2
  56 0020 FB60     	 str r3,[r7,#12]
2425:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2426:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->EMUXCTR  = emux_config;
  57              	 .loc 1 2426 0
  58 0022 7B68     	 ldr r3,[r7,#4]
  59 0024 FA68     	 ldr r2,[r7,#12]
  60 0026 C3F8F021 	 str r2,[r3,#496]
2427:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  61              	 .loc 1 2427 0
  62 002a FB78     	 ldrb r3,[r7,#3]
  63 002c C3F30013 	 ubfx r3,r3,#4,#1
  64 0030 DBB2     	 uxtb r3,r3
  65 0032 1A07     	 lsls r2,r3,#28
2428:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
  66              	 .loc 1 2428 0
  67 0034 FB78     	 ldrb r3,[r7,#3]
  68 0036 C3F38103 	 ubfx r3,r3,#2,#2
  69 003a DBB2     	 uxtb r3,r3
  70 003c 9B06     	 lsls r3,r3,#26
2427:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  71              	 .loc 1 2427 0
  72 003e 1A43     	 orrs r2,r2,r3
2429:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
  73              	 .loc 1 2429 0
  74 0040 FB78     	 ldrb r3,[r7,#3]
  75 0042 C3F34013 	 ubfx r3,r3,#5,#1
  76 0046 DBB2     	 uxtb r3,r3
  77 0048 5B07     	 lsls r3,r3,#29
2427:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  78              	 .loc 1 2427 0
  79 004a 1343     	 orrs r3,r3,r2
  80 004c FB60     	 str r3,[r7,#12]
2430:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2431:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
2432:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_P
  81              	 .loc 1 2432 0
  82 004e FB78     	 ldrb r3,[r7,#3]
  83 0050 C3F38013 	 ubfx r3,r3,#6,#1
  84 0054 DBB2     	 uxtb r3,r3
  85 0056 9B07     	 lsls r3,r3,#30
  86 0058 FA68     	 ldr r2,[r7,#12]
  87 005a 1343     	 orrs r3,r3,r2
  88 005c FB60     	 str r3,[r7,#12]
2433:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
2434:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
  89              	 .loc 1 2434 0
  90 005e 7B68     	 ldr r3,[r7,#4]
  91 0060 D3F8F021 	 ldr r2,[r3,#496]
  92 0064 FB68     	 ldr r3,[r7,#12]
  93 0066 1343     	 orrs r3,r3,r2
  94 0068 43F00042 	 orr r2,r3,#-2147483648
  95 006c 7B68     	 ldr r3,[r7,#4]
  96 006e C3F8F021 	 str r2,[r3,#496]
2435:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
  97              	 .loc 1 2435 0
  98 0072 1437     	 adds r7,r7,#20
  99              	.LCFI3:
 100              	 .cfi_def_cfa_offset 4
 101 0074 BD46     	 mov sp,r7
 102              	.LCFI4:
 103              	 .cfi_def_cfa_register 13
 104              	 
 105 0076 5DF8047B 	 ldr r7,[sp],#4
 106              	.LCFI5:
 107              	 .cfi_restore 7
 108              	 .cfi_def_cfa_offset 0
 109 007a 7047     	 bx lr
 110              	 .cfi_endproc
 111              	.LFE167:
 113              	 .section .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot,"ax",%progbits
 114              	 .align 2
 115              	 .thumb
 116              	 .thumb_func
 118              	XMC_VADC_GROUP_ScanEnableArbitrationSlot:
 119              	.LFB170:
2436:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2437:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
2438:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2439:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2440:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2441:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param boundary_flag_num The Boundary flag for which the interrupt node needs to be configured.
2442:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                          Range: [0x0 to 0x3]
2443:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param node    Service Request node Id
2444:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2445:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2446:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2447:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2448:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Connects the boundary event to the SR line of VADC or to a common boundary flag.<BR>\n
2449:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a boundary event. Hence to get a interrupt o
2450:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
2451:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * field GxBFLNP.BFLxNP.
2452:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2453:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2454:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  None.
2455:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2456:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
2457:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                   const uint8_t boundary_flag_num,
2458:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                   const XMC_VADC_BOUNDARY_NODE_t node);
2459:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif /* XMC_VADC_BOUNDARY_FLAG_SELECT */
2460:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2461:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2462:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2463:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2464:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    uint32_t The complete GxALIAS register
2465:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2466:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2467:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Returns the ALIAS values.\n The ALIAS value that is configured for Channel-0 and channel-1 are r
2468:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2469:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2470:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  None.
2471:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2472:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetAlias(XMC_VADC_GROUP_t *const group_ptr)
2473:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
2474:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetAliasWrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
2475:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   return (group_ptr->ALIAS);
2476:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
2477:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2478:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2479:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2480:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param conv_class  conversion property to be extracted
2481:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2482:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    XMC_VADC_GROUP_CLASS_t The complete GxICLASSy register
2483:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2484:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2485:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Returns the input class configuration values.\n
2486:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This returns the sampling time configuration and resolution configured in the appropriate group 
2487:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \b conv_class. A call to this API would return the register GxICLASSy.
2488:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2489:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2490:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  None.
2491:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2492:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_GROUP_CLASS_t XMC_VADC_GROUP_GetInputClass(XMC_VADC_GROUP_t *const group_p
2493:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                                     const XMC_VADC_CHANNEL_CONV_t c
2494:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
2495:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_CLASS_t input_value;
2496:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
2497:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong conv_class selected", 
2498:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****              (XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLA
2499:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2500:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   input_value.g_iclass0 = (uint32_t) 0xFFFFFFFF;
2501:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   if ((XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLASS1 == 
2502:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   {
2503:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     input_value.g_iclass0 = group_ptr->ICLASS[(uint32_t)conv_class];
2504:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   }
2505:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2506:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   return (input_value);
2507:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
2508:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif /* XMC_VADC_GROUP_AVAILABLE */
2509:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2510:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)
2511:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2512:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
2513:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param config     Pointer to Scan configuration
2514:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2515:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2516:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2517:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Initializes the VADC SCAN functional block.<BR>\n
2518:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * The GROUP SCAN request source functional block converts channels sequentially starting with the 
2519:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * channel to the lowest. Channels must register themselves as being part of the the scan sequence.
2520:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_ScanEnableA
2521:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
2522:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_ScanDisableArbi
2523:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxASCTRL, GxASMR needed scan request s
2524:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2525:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2526:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR> XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2527:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanSelectGating()<BR>
2528:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2529:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
2530:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2531:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2532:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2533:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2534:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2535:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2536:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2537:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables arbitration slot of the scan request source.<BR>\n
2538:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2539:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2540:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * to the scan slot. Thus this must be enabled if any conversion need to take place.
2541:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2542:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2543:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2544:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2545:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2546:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2547:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 120              	 .loc 1 2547 0
 121              	 .cfi_startproc
 122              	 
 123              	 
 124              	 
 125 0000 80B4     	 push {r7}
 126              	.LCFI6:
 127              	 .cfi_def_cfa_offset 4
 128              	 .cfi_offset 7,-4
 129 0002 83B0     	 sub sp,sp,#12
 130              	.LCFI7:
 131              	 .cfi_def_cfa_offset 16
 132 0004 00AF     	 add r7,sp,#0
 133              	.LCFI8:
 134              	 .cfi_def_cfa_register 7
 135 0006 7860     	 str r0,[r7,#4]
2548:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2549:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN1_Msk;
 136              	 .loc 1 2549 0
 137 0008 7B68     	 ldr r3,[r7,#4]
 138 000a D3F88430 	 ldr r3,[r3,#132]
 139 000e 43F00072 	 orr r2,r3,#33554432
 140 0012 7B68     	 ldr r3,[r7,#4]
 141 0014 C3F88420 	 str r2,[r3,#132]
2550:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
 142              	 .loc 1 2550 0
 143 0018 0C37     	 adds r7,r7,#12
 144              	.LCFI9:
 145              	 .cfi_def_cfa_offset 4
 146 001a BD46     	 mov sp,r7
 147              	.LCFI10:
 148              	 .cfi_def_cfa_register 13
 149              	 
 150 001c 5DF8047B 	 ldr r7,[sp],#4
 151              	.LCFI11:
 152              	 .cfi_restore 7
 153              	 .cfi_def_cfa_offset 0
 154 0020 7047     	 bx lr
 155              	 .cfi_endproc
 156              	.LFE170:
 158 0022 00BF     	 .section .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot,"ax",%progbits
 159              	 .align 2
 160              	 .thumb
 161              	 .thumb_func
 163              	XMC_VADC_GROUP_ScanDisableArbitrationSlot:
 164              	.LFB171:
2551:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2552:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2553:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2554:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2555:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2556:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2557:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2558:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disables arbitration slot of the scan request source.<BR>\n
2559:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2560:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2561:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * to the scan slot.A call to this API will lead to all conversions request by scan to be blocked.
2562:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2563:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2564:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2565:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR>
2566:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2567:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2568:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 165              	 .loc 1 2568 0
 166              	 .cfi_startproc
 167              	 
 168              	 
 169              	 
 170 0000 80B4     	 push {r7}
 171              	.LCFI12:
 172              	 .cfi_def_cfa_offset 4
 173              	 .cfi_offset 7,-4
 174 0002 83B0     	 sub sp,sp,#12
 175              	.LCFI13:
 176              	 .cfi_def_cfa_offset 16
 177 0004 00AF     	 add r7,sp,#0
 178              	.LCFI14:
 179              	 .cfi_def_cfa_register 7
 180 0006 7860     	 str r0,[r7,#4]
2569:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
2570:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN1_Msk);
 181              	 .loc 1 2570 0
 182 0008 7B68     	 ldr r3,[r7,#4]
 183 000a D3F88430 	 ldr r3,[r3,#132]
 184 000e 23F00072 	 bic r2,r3,#33554432
 185 0012 7B68     	 ldr r3,[r7,#4]
 186 0014 C3F88420 	 str r2,[r3,#132]
2571:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
 187              	 .loc 1 2571 0
 188 0018 0C37     	 adds r7,r7,#12
 189              	.LCFI15:
 190              	 .cfi_def_cfa_offset 4
 191 001a BD46     	 mov sp,r7
 192              	.LCFI16:
 193              	 .cfi_def_cfa_register 13
 194              	 
 195 001c 5DF8047B 	 ldr r7,[sp],#4
 196              	.LCFI17:
 197              	 .cfi_restore 7
 198              	 .cfi_def_cfa_offset 0
 199 0020 7047     	 bx lr
 200              	 .cfi_endproc
 201              	.LFE171:
 203 0022 00BF     	 .section .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot,"ax",%progbits
 204              	 .align 2
 205              	 .thumb
 206              	 .thumb_func
 208              	XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:
 209              	.LFB185:
2572:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2573:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2574:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2575:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2576:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
2577:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2578:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2579:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Returns the arbitration status of the scan request source.<BR>\n
2580:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2581:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2582:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * to the scan slot. A call to this API would return the status of the arbitration slot of scan.
2583:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
2584:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2585:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2586:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR
2587:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2588:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr)
2589:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
2590:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GROU
2591:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2592:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN1_Msk) >> VADC_G_ARBPR_ASEN1_Pos);
2593:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
2594:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2595:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2596:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2597:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param trigger_input  Choice of the input earmarked as a trigger line
2598:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2599:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2600:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2601:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2602:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Select Trigger signal for scan request source.<BR>\n
2603:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2604:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
2605:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2606:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
2607:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTSEL.
2608:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2609:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2610:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectGating()<BR> XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
2611:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2612:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
2613:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2614:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2615:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2616:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2617:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param trigger_edge  Trigger edge selection
2618:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2619:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2620:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2621:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2622:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Selects the trigger edge for scan request source.<BR>\n
2623:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2624:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible trigger edges. This is
2625:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2626:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTMODE.
2627:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2628:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2629:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2630:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2631:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
2632:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2633:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2634:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2635:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param gating_input  Module input signal meant to be selected as gating input
2636:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2637:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2638:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2639:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2640:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Select Gating signal for scan request source.<BR>\n
2641:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
2642:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the scan request source o
2643:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxASMR.ENGT has to be config
2644:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxAS
2645:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2646:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2647:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2648:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2649:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
2650:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2651:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2652:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2653:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the scan request source
2654:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2655:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2656:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2657:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2658:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Selects the gating mode of scan request source.<BR>\n
2659:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
2660:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
2661:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
2662:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2663:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2664:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectGating();
2665:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2666:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_G
2667:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
2668:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2669:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE
2670:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2671:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
2672:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ASMR &= (uint32_t) (~((uint32_t)VADC_G_ASMR_ENGT_Msk));
2673:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   /* Set the new gating mode */
2674:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)((uint32_t)mode_sel << VADC_G_ASMR_ENGT_Pos);
2675:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
2676:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2677:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2678:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2679:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2680:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2681:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2682:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2683:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
2684:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2685:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2686:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2687:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2688:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * sequence. Every request source event will cause a load event to occur. A call to this API would 
2689:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2690:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2691:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2692:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableContinuousMode()<BR>
2693:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2694:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2695:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
2696:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2697:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_SCAN_Msk;
2698:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
2699:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2700:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2701:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2702:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2703:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2704:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2705:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2706:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
2707:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2708:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2709:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2710:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2711:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * sequence. By invoking this feature the Autoscan mode of operations is disabled. A call to this A
2712:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2713:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2714:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2715:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableContinuousMode()<BR>
2716:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2717:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2718:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
2719:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2720:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_SCAN_Msk);
2721:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
2722:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2723:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2724:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2725:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2726:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2727:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2728:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2729:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
2730:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
2731:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the s
2732:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxASMR.LD
2733:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2734:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2735:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  None.
2736:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2737:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
2738:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
2739:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
2740:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_LDEV_Msk;
2741:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
2742:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2743:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2744:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2745:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2746:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2747:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2748:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2749:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Aborts an ongoing scan sequence conversion.<BR>\n
2750:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
2751:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
2752:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
2753:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the registers GxASMR, GxASCTRL, GxARBPR to achieve the sequen
2754:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2755:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2756:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  None.
2757:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2758:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr);
2759:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2760:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2761:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2762:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param ch_num     The channel meant to be added to scan sequence
2763:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
2764:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2765:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2766:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2767:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2768:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Adds a channel to the scan sequence.<BR>\n
2769:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the scan request source. This will be added to
2770:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
2771:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2772:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2773:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2774:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddMultipleChannels()<BR>
2775:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2776:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddChannelToSequence(XMC_VADC_GROUP_t *const group_ptr, con
2777:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
2778:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("VADC_GSCAN_AddSingleChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
2779:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddChannelToSequence:Wrong Channel Number", 
2780:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
2781:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ASSEL |= (uint32_t)((uint32_t)1 << ch_num);
2782:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
2783:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2784:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2785:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2786:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
2787:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
2788:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
2789:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the selected channels
2790:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
2791:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2792:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2793:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2794:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2795:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
2796:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
2797:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
2798:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2799:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2800:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2801:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddChannelToSequence()<BR>
2802:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2803:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddMultipleChannels(XMC_VADC_GROUP_t *const group_ptr, cons
2804:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
2805:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddMultipleChannels:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
2806:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ASSEL = ch_mask;
2807:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
2808:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2809:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2810:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2811:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
2812:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
2813:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2814:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
2815:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2816:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2817:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Determine if the channel is pending for conversion.<BR>\n
2818:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
2819:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
2820:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
2821:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * if the channel is found in the pending register (GxASPND).
2822:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2823:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2824:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanGetNumChannelsPending()<BR>
2825:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2826:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsChannelPending(XMC_VADC_GROUP_t *const group_ptr, const u
2827:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
2828:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2829:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
2830:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_C
2831:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2832:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   return( (bool)((uint32_t)(group_ptr->ASPND >> ch_num) & 1U));
2833:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
2834:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2835:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2836:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  group_ptr     Constant pointer to the VADC group
2837:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return  <BR>
2838:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
2839:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to 0x8]
2840:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2841:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2842:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Returns the total number of pending channels.<BR>\n
2843:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
2844:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
2845:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
2846:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * return the total number of channels pending (GxASPND).
2847:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2848:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2849:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanIsChannelPending()<BR>
2850:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2851:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr);
2852:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2853:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2854:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2855:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2856:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2857:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2858:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2859:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
2860:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will set the request source event for scan. This will trigger a interrupt if the
2861:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
2862:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
2863:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2864:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2865:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None.
2866:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2867:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
2868:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
2869:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
2870:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->SEFLAG    |= (uint32_t)VADC_G_SEFLAG_SEV1_Msk;
2871:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
2872:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2873:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2874:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2875:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2876:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2877:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2878:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2879:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Acknowledges the scan conversion complete request source event.<BR>\n
2880:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
2881:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
2882:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2883:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2884:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanTriggerReqSrcEvent()<BR>
2885:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2886:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanClearReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
2887:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
2888:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanClearReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
2889:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->SEFCLR |= (uint32_t)VADC_G_SEFCLR_SEV1_Msk;
2890:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
2891:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2892:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2893:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2894:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2895:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
2896:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
2897:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2898:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2899:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
2900:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will get the status of the scan request source event. Will return a true
2901:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * if the event has occurred for scan. A call to this API would access the register bit field GxSEF
2902:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2903:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2904:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  None.
2905:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2906:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanGetReqSrcEventStatus(XMC_VADC_GROUP_t *const group_ptr)
2907:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
2908:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GSCAN_GetRSEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
2909:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   return( (bool)(group_ptr->SEFLAG & (uint32_t)VADC_G_SEFLAG_SEV1_Msk));
2910:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
2911:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2912:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2913:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2914:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param sr    Service Request Id
2915:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2916:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2917:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2918:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2919:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Connects the scan request source event to the SR line of VADC.<BR>\n
2920:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a scan request source event. Hence to get a 
2921:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
2922:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * field GxSEVNP.SEV1NP .
2923:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2924:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2925:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  None.
2926:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2927:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
2928:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2929:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2930:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2931:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2932:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2933:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2934:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2935:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables the trigger for scan request source.<BR>\n
2936:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * By using this API, the trigger signal will be activated for the scan request source. The trigger
2937:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * edge will be selected from the ASCTRL register. The Selection of a input will be done by
2938:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectTrigger(). A call to this API would configure the register bit field Gx
2939:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2940:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2941:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanDisableExternalTrigger()<BR>
2942:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2943:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
2944:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
2945:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2946:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2947:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_ENTR_Msk;
2948:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
2949:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2950:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2951:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2952:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2953:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2954:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2955:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2956:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disables the trigger for scan request source.<BR>
2957:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the scan request source.
2958:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the scan request source. If any configuration were
2959:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * to select the trigger input in GxASCTRL, it will be not be effected by this API.
2960:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENTR.
2961:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2962:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2963:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
2964:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2965:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
2966:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
2967:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
2968:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2969:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENTR_Msk);
2970:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
2971:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2972:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2973:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2974:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param channel_num   channel number to be removed from the scan sequence.
2975:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2976:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2977:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2978:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2979:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Removes a channel from the scan sequence.<BR>
2980:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * By using this API the it is possible to remove a single channel from the conversion sequence.
2981:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * The remaining channels will continue however they are.
2982:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register GxASSEL.
2983:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2984:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2985:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  None.
2986:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2987:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
2988:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
2989:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
2990:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2991:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Pointer to the VADC module
2992:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
2993:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2994:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2995:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Initializes the Background scan functional block.<BR>\n
2996:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * The BACKGROUND SCAN request source functional block converts channels of all VADC groups that ha
2997:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * been assigned as a priority channel (priority channels can be converted only by queue and scan).
2998:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * request source converts the unprioritized channels. Unprioritized channels however can also be u
2999:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * and scan. But a channel which is prioritized can not be used with background request source.
3000:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3001:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3002:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR> XMC_VADC_GROUP_BackgroundDisableArbitratio
3003:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundSelectGating()<BR>
3004:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3005:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
3006:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3007:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
3008:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3009:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group which may receive a
3010:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                  conversion request from background request source
3011:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3012:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3013:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3014:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3015:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3016:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables arbitration slot of the Background request source.<BR>\n
3017:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3018:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3019:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * comes to the Background slot. Thus this must be enabled if any conversion need to take place.
3020:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2.
3021:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3022:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3023:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
3024:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3025:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_p
3026:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 210              	 .loc 1 3026 0
 211              	 .cfi_startproc
 212              	 
 213              	 
 214              	 
 215 0000 80B4     	 push {r7}
 216              	.LCFI18:
 217              	 .cfi_def_cfa_offset 4
 218              	 .cfi_offset 7,-4
 219 0002 83B0     	 sub sp,sp,#12
 220              	.LCFI19:
 221              	 .cfi_def_cfa_offset 16
 222 0004 00AF     	 add r7,sp,#0
 223              	.LCFI20:
 224              	 .cfi_def_cfa_register 7
 225 0006 7860     	 str r0,[r7,#4]
3027:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_
3028:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 226              	 .loc 1 3028 0
 227 0008 7B68     	 ldr r3,[r7,#4]
 228 000a D3F88430 	 ldr r3,[r3,#132]
 229 000e 43F08062 	 orr r2,r3,#67108864
 230 0012 7B68     	 ldr r3,[r7,#4]
 231 0014 C3F88420 	 str r2,[r3,#132]
3029:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
 232              	 .loc 1 3029 0
 233 0018 0C37     	 adds r7,r7,#12
 234              	.LCFI21:
 235              	 .cfi_def_cfa_offset 4
 236 001a BD46     	 mov sp,r7
 237              	.LCFI22:
 238              	 .cfi_def_cfa_register 13
 239              	 
 240 001c 5DF8047B 	 ldr r7,[sp],#4
 241              	.LCFI23:
 242              	 .cfi_restore 7
 243              	 .cfi_def_cfa_offset 0
 244 0020 7047     	 bx lr
 245              	 .cfi_endproc
 246              	.LFE185:
 248 0022 00BF     	 .section .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot,"ax",%progbits
 249              	 .align 2
 250              	 .thumb
 251              	 .thumb_func
 253              	XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:
 254              	.LFB186:
3030:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3031:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3032:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group which may receive a conversion request
3033:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                     from background request source
3034:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3035:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3036:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3037:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3038:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disables arbitration slot of the Background request source.<BR>\n
3039:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3040:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3041:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * comes to the Background slot.A call to this API will lead to all conversions request by Backgrou
3042:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2
3043:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3044:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3045:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
3046:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3047:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_
3048:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 255              	 .loc 1 3048 0
 256              	 .cfi_startproc
 257              	 
 258              	 
 259              	 
 260 0000 80B4     	 push {r7}
 261              	.LCFI24:
 262              	 .cfi_def_cfa_offset 4
 263              	 .cfi_offset 7,-4
 264 0002 83B0     	 sub sp,sp,#12
 265              	.LCFI25:
 266              	 .cfi_def_cfa_offset 16
 267 0004 00AF     	 add r7,sp,#0
 268              	.LCFI26:
 269              	 .cfi_def_cfa_register 7
 270 0006 7860     	 str r0,[r7,#4]
3049:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK
3050:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 271              	 .loc 1 3050 0
 272 0008 7B68     	 ldr r3,[r7,#4]
 273 000a D3F88430 	 ldr r3,[r3,#132]
 274 000e 23F08062 	 bic r2,r3,#67108864
 275 0012 7B68     	 ldr r3,[r7,#4]
 276 0014 C3F88420 	 str r2,[r3,#132]
3051:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
 277              	 .loc 1 3051 0
 278 0018 0C37     	 adds r7,r7,#12
 279              	.LCFI27:
 280              	 .cfi_def_cfa_offset 4
 281 001a BD46     	 mov sp,r7
 282              	.LCFI28:
 283              	 .cfi_def_cfa_register 13
 284              	 
 285 001c 5DF8047B 	 ldr r7,[sp],#4
 286              	.LCFI29:
 287              	 .cfi_restore 7
 288              	 .cfi_def_cfa_offset 0
 289 0020 7047     	 bx lr
 290              	 .cfi_endproc
 291              	.LFE186:
 293 0022 00BF     	 .section .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot,"ax",%progbits
 294              	 .align 2
 295              	 .thumb
 296              	 .thumb_func
 298              	XMC_VADC_GROUP_QueueEnableArbitrationSlot:
 299              	.LFB199:
3052:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
3053:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3054:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3055:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3056:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3057:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_TRIGGER_INPUT_SELECT_t
3058:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3059:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3060:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3061:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3062:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Select Trigger signal for Background request source.<BR>\n
3063:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3064:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3065:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3066:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3067:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTSEL.
3068:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3069:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3070:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3071:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3072:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
3073:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3074:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3075:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3076:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3077:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param trigger_edge  Select the trigger edge
3078:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3079:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3080:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3081:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3082:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Select Trigger edge for Background request source.<BR>\n
3083:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3084:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible values for the trigger 
3085:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3086:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTMODE.
3087:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3088:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3089:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3090:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3091:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
3092:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3093:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3094:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3095:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param input_num  Module input signal meant to be selected as gating input
3096:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_GATE_INPUT_SELECT_t
3097:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3098:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3099:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3100:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3101:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Select Gating signal for Background request source.<BR>\n
3102:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3103:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the Background request so
3104:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxBRSMR.ENGT has to be confi
3105:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field BRSC
3106:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3107:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3108:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR>
3109:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3110:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
3111:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3112:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3113:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3114:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the background scan request source
3115:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3116:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3117:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3118:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3119:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Selects the gating mode of background request source.<BR>\n
3120:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3121:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3122:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3123:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENGT.
3124:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3125:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3126:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectGating();
3127:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3128:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundSetGatingMode(XMC_VADC_GLOBAL_t *const global_ptr,
3129:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                             XMC_VADC_GATEMODE_t mode_sel)
3130:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
3131:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong Module Pointer", (global_ptr == VADC))
3132:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_G
3133:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3134:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3135:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->BRSMR &= (uint32_t)(~((uint32_t)VADC_BRSMR_ENGT_Msk));
3136:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   /* Configure the new gating mode*/
3137:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)((uint32_t)mode_sel << VADC_BRSMR_ENGT_Pos);
3138:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
3139:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3140:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3141:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3142:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3143:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3144:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3145:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3146:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3147:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
3148:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3149:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * request is needed. Using autoscan (continuous conversion)feature it is possible to start the con
3150:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * once and allow the sequence to repeat without any further triggers. Once all channels belonging 
3151:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * request source have been converted, a request source completion event is generated. Generation o
3152:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * can restart the Background configure sequence. Every request source event will cause a load even
3153:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would access the register bit field BRSMR.SCAN.
3154:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3155:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3156:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableContinuousMode()<BR>
3157:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3158:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableContinuousMode(XMC_VADC_GLOBAL_t *const global
3159:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
3160:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableContinuousMode:Wrong Module Pointer", (global_ptr == 
3161:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_SCAN_Msk;
3162:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
3163:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3164:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3165:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3166:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3167:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3168:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3169:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3170:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
3171:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3172:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
3173:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a Background req
3174:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
3175:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * sequence. By invoking this API the Autoscan mode of operations is disabled. A call to this API w
3176:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * register bit field BRSMR.SCAN.
3177:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3178:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3179:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableContinuousMode()<BR>
3180:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3181:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableContinuousMode(XMC_VADC_GLOBAL_t *const globa
3182:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
3183:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableContinuousMode:Wrong Module Pointer", (global_ptr ==
3184:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_SCAN_Msk);
3185:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
3186:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3187:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3188:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3189:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3190:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3191:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3192:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3193:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
3194:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3195:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the b
3196:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * has already been filled up with entries. A call to this API would set the register bit field BRS
3197:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3198:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3199:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  None.
3200:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3201:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_pt
3202:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
3203:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VAD
3204:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
3205:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
3206:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3207:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3208:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3209:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3210:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3211:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3212:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3213:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Aborts an ongoing background scan conversion(sequence).<BR>\n
3214:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
3215:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
3216:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
3217:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the registers BRSMR, BRSCTRL, GxARBPR(if group is available) 
3218:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * current scan sequence.
3219:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3220:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3221:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  None.
3222:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3223:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr);
3224:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3225:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3226:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3227:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3228:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   Request source
3229:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param ch_num     The unprioritized channel meant to be added to the scan sequence
3230:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3231:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3232:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3233:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3234:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3235:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Adds a channel to the background scan sequence.<BR>\n
3236:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the background scan request source. This will 
3237:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3238:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3239:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3240:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3241:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
3242:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3243:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global
3244:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                                     const uint32_t grp_num,
3245:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                                     const uint32_t ch_num)
3246:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
3247:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == 
3248:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_V
3249:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
3250:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3251:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3252:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
3253:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
3254:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3255:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3256:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3257:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3258:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3259:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3260:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3261:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the previously selected channels
3262:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3263:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3264:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3265:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3266:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3267:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
3268:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3269:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3270:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3271:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3272:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3273:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3274:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3275:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgndAddMultipleChannels(XMC_VADC_GLOBAL_t *const global_ptr
3276:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                                 const uint32_t grp_num,
3277:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                                 const uint32_t ch_mask)
3278:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
3279:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Module Pointer", (global_ptr == VADC
3280:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Group Number",   ((grp_num) < XMC_VA
3281:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= ch_mask;
3282:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
3283:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3284:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3285:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3286:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3287:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
3288:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3289:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3290:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
3291:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3292:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3293:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Determine if the channel is pending.<BR>\n
3294:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
3295:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3296:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
3297:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * if the channel is found in the pending register (BRSPND[\b grp_num]).
3298:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3299:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3300:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending()<BR>
3301:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3302:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundIsChannelPending(XMC_VADC_GLOBAL_t *const global_ptr
3303:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                                 const uint32_t grp_num,
3304:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                                                 const uint32_t ch_num)
3305:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
3306:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Module Pointer", (global_ptr == VADC
3307:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Group Number",   ((grp_num) < XMC_VA
3308:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Channel Number",
3309:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3310:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3311:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   return( (bool)(global_ptr->BRSPND[grp_num] & (uint32_t)((uint32_t)1 << ch_num)));
3312:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
3313:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3314:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3315:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3316:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   * @return  <BR>
3317:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
3318:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to (0x8*number of groups)]
3319:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3320:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3321:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Returns the number of pending channels.<BR>\n
3322:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
3323:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3324:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
3325:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * return the total number of channels pending (BRSPND[\b grp_num]).
3326:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3327:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3328:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundIsChannelPending()<BR>
3329:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3330:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr);
3331:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3332:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3333:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3334:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3335:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3336:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3337:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3338:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
3339:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will set the request source event for background scan. This will trigger a interrupt if
3340:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
3341:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB.
3342:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3343:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3344:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * None.
3345:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3346:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent(XMC_VADC_GLOBAL_t *const global_p
3347:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
3348:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent:Wrong Module Pointer", (global_ptr == VA
3349:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk;
3350:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
3351:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3352:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3353:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3354:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3355:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3356:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3357:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3358:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Acknowledges the background scan conversion complete request source event.<BR>\n
3359:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3360:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB
3361:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3362:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3363:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent()<BR>
3364:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3365:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent(XMC_VADC_GLOBAL_t *const global_ptr
3366:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
3367:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent:Wrong Module Pointer", (global_ptr == VADC
3368:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLBCLR_Msk;
3369:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
3370:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3371:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3372:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3373:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3374:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3375:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
3376:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3377:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3378:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3379:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will get the status of the background scan request source event. Will return a true
3380:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * if the event has occurred for background scan. A call to this API would configure the register
3381:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * bit field GLOBEFLAG.SEVGLB.
3382:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3383:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3384:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  None.
3385:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3386:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus(XMC_VADC_GLOBAL_t *const global
3387:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
3388:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus:Wrong Module Pointer", (global_ptr == 
3389:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   return((bool)(global_ptr->GLOBEFLAG & (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk));
3390:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
3391:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3392:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3393:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3394:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3395:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3396:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3397:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3398:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables the trigger for background scan request source.<BR>\n
3399:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * By using this API the trigger will be activated for the scan request source. The trigger signal 
3400:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * edge will be selected from the BRSCTRL register. The Selection of a input will be done by
3401:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectTrigger(). A call to this API would configure the register bit f
3402:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3403:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3404:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(
3405:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3406:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger(XMC_VADC_GLOBAL_t *const globa
3407:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
3408:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger:Wrong Group Pointer", (global_ptr == 
3409:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3410:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_ENTR_Msk;
3411:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
3412:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3413:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3414:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3415:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3416:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3417:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3418:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3419:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disables the trigger for background scan request source.<BR>
3420:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the background scan request source.
3421:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the background scan request source. If any configu
3422:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * to select the trigger input in BRSCTRL will be not be effected. A call to this API would configu
3423:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * bit field BRSMR.ENTR.
3424:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3425:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><br>
3426:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<BR>
3427:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3428:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(XMC_VADC_GLOBAL_t *const glob
3429:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
3430:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger:Wrong Group Pointer", (global_ptr ==
3431:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3432:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENTR_Msk);
3433:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
3434:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3435:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)
3436:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3437:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
3438:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3439:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3440:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3441:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3442:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3443:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Initializes VADC QUEUE functional block.<BR>\n
3444:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * The QUEUE request source functional block converts channels stored in a queue. The first channel
3445:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * queue is converted first. A channel once converted, can be placed back into the queue if desired
3446:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_QueueEnable
3447:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
3448:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_QueueDisableArb
3449:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxQCTRL0, GxQMR0 to configure the queu
3450:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * source.
3451:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3452:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3453:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR> XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR
3454:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR> XMC_VADC_GROUP_QueueSelectGating()<BR>
3455:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3456:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
3457:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3458:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3459:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3460:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3461:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3462:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3463:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3464:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables arbitration slot of the queue request source.<BR>\n
3465:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3466:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3467:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * to the queue slot. Thus this must be enabled if any conversion need to take place.
3468:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3469:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3470:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3471:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
3472:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3473:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3474:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 300              	 .loc 1 3474 0
 301              	 .cfi_startproc
 302              	 
 303              	 
 304              	 
 305 0000 80B4     	 push {r7}
 306              	.LCFI30:
 307              	 .cfi_def_cfa_offset 4
 308              	 .cfi_offset 7,-4
 309 0002 83B0     	 sub sp,sp,#12
 310              	.LCFI31:
 311              	 .cfi_def_cfa_offset 16
 312 0004 00AF     	 add r7,sp,#0
 313              	.LCFI32:
 314              	 .cfi_def_cfa_register 7
 315 0006 7860     	 str r0,[r7,#4]
3475:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3476:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
 316              	 .loc 1 3476 0
 317 0008 7B68     	 ldr r3,[r7,#4]
 318 000a D3F88430 	 ldr r3,[r3,#132]
 319 000e 43F08072 	 orr r2,r3,#16777216
 320 0012 7B68     	 ldr r3,[r7,#4]
 321 0014 C3F88420 	 str r2,[r3,#132]
3477:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
 322              	 .loc 1 3477 0
 323 0018 0C37     	 adds r7,r7,#12
 324              	.LCFI33:
 325              	 .cfi_def_cfa_offset 4
 326 001a BD46     	 mov sp,r7
 327              	.LCFI34:
 328              	 .cfi_def_cfa_register 13
 329              	 
 330 001c 5DF8047B 	 ldr r7,[sp],#4
 331              	.LCFI35:
 332              	 .cfi_restore 7
 333              	 .cfi_def_cfa_offset 0
 334 0020 7047     	 bx lr
 335              	 .cfi_endproc
 336              	.LFE199:
 338 0022 00BF     	 .section .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot,"ax",%progbits
 339              	 .align 2
 340              	 .thumb
 341              	 .thumb_func
 343              	XMC_VADC_GROUP_QueueDisableArbitrationSlot:
 344              	.LFB200:
3478:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3479:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3480:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3481:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3482:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3483:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3484:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3485:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disables arbitration slot of the queue request source.<BR>\n
3486:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3487:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3488:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * to the queue slot.A call to this API will lead to all conversions request by queue to be blocked
3489:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3490:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3491:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3492:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
3493:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3494:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3495:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 345              	 .loc 1 3495 0
 346              	 .cfi_startproc
 347              	 
 348              	 
 349              	 
 350 0000 80B4     	 push {r7}
 351              	.LCFI36:
 352              	 .cfi_def_cfa_offset 4
 353              	 .cfi_offset 7,-4
 354 0002 83B0     	 sub sp,sp,#12
 355              	.LCFI37:
 356              	 .cfi_def_cfa_offset 16
 357 0004 00AF     	 add r7,sp,#0
 358              	.LCFI38:
 359              	 .cfi_def_cfa_register 7
 360 0006 7860     	 str r0,[r7,#4]
3496:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
3497:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
 361              	 .loc 1 3497 0
 362 0008 7B68     	 ldr r3,[r7,#4]
 363 000a D3F88430 	 ldr r3,[r3,#132]
 364 000e 23F08072 	 bic r2,r3,#16777216
 365 0012 7B68     	 ldr r3,[r7,#4]
 366 0014 C3F88420 	 str r2,[r3,#132]
3498:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
 367              	 .loc 1 3498 0
 368 0018 0C37     	 adds r7,r7,#12
 369              	.LCFI39:
 370              	 .cfi_def_cfa_offset 4
 371 001a BD46     	 mov sp,r7
 372              	.LCFI40:
 373              	 .cfi_def_cfa_register 13
 374              	 
 375 001c 5DF8047B 	 ldr r7,[sp],#4
 376              	.LCFI41:
 377              	 .cfi_restore 7
 378              	 .cfi_def_cfa_offset 0
 379 0020 7047     	 bx lr
 380              	 .cfi_endproc
 381              	.LFE200:
 383 0022 00BF     	 .section .text.XMC_VADC_GROUP_QueueFlushEntries,"ax",%progbits
 384              	 .align 2
 385              	 .thumb
 386              	 .thumb_func
 388              	XMC_VADC_GROUP_QueueFlushEntries:
 389              	.LFB204:
3499:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3500:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3501:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3502:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3503:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3504:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
3505:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3506:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3507:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Returns the arbitration status of the queue request source.<BR>\n
3508:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * If the queue request source must have its conversion request considered by the arbiter, it must 
3509:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3510:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * to the queue slot. A call to this API would return the status of the arbitration slot of queue.
3511:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
3512:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3513:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3514:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<
3515:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3516:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr
3517:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
3518:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GRO
3519:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3520:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN0_Msk) >> VADC_G_ARBPR_ASEN0_Pos);
3521:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
3522:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3523:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3524:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3525:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3526:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3527:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3528:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3529:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3530:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Select Trigger signal for queue request source.<BR>\n
3531:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3532:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3533:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3534:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3535:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTSEL.
3536:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3537:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3538:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3539:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3540:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, 
3541:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num);
3542:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3543:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3544:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3545:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param trigger_edge  Choice of the trigger edge
3546:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3547:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3548:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3549:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3550:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Select Trigger signal edge for queue request source.<BR>\n
3551:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3552:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 trigger edges. This is
3553:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3554:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3555:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTMODE.
3556:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3557:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3558:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3559:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3560:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
3561:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3562:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3563:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3564:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as the gating line
3565:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3566:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3567:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3568:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3569:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Select Gating signal for queue request source.<BR>\n
3570:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3571:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the queue request source 
3572:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxQMR0.ENGT has to be config
3573:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxQC
3574:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3575:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3576:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR>
3577:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3578:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
3579:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3580:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3581:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3582:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the queue request source
3583:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3584:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3585:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3586:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3587:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Selects the gating mode of queue request source.<BR>\n
3588:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3589:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3590:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3591:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQMR0.ENGT.
3592:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3593:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3594:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GROUP_QueueSelectGating();
3595:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3596:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_
3597:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
3598:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
3599:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMOD
3600:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3601:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3602:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->QMR0 &= (uint32_t)(~((uint32_t) VADC_G_QMR0_ENGT_Msk));
3603:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   /* Set the new gating mode */
3604:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)mode_sel << VADC_G_QMR0_ENGT_Pos);
3605:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
3606:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3607:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3608:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3609:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3610:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3611:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3612:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3613:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3614:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>
3615:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3616:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the queue unit to generate a conversion request to the analog converter. It is assumed that the 
3617:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxQMR0.TR
3618:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3619:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Note:</b><br>
3620:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * The conversion of queue entry will start immediately after the entry has been loaded into GxQINR
3621:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This happens only if the queue entry has been loaded into the register without the need for the 
3622:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * If a H/W Trigger is selected while loading the entry, the conversion will occur in one of the 2 
3623:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * <ul>
3624:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * <li> The H/W generates a trigger needed for the queue request source.
3625:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * <li> The Conversion is triggered manually by calling this API.
3626:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * </ul>
3627:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3628:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3629:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3630:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3631:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
3632:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
3633:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
3634:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_TREV_Pos);
3635:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
3636:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3637:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3638:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3639:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3640:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    uint32_t returns the total number of channels.
3641:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *             <BR>Range: [0x0 to 0x8]
3642:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3643:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3644:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Returns the number of channels present in the queue.<BR>\n
3645:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will return the queue buffer size. This buffer will be consisting of valid queue entrie
3646:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * will be converted when a trigger event occurs. All the entries that are loaded onto the GxQINR0 
3647:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * be added to the queue buffer. Hence if an application needs to get the number of valid queue ent
3648:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * this API would provide the interface. A call to this API would access the registers GxQBUR0, GxQ
3649:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * to determine the queue length.
3650:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3651:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3652:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3653:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3654:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr);
3655:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3656:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3657:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3658:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3659:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3660:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3661:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3662:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Aborts an ongoing conversion by flushing the queue.<BR>\n
3663:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will flush the queue buffer. Ongoing conversion of the Queue request source will
3664:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
3665:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the registers GxQCTRL0, GxQMR0, GxARBPR in order to abort
3666:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * the queue sequence.
3667:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3668:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3669:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueFlushEntries() <BR>
3670:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3671:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr);
3672:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3673:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3674:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3675:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3676:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3677:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3678:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3679:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * Flushing the queue Entry.<BR>\n
3680:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will flush one entry in the queue buffer. Ongoing conversion of the Queue request sourc
3681:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
3682:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the registers  GxQMR0. This is a Blocking API, i.e will only 
3683:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * all the entries are removed from the queue.
3684:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3685:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3686:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueAbortSequence(0<BR>
3687:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3688:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueFlushEntries(XMC_VADC_GROUP_t *const group_ptr)
3689:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** {
 390              	 .loc 1 3689 0
 391              	 .cfi_startproc
 392              	 
 393              	 
 394              	 
 395 0000 80B4     	 push {r7}
 396              	.LCFI42:
 397              	 .cfi_def_cfa_offset 4
 398              	 .cfi_offset 7,-4
 399 0002 83B0     	 sub sp,sp,#12
 400              	.LCFI43:
 401              	 .cfi_def_cfa_offset 16
 402 0004 00AF     	 add r7,sp,#0
 403              	.LCFI44:
 404              	 .cfi_def_cfa_register 7
 405 0006 7860     	 str r0,[r7,#4]
3690:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   /* Initiate flushing of the queue */
3691:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_FLUSH_Msk;
 406              	 .loc 1 3691 0
 407 0008 7B68     	 ldr r3,[r7,#4]
 408 000a D3F80431 	 ldr r3,[r3,#260]
 409 000e 43F48062 	 orr r2,r3,#1024
 410 0012 7B68     	 ldr r3,[r7,#4]
 411 0014 C3F80421 	 str r2,[r3,#260]
3692:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** 
3693:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   while( !((group_ptr->QSR0)& (uint32_t)VADC_G_QSR0_EMPTY_Msk))
 412              	 .loc 1 3693 0
 413 0018 00BF     	 nop
 414              	.L9:
 415              	 .loc 1 3693 0 is_stmt 0 discriminator 1
 416 001a 7B68     	 ldr r3,[r7,#4]
 417 001c D3F80831 	 ldr r3,[r3,#264]
 418 0020 03F02003 	 and r3,r3,#32
 419 0024 002B     	 cmp r3,#0
 420 0026 F8D0     	 beq .L9
3694:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   {
3695:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****     /* Wait until the queue is indeed flushed */
3696:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h ****   }
3697:D:\dholler\Dokumente\uni\bus\xmc\priotest\Libraries\XMCLib\inc\xmc_vadc.h **** }
 421              	 .loc 1 3697 0 is_stmt 1
 422 0028 0C37     	 adds r7,r7,#12
 423              	.LCFI45:
 424              	 .cfi_def_cfa_offset 4
 425 002a BD46     	 mov sp,r7
 426              	.LCFI46:
 427              	 .cfi_def_cfa_register 13
 428              	 
 429 002c 5DF8047B 	 ldr r7,[sp],#4
 430              	.LCFI47:
 431              	 .cfi_restore 7
 432              	 .cfi_def_cfa_offset 0
 433 0030 7047     	 bx lr
 434              	 .cfi_endproc
 435              	.LFE204:
 437 0032 00BF     	 .section .rodata.g_xmc_vadc_group_array,"a",%progbits
 438              	 .align 2
 441              	g_xmc_vadc_group_array:
 442 0000 00440040 	 .word 1073759232
 443 0004 00480040 	 .word 1073760256
 444 0008 004C0040 	 .word 1073761280
 445 000c 00500040 	 .word 1073762304
 446              	 .section .text.XMC_VADC_GLOBAL_EnableModule,"ax",%progbits
 447              	 .align 2
 448              	 .global XMC_VADC_GLOBAL_EnableModule
 449              	 .thumb
 450              	 .thumb_func
 452              	XMC_VADC_GLOBAL_EnableModule:
 453              	.LFB222:
 454              	 .file 2 "../Libraries/XMCLib/src/xmc_vadc.c"
   1:../Libraries/XMCLib/src/xmc_vadc.c **** /**
   2:../Libraries/XMCLib/src/xmc_vadc.c ****  * @file xmc_vadc.c
   3:../Libraries/XMCLib/src/xmc_vadc.c ****  * @date 2016-01-12
   4:../Libraries/XMCLib/src/xmc_vadc.c ****  *
   5:../Libraries/XMCLib/src/xmc_vadc.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_vadc.c **** ***************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_vadc.c ****  * XMClib v2.1.4 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_vadc.c ****  *
   9:../Libraries/XMCLib/src/xmc_vadc.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_vadc.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_vadc.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_vadc.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_vadc.c ****  * 
  18:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_vadc.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_vadc.c ****  * 
  21:../Libraries/XMCLib/src/xmc_vadc.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_vadc.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_vadc.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_vadc.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_vadc.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_vadc.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_vadc.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_vadc.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_vadc.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_vadc.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_vadc.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  36:../Libraries/XMCLib/src/xmc_vadc.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_vadc.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  39:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-02-15:
  40:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_vadc.c ****  *      
  42:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-02-20:
  43:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Revised for XMC1201 device.<br>
  44:../Libraries/XMCLib/src/xmc_vadc.c ****  *   
  45:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-04-27:
  46:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added new APIs for SHS.<br>
  47:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added New APIs for trigger edge selection.<BR>
  48:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  51:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-06-20:
  52:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  54:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-06-25:
  55:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - BFL configuration in channel initialization fixed.
  56:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  57:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-07-28:
  58:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  59:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  60:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  61:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New APIs Created.
  62:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  63:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  64:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetAlias
  65:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetInputClass
  66:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  67:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  68:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  69:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  70:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  71:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-12-01:
  72:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  73:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  74:../Libraries/XMCLib/src/xmc_vadc.c ****  * @endcond 
  75:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  76:../Libraries/XMCLib/src/xmc_vadc.c ****  */
  77:../Libraries/XMCLib/src/xmc_vadc.c **** 
  78:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
  79:../Libraries/XMCLib/src/xmc_vadc.c ****  * HEADER FILES
  80:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  81:../Libraries/XMCLib/src/xmc_vadc.c **** #include <xmc_vadc.h>
  82:../Libraries/XMCLib/src/xmc_vadc.c **** 
  83:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
  84:../Libraries/XMCLib/src/xmc_vadc.c ****  * MACROS
  85:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  86:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_MAX_ICLASS_SET          (2U)  /**< Defines the maximum number of conversion parame
  87:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_NUM_EMUX_INTERFACES     (2U)  /**< Defines the maximum number of external multiple
  88:../Libraries/XMCLib/src/xmc_vadc.c **** 
  89:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_RESULT_LEFT_ALIGN_10BIT (2U)  /**< Defines the 10 bit converted result register le
  90:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     is used in the XMC_VADC_GLOBAL_SetCompareValue(
  91:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
  92:../Libraries/XMCLib/src/xmc_vadc.c ****  * ENUMS
  93:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  94:../Libraries/XMCLib/src/xmc_vadc.c **** 
  95:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
  96:../Libraries/XMCLib/src/xmc_vadc.c ****  * DATA STRUCTURES
  97:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  98:../Libraries/XMCLib/src/xmc_vadc.c **** 
  99:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 100:../Libraries/XMCLib/src/xmc_vadc.c ****  * GLOBAL DATA
 101:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 102:../Libraries/XMCLib/src/xmc_vadc.c **** 
 103:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 104:../Libraries/XMCLib/src/xmc_vadc.c **** 
 105:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U) 
 106:../Libraries/XMCLib/src/xmc_vadc.c **** static VADC_G_TypeDef *const g_xmc_vadc_group_array[XMC_VADC_MAXIMUM_NUM_GROUPS] = {(VADC_G_TypeDef
 107:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 108:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 109:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 110:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 111:../Libraries/XMCLib/src/xmc_vadc.c **** static VADC_G_TypeDef *const g_xmc_vadc_group_array[XMC_VADC_MAXIMUM_NUM_GROUPS] = {(VADC_G_TypeDef
 112:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 113:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 114:../Libraries/XMCLib/src/xmc_vadc.c **** 
 115:../Libraries/XMCLib/src/xmc_vadc.c **** #endif 
 116:../Libraries/XMCLib/src/xmc_vadc.c **** 
 117:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 118:../Libraries/XMCLib/src/xmc_vadc.c ****  * LOCAL ROUTINES
 119:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 120:../Libraries/XMCLib/src/xmc_vadc.c **** 
 121:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 122:../Libraries/XMCLib/src/xmc_vadc.c ****  * API IMPLEMENTATION
 123:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 124:../Libraries/XMCLib/src/xmc_vadc.c **** 
 125:../Libraries/XMCLib/src/xmc_vadc.c **** /*API to enable the VADC Module*/
 126:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_EnableModule(void)
 127:../Libraries/XMCLib/src/xmc_vadc.c **** {
 455              	 .loc 2 127 0
 456              	 .cfi_startproc
 457              	 
 458              	 
 459 0000 80B5     	 push {r7,lr}
 460              	.LCFI48:
 461              	 .cfi_def_cfa_offset 8
 462              	 .cfi_offset 7,-8
 463              	 .cfi_offset 14,-4
 464 0002 00AF     	 add r7,sp,#0
 465              	.LCFI49:
 466              	 .cfi_def_cfa_register 7
 128:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
 129:../Libraries/XMCLib/src/xmc_vadc.c ****    * Enable Out of Range Comparator for ADC channels pins P2.2to P2.9. This hack is applicable only
 130:../Libraries/XMCLib/src/xmc_vadc.c ****    * and in particular the G11 step.
 131:../Libraries/XMCLib/src/xmc_vadc.c ****    *
 132:../Libraries/XMCLib/src/xmc_vadc.c ****    * Please refer to the XMC1000 Errata sheet V1.4 released 2014-06 Errata ID : ADC_AI.003 Additona
 133:../Libraries/XMCLib/src/xmc_vadc.c ****    * function
 134:../Libraries/XMCLib/src/xmc_vadc.c ****    */
 135:../Libraries/XMCLib/src/xmc_vadc.c **** 
 136:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined (COMPARATOR)
 137:../Libraries/XMCLib/src/xmc_vadc.c ****   COMPARATOR->ORCCTRL = (uint32_t)0xFF;
 138:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 139:../Libraries/XMCLib/src/xmc_vadc.c **** 
 140:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 141:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 467              	 .loc 2 141 0
 468 0004 0120     	 movs r0,#1
 469 0006 FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 142:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 143:../Libraries/XMCLib/src/xmc_vadc.c **** 
 144:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 145:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Reset the Hardware */
 146:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC )
 470              	 .loc 2 146 0
 471 000a 0120     	 movs r0,#1
 472 000c FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 147:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 148:../Libraries/XMCLib/src/xmc_vadc.c **** }
 473              	 .loc 2 148 0
 474 0010 80BD     	 pop {r7,pc}
 475              	 .cfi_endproc
 476              	.LFE222:
 478 0012 00BF     	 .section .text.XMC_VADC_GLOBAL_DisableModule,"ax",%progbits
 479              	 .align 2
 480              	 .global XMC_VADC_GLOBAL_DisableModule
 481              	 .thumb
 482              	 .thumb_func
 484              	XMC_VADC_GLOBAL_DisableModule:
 485              	.LFB223:
 149:../Libraries/XMCLib/src/xmc_vadc.c **** 
 150:../Libraries/XMCLib/src/xmc_vadc.c **** /*API to Disable the VADC Module*/
 151:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_DisableModule(void)
 152:../Libraries/XMCLib/src/xmc_vadc.c **** {
 486              	 .loc 2 152 0
 487              	 .cfi_startproc
 488              	 
 489              	 
 490 0000 80B5     	 push {r7,lr}
 491              	.LCFI50:
 492              	 .cfi_def_cfa_offset 8
 493              	 .cfi_offset 7,-8
 494              	 .cfi_offset 14,-4
 495 0002 00AF     	 add r7,sp,#0
 496              	.LCFI51:
 497              	 .cfi_def_cfa_register 7
 153:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 154:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Reset the Hardware */
 155:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_RESET_AssertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 498              	 .loc 2 155 0
 499 0004 0120     	 movs r0,#1
 500 0006 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 156:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 157:../Libraries/XMCLib/src/xmc_vadc.c **** 
 158:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 159:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 501              	 .loc 2 159 0
 502 000a 0120     	 movs r0,#1
 503 000c FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 160:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 161:../Libraries/XMCLib/src/xmc_vadc.c **** 
 162:../Libraries/XMCLib/src/xmc_vadc.c **** }
 504              	 .loc 2 162 0
 505 0010 80BD     	 pop {r7,pc}
 506              	 .cfi_endproc
 507              	.LFE223:
 509 0012 00BF     	 .section .text.XMC_VADC_GLOBAL_Init,"ax",%progbits
 510              	 .align 2
 511              	 .global XMC_VADC_GLOBAL_Init
 512              	 .thumb
 513              	 .thumb_func
 515              	XMC_VADC_GLOBAL_Init:
 516              	.LFB224:
 163:../Libraries/XMCLib/src/xmc_vadc.c **** 
 164:../Libraries/XMCLib/src/xmc_vadc.c **** 
 165:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize global resources */
 166:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
 167:../Libraries/XMCLib/src/xmc_vadc.c **** {
 517              	 .loc 2 167 0
 518              	 .cfi_startproc
 519              	 
 520              	 
 521 0000 80B5     	 push {r7,lr}
 522              	.LCFI52:
 523              	 .cfi_def_cfa_offset 8
 524              	 .cfi_offset 7,-8
 525              	 .cfi_offset 14,-4
 526 0002 82B0     	 sub sp,sp,#8
 527              	.LCFI53:
 528              	 .cfi_def_cfa_offset 16
 529 0004 00AF     	 add r7,sp,#0
 530              	.LCFI54:
 531              	 .cfi_def_cfa_register 7
 532 0006 7860     	 str r0,[r7,#4]
 533 0008 3960     	 str r1,[r7]
 168:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 0U)
 169:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
 170:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 171:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))
 172:../Libraries/XMCLib/src/xmc_vadc.c **** 
 173:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the VADC module*/
 174:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GLOBAL_EnableModule();
 534              	 .loc 2 174 0
 535 000a FFF7FEFF 	 bl XMC_VADC_GLOBAL_EnableModule
 175:../Libraries/XMCLib/src/xmc_vadc.c **** 
 176:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->CLC = (uint32_t)(config->clc);
 536              	 .loc 2 176 0
 537 000e 3B68     	 ldr r3,[r7]
 538 0010 5A69     	 ldr r2,[r3,#20]
 539 0012 7B68     	 ldr r3,[r7,#4]
 540 0014 1A60     	 str r2,[r3]
 177:../Libraries/XMCLib/src/xmc_vadc.c **** 
 178:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Clock configuration */
 179:../Libraries/XMCLib/src/xmc_vadc.c **** 
 180:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 181:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Ms
 541              	 .loc 2 181 0
 542 0016 3B68     	 ldr r3,[r7]
 543 0018 5B68     	 ldr r3,[r3,#4]
 544 001a 43F40042 	 orr r2,r3,#32768
 545 001e 7B68     	 ldr r3,[r7,#4]
 546 0020 C3F88020 	 str r2,[r3,#128]
 182:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 183:../Libraries/XMCLib/src/xmc_vadc.c **** 
 184:../Libraries/XMCLib/src/xmc_vadc.c ****   /* ICLASS-0 configuration */
 185:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 547              	 .loc 2 185 0
 548 0024 3B68     	 ldr r3,[r7]
 549 0026 9A68     	 ldr r2,[r3,#8]
 550 0028 7B68     	 ldr r3,[r7,#4]
 551 002a C3F8A020 	 str r2,[r3,#160]
 186:../Libraries/XMCLib/src/xmc_vadc.c **** 
 187:../Libraries/XMCLib/src/xmc_vadc.c ****   /* ICLASS-1 configuration */
 188:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 552              	 .loc 2 188 0
 553 002e 3B68     	 ldr r3,[r7]
 554 0030 DA68     	 ldr r2,[r3,#12]
 555 0032 7B68     	 ldr r3,[r7,#4]
 556 0034 C3F8A420 	 str r2,[r3,#164]
 189:../Libraries/XMCLib/src/xmc_vadc.c **** 
 190:../Libraries/XMCLib/src/xmc_vadc.c **** 
 191:../Libraries/XMCLib/src/xmc_vadc.c ****   /*Result generation related configuration */
 192:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 557              	 .loc 2 192 0
 558 0038 3B68     	 ldr r3,[r7]
 559 003a 1A69     	 ldr r2,[r3,#16]
 560 003c 7B68     	 ldr r3,[r7,#4]
 561 003e C3F88022 	 str r2,[r3,#640]
 193:../Libraries/XMCLib/src/xmc_vadc.c **** 
 194:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
 195:../Libraries/XMCLib/src/xmc_vadc.c **** 
 196:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Boundaries */
 197:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 562              	 .loc 2 197 0
 563 0042 3B68     	 ldr r3,[r7]
 564 0044 1A68     	 ldr r2,[r3]
 565 0046 7B68     	 ldr r3,[r7,#4]
 566 0048 C3F8B820 	 str r2,[r3,#184]
 198:../Libraries/XMCLib/src/xmc_vadc.c **** 
 199:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 200:../Libraries/XMCLib/src/xmc_vadc.c **** 
 201:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Configure the SHS register that are needed for XMC11xx devices*/
 202:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 0U)
 203:../Libraries/XMCLib/src/xmc_vadc.c **** 
 204:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enabling the Analog part of the converter*/
 205:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = SHS0->SHSCFG  | SHS_SHSCFG_SCWC_Msk;
 206:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~(SHS_SHSCFG_ANOFF_Msk);
 207:../Libraries/XMCLib/src/xmc_vadc.c ****   SHS0->SHSCFG = reg;
 208:../Libraries/XMCLib/src/xmc_vadc.c **** 
 209:../Libraries/XMCLib/src/xmc_vadc.c ****   /* From the Errata sheet of XMC1100 V1.7*/
 210:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
 211:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 212:../Libraries/XMCLib/src/xmc_vadc.c **** 
 213:../Libraries/XMCLib/src/xmc_vadc.c **** }
 567              	 .loc 2 213 0
 568 004c 0837     	 adds r7,r7,#8
 569              	.LCFI55:
 570              	 .cfi_def_cfa_offset 8
 571 004e BD46     	 mov sp,r7
 572              	.LCFI56:
 573              	 .cfi_def_cfa_register 13
 574              	 
 575 0050 80BD     	 pop {r7,pc}
 576              	 .cfi_endproc
 577              	.LFE224:
 579 0052 00BF     	 .section .text.XMC_VADC_GLOBAL_InputClassInit,"ax",%progbits
 580              	 .align 2
 581              	 .global XMC_VADC_GLOBAL_InputClassInit
 582              	 .thumb
 583              	 .thumb_func
 585              	XMC_VADC_GLOBAL_InputClassInit:
 586              	.LFB225:
 214:../Libraries/XMCLib/src/xmc_vadc.c **** 
 215:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to Set the Global IClass registers*/
 216:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
 217:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
 218:../Libraries/XMCLib/src/xmc_vadc.c **** {
 587              	 .loc 2 218 0
 588              	 .cfi_startproc
 589              	 
 590              	 
 591              	 
 592 0000 80B4     	 push {r7}
 593              	.LCFI57:
 594              	 .cfi_def_cfa_offset 4
 595              	 .cfi_offset 7,-4
 596 0002 85B0     	 sub sp,sp,#20
 597              	.LCFI58:
 598              	 .cfi_def_cfa_offset 24
 599 0004 00AF     	 add r7,sp,#0
 600              	.LCFI59:
 601              	 .cfi_def_cfa_register 7
 602 0006 F860     	 str r0,[r7,#12]
 603 0008 B960     	 str r1,[r7,#8]
 604 000a 3B60     	 str r3,[r7]
 605 000c 1346     	 mov r3,r2
 606 000e FB71     	 strb r3,[r7,#7]
 219:../Libraries/XMCLib/src/xmc_vadc.c **** 
 220:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
 221:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP
 222:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLA
 223:../Libraries/XMCLib/src/xmc_vadc.c **** 
 224:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 225:../Libraries/XMCLib/src/xmc_vadc.c ****   if (conv_type == XMC_VADC_GROUP_CONV_STD )
 607              	 .loc 2 225 0
 608 0010 FB79     	 ldrb r3,[r7,#7]
 609 0012 002B     	 cmp r3,#0
 610 0014 09D1     	 bne .L14
 226:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 227:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 228:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->GLOBICLASS[set_num] = config.globiclass &
 611              	 .loc 2 228 0
 612 0016 BA68     	 ldr r2,[r7,#8]
 613 0018 40F21F73 	 movw r3,#1823
 614 001c 1340     	 ands r3,r3,r2
 615 001e FA68     	 ldr r2,[r7,#12]
 616 0020 3968     	 ldr r1,[r7]
 617 0022 2831     	 adds r1,r1,#40
 618 0024 42F82130 	 str r3,[r2,r1,lsl#2]
 619 0028 07E0     	 b .L13
 620              	.L14:
 229:../Libraries/XMCLib/src/xmc_vadc.c ****                                       (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk
 230:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 231:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 232:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 233:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 234:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC
 621              	 .loc 2 234 0
 622 002a BA68     	 ldr r2,[r7,#8]
 623 002c 054B     	 ldr r3,.L16
 624 002e 1340     	 ands r3,r3,r2
 625 0030 FA68     	 ldr r2,[r7,#12]
 626 0032 3968     	 ldr r1,[r7]
 627 0034 2831     	 adds r1,r1,#40
 628 0036 42F82130 	 str r3,[r2,r1,lsl#2]
 629              	.L13:
 235:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 236:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 237:../Libraries/XMCLib/src/xmc_vadc.c **** }
 630              	 .loc 2 237 0
 631 003a 1437     	 adds r7,r7,#20
 632              	.LCFI60:
 633              	 .cfi_def_cfa_offset 4
 634 003c BD46     	 mov sp,r7
 635              	.LCFI61:
 636              	 .cfi_def_cfa_register 13
 637              	 
 638 003e 5DF8047B 	 ldr r7,[sp],#4
 639              	.LCFI62:
 640              	 .cfi_restore 7
 641              	 .cfi_def_cfa_offset 0
 642 0042 7047     	 bx lr
 643              	.L17:
 644              	 .align 2
 645              	.L16:
 646 0044 00001F07 	 .word 119472128
 647              	 .cfi_endproc
 648              	.LFE225:
 650              	 .section .text.XMC_VADC_GLOBAL_StartupCalibration,"ax",%progbits
 651              	 .align 2
 652              	 .global XMC_VADC_GLOBAL_StartupCalibration
 653              	 .thumb
 654              	 .thumb_func
 656              	XMC_VADC_GLOBAL_StartupCalibration:
 657              	.LFB226:
 238:../Libraries/XMCLib/src/xmc_vadc.c **** 
 239:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable startup calibration feature */
 240:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
 241:../Libraries/XMCLib/src/xmc_vadc.c **** {
 658              	 .loc 2 241 0
 659              	 .cfi_startproc
 660              	 
 661              	 
 662              	 
 663 0000 80B4     	 push {r7}
 664              	.LCFI63:
 665              	 .cfi_def_cfa_offset 4
 666              	 .cfi_offset 7,-4
 667 0002 85B0     	 sub sp,sp,#20
 668              	.LCFI64:
 669              	 .cfi_def_cfa_offset 24
 670 0004 00AF     	 add r7,sp,#0
 671              	.LCFI65:
 672              	 .cfi_def_cfa_register 7
 673 0006 7860     	 str r0,[r7,#4]
 242:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 243:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t i;
 244:../Libraries/XMCLib/src/xmc_vadc.c ****   VADC_G_TypeDef *group_ptr;
 245:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 246:../Libraries/XMCLib/src/xmc_vadc.c ****   
 247:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))
 248:../Libraries/XMCLib/src/xmc_vadc.c **** 
 249:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 674              	 .loc 2 249 0
 675 0008 7B68     	 ldr r3,[r7,#4]
 676 000a D3F88030 	 ldr r3,[r3,#128]
 677 000e 43F00042 	 orr r2,r3,#-2147483648
 678 0012 7B68     	 ldr r3,[r7,#4]
 679 0014 C3F88020 	 str r2,[r3,#128]
 250:../Libraries/XMCLib/src/xmc_vadc.c **** 
 251:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 252:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop until all active groups finish calibration */
 253:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 680              	 .loc 2 253 0
 681 0018 0023     	 movs r3,#0
 682 001a FB73     	 strb r3,[r7,#15]
 683 001c 16E0     	 b .L19
 684              	.L22:
 254:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 255:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr = g_xmc_vadc_group_array[i];
 685              	 .loc 2 255 0
 686 001e FB7B     	 ldrb r3,[r7,#15]
 687 0020 0E4A     	 ldr r2,.L23
 688 0022 52F82330 	 ldr r3,[r2,r3,lsl#2]
 689 0026 BB60     	 str r3,[r7,#8]
 256:../Libraries/XMCLib/src/xmc_vadc.c ****     if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 690              	 .loc 2 256 0
 691 0028 BB68     	 ldr r3,[r7,#8]
 692 002a D3F88030 	 ldr r3,[r3,#128]
 693 002e 03F44033 	 and r3,r3,#196608
 694 0032 002B     	 cmp r3,#0
 695 0034 07D0     	 beq .L20
 257:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 258:../Libraries/XMCLib/src/xmc_vadc.c ****       /* This group is active. Loop until it finishes calibration */
 259:../Libraries/XMCLib/src/xmc_vadc.c ****       while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 696              	 .loc 2 259 0
 697 0036 00BF     	 nop
 698              	.L21:
 699              	 .loc 2 259 0 is_stmt 0 discriminator 1
 700 0038 BB68     	 ldr r3,[r7,#8]
 701 003a D3F88030 	 ldr r3,[r3,#128]
 702 003e 03F08053 	 and r3,r3,#268435456
 703 0042 002B     	 cmp r3,#0
 704 0044 F8D1     	 bne .L21
 705              	.L20:
 253:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 706              	 .loc 2 253 0 is_stmt 1 discriminator 2
 707 0046 FB7B     	 ldrb r3,[r7,#15]
 708 0048 0133     	 adds r3,r3,#1
 709 004a FB73     	 strb r3,[r7,#15]
 710              	.L19:
 253:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 711              	 .loc 2 253 0 is_stmt 0 discriminator 1
 712 004c FB7B     	 ldrb r3,[r7,#15]
 713 004e 032B     	 cmp r3,#3
 714 0050 E5D9     	 bls .L22
 260:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 261:../Libraries/XMCLib/src/xmc_vadc.c ****         /* NOP */
 262:../Libraries/XMCLib/src/xmc_vadc.c ****       }
 263:../Libraries/XMCLib/src/xmc_vadc.c ****     }
 264:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 265:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 266:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop until it finishes calibration */
 267:../Libraries/XMCLib/src/xmc_vadc.c ****   while ((((SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) >> (uint32_t)SHS_SHSCFG_STATE_Pos) ==
 268:../Libraries/XMCLib/src/xmc_vadc.c ****          XMC_VADC_SHS_START_UP_CAL_ACTIVE )
 269:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 270:../Libraries/XMCLib/src/xmc_vadc.c ****     /* NOP */
 271:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 272:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 273:../Libraries/XMCLib/src/xmc_vadc.c **** }
 715              	 .loc 2 273 0 is_stmt 1
 716 0052 1437     	 adds r7,r7,#20
 717              	.LCFI66:
 718              	 .cfi_def_cfa_offset 4
 719 0054 BD46     	 mov sp,r7
 720              	.LCFI67:
 721              	 .cfi_def_cfa_register 13
 722              	 
 723 0056 5DF8047B 	 ldr r7,[sp],#4
 724              	.LCFI68:
 725              	 .cfi_restore 7
 726              	 .cfi_def_cfa_offset 0
 727 005a 7047     	 bx lr
 728              	.L24:
 729              	 .align 2
 730              	.L23:
 731 005c 00000000 	 .word g_xmc_vadc_group_array
 732              	 .cfi_endproc
 733              	.LFE226:
 735              	 .section .text.XMC_VADC_GLOBAL_SetBoundaries,"ax",%progbits
 736              	 .align 2
 737              	 .global XMC_VADC_GLOBAL_SetBoundaries
 738              	 .thumb
 739              	 .thumb_func
 741              	XMC_VADC_GLOBAL_SetBoundaries:
 742              	.LFB227:
 274:../Libraries/XMCLib/src/xmc_vadc.c **** 
 275:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set boudaries for result of conversion. Should the boundaries be violated, interrupts are
 276:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
 277:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr,
 278:../Libraries/XMCLib/src/xmc_vadc.c ****                                    const uint32_t boundary0,
 279:../Libraries/XMCLib/src/xmc_vadc.c ****                                    const uint32_t boundary1)
 280:../Libraries/XMCLib/src/xmc_vadc.c **** {
 743              	 .loc 2 280 0
 744              	 .cfi_startproc
 745              	 
 746              	 
 747              	 
 748 0000 80B4     	 push {r7}
 749              	.LCFI69:
 750              	 .cfi_def_cfa_offset 4
 751              	 .cfi_offset 7,-4
 752 0002 87B0     	 sub sp,sp,#28
 753              	.LCFI70:
 754              	 .cfi_def_cfa_offset 32
 755 0004 00AF     	 add r7,sp,#0
 756              	.LCFI71:
 757              	 .cfi_def_cfa_register 7
 758 0006 F860     	 str r0,[r7,#12]
 759 0008 B960     	 str r1,[r7,#8]
 760 000a 7A60     	 str r2,[r7,#4]
 281:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t globbound;
 282:../Libraries/XMCLib/src/xmc_vadc.c **** 
 283:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Module Pointer", (global_ptr == VADC))
 284:../Libraries/XMCLib/src/xmc_vadc.c **** 
 285:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound = 0U;
 761              	 .loc 2 285 0
 762 000c 0023     	 movs r3,#0
 763 000e 7B61     	 str r3,[r7,#20]
 286:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound |= (uint32_t) (boundary0 << VADC_GLOBBOUND_BOUNDARY0_Pos);
 764              	 .loc 2 286 0
 765 0010 7A69     	 ldr r2,[r7,#20]
 766 0012 BB68     	 ldr r3,[r7,#8]
 767 0014 1343     	 orrs r3,r3,r2
 768 0016 7B61     	 str r3,[r7,#20]
 287:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound |= (uint32_t) (boundary1 << VADC_GLOBBOUND_BOUNDARY1_Pos);
 769              	 .loc 2 287 0
 770 0018 7B68     	 ldr r3,[r7,#4]
 771 001a 1B04     	 lsls r3,r3,#16
 772 001c 7A69     	 ldr r2,[r7,#20]
 773 001e 1343     	 orrs r3,r3,r2
 774 0020 7B61     	 str r3,[r7,#20]
 288:../Libraries/XMCLib/src/xmc_vadc.c **** 
 289:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = globbound;
 775              	 .loc 2 289 0
 776 0022 FB68     	 ldr r3,[r7,#12]
 777 0024 7A69     	 ldr r2,[r7,#20]
 778 0026 C3F8B820 	 str r2,[r3,#184]
 290:../Libraries/XMCLib/src/xmc_vadc.c **** }
 779              	 .loc 2 290 0
 780 002a 1C37     	 adds r7,r7,#28
 781              	.LCFI72:
 782              	 .cfi_def_cfa_offset 4
 783 002c BD46     	 mov sp,r7
 784              	.LCFI73:
 785              	 .cfi_def_cfa_register 13
 786              	 
 787 002e 5DF8047B 	 ldr r7,[sp],#4
 788              	.LCFI74:
 789              	 .cfi_restore 7
 790              	 .cfi_def_cfa_offset 0
 791 0032 7047     	 bx lr
 792              	 .cfi_endproc
 793              	.LFE227:
 795              	 .section .text.XMC_VADC_GLOBAL_SetIndividualBoundary,"ax",%progbits
 796              	 .align 2
 797              	 .global XMC_VADC_GLOBAL_SetIndividualBoundary
 798              	 .thumb
 799              	 .thumb_func
 801              	XMC_VADC_GLOBAL_SetIndividualBoundary:
 802              	.LFB228:
 291:../Libraries/XMCLib/src/xmc_vadc.c **** 
 292:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an individual boundary for conversion results */
 293:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
 294:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const XMC_VADC_CHANNEL_BOUNDARY_t selection,
 295:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const uint16_t boundary_value)
 296:../Libraries/XMCLib/src/xmc_vadc.c **** {
 803              	 .loc 2 296 0
 804              	 .cfi_startproc
 805              	 
 806              	 
 807              	 
 808 0000 80B4     	 push {r7}
 809              	.LCFI75:
 810              	 .cfi_def_cfa_offset 4
 811              	 .cfi_offset 7,-4
 812 0002 85B0     	 sub sp,sp,#20
 813              	.LCFI76:
 814              	 .cfi_def_cfa_offset 24
 815 0004 00AF     	 add r7,sp,#0
 816              	.LCFI77:
 817              	 .cfi_def_cfa_register 7
 818 0006 7860     	 str r0,[r7,#4]
 819 0008 0B46     	 mov r3,r1
 820 000a FB70     	 strb r3,[r7,#3]
 821 000c 1346     	 mov r3,r2
 822 000e 3B80     	 strh r3,[r7]
 297:../Libraries/XMCLib/src/xmc_vadc.c **** 
 298:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t globbound;
 299:../Libraries/XMCLib/src/xmc_vadc.c **** 
 300:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Module Pointer", (global_ptr == VADC))
 301:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Boundary Selection",
 302:../Libraries/XMCLib/src/xmc_vadc.c ****              ((XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0 == selection) ||
 303:../Libraries/XMCLib/src/xmc_vadc.c ****               (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1 == selection)))
 304:../Libraries/XMCLib/src/xmc_vadc.c **** 
 305:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 306:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound = global_ptr->GLOBBOUND;
 823              	 .loc 2 306 0
 824 0010 7B68     	 ldr r3,[r7,#4]
 825 0012 D3F8B830 	 ldr r3,[r3,#184]
 826 0016 FB60     	 str r3,[r7,#12]
 307:../Libraries/XMCLib/src/xmc_vadc.c **** 
 308:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0 == selection)
 827              	 .loc 2 308 0
 828 0018 FB78     	 ldrb r3,[r7,#3]
 829 001a 022B     	 cmp r3,#2
 830 001c 0AD1     	 bne .L27
 309:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 310:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound &= ~((uint32_t) VADC_GLOBBOUND_BOUNDARY0_Msk);
 831              	 .loc 2 310 0
 832 001e FB68     	 ldr r3,[r7,#12]
 833 0020 23F47F63 	 bic r3,r3,#4080
 834 0024 23F00F03 	 bic r3,r3,#15
 835 0028 FB60     	 str r3,[r7,#12]
 311:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY0_Pos);
 836              	 .loc 2 311 0
 837 002a 3B88     	 ldrh r3,[r7]
 838 002c FA68     	 ldr r2,[r7,#12]
 839 002e 1343     	 orrs r3,r3,r2
 840 0030 FB60     	 str r3,[r7,#12]
 841 0032 0DE0     	 b .L28
 842              	.L27:
 312:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 313:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1 == selection)
 843              	 .loc 2 313 0
 844 0034 FB78     	 ldrb r3,[r7,#3]
 845 0036 032B     	 cmp r3,#3
 846 0038 0AD1     	 bne .L28
 314:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 315:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound &= ~((uint32_t) VADC_GLOBBOUND_BOUNDARY1_Msk);
 847              	 .loc 2 315 0
 848 003a FB68     	 ldr r3,[r7,#12]
 849 003c 23F07F63 	 bic r3,r3,#267386880
 850 0040 23F47023 	 bic r3,r3,#983040
 851 0044 FB60     	 str r3,[r7,#12]
 316:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY1_Pos);
 852              	 .loc 2 316 0
 853 0046 3B88     	 ldrh r3,[r7]
 854 0048 1B04     	 lsls r3,r3,#16
 855 004a FA68     	 ldr r2,[r7,#12]
 856 004c 1343     	 orrs r3,r3,r2
 857 004e FB60     	 str r3,[r7,#12]
 858              	.L28:
 317:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 318:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 319:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 320:../Libraries/XMCLib/src/xmc_vadc.c ****     /* For MISRA*/
 321:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 322:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = globbound;
 859              	 .loc 2 322 0
 860 0050 7B68     	 ldr r3,[r7,#4]
 861 0052 FA68     	 ldr r2,[r7,#12]
 862 0054 C3F8B820 	 str r2,[r3,#184]
 323:../Libraries/XMCLib/src/xmc_vadc.c **** 
 324:../Libraries/XMCLib/src/xmc_vadc.c **** }
 863              	 .loc 2 324 0
 864 0058 1437     	 adds r7,r7,#20
 865              	.LCFI78:
 866              	 .cfi_def_cfa_offset 4
 867 005a BD46     	 mov sp,r7
 868              	.LCFI79:
 869              	 .cfi_def_cfa_register 13
 870              	 
 871 005c 5DF8047B 	 ldr r7,[sp],#4
 872              	.LCFI80:
 873              	 .cfi_restore 7
 874              	 .cfi_def_cfa_offset 0
 875 0060 7047     	 bx lr
 876              	 .cfi_endproc
 877              	.LFE228:
 879 0062 00BF     	 .section .text.XMC_VADC_GLOBAL_SetCompareValue,"ax",%progbits
 880              	 .align 2
 881              	 .global XMC_VADC_GLOBAL_SetCompareValue
 882              	 .thumb
 883              	 .thumb_func
 885              	XMC_VADC_GLOBAL_SetCompareValue:
 886              	.LFB229:
 325:../Libraries/XMCLib/src/xmc_vadc.c **** 
 326:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 327:../Libraries/XMCLib/src/xmc_vadc.c **** 
 328:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set compare value for the result register. Result of conversion is compared against this 
 329:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
 330:../Libraries/XMCLib/src/xmc_vadc.c **** {
 887              	 .loc 2 330 0
 888              	 .cfi_startproc
 889              	 
 890              	 
 891              	 
 892 0000 80B4     	 push {r7}
 893              	.LCFI81:
 894              	 .cfi_def_cfa_offset 4
 895              	 .cfi_offset 7,-4
 896 0002 83B0     	 sub sp,sp,#12
 897              	.LCFI82:
 898              	 .cfi_def_cfa_offset 16
 899 0004 00AF     	 add r7,sp,#0
 900              	.LCFI83:
 901              	 .cfi_def_cfa_register 7
 902 0006 7860     	 str r0,[r7,#4]
 903 0008 0B46     	 mov r3,r1
 904 000a 7B80     	 strh r3,[r7,#2]
 331:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetCompareValue:Wrong Module Pointer", (global_ptr == VADC))
 332:../Libraries/XMCLib/src/xmc_vadc.c **** 
 333:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRES &= ~((uint32_t)VADC_GLOBRES_RESULT_Msk);
 905              	 .loc 2 333 0
 906 000c 7B68     	 ldr r3,[r7,#4]
 907 000e D3F80033 	 ldr r3,[r3,#768]
 908 0012 1B0C     	 lsrs r3,r3,#16
 909 0014 1B04     	 lsls r3,r3,#16
 910 0016 7A68     	 ldr r2,[r7,#4]
 911 0018 C2F80033 	 str r3,[r2,#768]
 334:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRES |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 912              	 .loc 2 334 0
 913 001c 7B68     	 ldr r3,[r7,#4]
 914 001e D3F80023 	 ldr r2,[r3,#768]
 915 0022 7B88     	 ldrh r3,[r7,#2]
 916 0024 9B00     	 lsls r3,r3,#2
 917 0026 1A43     	 orrs r2,r2,r3
 918 0028 7B68     	 ldr r3,[r7,#4]
 919 002a C3F80023 	 str r2,[r3,#768]
 335:../Libraries/XMCLib/src/xmc_vadc.c **** }
 920              	 .loc 2 335 0
 921 002e 0C37     	 adds r7,r7,#12
 922              	.LCFI84:
 923              	 .cfi_def_cfa_offset 4
 924 0030 BD46     	 mov sp,r7
 925              	.LCFI85:
 926              	 .cfi_def_cfa_register 13
 927              	 
 928 0032 5DF8047B 	 ldr r7,[sp],#4
 929              	.LCFI86:
 930              	 .cfi_restore 7
 931              	 .cfi_def_cfa_offset 0
 932 0036 7047     	 bx lr
 933              	 .cfi_endproc
 934              	.LFE229:
 936              	 .section .text.XMC_VADC_GLOBAL_GetCompareResult,"ax",%progbits
 937              	 .align 2
 938              	 .global XMC_VADC_GLOBAL_GetCompareResult
 939              	 .thumb
 940              	 .thumb_func
 942              	XMC_VADC_GLOBAL_GetCompareResult:
 943              	.LFB230:
 336:../Libraries/XMCLib/src/xmc_vadc.c **** 
 337:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result of comparison */
 338:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr)
 339:../Libraries/XMCLib/src/xmc_vadc.c **** {
 944              	 .loc 2 339 0
 945              	 .cfi_startproc
 946              	 
 947              	 
 948              	 
 949 0000 80B4     	 push {r7}
 950              	.LCFI87:
 951              	 .cfi_def_cfa_offset 4
 952              	 .cfi_offset 7,-4
 953 0002 85B0     	 sub sp,sp,#20
 954              	.LCFI88:
 955              	 .cfi_def_cfa_offset 24
 956 0004 00AF     	 add r7,sp,#0
 957              	.LCFI89:
 958              	 .cfi_def_cfa_register 7
 959 0006 7860     	 str r0,[r7,#4]
 340:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_FAST_COMPARE_t result;
 341:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
 342:../Libraries/XMCLib/src/xmc_vadc.c **** 
 343:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetCompareResult:Wrong Module Pointer", (global_ptr == VADC))
 344:../Libraries/XMCLib/src/xmc_vadc.c **** 
 345:../Libraries/XMCLib/src/xmc_vadc.c ****   res = global_ptr->GLOBRES;
 960              	 .loc 2 345 0
 961 0008 7B68     	 ldr r3,[r7,#4]
 962 000a D3F80033 	 ldr r3,[r3,#768]
 963 000e BB60     	 str r3,[r7,#8]
 346:../Libraries/XMCLib/src/xmc_vadc.c **** 
 347:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res & (uint32_t)VADC_GLOBRES_VF_Msk)
 964              	 .loc 2 347 0
 965 0010 BB68     	 ldr r3,[r7,#8]
 966 0012 002B     	 cmp r3,#0
 967 0014 06DA     	 bge .L31
 348:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 349:../Libraries/XMCLib/src/xmc_vadc.c ****     result = (XMC_VADC_FAST_COMPARE_t)((uint32_t)(res >> (uint32_t)VADC_GLOBRES_FCR_Pos) & (uint32_
 968              	 .loc 2 349 0
 969 0016 BB68     	 ldr r3,[r7,#8]
 970 0018 9B0F     	 lsrs r3,r3,#30
 971 001a DBB2     	 uxtb r3,r3
 972 001c 03F00103 	 and r3,r3,#1
 973 0020 FB73     	 strb r3,[r7,#15]
 974 0022 01E0     	 b .L32
 975              	.L31:
 350:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 351:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 352:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 353:../Libraries/XMCLib/src/xmc_vadc.c ****     result = XMC_VADC_FAST_COMPARE_UNKNOWN;
 976              	 .loc 2 353 0
 977 0024 0223     	 movs r3,#2
 978 0026 FB73     	 strb r3,[r7,#15]
 979              	.L32:
 354:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 355:../Libraries/XMCLib/src/xmc_vadc.c **** 
 356:../Libraries/XMCLib/src/xmc_vadc.c ****   return result;
 980              	 .loc 2 356 0
 981 0028 FB7B     	 ldrb r3,[r7,#15]
 357:../Libraries/XMCLib/src/xmc_vadc.c **** }
 982              	 .loc 2 357 0
 983 002a 1846     	 mov r0,r3
 984 002c 1437     	 adds r7,r7,#20
 985              	.LCFI90:
 986              	 .cfi_def_cfa_offset 4
 987 002e BD46     	 mov sp,r7
 988              	.LCFI91:
 989              	 .cfi_def_cfa_register 13
 990              	 
 991 0030 5DF8047B 	 ldr r7,[sp],#4
 992              	.LCFI92:
 993              	 .cfi_restore 7
 994              	 .cfi_def_cfa_offset 0
 995 0034 7047     	 bx lr
 996              	 .cfi_endproc
 997              	.LFE230:
 999 0036 00BF     	 .section .text.XMC_VADC_GLOBAL_BindGroupToEMux,"ax",%progbits
 1000              	 .align 2
 1001              	 .global XMC_VADC_GLOBAL_BindGroupToEMux
 1002              	 .thumb
 1003              	 .thumb_func
 1005              	XMC_VADC_GLOBAL_BindGroupToEMux:
 1006              	.LFB231:
 358:../Libraries/XMCLib/src/xmc_vadc.c **** 
 359:../Libraries/XMCLib/src/xmc_vadc.c **** /* Bind one of the four groups to one of the two EMUX interfaces */
 360:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_EMUX_AVAILABLE == 1U)
 361:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
 362:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1007              	 .loc 2 362 0
 1008              	 .cfi_startproc
 1009              	 
 1010              	 
 1011              	 
 1012 0000 80B4     	 push {r7}
 1013              	.LCFI93:
 1014              	 .cfi_def_cfa_offset 4
 1015              	 .cfi_offset 7,-4
 1016 0002 87B0     	 sub sp,sp,#28
 1017              	.LCFI94:
 1018              	 .cfi_def_cfa_offset 32
 1019 0004 00AF     	 add r7,sp,#0
 1020              	.LCFI95:
 1021              	 .cfi_def_cfa_register 7
 1022 0006 F860     	 str r0,[r7,#12]
 1023 0008 B960     	 str r1,[r7,#8]
 1024 000a 7A60     	 str r2,[r7,#4]
 363:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
 364:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t pos;
 365:../Libraries/XMCLib/src/xmc_vadc.c **** 
 366:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong Module Pointer", (global_ptr == VADC))
 367:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong EMUX Group", (emuxif < XMC_VADC_NUM_EMUX_INTERF
 368:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong VADC Group", (group < XMC_VADC_MAXIMUM_NUM_GROU
 369:../Libraries/XMCLib/src/xmc_vadc.c **** 
 370:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == emuxif)
 1025              	 .loc 2 370 0
 1026 000c BB68     	 ldr r3,[r7,#8]
 1027 000e 002B     	 cmp r3,#0
 1028 0010 04D1     	 bne .L35
 371:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 372:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t)VADC_EMUXSEL_EMUXGRP0_Pos;
 1029              	 .loc 2 372 0
 1030 0012 0023     	 movs r3,#0
 1031 0014 3B61     	 str r3,[r7,#16]
 373:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)VADC_EMUXSEL_EMUXGRP0_Msk;
 1032              	 .loc 2 373 0
 1033 0016 0F23     	 movs r3,#15
 1034 0018 7B61     	 str r3,[r7,#20]
 1035 001a 03E0     	 b .L36
 1036              	.L35:
 374:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 375:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 376:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 377:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t)VADC_EMUXSEL_EMUXGRP1_Pos;
 1037              	 .loc 2 377 0
 1038 001c 0423     	 movs r3,#4
 1039 001e 3B61     	 str r3,[r7,#16]
 378:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)VADC_EMUXSEL_EMUXGRP1_Msk;
 1040              	 .loc 2 378 0
 1041 0020 F023     	 movs r3,#240
 1042 0022 7B61     	 str r3,[r7,#20]
 1043              	.L36:
 379:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 380:../Libraries/XMCLib/src/xmc_vadc.c **** 
 381:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->EMUXSEL &= ~(mask);
 1044              	 .loc 2 381 0
 1045 0024 FB68     	 ldr r3,[r7,#12]
 1046 0026 D3F8F023 	 ldr r2,[r3,#1008]
 1047 002a 7B69     	 ldr r3,[r7,#20]
 1048 002c DB43     	 mvns r3,r3
 1049 002e 1A40     	 ands r2,r2,r3
 1050 0030 FB68     	 ldr r3,[r7,#12]
 1051 0032 C3F8F023 	 str r2,[r3,#1008]
 382:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->EMUXSEL |= (uint32_t) (group << pos);
 1052              	 .loc 2 382 0
 1053 0036 FB68     	 ldr r3,[r7,#12]
 1054 0038 D3F8F023 	 ldr r2,[r3,#1008]
 1055 003c 3B69     	 ldr r3,[r7,#16]
 1056 003e 7968     	 ldr r1,[r7,#4]
 1057 0040 01FA03F3 	 lsl r3,r1,r3
 1058 0044 1A43     	 orrs r2,r2,r3
 1059 0046 FB68     	 ldr r3,[r7,#12]
 1060 0048 C3F8F023 	 str r2,[r3,#1008]
 383:../Libraries/XMCLib/src/xmc_vadc.c **** 
 384:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1061              	 .loc 2 384 0
 1062 004c 1C37     	 adds r7,r7,#28
 1063              	.LCFI96:
 1064              	 .cfi_def_cfa_offset 4
 1065 004e BD46     	 mov sp,r7
 1066              	.LCFI97:
 1067              	 .cfi_def_cfa_register 13
 1068              	 
 1069 0050 5DF8047B 	 ldr r7,[sp],#4
 1070              	.LCFI98:
 1071              	 .cfi_restore 7
 1072              	 .cfi_def_cfa_offset 0
 1073 0054 7047     	 bx lr
 1074              	 .cfi_endproc
 1075              	.LFE231:
 1077 0056 00BF     	 .section .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode,"ax",%progbits
 1078              	 .align 2
 1079              	 .global XMC_VADC_GLOBAL_SetResultEventInterruptNode
 1080              	 .thumb
 1081              	 .thumb_func
 1083              	XMC_VADC_GLOBAL_SetResultEventInterruptNode:
 1084              	.LFB232:
 385:../Libraries/XMCLib/src/xmc_vadc.c **** #endif 
 386:../Libraries/XMCLib/src/xmc_vadc.c **** 
 387:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind result event with a service request line */
 388:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
 389:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1085              	 .loc 2 389 0
 1086              	 .cfi_startproc
 1087              	 
 1088              	 
 1089              	 
 1090 0000 80B4     	 push {r7}
 1091              	.LCFI99:
 1092              	 .cfi_def_cfa_offset 4
 1093              	 .cfi_offset 7,-4
 1094 0002 85B0     	 sub sp,sp,#20
 1095              	.LCFI100:
 1096              	 .cfi_def_cfa_offset 24
 1097 0004 00AF     	 add r7,sp,#0
 1098              	.LCFI101:
 1099              	 .cfi_def_cfa_register 7
 1100 0006 7860     	 str r0,[r7,#4]
 1101 0008 0B46     	 mov r3,r1
 1102 000a FB70     	 strb r3,[r7,#3]
 390:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t node;
 391:../Libraries/XMCLib/src/xmc_vadc.c ****   
 392:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong Module Pointer", (global_ptr == VAD
 393:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong SR Number", (sr <= XMC_VADC_SR_SHAR
 394:../Libraries/XMCLib/src/xmc_vadc.c **** 
 395:../Libraries/XMCLib/src/xmc_vadc.c ****   if (sr >= XMC_VADC_SR_SHARED_SR0)
 1103              	 .loc 2 395 0
 1104 000c FB78     	 ldrb r3,[r7,#3]
 1105 000e 032B     	 cmp r3,#3
 1106 0010 03D9     	 bls .L38
 396:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 397:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 1107              	 .loc 2 397 0
 1108 0012 FB78     	 ldrb r3,[r7,#3]
 1109 0014 043B     	 subs r3,r3,#4
 1110 0016 FB60     	 str r3,[r7,#12]
 1111 0018 01E0     	 b .L39
 1112              	.L38:
 398:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 399:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 400:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 401:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr;
 1113              	 .loc 2 401 0
 1114 001a FB78     	 ldrb r3,[r7,#3]
 1115 001c FB60     	 str r3,[r7,#12]
 1116              	.L39:
 402:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 403:../Libraries/XMCLib/src/xmc_vadc.c **** 
 404:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_REV0NP_Msk);
 1117              	 .loc 2 404 0
 1118 001e 7B68     	 ldr r3,[r7,#4]
 1119 0020 D3F84031 	 ldr r3,[r3,#320]
 1120 0024 23F47022 	 bic r2,r3,#983040
 1121 0028 7B68     	 ldr r3,[r7,#4]
 1122 002a C3F84021 	 str r2,[r3,#320]
 405:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
 1123              	 .loc 2 405 0
 1124 002e 7B68     	 ldr r3,[r7,#4]
 1125 0030 D3F84021 	 ldr r2,[r3,#320]
 1126 0034 FB68     	 ldr r3,[r7,#12]
 1127 0036 1B04     	 lsls r3,r3,#16
 1128 0038 1A43     	 orrs r2,r2,r3
 1129 003a 7B68     	 ldr r3,[r7,#4]
 1130 003c C3F84021 	 str r2,[r3,#320]
 406:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1131              	 .loc 2 406 0
 1132 0040 1437     	 adds r7,r7,#20
 1133              	.LCFI102:
 1134              	 .cfi_def_cfa_offset 4
 1135 0042 BD46     	 mov sp,r7
 1136              	.LCFI103:
 1137              	 .cfi_def_cfa_register 13
 1138              	 
 1139 0044 5DF8047B 	 ldr r7,[sp],#4
 1140              	.LCFI104:
 1141              	 .cfi_restore 7
 1142              	 .cfi_def_cfa_offset 0
 1143 0048 7047     	 bx lr
 1144              	 .cfi_endproc
 1145              	.LFE232:
 1147 004a 00BF     	 .section .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode,"ax",%progbits
 1148              	 .align 2
 1149              	 .global XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
 1150              	 .thumb
 1151              	 .thumb_func
 1153              	XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:
 1154              	.LFB233:
 407:../Libraries/XMCLib/src/xmc_vadc.c **** 
 408:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind request source event with a service request line */
 409:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
 410:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1155              	 .loc 2 410 0
 1156              	 .cfi_startproc
 1157              	 
 1158              	 
 1159              	 
 1160 0000 80B4     	 push {r7}
 1161              	.LCFI105:
 1162              	 .cfi_def_cfa_offset 4
 1163              	 .cfi_offset 7,-4
 1164 0002 85B0     	 sub sp,sp,#20
 1165              	.LCFI106:
 1166              	 .cfi_def_cfa_offset 24
 1167 0004 00AF     	 add r7,sp,#0
 1168              	.LCFI107:
 1169              	 .cfi_def_cfa_register 7
 1170 0006 7860     	 str r0,[r7,#4]
 1171 0008 0B46     	 mov r3,r1
 1172 000a FB70     	 strb r3,[r7,#3]
 411:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t node;
 412:../Libraries/XMCLib/src/xmc_vadc.c ****   
 413:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_
 414:../Libraries/XMCLib/src/xmc_vadc.c **** 
 415:../Libraries/XMCLib/src/xmc_vadc.c ****   if (sr >= XMC_VADC_SR_SHARED_SR0)
 1173              	 .loc 2 415 0
 1174 000c FB78     	 ldrb r3,[r7,#3]
 1175 000e 032B     	 cmp r3,#3
 1176 0010 03D9     	 bls .L41
 416:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 417:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 1177              	 .loc 2 417 0
 1178 0012 FB78     	 ldrb r3,[r7,#3]
 1179 0014 043B     	 subs r3,r3,#4
 1180 0016 FB60     	 str r3,[r7,#12]
 1181 0018 01E0     	 b .L42
 1182              	.L41:
 418:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 419:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 420:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 421:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr;
 1183              	 .loc 2 421 0
 1184 001a FB78     	 ldrb r3,[r7,#3]
 1185 001c FB60     	 str r3,[r7,#12]
 1186              	.L42:
 422:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 423:../Libraries/XMCLib/src/xmc_vadc.c **** 
 424:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 1187              	 .loc 2 424 0
 1188 001e 7B68     	 ldr r3,[r7,#4]
 1189 0020 D3F84031 	 ldr r3,[r3,#320]
 1190 0024 23F00F02 	 bic r2,r3,#15
 1191 0028 7B68     	 ldr r3,[r7,#4]
 1192 002a C3F84021 	 str r2,[r3,#320]
 425:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 1193              	 .loc 2 425 0
 1194 002e 7B68     	 ldr r3,[r7,#4]
 1195 0030 D3F84021 	 ldr r2,[r3,#320]
 1196 0034 FB68     	 ldr r3,[r7,#12]
 1197 0036 1A43     	 orrs r2,r2,r3
 1198 0038 7B68     	 ldr r3,[r7,#4]
 1199 003a C3F84021 	 str r2,[r3,#320]
 426:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1200              	 .loc 2 426 0
 1201 003e 1437     	 adds r7,r7,#20
 1202              	.LCFI108:
 1203              	 .cfi_def_cfa_offset 4
 1204 0040 BD46     	 mov sp,r7
 1205              	.LCFI109:
 1206              	 .cfi_def_cfa_register 13
 1207              	 
 1208 0042 5DF8047B 	 ldr r7,[sp],#4
 1209              	.LCFI110:
 1210              	 .cfi_restore 7
 1211              	 .cfi_def_cfa_offset 0
 1212 0046 7047     	 bx lr
 1213              	 .cfi_endproc
 1214              	.LFE233:
 1216              	 .section .text.XMC_VADC_GROUP_Init,"ax",%progbits
 1217              	 .align 2
 1218              	 .global XMC_VADC_GROUP_Init
 1219              	 .thumb
 1220              	 .thumb_func
 1222              	XMC_VADC_GROUP_Init:
 1223              	.LFB234:
 427:../Libraries/XMCLib/src/xmc_vadc.c **** 
 428:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize an instance of group of VADC hardware */
 429:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)  
 430:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
 431:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1224              	 .loc 2 431 0
 1225              	 .cfi_startproc
 1226              	 
 1227              	 
 1228 0000 80B5     	 push {r7,lr}
 1229              	.LCFI111:
 1230              	 .cfi_def_cfa_offset 8
 1231              	 .cfi_offset 7,-8
 1232              	 .cfi_offset 14,-4
 1233 0002 82B0     	 sub sp,sp,#8
 1234              	.LCFI112:
 1235              	 .cfi_def_cfa_offset 16
 1236 0004 00AF     	 add r7,sp,#0
 1237              	.LCFI113:
 1238              	 .cfi_def_cfa_register 7
 1239 0006 7860     	 str r0,[r7,#4]
 1240 0008 3960     	 str r1,[r7]
 432:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
 433:../Libraries/XMCLib/src/xmc_vadc.c **** 
 434:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the input classes */
 435:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 1241              	 .loc 2 435 0
 1242 000a 3B68     	 ldr r3,[r7]
 1243 000c 7868     	 ldr r0,[r7,#4]
 1244 000e 5968     	 ldr r1,[r3,#4]
 1245 0010 0022     	 movs r2,#0
 1246 0012 0023     	 movs r3,#0
 1247 0014 FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 436:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 1248              	 .loc 2 436 0
 1249 0018 3B68     	 ldr r3,[r7]
 1250 001a 7868     	 ldr r0,[r7,#4]
 1251 001c 5968     	 ldr r1,[r3,#4]
 1252 001e 0122     	 movs r2,#1
 1253 0020 0023     	 movs r3,#0
 1254 0022 FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 437:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 1255              	 .loc 2 437 0
 1256 0026 3B68     	 ldr r3,[r7]
 1257 0028 7868     	 ldr r0,[r7,#4]
 1258 002a 9968     	 ldr r1,[r3,#8]
 1259 002c 0022     	 movs r2,#0
 1260 002e 0123     	 movs r3,#1
 1261 0030 FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 438:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 1262              	 .loc 2 438 0
 1263 0034 3B68     	 ldr r3,[r7]
 1264 0036 7868     	 ldr r0,[r7,#4]
 1265 0038 9968     	 ldr r1,[r3,#8]
 1266 003a 0122     	 movs r2,#1
 1267 003c 0123     	 movs r3,#1
 1268 003e FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 439:../Libraries/XMCLib/src/xmc_vadc.c **** 
 440:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBCFG = config->g_arbcfg;
 1269              	 .loc 2 440 0
 1270 0042 3B68     	 ldr r3,[r7]
 1271 0044 1A69     	 ldr r2,[r3,#16]
 1272 0046 7B68     	 ldr r3,[r7,#4]
 1273 0048 C3F88020 	 str r2,[r3,#128]
 441:../Libraries/XMCLib/src/xmc_vadc.c **** 
 442:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = config->g_bound;
 1274              	 .loc 2 442 0
 1275 004c 3B68     	 ldr r3,[r7]
 1276 004e DA68     	 ldr r2,[r3,#12]
 1277 0050 7B68     	 ldr r3,[r7,#4]
 1278 0052 C3F8B820 	 str r2,[r3,#184]
 443:../Libraries/XMCLib/src/xmc_vadc.c **** 
 444:../Libraries/XMCLib/src/xmc_vadc.c ****   /* External mux configuration */
 445:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 1279              	 .loc 2 445 0
 1280 0056 3B68     	 ldr r3,[r7]
 1281 0058 7868     	 ldr r0,[r7,#4]
 1282 005a 1968     	 ldr r1,[r3]
 1283 005c FFF7FEFF 	 bl XMC_VADC_GROUP_ExternalMuxControlInit
 446:../Libraries/XMCLib/src/xmc_vadc.c **** 
 447:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1284              	 .loc 2 447 0
 1285 0060 0837     	 adds r7,r7,#8
 1286              	.LCFI114:
 1287              	 .cfi_def_cfa_offset 8
 1288 0062 BD46     	 mov sp,r7
 1289              	.LCFI115:
 1290              	 .cfi_def_cfa_register 13
 1291              	 
 1292 0064 80BD     	 pop {r7,pc}
 1293              	 .cfi_endproc
 1294              	.LFE234:
 1296 0066 00BF     	 .section .text.XMC_VADC_GROUP_InputClassInit,"ax",%progbits
 1297              	 .align 2
 1298              	 .global XMC_VADC_GROUP_InputClassInit
 1299              	 .thumb
 1300              	 .thumb_func
 1302              	XMC_VADC_GROUP_InputClassInit:
 1303              	.LFB235:
 448:../Libraries/XMCLib/src/xmc_vadc.c **** 
 449:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to program conversion characteristics */
 450:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
 451:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
 452:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1304              	 .loc 2 452 0
 1305              	 .cfi_startproc
 1306              	 
 1307              	 
 1308              	 
 1309 0000 80B4     	 push {r7}
 1310              	.LCFI116:
 1311              	 .cfi_def_cfa_offset 4
 1312              	 .cfi_offset 7,-4
 1313 0002 8DB0     	 sub sp,sp,#52
 1314              	.LCFI117:
 1315              	 .cfi_def_cfa_offset 56
 1316 0004 00AF     	 add r7,sp,#0
 1317              	.LCFI118:
 1318              	 .cfi_def_cfa_register 7
 1319 0006 F860     	 str r0,[r7,#12]
 1320 0008 B960     	 str r1,[r7,#8]
 1321 000a 3B60     	 str r3,[r7]
 1322 000c 1346     	 mov r3,r2
 1323 000e FB71     	 strb r3,[r7,#7]
 453:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_class;
 454:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_mode_pos;
 455:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time_pos;
 456:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_mode_mask;
 457:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time_mask;
 458:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time;
 459:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_CONVMODE_t conv_mode;
 460:../Libraries/XMCLib/src/xmc_vadc.c **** 
 461:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_pt
 462:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_
 463:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLAS
 464:../Libraries/XMCLib/src/xmc_vadc.c **** 
 465:../Libraries/XMCLib/src/xmc_vadc.c ****   /* 
 466:../Libraries/XMCLib/src/xmc_vadc.c ****    * Obtain the mask and position macros of the parameters based on what is being requested - Stand
 467:../Libraries/XMCLib/src/xmc_vadc.c ****    * external mux channels.
 468:../Libraries/XMCLib/src/xmc_vadc.c ****    */
 469:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_GROUP_CONV_STD == conv_type)
 1324              	 .loc 2 469 0
 1325 0010 FB79     	 ldrb r3,[r7,#7]
 1326 0012 002B     	 cmp r3,#0
 1327 0014 13D1     	 bne .L45
 470:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 471:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 1328              	 .loc 2 471 0
 1329 0016 0823     	 movs r3,#8
 1330 0018 FB62     	 str r3,[r7,#44]
 472:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 1331              	 .loc 2 472 0
 1332 001a 4FF4E063 	 mov r3,#1792
 1333 001e 7B62     	 str r3,[r7,#36]
 473:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 1334              	 .loc 2 473 0
 1335 0020 0023     	 movs r3,#0
 1336 0022 BB62     	 str r3,[r7,#40]
 474:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 1337              	 .loc 2 474 0
 1338 0024 1F23     	 movs r3,#31
 1339 0026 3B62     	 str r3,[r7,#32]
 475:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time      = (uint32_t) config.sample_time_std_conv;
 1340              	 .loc 2 475 0
 1341 0028 3B7A     	 ldrb r3,[r7,#8]
 1342 002a C3F30403 	 ubfx r3,r3,#0,#5
 1343 002e DBB2     	 uxtb r3,r3
 1344 0030 FB61     	 str r3,[r7,#28]
 476:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 1345              	 .loc 2 476 0
 1346 0032 7B7A     	 ldrb r3,[r7,#9]
 1347 0034 C3F30203 	 ubfx r3,r3,#0,#3
 1348 0038 DBB2     	 uxtb r3,r3
 1349 003a FB76     	 strb r3,[r7,#27]
 1350 003c 13E0     	 b .L46
 1351              	.L45:
 477:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 478:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 479:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 480:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 1352              	 .loc 2 480 0
 1353 003e 1823     	 movs r3,#24
 1354 0040 FB62     	 str r3,[r7,#44]
 481:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 1355              	 .loc 2 481 0
 1356 0042 4FF0E063 	 mov r3,#117440512
 1357 0046 7B62     	 str r3,[r7,#36]
 482:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 1358              	 .loc 2 482 0
 1359 0048 1023     	 movs r3,#16
 1360 004a BB62     	 str r3,[r7,#40]
 483:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 1361              	 .loc 2 483 0
 1362 004c 4FF4F813 	 mov r3,#2031616
 1363 0050 3B62     	 str r3,[r7,#32]
 484:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 1364              	 .loc 2 484 0
 1365 0052 BB7A     	 ldrb r3,[r7,#10]
 1366 0054 C3F30403 	 ubfx r3,r3,#0,#5
 1367 0058 DBB2     	 uxtb r3,r3
 1368 005a FB61     	 str r3,[r7,#28]
 485:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 1369              	 .loc 2 485 0
 1370 005c FB7A     	 ldrb r3,[r7,#11]
 1371 005e C3F30203 	 ubfx r3,r3,#0,#3
 1372 0062 DBB2     	 uxtb r3,r3
 1373 0064 FB76     	 strb r3,[r7,#27]
 1374              	.L46:
 486:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 487:../Libraries/XMCLib/src/xmc_vadc.c **** 
 488:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Determine the class */
 489:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class  = group_ptr->ICLASS[set_num];
 1375              	 .loc 2 489 0
 1376 0066 FB68     	 ldr r3,[r7,#12]
 1377 0068 3A68     	 ldr r2,[r7]
 1378 006a 2832     	 adds r2,r2,#40
 1379 006c 53F82230 	 ldr r3,[r3,r2,lsl#2]
 1380 0070 7B61     	 str r3,[r7,#20]
 490:../Libraries/XMCLib/src/xmc_vadc.c **** 
 491:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the class register */
 492:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(conv_mode_mask);
 1381              	 .loc 2 492 0
 1382 0072 7B6A     	 ldr r3,[r7,#36]
 1383 0074 DB43     	 mvns r3,r3
 1384 0076 7A69     	 ldr r2,[r7,#20]
 1385 0078 1340     	 ands r3,r3,r2
 1386 007a 7B61     	 str r3,[r7,#20]
 493:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 1387              	 .loc 2 493 0
 1388 007c FA7E     	 ldrb r2,[r7,#27]
 1389 007e FB6A     	 ldr r3,[r7,#44]
 1390 0080 02FA03F3 	 lsl r3,r2,r3
 1391 0084 7A69     	 ldr r2,[r7,#20]
 1392 0086 1343     	 orrs r3,r3,r2
 1393 0088 7B61     	 str r3,[r7,#20]
 494:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(sample_time_mask);
 1394              	 .loc 2 494 0
 1395 008a 3B6A     	 ldr r3,[r7,#32]
 1396 008c DB43     	 mvns r3,r3
 1397 008e 7A69     	 ldr r2,[r7,#20]
 1398 0090 1340     	 ands r3,r3,r2
 1399 0092 7B61     	 str r3,[r7,#20]
 495:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 1400              	 .loc 2 495 0
 1401 0094 BB6A     	 ldr r3,[r7,#40]
 1402 0096 FA69     	 ldr r2,[r7,#28]
 1403 0098 02FA03F3 	 lsl r3,r2,r3
 1404 009c 7A69     	 ldr r2,[r7,#20]
 1405 009e 1343     	 orrs r3,r3,r2
 1406 00a0 7B61     	 str r3,[r7,#20]
 496:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ICLASS[set_num] = conv_class;
 1407              	 .loc 2 496 0
 1408 00a2 FB68     	 ldr r3,[r7,#12]
 1409 00a4 3A68     	 ldr r2,[r7]
 1410 00a6 2832     	 adds r2,r2,#40
 1411 00a8 7969     	 ldr r1,[r7,#20]
 1412 00aa 43F82210 	 str r1,[r3,r2,lsl#2]
 497:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1413              	 .loc 2 497 0
 1414 00ae 3437     	 adds r7,r7,#52
 1415              	.LCFI119:
 1416              	 .cfi_def_cfa_offset 4
 1417 00b0 BD46     	 mov sp,r7
 1418              	.LCFI120:
 1419              	 .cfi_def_cfa_register 13
 1420              	 
 1421 00b2 5DF8047B 	 ldr r7,[sp],#4
 1422              	.LCFI121:
 1423              	 .cfi_restore 7
 1424              	 .cfi_def_cfa_offset 0
 1425 00b6 7047     	 bx lr
 1426              	 .cfi_endproc
 1427              	.LFE235:
 1429              	 .section .text.XMC_VADC_GROUP_SetPowerMode,"ax",%progbits
 1430              	 .align 2
 1431              	 .global XMC_VADC_GROUP_SetPowerMode
 1432              	 .thumb
 1433              	 .thumb_func
 1435              	XMC_VADC_GROUP_SetPowerMode:
 1436              	.LFB236:
 498:../Libraries/XMCLib/src/xmc_vadc.c **** 
 499:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which sets the power mode of analog converter of a VADC group */
 500:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
 501:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1437              	 .loc 2 501 0
 1438              	 .cfi_startproc
 1439              	 
 1440              	 
 1441              	 
 1442 0000 80B4     	 push {r7}
 1443              	.LCFI122:
 1444              	 .cfi_def_cfa_offset 4
 1445              	 .cfi_offset 7,-4
 1446 0002 85B0     	 sub sp,sp,#20
 1447              	.LCFI123:
 1448              	 .cfi_def_cfa_offset 24
 1449 0004 00AF     	 add r7,sp,#0
 1450              	.LCFI124:
 1451              	 .cfi_def_cfa_register 7
 1452 0006 7860     	 str r0,[r7,#4]
 1453 0008 0B46     	 mov r3,r1
 1454 000a FB70     	 strb r3,[r7,#3]
 502:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t arbcfg;
 503:../Libraries/XMCLib/src/xmc_vadc.c **** 
 504:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
 505:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMOD
 506:../Libraries/XMCLib/src/xmc_vadc.c **** 
 507:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg = group_ptr->ARBCFG;
 1455              	 .loc 2 507 0
 1456 000c 7B68     	 ldr r3,[r7,#4]
 1457 000e D3F88030 	 ldr r3,[r3,#128]
 1458 0012 FB60     	 str r3,[r7,#12]
 508:../Libraries/XMCLib/src/xmc_vadc.c **** 
 509:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 1459              	 .loc 2 509 0
 1460 0014 FB68     	 ldr r3,[r7,#12]
 1461 0016 23F00303 	 bic r3,r3,#3
 1462 001a FB60     	 str r3,[r7,#12]
 510:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg |= (uint32_t)power_mode;
 1463              	 .loc 2 510 0
 1464 001c FB78     	 ldrb r3,[r7,#3]
 1465 001e FA68     	 ldr r2,[r7,#12]
 1466 0020 1343     	 orrs r3,r3,r2
 1467 0022 FB60     	 str r3,[r7,#12]
 511:../Libraries/XMCLib/src/xmc_vadc.c **** 
 512:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBCFG = arbcfg;
 1468              	 .loc 2 512 0
 1469 0024 7B68     	 ldr r3,[r7,#4]
 1470 0026 FA68     	 ldr r2,[r7,#12]
 1471 0028 C3F88020 	 str r2,[r3,#128]
 513:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1472              	 .loc 2 513 0
 1473 002c 1437     	 adds r7,r7,#20
 1474              	.LCFI125:
 1475              	 .cfi_def_cfa_offset 4
 1476 002e BD46     	 mov sp,r7
 1477              	.LCFI126:
 1478              	 .cfi_def_cfa_register 13
 1479              	 
 1480 0030 5DF8047B 	 ldr r7,[sp],#4
 1481              	.LCFI127:
 1482              	 .cfi_restore 7
 1483              	 .cfi_def_cfa_offset 0
 1484 0034 7047     	 bx lr
 1485              	 .cfi_endproc
 1486              	.LFE236:
 1488 0036 00BF     	 .section .text.XMC_VADC_GROUP_SetSyncSlave,"ax",%progbits
 1489              	 .align 2
 1490              	 .global XMC_VADC_GROUP_SetSyncSlave
 1491              	 .thumb
 1492              	 .thumb_func
 1494              	XMC_VADC_GROUP_SetSyncSlave:
 1495              	.LFB237:
 514:../Libraries/XMCLib/src/xmc_vadc.c **** 
 515:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which programs a group as a slave group during sync conversions */
 516:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
 517:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1496              	 .loc 2 517 0
 1497              	 .cfi_startproc
 1498              	 
 1499              	 
 1500              	 
 1501 0000 80B4     	 push {r7}
 1502              	.LCFI128:
 1503              	 .cfi_def_cfa_offset 4
 1504              	 .cfi_offset 7,-4
 1505 0002 87B0     	 sub sp,sp,#28
 1506              	.LCFI129:
 1507              	 .cfi_def_cfa_offset 32
 1508 0004 00AF     	 add r7,sp,#0
 1509              	.LCFI130:
 1510              	 .cfi_def_cfa_register 7
 1511 0006 F860     	 str r0,[r7,#12]
 1512 0008 B960     	 str r1,[r7,#8]
 1513 000a 7A60     	 str r2,[r7,#4]
 518:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 519:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )
 520:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
 521:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlave:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
 522:../Libraries/XMCLib/src/xmc_vadc.c ****   
 523:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )
 524:../Libraries/XMCLib/src/xmc_vadc.c **** 
 525:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Determine the coding of SYNCTR */
 526:../Libraries/XMCLib/src/xmc_vadc.c ****   if (slave_grp > master_grp)
 1514              	 .loc 2 526 0
 1515 000c 7A68     	 ldr r2,[r7,#4]
 1516 000e BB68     	 ldr r3,[r7,#8]
 1517 0010 9A42     	 cmp r2,r3
 1518 0012 02D9     	 bls .L49
 527:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 528:../Libraries/XMCLib/src/xmc_vadc.c ****     master_grp = master_grp + 1U;
 1519              	 .loc 2 528 0
 1520 0014 BB68     	 ldr r3,[r7,#8]
 1521 0016 0133     	 adds r3,r3,#1
 1522 0018 BB60     	 str r3,[r7,#8]
 1523              	.L49:
 529:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 530:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
 531:../Libraries/XMCLib/src/xmc_vadc.c ****   
 532:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program SYNCTR */
 533:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr = group_ptr->SYNCTR;
 1524              	 .loc 2 533 0
 1525 001a FB68     	 ldr r3,[r7,#12]
 1526 001c D3F8C030 	 ldr r3,[r3,#192]
 1527 0020 7B61     	 str r3,[r7,#20]
 534:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 1528              	 .loc 2 534 0
 1529 0022 7B69     	 ldr r3,[r7,#20]
 1530 0024 23F00303 	 bic r3,r3,#3
 1531 0028 7B61     	 str r3,[r7,#20]
 535:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   |= master_grp;
 1532              	 .loc 2 535 0
 1533 002a 7A69     	 ldr r2,[r7,#20]
 1534 002c BB68     	 ldr r3,[r7,#8]
 1535 002e 1343     	 orrs r3,r3,r2
 1536 0030 7B61     	 str r3,[r7,#20]
 536:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR = synctr;
 1537              	 .loc 2 536 0
 1538 0032 FB68     	 ldr r3,[r7,#12]
 1539 0034 7A69     	 ldr r2,[r7,#20]
 1540 0036 C3F8C020 	 str r2,[r3,#192]
 537:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1541              	 .loc 2 537 0
 1542 003a 1C37     	 adds r7,r7,#28
 1543              	.LCFI131:
 1544              	 .cfi_def_cfa_offset 4
 1545 003c BD46     	 mov sp,r7
 1546              	.LCFI132:
 1547              	 .cfi_def_cfa_register 13
 1548              	 
 1549 003e 5DF8047B 	 ldr r7,[sp],#4
 1550              	.LCFI133:
 1551              	 .cfi_restore 7
 1552              	 .cfi_def_cfa_offset 0
 1553 0042 7047     	 bx lr
 1554              	 .cfi_endproc
 1555              	.LFE237:
 1557              	 .section .text.XMC_VADC_GROUP_SetSyncMaster,"ax",%progbits
 1558              	 .align 2
 1559              	 .global XMC_VADC_GROUP_SetSyncMaster
 1560              	 .thumb
 1561              	 .thumb_func
 1563              	XMC_VADC_GROUP_SetSyncMaster:
 1564              	.LFB238:
 538:../Libraries/XMCLib/src/xmc_vadc.c **** 
 539:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which programs a group as a master group during sync conversions */
 540:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr)
 541:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1565              	 .loc 2 541 0
 1566              	 .cfi_startproc
 1567              	 
 1568              	 
 1569              	 
 1570 0000 80B4     	 push {r7}
 1571              	.LCFI134:
 1572              	 .cfi_def_cfa_offset 4
 1573              	 .cfi_offset 7,-4
 1574 0002 85B0     	 sub sp,sp,#20
 1575              	.LCFI135:
 1576              	 .cfi_def_cfa_offset 24
 1577 0004 00AF     	 add r7,sp,#0
 1578              	.LCFI136:
 1579              	 .cfi_def_cfa_register 7
 1580 0006 7860     	 str r0,[r7,#4]
 542:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 543:../Libraries/XMCLib/src/xmc_vadc.c **** 
 544:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncMaster:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
 545:../Libraries/XMCLib/src/xmc_vadc.c **** 
 546:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr = group_ptr->SYNCTR;
 1581              	 .loc 2 546 0
 1582 0008 7B68     	 ldr r3,[r7,#4]
 1583 000a D3F8C030 	 ldr r3,[r3,#192]
 1584 000e FB60     	 str r3,[r7,#12]
 547:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 1585              	 .loc 2 547 0
 1586 0010 FB68     	 ldr r3,[r7,#12]
 1587 0012 23F00303 	 bic r3,r3,#3
 1588 0016 FB60     	 str r3,[r7,#12]
 548:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR = synctr;
 1589              	 .loc 2 548 0
 1590 0018 7B68     	 ldr r3,[r7,#4]
 1591 001a FA68     	 ldr r2,[r7,#12]
 1592 001c C3F8C020 	 str r2,[r3,#192]
 549:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1593              	 .loc 2 549 0
 1594 0020 1437     	 adds r7,r7,#20
 1595              	.LCFI137:
 1596              	 .cfi_def_cfa_offset 4
 1597 0022 BD46     	 mov sp,r7
 1598              	.LCFI138:
 1599              	 .cfi_def_cfa_register 13
 1600              	 
 1601 0024 5DF8047B 	 ldr r7,[sp],#4
 1602              	.LCFI139:
 1603              	 .cfi_restore 7
 1604              	 .cfi_def_cfa_offset 0
 1605 0028 7047     	 bx lr
 1606              	 .cfi_endproc
 1607              	.LFE238:
 1609 002a 00BF     	 .section .text.XMC_VADC_GROUP_CheckSlaveReadiness,"ax",%progbits
 1610              	 .align 2
 1611              	 .global XMC_VADC_GROUP_CheckSlaveReadiness
 1612              	 .thumb
 1613              	 .thumb_func
 1615              	XMC_VADC_GROUP_CheckSlaveReadiness:
 1616              	.LFB239:
 550:../Libraries/XMCLib/src/xmc_vadc.c **** 
 551:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable checking of readiness of slaves before a synchronous conversion request is issued 
 552:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
 553:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1617              	 .loc 2 553 0
 1618              	 .cfi_startproc
 1619              	 
 1620              	 
 1621              	 
 1622 0000 80B4     	 push {r7}
 1623              	.LCFI140:
 1624              	 .cfi_def_cfa_offset 4
 1625              	 .cfi_offset 7,-4
 1626 0002 87B0     	 sub sp,sp,#28
 1627              	.LCFI141:
 1628              	 .cfi_def_cfa_offset 32
 1629 0004 00AF     	 add r7,sp,#0
 1630              	.LCFI142:
 1631              	 .cfi_def_cfa_register 7
 1632 0006 7860     	 str r0,[r7,#4]
 1633 0008 3960     	 str r1,[r7]
 554:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
 555:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t slave_kernel;
 556:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t adc_ready;
 557:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t ready_pos;
 558:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 559:../Libraries/XMCLib/src/xmc_vadc.c ****  
 560:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
 561:../Libraries/XMCLib/src/xmc_vadc.c ****  
 562:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
 563:../Libraries/XMCLib/src/xmc_vadc.c ****  
 564:../Libraries/XMCLib/src/xmc_vadc.c ****   slave_kernel  =  slave_group;
 1634              	 .loc 2 564 0
 1635 000a 3B68     	 ldr r3,[r7]
 1636 000c FB60     	 str r3,[r7,#12]
 565:../Libraries/XMCLib/src/xmc_vadc.c **** 
 566:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == slave_kernel)
 1637              	 .loc 2 566 0
 1638 000e FB68     	 ldr r3,[r7,#12]
 1639 0010 002B     	 cmp r3,#0
 1640 0012 02D1     	 bne .L52
 567:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 568:../Libraries/XMCLib/src/xmc_vadc.c ****     adc_ready = 1U;
 1641              	 .loc 2 568 0
 1642 0014 0123     	 movs r3,#1
 1643 0016 7B61     	 str r3,[r7,#20]
 1644 0018 01E0     	 b .L53
 1645              	.L52:
 569:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 570:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 571:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 572:../Libraries/XMCLib/src/xmc_vadc.c ****     adc_ready = slave_kernel;
 1646              	 .loc 2 572 0
 1647 001a FB68     	 ldr r3,[r7,#12]
 1648 001c 7B61     	 str r3,[r7,#20]
 1649              	.L53:
 573:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 574:../Libraries/XMCLib/src/xmc_vadc.c **** 
 575:../Libraries/XMCLib/src/xmc_vadc.c ****   if (1U == adc_ready)
 1650              	 .loc 2 575 0
 1651 001e 7B69     	 ldr r3,[r7,#20]
 1652 0020 012B     	 cmp r3,#1
 1653 0022 02D1     	 bne .L54
 576:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 577:../Libraries/XMCLib/src/xmc_vadc.c ****     ready_pos = (uint8_t)VADC_G_SYNCTR_EVALR1_Pos;
 1654              	 .loc 2 577 0
 1655 0024 0423     	 movs r3,#4
 1656 0026 FB74     	 strb r3,[r7,#19]
 1657 0028 07E0     	 b .L55
 1658              	.L54:
 578:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 579:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (2U == adc_ready)
 1659              	 .loc 2 579 0
 1660 002a 7B69     	 ldr r3,[r7,#20]
 1661 002c 022B     	 cmp r3,#2
 1662 002e 02D1     	 bne .L56
 580:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 581:../Libraries/XMCLib/src/xmc_vadc.c ****     ready_pos = (uint8_t)VADC_G_SYNCTR_EVALR2_Pos;
 1663              	 .loc 2 581 0
 1664 0030 0523     	 movs r3,#5
 1665 0032 FB74     	 strb r3,[r7,#19]
 1666 0034 01E0     	 b .L55
 1667              	.L56:
 582:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 583:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 584:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 585:../Libraries/XMCLib/src/xmc_vadc.c ****     ready_pos = (uint8_t)VADC_G_SYNCTR_EVALR3_Pos;
 1668              	 .loc 2 585 0
 1669 0036 0623     	 movs r3,#6
 1670 0038 FB74     	 strb r3,[r7,#19]
 1671              	.L55:
 586:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 587:../Libraries/XMCLib/src/xmc_vadc.c **** 
 588:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR |= (uint32_t)((uint32_t)1 << ready_pos);
 1672              	 .loc 2 588 0
 1673 003a 7B68     	 ldr r3,[r7,#4]
 1674 003c D3F8C020 	 ldr r2,[r3,#192]
 1675 0040 FB7C     	 ldrb r3,[r7,#19]
 1676 0042 0121     	 movs r1,#1
 1677 0044 01FA03F3 	 lsl r3,r1,r3
 1678 0048 1A43     	 orrs r2,r2,r3
 1679 004a 7B68     	 ldr r3,[r7,#4]
 1680 004c C3F8C020 	 str r2,[r3,#192]
 589:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 590:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR |= ((uint32_t)VADC_G_SYNCTR_EVALR1_Msk);
 591:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 592:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1681              	 .loc 2 592 0
 1682 0050 1C37     	 adds r7,r7,#28
 1683              	.LCFI143:
 1684              	 .cfi_def_cfa_offset 4
 1685 0052 BD46     	 mov sp,r7
 1686              	.LCFI144:
 1687              	 .cfi_def_cfa_register 13
 1688              	 
 1689 0054 5DF8047B 	 ldr r7,[sp],#4
 1690              	.LCFI145:
 1691              	 .cfi_restore 7
 1692              	 .cfi_def_cfa_offset 0
 1693 0058 7047     	 bx lr
 1694              	 .cfi_endproc
 1695              	.LFE239:
 1697 005a 00BF     	 .section .text.XMC_VADC_GROUP_IgnoreSlaveReadiness,"ax",%progbits
 1698              	 .align 2
 1699              	 .global XMC_VADC_GROUP_IgnoreSlaveReadiness
 1700              	 .thumb
 1701              	 .thumb_func
 1703              	XMC_VADC_GROUP_IgnoreSlaveReadiness:
 1704              	.LFB240:
 593:../Libraries/XMCLib/src/xmc_vadc.c **** 
 594:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable checking of readiness of slaves during synchronous conversions */
 595:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
 596:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1705              	 .loc 2 596 0
 1706              	 .cfi_startproc
 1707              	 
 1708              	 
 1709              	 
 1710 0000 80B4     	 push {r7}
 1711              	.LCFI146:
 1712              	 .cfi_def_cfa_offset 4
 1713              	 .cfi_offset 7,-4
 1714 0002 87B0     	 sub sp,sp,#28
 1715              	.LCFI147:
 1716              	 .cfi_def_cfa_offset 32
 1717 0004 00AF     	 add r7,sp,#0
 1718              	.LCFI148:
 1719              	 .cfi_def_cfa_register 7
 1720 0006 7860     	 str r0,[r7,#4]
 1721 0008 3960     	 str r1,[r7]
 597:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
 598:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t slave_kernel;
 599:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t adc_ready;
 600:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t ready_pos;
 601:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 602:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IgnoreSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
 603:../Libraries/XMCLib/src/xmc_vadc.c **** 
 604:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
 605:../Libraries/XMCLib/src/xmc_vadc.c ****   slave_kernel = slave_group;
 1722              	 .loc 2 605 0
 1723 000a 3B68     	 ldr r3,[r7]
 1724 000c FB60     	 str r3,[r7,#12]
 606:../Libraries/XMCLib/src/xmc_vadc.c **** 
 607:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == slave_kernel)
 1725              	 .loc 2 607 0
 1726 000e FB68     	 ldr r3,[r7,#12]
 1727 0010 002B     	 cmp r3,#0
 1728 0012 02D1     	 bne .L58
 608:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 609:../Libraries/XMCLib/src/xmc_vadc.c ****     adc_ready = 1U;
 1729              	 .loc 2 609 0
 1730 0014 0123     	 movs r3,#1
 1731 0016 7B61     	 str r3,[r7,#20]
 1732 0018 01E0     	 b .L59
 1733              	.L58:
 610:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 611:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 612:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 613:../Libraries/XMCLib/src/xmc_vadc.c ****     adc_ready = slave_kernel;
 1734              	 .loc 2 613 0
 1735 001a FB68     	 ldr r3,[r7,#12]
 1736 001c 7B61     	 str r3,[r7,#20]
 1737              	.L59:
 614:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 615:../Libraries/XMCLib/src/xmc_vadc.c **** 
 616:../Libraries/XMCLib/src/xmc_vadc.c ****   if (1U == adc_ready)
 1738              	 .loc 2 616 0
 1739 001e 7B69     	 ldr r3,[r7,#20]
 1740 0020 012B     	 cmp r3,#1
 1741 0022 02D1     	 bne .L60
 617:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 618:../Libraries/XMCLib/src/xmc_vadc.c ****     ready_pos = (uint8_t)VADC_G_SYNCTR_EVALR1_Pos;
 1742              	 .loc 2 618 0
 1743 0024 0423     	 movs r3,#4
 1744 0026 FB74     	 strb r3,[r7,#19]
 1745 0028 07E0     	 b .L61
 1746              	.L60:
 619:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 620:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (2U == adc_ready)
 1747              	 .loc 2 620 0
 1748 002a 7B69     	 ldr r3,[r7,#20]
 1749 002c 022B     	 cmp r3,#2
 1750 002e 02D1     	 bne .L62
 621:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 622:../Libraries/XMCLib/src/xmc_vadc.c ****     ready_pos = (uint8_t)VADC_G_SYNCTR_EVALR2_Pos;
 1751              	 .loc 2 622 0
 1752 0030 0523     	 movs r3,#5
 1753 0032 FB74     	 strb r3,[r7,#19]
 1754 0034 01E0     	 b .L61
 1755              	.L62:
 623:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 624:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 625:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 626:../Libraries/XMCLib/src/xmc_vadc.c ****     ready_pos = (uint8_t)VADC_G_SYNCTR_EVALR3_Pos;
 1756              	 .loc 2 626 0
 1757 0036 0623     	 movs r3,#6
 1758 0038 FB74     	 strb r3,[r7,#19]
 1759              	.L61:
 627:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 628:../Libraries/XMCLib/src/xmc_vadc.c **** 
 629:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR &= ~((uint32_t)((uint32_t)1 << ready_pos));
 1760              	 .loc 2 629 0
 1761 003a 7B68     	 ldr r3,[r7,#4]
 1762 003c D3F8C020 	 ldr r2,[r3,#192]
 1763 0040 FB7C     	 ldrb r3,[r7,#19]
 1764 0042 0121     	 movs r1,#1
 1765 0044 01FA03F3 	 lsl r3,r1,r3
 1766 0048 DB43     	 mvns r3,r3
 1767 004a 1A40     	 ands r2,r2,r3
 1768 004c 7B68     	 ldr r3,[r7,#4]
 1769 004e C3F8C020 	 str r2,[r3,#192]
 630:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 631:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR &= ~((uint32_t)VADC_G_SYNCTR_EVALR1_Msk);
 632:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 633:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1770              	 .loc 2 633 0
 1771 0052 1C37     	 adds r7,r7,#28
 1772              	.LCFI149:
 1773              	 .cfi_def_cfa_offset 4
 1774 0054 BD46     	 mov sp,r7
 1775              	.LCFI150:
 1776              	 .cfi_def_cfa_register 13
 1777              	 
 1778 0056 5DF8047B 	 ldr r7,[sp],#4
 1779              	.LCFI151:
 1780              	 .cfi_restore 7
 1781              	 .cfi_def_cfa_offset 0
 1782 005a 7047     	 bx lr
 1783              	 .cfi_endproc
 1784              	.LFE240:
 1786              	 .section .text.XMC_VADC_GROUP_EnableChannelSyncRequest,"ax",%progbits
 1787              	 .align 2
 1788              	 .global XMC_VADC_GROUP_EnableChannelSyncRequest
 1789              	 .thumb
 1790              	 .thumb_func
 1792              	XMC_VADC_GROUP_EnableChannelSyncRequest:
 1793              	.LFB241:
 634:../Libraries/XMCLib/src/xmc_vadc.c **** 
 635:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the synchronous conversion feature - Applicable only to kernel configured as maste
 636:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
 637:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1794              	 .loc 2 637 0
 1795              	 .cfi_startproc
 1796              	 
 1797              	 
 1798              	 
 1799 0000 80B4     	 push {r7}
 1800              	.LCFI152:
 1801              	 .cfi_def_cfa_offset 4
 1802              	 .cfi_offset 7,-4
 1803 0002 85B0     	 sub sp,sp,#20
 1804              	.LCFI153:
 1805              	 .cfi_def_cfa_offset 24
 1806 0004 00AF     	 add r7,sp,#0
 1807              	.LCFI154:
 1808              	 .cfi_def_cfa_register 7
 1809 0006 7860     	 str r0,[r7,#4]
 1810 0008 3960     	 str r1,[r7]
 638:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 639:../Libraries/XMCLib/src/xmc_vadc.c **** 
 640:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_EnableChannelSyncRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
 641:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_EnableChannelSyncRequest:Wrong Channel Number",
 642:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
 643:../Libraries/XMCLib/src/xmc_vadc.c **** 
 644:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr  = group_ptr->SYNCTR;
 1811              	 .loc 2 644 0
 1812 000a 7B68     	 ldr r3,[r7,#4]
 1813 000c D3F8C030 	 ldr r3,[r3,#192]
 1814 0010 FB60     	 str r3,[r7,#12]
 645:../Libraries/XMCLib/src/xmc_vadc.c **** 
 646:../Libraries/XMCLib/src/xmc_vadc.c ****   if (!(synctr &  (uint32_t)VADC_G_SYNCTR_STSEL_Msk))
 1815              	 .loc 2 646 0
 1816 0012 FB68     	 ldr r3,[r7,#12]
 1817 0014 03F00303 	 and r3,r3,#3
 1818 0018 002B     	 cmp r3,#0
 1819 001a 0BD1     	 bne .L63
 647:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 648:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->CHCTR[ch_num] |= (uint32_t)((uint32_t)1 << VADC_G_CHCTR_SYNC_Pos);
 1820              	 .loc 2 648 0
 1821 001c 7B68     	 ldr r3,[r7,#4]
 1822 001e 3A68     	 ldr r2,[r7]
 1823 0020 8032     	 adds r2,r2,#128
 1824 0022 53F82230 	 ldr r3,[r3,r2,lsl#2]
 1825 0026 43F48061 	 orr r1,r3,#1024
 1826 002a 7B68     	 ldr r3,[r7,#4]
 1827 002c 3A68     	 ldr r2,[r7]
 1828 002e 8032     	 adds r2,r2,#128
 1829 0030 43F82210 	 str r1,[r3,r2,lsl#2]
 1830              	.L63:
 649:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 650:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1831              	 .loc 2 650 0
 1832 0034 1437     	 adds r7,r7,#20
 1833              	.LCFI155:
 1834              	 .cfi_def_cfa_offset 4
 1835 0036 BD46     	 mov sp,r7
 1836              	.LCFI156:
 1837              	 .cfi_def_cfa_register 13
 1838              	 
 1839 0038 5DF8047B 	 ldr r7,[sp],#4
 1840              	.LCFI157:
 1841              	 .cfi_restore 7
 1842              	 .cfi_def_cfa_offset 0
 1843 003c 7047     	 bx lr
 1844              	 .cfi_endproc
 1845              	.LFE241:
 1847 003e 00BF     	 .section .text.XMC_VADC_GROUP_DisableChannelSyncRequest,"ax",%progbits
 1848              	 .align 2
 1849              	 .global XMC_VADC_GROUP_DisableChannelSyncRequest
 1850              	 .thumb
 1851              	 .thumb_func
 1853              	XMC_VADC_GROUP_DisableChannelSyncRequest:
 1854              	.LFB242:
 651:../Libraries/XMCLib/src/xmc_vadc.c **** 
 652:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable synchronous conversion feature */
 653:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
 654:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1855              	 .loc 2 654 0
 1856              	 .cfi_startproc
 1857              	 
 1858              	 
 1859              	 
 1860 0000 80B4     	 push {r7}
 1861              	.LCFI158:
 1862              	 .cfi_def_cfa_offset 4
 1863              	 .cfi_offset 7,-4
 1864 0002 85B0     	 sub sp,sp,#20
 1865              	.LCFI159:
 1866              	 .cfi_def_cfa_offset 24
 1867 0004 00AF     	 add r7,sp,#0
 1868              	.LCFI160:
 1869              	 .cfi_def_cfa_register 7
 1870 0006 7860     	 str r0,[r7,#4]
 1871 0008 3960     	 str r1,[r7]
 655:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    synctr;
 656:../Libraries/XMCLib/src/xmc_vadc.c **** 
 657:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_DisableChannelSyncRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
 658:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_DisableChannelSyncRequest:Wrong Channel Number",
 659:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
 660:../Libraries/XMCLib/src/xmc_vadc.c **** 
 661:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr  = group_ptr->SYNCTR;
 1872              	 .loc 2 661 0
 1873 000a 7B68     	 ldr r3,[r7,#4]
 1874 000c D3F8C030 	 ldr r3,[r3,#192]
 1875 0010 FB60     	 str r3,[r7,#12]
 662:../Libraries/XMCLib/src/xmc_vadc.c **** 
 663:../Libraries/XMCLib/src/xmc_vadc.c ****   if (synctr &  (uint32_t)VADC_G_SYNCTR_STSEL_Msk)
 1876              	 .loc 2 663 0
 1877 0012 FB68     	 ldr r3,[r7,#12]
 1878 0014 03F00303 	 and r3,r3,#3
 1879 0018 002B     	 cmp r3,#0
 1880 001a 0BD0     	 beq .L65
 664:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 665:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->CHCTR[ch_num] &= ~((uint32_t)VADC_G_CHCTR_SYNC_Msk);
 1881              	 .loc 2 665 0
 1882 001c 7B68     	 ldr r3,[r7,#4]
 1883 001e 3A68     	 ldr r2,[r7]
 1884 0020 8032     	 adds r2,r2,#128
 1885 0022 53F82230 	 ldr r3,[r3,r2,lsl#2]
 1886 0026 23F48061 	 bic r1,r3,#1024
 1887 002a 7B68     	 ldr r3,[r7,#4]
 1888 002c 3A68     	 ldr r2,[r7]
 1889 002e 8032     	 adds r2,r2,#128
 1890 0030 43F82210 	 str r1,[r3,r2,lsl#2]
 1891              	.L65:
 666:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 667:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1892              	 .loc 2 667 0
 1893 0034 1437     	 adds r7,r7,#20
 1894              	.LCFI161:
 1895              	 .cfi_def_cfa_offset 4
 1896 0036 BD46     	 mov sp,r7
 1897              	.LCFI162:
 1898              	 .cfi_def_cfa_register 13
 1899              	 
 1900 0038 5DF8047B 	 ldr r7,[sp],#4
 1901              	.LCFI163:
 1902              	 .cfi_restore 7
 1903              	 .cfi_def_cfa_offset 0
 1904 003c 7047     	 bx lr
 1905              	 .cfi_endproc
 1906              	.LFE242:
 1908 003e 00BF     	 .section .text.XMC_VADC_GROUP_IsConverterBusy,"ax",%progbits
 1909              	 .align 2
 1910              	 .global XMC_VADC_GROUP_IsConverterBusy
 1911              	 .thumb
 1912              	 .thumb_func
 1914              	XMC_VADC_GROUP_IsConverterBusy:
 1915              	.LFB243:
 668:../Libraries/XMCLib/src/xmc_vadc.c **** 
 669:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the converter state - Idle vs Busy */ 
 670:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr)
 671:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1916              	 .loc 2 671 0
 1917              	 .cfi_startproc
 1918              	 
 1919              	 
 1920              	 
 1921 0000 80B4     	 push {r7}
 1922              	.LCFI164:
 1923              	 .cfi_def_cfa_offset 4
 1924              	 .cfi_offset 7,-4
 1925 0002 85B0     	 sub sp,sp,#20
 1926              	.LCFI165:
 1927              	 .cfi_def_cfa_offset 24
 1928 0004 00AF     	 add r7,sp,#0
 1929              	.LCFI166:
 1930              	 .cfi_def_cfa_register 7
 1931 0006 7860     	 str r0,[r7,#4]
 672:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t      arbcfg;
 673:../Libraries/XMCLib/src/xmc_vadc.c **** 
 674:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsConverterBusy:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
 675:../Libraries/XMCLib/src/xmc_vadc.c **** 
 676:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg  = group_ptr->ARBCFG;
 1932              	 .loc 2 676 0
 1933 0008 7B68     	 ldr r3,[r7,#4]
 1934 000a D3F88030 	 ldr r3,[r3,#128]
 1935 000e FB60     	 str r3,[r7,#12]
 677:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg &= (uint32_t)VADC_G_ARBCFG_BUSY_Msk;
 1936              	 .loc 2 677 0
 1937 0010 FB68     	 ldr r3,[r7,#12]
 1938 0012 03F08043 	 and r3,r3,#1073741824
 1939 0016 FB60     	 str r3,[r7,#12]
 678:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg = arbcfg >> VADC_G_ARBCFG_BUSY_Pos;
 1940              	 .loc 2 678 0
 1941 0018 FB68     	 ldr r3,[r7,#12]
 1942 001a 9B0F     	 lsrs r3,r3,#30
 1943 001c FB60     	 str r3,[r7,#12]
 679:../Libraries/XMCLib/src/xmc_vadc.c **** 
 680:../Libraries/XMCLib/src/xmc_vadc.c ****   return( (XMC_VADC_GROUP_STATE_t)arbcfg);
 1944              	 .loc 2 680 0
 1945 001e FB68     	 ldr r3,[r7,#12]
 1946 0020 DBB2     	 uxtb r3,r3
 681:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1947              	 .loc 2 681 0
 1948 0022 1846     	 mov r0,r3
 1949 0024 1437     	 adds r7,r7,#20
 1950              	.LCFI167:
 1951              	 .cfi_def_cfa_offset 4
 1952 0026 BD46     	 mov sp,r7
 1953              	.LCFI168:
 1954              	 .cfi_def_cfa_register 13
 1955              	 
 1956 0028 5DF8047B 	 ldr r7,[sp],#4
 1957              	.LCFI169:
 1958              	 .cfi_restore 7
 1959              	 .cfi_def_cfa_offset 0
 1960 002c 7047     	 bx lr
 1961              	 .cfi_endproc
 1962              	.LFE243:
 1964 002e 00BF     	 .section .text.XMC_VADC_GROUP_SetBoundaries,"ax",%progbits
 1965              	 .align 2
 1966              	 .global XMC_VADC_GROUP_SetBoundaries
 1967              	 .thumb
 1968              	 .thumb_func
 1970              	XMC_VADC_GROUP_SetBoundaries:
 1971              	.LFB244:
 682:../Libraries/XMCLib/src/xmc_vadc.c **** 
 683:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set boundaries for conversion results */
 684:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, const uint32_t boundary0, cons
 685:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1972              	 .loc 2 685 0
 1973              	 .cfi_startproc
 1974              	 
 1975              	 
 1976              	 
 1977 0000 80B4     	 push {r7}
 1978              	.LCFI170:
 1979              	 .cfi_def_cfa_offset 4
 1980              	 .cfi_offset 7,-4
 1981 0002 87B0     	 sub sp,sp,#28
 1982              	.LCFI171:
 1983              	 .cfi_def_cfa_offset 32
 1984 0004 00AF     	 add r7,sp,#0
 1985              	.LCFI172:
 1986              	 .cfi_def_cfa_register 7
 1987 0006 F860     	 str r0,[r7,#12]
 1988 0008 B960     	 str r1,[r7,#8]
 1989 000a 7A60     	 str r2,[r7,#4]
 686:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t bound;
 687:../Libraries/XMCLib/src/xmc_vadc.c **** 
 688:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetBoundaries:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
 689:../Libraries/XMCLib/src/xmc_vadc.c **** 
 690:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 691:../Libraries/XMCLib/src/xmc_vadc.c ****   bound  = group_ptr->BOUND;
 1990              	 .loc 2 691 0
 1991 000c FB68     	 ldr r3,[r7,#12]
 1992 000e D3F8B830 	 ldr r3,[r3,#184]
 1993 0012 7B61     	 str r3,[r7,#20]
 692:../Libraries/XMCLib/src/xmc_vadc.c ****   bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 1994              	 .loc 2 692 0
 1995 0014 7B69     	 ldr r3,[r7,#20]
 1996 0016 23F47F63 	 bic r3,r3,#4080
 1997 001a 23F00F03 	 bic r3,r3,#15
 1998 001e 7B61     	 str r3,[r7,#20]
 693:../Libraries/XMCLib/src/xmc_vadc.c ****   bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY1_Msk);
 1999              	 .loc 2 693 0
 2000 0020 7B69     	 ldr r3,[r7,#20]
 2001 0022 23F07F63 	 bic r3,r3,#267386880
 2002 0026 23F47023 	 bic r3,r3,#983040
 2003 002a 7B61     	 str r3,[r7,#20]
 694:../Libraries/XMCLib/src/xmc_vadc.c ****   bound |= (uint32_t) ((uint32_t) boundary0 << VADC_G_BOUND_BOUNDARY0_Pos);
 2004              	 .loc 2 694 0
 2005 002c 7A69     	 ldr r2,[r7,#20]
 2006 002e BB68     	 ldr r3,[r7,#8]
 2007 0030 1343     	 orrs r3,r3,r2
 2008 0032 7B61     	 str r3,[r7,#20]
 695:../Libraries/XMCLib/src/xmc_vadc.c ****   bound |= (uint32_t) ((uint32_t) boundary1 << VADC_G_BOUND_BOUNDARY1_Pos);
 2009              	 .loc 2 695 0
 2010 0034 7B68     	 ldr r3,[r7,#4]
 2011 0036 1B04     	 lsls r3,r3,#16
 2012 0038 7A69     	 ldr r2,[r7,#20]
 2013 003a 1343     	 orrs r3,r3,r2
 2014 003c 7B61     	 str r3,[r7,#20]
 696:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = bound;
 2015              	 .loc 2 696 0
 2016 003e FB68     	 ldr r3,[r7,#12]
 2017 0040 7A69     	 ldr r2,[r7,#20]
 2018 0042 C3F8B820 	 str r2,[r3,#184]
 697:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2019              	 .loc 2 697 0
 2020 0046 1C37     	 adds r7,r7,#28
 2021              	.LCFI173:
 2022              	 .cfi_def_cfa_offset 4
 2023 0048 BD46     	 mov sp,r7
 2024              	.LCFI174:
 2025              	 .cfi_def_cfa_register 13
 2026              	 
 2027 004a 5DF8047B 	 ldr r7,[sp],#4
 2028              	.LCFI175:
 2029              	 .cfi_restore 7
 2030              	 .cfi_def_cfa_offset 0
 2031 004e 7047     	 bx lr
 2032              	 .cfi_endproc
 2033              	.LFE244:
 2035              	 .section .text.XMC_VADC_GROUP_SetIndividualBoundary,"ax",%progbits
 2036              	 .align 2
 2037              	 .global XMC_VADC_GROUP_SetIndividualBoundary
 2038              	 .thumb
 2039              	 .thumb_func
 2041              	XMC_VADC_GROUP_SetIndividualBoundary:
 2042              	.LFB245:
 698:../Libraries/XMCLib/src/xmc_vadc.c **** 
 699:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an individual boundary for conversion results */
 700:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
 701:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_CHANNEL_BOUNDARY_t selection,
 702:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const uint16_t boundary_value)
 703:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2043              	 .loc 2 703 0
 2044              	 .cfi_startproc
 2045              	 
 2046              	 
 2047              	 
 2048 0000 80B4     	 push {r7}
 2049              	.LCFI176:
 2050              	 .cfi_def_cfa_offset 4
 2051              	 .cfi_offset 7,-4
 2052 0002 85B0     	 sub sp,sp,#20
 2053              	.LCFI177:
 2054              	 .cfi_def_cfa_offset 24
 2055 0004 00AF     	 add r7,sp,#0
 2056              	.LCFI178:
 2057              	 .cfi_def_cfa_register 7
 2058 0006 7860     	 str r0,[r7,#4]
 2059 0008 0B46     	 mov r3,r1
 2060 000a FB70     	 strb r3,[r7,#3]
 2061 000c 1346     	 mov r3,r2
 2062 000e 3B80     	 strh r3,[r7]
 704:../Libraries/XMCLib/src/xmc_vadc.c **** 
 705:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t bound;
 706:../Libraries/XMCLib/src/xmc_vadc.c **** 
 707:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetIndividualBoundary:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
 708:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetIndividualBoundary:Wrong Boundary Selection",
 709:../Libraries/XMCLib/src/xmc_vadc.c ****                ((XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 == selection) ||
 710:../Libraries/XMCLib/src/xmc_vadc.c ****                 (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1 == selection)))
 711:../Libraries/XMCLib/src/xmc_vadc.c **** 
 712:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 713:../Libraries/XMCLib/src/xmc_vadc.c ****   bound  = group_ptr->BOUND;
 2063              	 .loc 2 713 0
 2064 0010 7B68     	 ldr r3,[r7,#4]
 2065 0012 D3F8B830 	 ldr r3,[r3,#184]
 2066 0016 FB60     	 str r3,[r7,#12]
 714:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 == selection)
 2067              	 .loc 2 714 0
 2068 0018 FB78     	 ldrb r3,[r7,#3]
 2069 001a 002B     	 cmp r3,#0
 2070 001c 0AD1     	 bne .L71
 715:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 716:../Libraries/XMCLib/src/xmc_vadc.c ****     bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 2071              	 .loc 2 716 0
 2072 001e FB68     	 ldr r3,[r7,#12]
 2073 0020 23F47F63 	 bic r3,r3,#4080
 2074 0024 23F00F03 	 bic r3,r3,#15
 2075 0028 FB60     	 str r3,[r7,#12]
 717:../Libraries/XMCLib/src/xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY0_Pos);
 2076              	 .loc 2 717 0
 2077 002a 3B88     	 ldrh r3,[r7]
 2078 002c FA68     	 ldr r2,[r7,#12]
 2079 002e 1343     	 orrs r3,r3,r2
 2080 0030 FB60     	 str r3,[r7,#12]
 2081 0032 0DE0     	 b .L72
 2082              	.L71:
 718:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 719:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1 == selection)
 2083              	 .loc 2 719 0
 2084 0034 FB78     	 ldrb r3,[r7,#3]
 2085 0036 012B     	 cmp r3,#1
 2086 0038 0AD1     	 bne .L72
 720:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 721:../Libraries/XMCLib/src/xmc_vadc.c ****     bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY1_Msk);
 2087              	 .loc 2 721 0
 2088 003a FB68     	 ldr r3,[r7,#12]
 2089 003c 23F07F63 	 bic r3,r3,#267386880
 2090 0040 23F47023 	 bic r3,r3,#983040
 2091 0044 FB60     	 str r3,[r7,#12]
 722:../Libraries/XMCLib/src/xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY1_Pos);
 2092              	 .loc 2 722 0
 2093 0046 3B88     	 ldrh r3,[r7]
 2094 0048 1B04     	 lsls r3,r3,#16
 2095 004a FA68     	 ldr r2,[r7,#12]
 2096 004c 1343     	 orrs r3,r3,r2
 2097 004e FB60     	 str r3,[r7,#12]
 2098              	.L72:
 723:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 724:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 725:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 726:../Libraries/XMCLib/src/xmc_vadc.c ****     /* For MISRA*/
 727:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 728:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = bound;
 2099              	 .loc 2 728 0
 2100 0050 7B68     	 ldr r3,[r7,#4]
 2101 0052 FA68     	 ldr r2,[r7,#12]
 2102 0054 C3F8B820 	 str r2,[r3,#184]
 729:../Libraries/XMCLib/src/xmc_vadc.c **** 
 730:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2103              	 .loc 2 730 0
 2104 0058 1437     	 adds r7,r7,#20
 2105              	.LCFI179:
 2106              	 .cfi_def_cfa_offset 4
 2107 005a BD46     	 mov sp,r7
 2108              	.LCFI180:
 2109              	 .cfi_def_cfa_register 13
 2110              	 
 2111 005c 5DF8047B 	 ldr r7,[sp],#4
 2112              	.LCFI181:
 2113              	 .cfi_restore 7
 2114              	 .cfi_def_cfa_offset 0
 2115 0060 7047     	 bx lr
 2116              	 .cfi_endproc
 2117              	.LFE245:
 2119 0062 00BF     	 .section .text.XMC_VADC_GROUP_TriggerServiceRequest,"ax",%progbits
 2120              	 .align 2
 2121              	 .global XMC_VADC_GROUP_TriggerServiceRequest
 2122              	 .thumb
 2123              	 .thumb_func
 2125              	XMC_VADC_GROUP_TriggerServiceRequest:
 2126              	.LFB246:
 731:../Libraries/XMCLib/src/xmc_vadc.c **** 
 732:../Libraries/XMCLib/src/xmc_vadc.c **** /* Manually assert service request (Interrupt) to NVIC */
 733:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr,
 734:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const uint32_t sr_num,
 735:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_IRQ_t type)
 736:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2127              	 .loc 2 736 0
 2128              	 .cfi_startproc
 2129              	 
 2130              	 
 2131              	 
 2132 0000 80B4     	 push {r7}
 2133              	.LCFI182:
 2134              	 .cfi_def_cfa_offset 4
 2135              	 .cfi_offset 7,-4
 2136 0002 87B0     	 sub sp,sp,#28
 2137              	.LCFI183:
 2138              	 .cfi_def_cfa_offset 32
 2139 0004 00AF     	 add r7,sp,#0
 2140              	.LCFI184:
 2141              	 .cfi_def_cfa_register 7
 2142 0006 F860     	 str r0,[r7,#12]
 2143 0008 B960     	 str r1,[r7,#8]
 2144 000a 1346     	 mov r3,r2
 2145 000c FB71     	 strb r3,[r7,#7]
 737:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sract;
 738:../Libraries/XMCLib/src/xmc_vadc.c **** 
 739:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
 740:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong SR number", (sr_num <= XMC_VADC_SR_SHARED_
 741:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong SR type", ((type)<= XMC_VADC_GROUP_IRQ_SHA
 742:../Libraries/XMCLib/src/xmc_vadc.c **** 
 743:../Libraries/XMCLib/src/xmc_vadc.c ****   sract = group_ptr->SRACT;
 2146              	 .loc 2 743 0
 2147 000e FB68     	 ldr r3,[r7,#12]
 2148 0010 D3F8C831 	 ldr r3,[r3,#456]
 2149 0014 7B61     	 str r3,[r7,#20]
 744:../Libraries/XMCLib/src/xmc_vadc.c **** 
 745:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_GROUP_IRQ_KERNEL == type)
 2150              	 .loc 2 745 0
 2151 0016 FB79     	 ldrb r3,[r7,#7]
 2152 0018 002B     	 cmp r3,#0
 2153 001a 07D1     	 bne .L74
 746:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 747:../Libraries/XMCLib/src/xmc_vadc.c ****     sract |= (uint32_t)((uint32_t)1 << sr_num);
 2154              	 .loc 2 747 0
 2155 001c BB68     	 ldr r3,[r7,#8]
 2156 001e 0122     	 movs r2,#1
 2157 0020 02FA03F3 	 lsl r3,r2,r3
 2158 0024 7A69     	 ldr r2,[r7,#20]
 2159 0026 1343     	 orrs r3,r3,r2
 2160 0028 7B61     	 str r3,[r7,#20]
 2161 002a 07E0     	 b .L75
 2162              	.L74:
 748:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 749:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 750:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 751:../Libraries/XMCLib/src/xmc_vadc.c ****     sract |= (uint32_t)((uint32_t)1 << (sr_num + (uint32_t)8));
 2163              	 .loc 2 751 0
 2164 002c BB68     	 ldr r3,[r7,#8]
 2165 002e 0833     	 adds r3,r3,#8
 2166 0030 1A46     	 mov r2,r3
 2167 0032 0123     	 movs r3,#1
 2168 0034 9340     	 lsls r3,r3,r2
 2169 0036 7A69     	 ldr r2,[r7,#20]
 2170 0038 1343     	 orrs r3,r3,r2
 2171 003a 7B61     	 str r3,[r7,#20]
 2172              	.L75:
 752:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 753:../Libraries/XMCLib/src/xmc_vadc.c **** 
 754:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SRACT = sract;
 2173              	 .loc 2 754 0
 2174 003c FB68     	 ldr r3,[r7,#12]
 2175 003e 7A69     	 ldr r2,[r7,#20]
 2176 0040 C3F8C821 	 str r2,[r3,#456]
 755:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2177              	 .loc 2 755 0
 2178 0044 1C37     	 adds r7,r7,#28
 2179              	.LCFI185:
 2180              	 .cfi_def_cfa_offset 4
 2181 0046 BD46     	 mov sp,r7
 2182              	.LCFI186:
 2183              	 .cfi_def_cfa_register 13
 2184              	 
 2185 0048 5DF8047B 	 ldr r7,[sp],#4
 2186              	.LCFI187:
 2187              	 .cfi_restore 7
 2188              	 .cfi_def_cfa_offset 0
 2189 004c 7047     	 bx lr
 2190              	 .cfi_endproc
 2191              	.LFE246:
 2193 004e 00BF     	 .section .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode,"ax",%progbits
 2194              	 .align 2
 2195              	 .global XMC_VADC_GROUP_SetBoundaryEventInterruptNode
 2196              	 .thumb
 2197              	 .thumb_func
 2199              	XMC_VADC_GROUP_SetBoundaryEventInterruptNode:
 2200              	.LFB247:
 756:../Libraries/XMCLib/src/xmc_vadc.c **** 
 757:../Libraries/XMCLib/src/xmc_vadc.c **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
 758:../Libraries/XMCLib/src/xmc_vadc.c **** 
 759:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the SR line for the Boundary flag node pointer*/
 760:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
 761:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                   const uint8_t boundary_flag_num,
 762:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                   const XMC_VADC_BOUNDARY_NODE_t sr
 763:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2201              	 .loc 2 763 0
 2202              	 .cfi_startproc
 2203              	 
 2204              	 
 2205              	 
 2206 0000 80B4     	 push {r7}
 2207              	.LCFI188:
 2208              	 .cfi_def_cfa_offset 4
 2209              	 .cfi_offset 7,-4
 2210 0002 85B0     	 sub sp,sp,#20
 2211              	.LCFI189:
 2212              	 .cfi_def_cfa_offset 24
 2213 0004 00AF     	 add r7,sp,#0
 2214              	.LCFI190:
 2215              	 .cfi_def_cfa_register 7
 2216 0006 7860     	 str r0,[r7,#4]
 2217 0008 0B46     	 mov r3,r1
 2218 000a FB70     	 strb r3,[r7,#3]
 2219 000c 1346     	 mov r3,r2
 2220 000e BB70     	 strb r3,[r7,#2]
 764:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t flag_pos;
 765:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetBoundaryEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GRO
 766:../Libraries/XMCLib/src/xmc_vadc.c **** 
 767:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the GxBFLNP */
 768:../Libraries/XMCLib/src/xmc_vadc.c ****   flag_pos = (uint32_t)boundary_flag_num << (uint32_t)2;
 2221              	 .loc 2 768 0
 2222 0010 FB78     	 ldrb r3,[r7,#3]
 2223 0012 9B00     	 lsls r3,r3,#2
 2224 0014 FB60     	 str r3,[r7,#12]
 769:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP &= ~((uint32_t)VADC_G_BFLNP_BFL0NP_Msk << flag_pos);
 2225              	 .loc 2 769 0
 2226 0016 7B68     	 ldr r3,[r7,#4]
 2227 0018 D3F8D420 	 ldr r2,[r3,#212]
 2228 001c FB68     	 ldr r3,[r7,#12]
 2229 001e 0F21     	 movs r1,#15
 2230 0020 01FA03F3 	 lsl r3,r1,r3
 2231 0024 DB43     	 mvns r3,r3
 2232 0026 1A40     	 ands r2,r2,r3
 2233 0028 7B68     	 ldr r3,[r7,#4]
 2234 002a C3F8D420 	 str r2,[r3,#212]
 770:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP |= (uint32_t)sr << flag_pos;
 2235              	 .loc 2 770 0
 2236 002e 7B68     	 ldr r3,[r7,#4]
 2237 0030 D3F8D420 	 ldr r2,[r3,#212]
 2238 0034 B978     	 ldrb r1,[r7,#2]
 2239 0036 FB68     	 ldr r3,[r7,#12]
 2240 0038 01FA03F3 	 lsl r3,r1,r3
 2241 003c 1A43     	 orrs r2,r2,r3
 2242 003e 7B68     	 ldr r3,[r7,#4]
 2243 0040 C3F8D420 	 str r2,[r3,#212]
 771:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2244              	 .loc 2 771 0
 2245 0044 1437     	 adds r7,r7,#20
 2246              	.LCFI191:
 2247              	 .cfi_def_cfa_offset 4
 2248 0046 BD46     	 mov sp,r7
 2249              	.LCFI192:
 2250              	 .cfi_def_cfa_register 13
 2251              	 
 2252 0048 5DF8047B 	 ldr r7,[sp],#4
 2253              	.LCFI193:
 2254              	 .cfi_restore 7
 2255              	 .cfi_def_cfa_offset 0
 2256 004c 7047     	 bx lr
 2257              	 .cfi_endproc
 2258              	.LFE247:
 2260 004e 00BF     	 .section .text.XMC_VADC_GROUP_ScanInit,"ax",%progbits
 2261              	 .align 2
 2262              	 .global XMC_VADC_GROUP_ScanInit
 2263              	 .thumb
 2264              	 .thumb_func
 2266              	XMC_VADC_GROUP_ScanInit:
 2267              	.LFB248:
 772:../Libraries/XMCLib/src/xmc_vadc.c **** 
 773:../Libraries/XMCLib/src/xmc_vadc.c **** #endif /* XMC_VADC_BOUNDARY_FLAG_SELECT */
 774:../Libraries/XMCLib/src/xmc_vadc.c **** 
 775:../Libraries/XMCLib/src/xmc_vadc.c **** #endif /* XMC_VADC_GROUP_AVAILABLE */
 776:../Libraries/XMCLib/src/xmc_vadc.c **** 
 777:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 778:../Libraries/XMCLib/src/xmc_vadc.c **** 
 779:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to Initialize the Sample and hold features*/
 780:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONFI
 781:../Libraries/XMCLib/src/xmc_vadc.c **** {
 782:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_Init:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(voi
 783:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_Init:Wrong Index number",(config == (XMC_VADC_GLOBAL_SHS_CONFIG_t
 784:../Libraries/XMCLib/src/xmc_vadc.c **** 
 785:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Initialize the SHS Configuration register*/
 786:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->SHSCFG = (uint32_t)((uint32_t)config->shscfg | (uint32_t)SHS_SHSCFG_SCWC_Msk);
 787:../Libraries/XMCLib/src/xmc_vadc.c **** 
 788:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Select the Calibration order*/
 789:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALORD_Msk);
 790:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->CALCTR |=  (uint32_t) ((uint32_t)config->calibration_order << SHS_CALCTR_CALORD_Pos);
 791:../Libraries/XMCLib/src/xmc_vadc.c **** }
 792:../Libraries/XMCLib/src/xmc_vadc.c **** 
 793:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the accelerated mode of conversion */
 794:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROUP
 795:../Libraries/XMCLib/src/xmc_vadc.c **** {
 796:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong SHS Pointer",
 797:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 798:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC_
 799:../Libraries/XMCLib/src/xmc_vadc.c **** 
 800:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the converted to Accelerated mode from compatible mode*/
 801:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 802:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 803:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 |= (uint32_t)SHS_TIMCFG0_AT_Msk;
 804:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 805:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 806:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 807:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)SHS_TIMCFG1_AT_Msk;
 808:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 809:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 810:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 811:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 812:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 813:../Libraries/XMCLib/src/xmc_vadc.c **** }
 814:../Libraries/XMCLib/src/xmc_vadc.c **** 
 815:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable the accelerated mode of conversion */
 816:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROU
 817:../Libraries/XMCLib/src/xmc_vadc.c **** {
 818:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:Wrong SHS Pointer",
 819:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 820:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC
 821:../Libraries/XMCLib/src/xmc_vadc.c **** 
 822:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the converted to Accelerated mode from compatible mode*/
 823:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 824:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 825:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 &= ~(uint32_t)SHS_TIMCFG0_AT_Msk;
 826:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 827:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 828:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 829:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 &= ~(uint32_t)SHS_TIMCFG1_AT_Msk;
 830:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 831:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 832:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 833:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 834:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 835:../Libraries/XMCLib/src/xmc_vadc.c **** }
 836:../Libraries/XMCLib/src/xmc_vadc.c **** 
 837:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the Short sample time of the Sample and hold module*/
 838:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 839:../Libraries/XMCLib/src/xmc_vadc.c ****                                             XMC_VADC_GROUP_INDEX_t group_num,
 840:../Libraries/XMCLib/src/xmc_vadc.c ****                                             uint8_t sst_value)
 841:../Libraries/XMCLib/src/xmc_vadc.c **** {
 842:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong SHS Pointer",
 843:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 844:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong Index number",(group_num <= XMC_VADC_GRO
 845:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong SST value",(sst_value < 64U))
 846:../Libraries/XMCLib/src/xmc_vadc.c **** 
 847:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the short sample time for the Accelerated mode of operation*/
 848:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 849:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 850:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 &= ~((uint32_t)SHS_TIMCFG0_SST_Msk);
 851:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG0_SST_Pos );
 852:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 853:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 854:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 855:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 &= ~((uint32_t)SHS_TIMCFG1_SST_Msk);
 856:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG1_SST_Pos );
 857:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 858:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 859:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 860:../Libraries/XMCLib/src/xmc_vadc.c ****   /* for MISRA*/
 861:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 862:../Libraries/XMCLib/src/xmc_vadc.c **** }
 863:../Libraries/XMCLib/src/xmc_vadc.c **** 
 864:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the gain factor of the Sample and hold module*/
 865:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 866:../Libraries/XMCLib/src/xmc_vadc.c ****                                        uint8_t gain_value,
 867:../Libraries/XMCLib/src/xmc_vadc.c ****                                        XMC_VADC_GROUP_INDEX_t group_num,
 868:../Libraries/XMCLib/src/xmc_vadc.c ****                                        uint8_t ch_num)
 869:../Libraries/XMCLib/src/xmc_vadc.c **** {
 870:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ch_mask;
 871:../Libraries/XMCLib/src/xmc_vadc.c **** 
 872:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetGainFactor:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL_SH
 873:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetGainFactor:Wrong Index number",(group_num <= XMC_VADC_GROUP_IN
 874:../Libraries/XMCLib/src/xmc_vadc.c **** 
 875:../Libraries/XMCLib/src/xmc_vadc.c ****   /*Calculate location of channel bit-field*/
 876:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_mask = ((uint32_t)ch_num << (uint32_t)2);
 877:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 878:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 879:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR00 &= ~((uint32_t)SHS_GNCTR00_GAIN0_Msk << ch_mask) ;
 880:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR00 |=  ((uint32_t)gain_value << ch_mask);
 881:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 882:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 883:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 884:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 &= ~((uint32_t)SHS_GNCTR10_GAIN0_Msk << ch_mask);
 885:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 |=  ((uint32_t)gain_value << ch_mask);
 886:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 887:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 888:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 889:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 890:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 891:../Libraries/XMCLib/src/xmc_vadc.c **** }
 892:../Libraries/XMCLib/src/xmc_vadc.c **** 
 893:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the gain and offset calibration of the Sample and hold module*/
 894:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 895:../Libraries/XMCLib/src/xmc_vadc.c ****                                                          XMC_VADC_GROUP_INDEX_t group_num)
 896:../Libraries/XMCLib/src/xmc_vadc.c **** {
 897:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:Wrong SHS Pointer",
 898:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 899:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:Wrong group selected",
 900:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num <= (uint32_t)XMC_VADC_GROUP_INDEX_1))
 901:../Libraries/XMCLib/src/xmc_vadc.c **** 
 902:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable gain and offset calibration*/
 903:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 904:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 905:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 &= ~((uint32_t)SHS_CALOC0_DISCAL_Msk);
 906:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 907:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 908:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 909:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 &= ~((uint32_t)SHS_CALOC1_DISCAL_Msk);
 910:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 911:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 912:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 913:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 914:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 915:../Libraries/XMCLib/src/xmc_vadc.c **** }
 916:../Libraries/XMCLib/src/xmc_vadc.c **** 
 917:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the gain and offset calibration of the Sample and hold module*/
 918:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 919:../Libraries/XMCLib/src/xmc_vadc.c ****                                                           XMC_VADC_GROUP_INDEX_t group_num)
 920:../Libraries/XMCLib/src/xmc_vadc.c **** {
 921:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:Wrong SHS Pointer",
 922:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 923:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:Wrong group selected",
 924:../Libraries/XMCLib/src/xmc_vadc.c ****             (group_num <= (uint32_t)XMC_VADC_GROUP_INDEX_1))
 925:../Libraries/XMCLib/src/xmc_vadc.c **** 
 926:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 927:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 928:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 |= (uint32_t)SHS_CALOC0_DISCAL_Msk;
 929:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 930:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 931:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 932:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 |= (uint32_t)SHS_CALOC1_DISCAL_Msk;
 933:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 934:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 935:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 936:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 937:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 938:../Libraries/XMCLib/src/xmc_vadc.c **** }
 939:../Libraries/XMCLib/src/xmc_vadc.c **** 
 940:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to get the offset calibration value of the Sample and hold module*/
 941:../Libraries/XMCLib/src/xmc_vadc.c **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 942:../Libraries/XMCLib/src/xmc_vadc.c ****                                                       XMC_VADC_GROUP_INDEX_t group_num,
 943:../Libraries/XMCLib/src/xmc_vadc.c ****                                                       XMC_VADC_SHS_GAIN_LEVEL_t gain_level)
 944:../Libraries/XMCLib/src/xmc_vadc.c **** {
 945:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t calibration_value;
 946:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong SHS Pointer",
 947:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 948:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong Group number selected",
 949:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
 950:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong gain level selected",
 951:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_0)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_1)||
 952:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_2)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_3))
 953:../Libraries/XMCLib/src/xmc_vadc.c **** 
 954:../Libraries/XMCLib/src/xmc_vadc.c ****   calibration_value = 0U;
 955:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 956:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 957:../Libraries/XMCLib/src/xmc_vadc.c ****     calibration_value = (shs_ptr->CALOC0 >> (uint32_t)gain_level) & (uint32_t)SHS_CALOC0_CALOFFVAL0
 958:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 959:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 960:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 961:../Libraries/XMCLib/src/xmc_vadc.c ****     calibration_value = (shs_ptr->CALOC1 >> (uint32_t)gain_level) & (uint32_t)SHS_CALOC1_CALOFFVAL0
 962:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 963:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 964:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 965:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 966:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 967:../Libraries/XMCLib/src/xmc_vadc.c ****   return ((uint8_t)calibration_value);
 968:../Libraries/XMCLib/src/xmc_vadc.c **** }
 969:../Libraries/XMCLib/src/xmc_vadc.c **** 
 970:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the offset calibration value of the Sample and hold module*/
 971:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 972:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    XMC_VADC_GROUP_INDEX_t group_num,
 973:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
 974:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    uint8_t offset_calibration_value)
 975:../Libraries/XMCLib/src/xmc_vadc.c **** {
 976:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong SHS Pointer",
 977:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 978:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong Group number selected",
 979:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
 980:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong gain level selected",
 981:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_0)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_1)||
 982:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_2)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_3))
 983:../Libraries/XMCLib/src/xmc_vadc.c **** 
 984:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 985:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 986:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 = (shs_ptr->CALOC0  & ~((uint32_t)SHS_CALOC0_CALOFFVAL0_Msk << (uint32_t)gain_l
 987:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC0_OFFWC_Msk;
 988:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 |=  ((uint32_t)offset_calibration_value << (uint32_t)gain_level) | (uint32_t)SH
 989:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 990:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 991:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 992:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 = (shs_ptr->CALOC1 & ~((uint32_t)SHS_CALOC1_CALOFFVAL0_Msk << (uint32_t)gain_le
 993:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC1_OFFWC_Msk;
 994:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 |=  ((uint32_t)offset_calibration_value << (uint32_t)gain_level) | (uint32_t)SH
 995:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 996:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 997:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 998:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 999:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1000:../Libraries/XMCLib/src/xmc_vadc.c **** }
1001:../Libraries/XMCLib/src/xmc_vadc.c **** 
1002:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the values of sigma delta loop of the Sample and hold module*/
1003:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1004:../Libraries/XMCLib/src/xmc_vadc.c ****                                            XMC_VADC_GROUP_INDEX_t group_num,
1005:../Libraries/XMCLib/src/xmc_vadc.c ****                                            XMC_VADC_SHS_LOOP_CH_t loop_select,
1006:../Libraries/XMCLib/src/xmc_vadc.c ****                                            uint8_t ch_num)
1007:../Libraries/XMCLib/src/xmc_vadc.c **** {
1008:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong SHS Pointer",
1009:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1010:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Group number selected",
1011:../Libraries/XMCLib/src/xmc_vadc.c ****                (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
1012:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Delta sigma loop selected",
1013:../Libraries/XMCLib/src/xmc_vadc.c ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
1014:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Channel Number",
1015:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1016:../Libraries/XMCLib/src/xmc_vadc.c **** 
1017:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->LOOP &= ~(((uint32_t)SHS_LOOP_LPCH0_Msk | (uint32_t)SHS_LOOP_LPSH0_Msk | (uint32_t)SHS_L
1018:../Libraries/XMCLib/src/xmc_vadc.c ****                      << (uint32_t)loop_select);
1019:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->LOOP |= ((uint32_t)ch_num | ((uint32_t)group_num << (uint32_t)SHS_LOOP_LPSH0_Pos)) << (u
1020:../Libraries/XMCLib/src/xmc_vadc.c **** 
1021:../Libraries/XMCLib/src/xmc_vadc.c **** }
1022:../Libraries/XMCLib/src/xmc_vadc.c **** 
1023:../Libraries/XMCLib/src/xmc_vadc.c **** #endif /* XMC_VADC_SHS_AVAILABLE */
1024:../Libraries/XMCLib/src/xmc_vadc.c **** 
1025:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)   
1026:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize the group scan hardware of a kernel */
1027:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
1028:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2268              	 .loc 2 1028 0
 2269              	 .cfi_startproc
 2270              	 
 2271              	 
 2272 0000 80B5     	 push {r7,lr}
 2273              	.LCFI194:
 2274              	 .cfi_def_cfa_offset 8
 2275              	 .cfi_offset 7,-8
 2276              	 .cfi_offset 14,-4
 2277 0002 84B0     	 sub sp,sp,#16
 2278              	.LCFI195:
 2279              	 .cfi_def_cfa_offset 24
 2280 0004 00AF     	 add r7,sp,#0
 2281              	.LCFI196:
 2282              	 .cfi_def_cfa_register 7
 2283 0006 7860     	 str r0,[r7,#4]
 2284 0008 3960     	 str r1,[r7]
1029:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t      reg;
1030:../Libraries/XMCLib/src/xmc_vadc.c **** 
1031:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1032:../Libraries/XMCLib/src/xmc_vadc.c **** 
1033:../Libraries/XMCLib/src/xmc_vadc.c ****   /* All configurations have to be performed with the arbitration slot disabled */
1034:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 2285              	 .loc 2 1034 0
 2286 000a 7868     	 ldr r0,[r7,#4]
 2287 000c FFF7FEFF 	 bl XMC_VADC_GROUP_ScanDisableArbitrationSlot
1035:../Libraries/XMCLib/src/xmc_vadc.c ****   
1036:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Read in the existing contents of arbitration priority register */
1037:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = group_ptr->ARBPR;
 2288              	 .loc 2 1037 0
 2289 0010 7B68     	 ldr r3,[r7,#4]
 2290 0012 D3F88430 	 ldr r3,[r3,#132]
 2291 0016 FB60     	 str r3,[r7,#12]
1038:../Libraries/XMCLib/src/xmc_vadc.c **** 
1039:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the priority of the request source */
1040:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~(uint32_t)VADC_G_ARBPR_PRIO1_Msk;
 2292              	 .loc 2 1040 0
 2293 0018 FB68     	 ldr r3,[r7,#12]
 2294 001a 23F03003 	 bic r3,r3,#48
 2295 001e FB60     	 str r3,[r7,#12]
1041:../Libraries/XMCLib/src/xmc_vadc.c ****   reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO1_Pos);
 2296              	 .loc 2 1041 0
 2297 0020 3B68     	 ldr r3,[r7]
 2298 0022 1B78     	 ldrb r3,[r3]
 2299 0024 C3F38103 	 ubfx r3,r3,#2,#2
 2300 0028 DBB2     	 uxtb r3,r3
 2301 002a 1B01     	 lsls r3,r3,#4
 2302 002c FA68     	 ldr r2,[r7,#12]
 2303 002e 1343     	 orrs r3,r3,r2
 2304 0030 FB60     	 str r3,[r7,#12]
1042:../Libraries/XMCLib/src/xmc_vadc.c ****   
1043:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the start mode */
1044:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 2305              	 .loc 2 1044 0
 2306 0032 3B68     	 ldr r3,[r7]
 2307 0034 1B78     	 ldrb r3,[r3]
 2308 0036 03F00303 	 and r3,r3,#3
 2309 003a DBB2     	 uxtb r3,r3
 2310 003c 002B     	 cmp r3,#0
 2311 003e 03D0     	 beq .L78
1045:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1046:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)(VADC_G_ARBPR_CSM1_Msk);
 2312              	 .loc 2 1046 0
 2313 0040 FB68     	 ldr r3,[r7,#12]
 2314 0042 43F08003 	 orr r3,r3,#128
 2315 0046 FB60     	 str r3,[r7,#12]
 2316              	.L78:
1047:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1048:../Libraries/XMCLib/src/xmc_vadc.c **** 
1049:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR = reg;
 2317              	 .loc 2 1049 0
 2318 0048 7B68     	 ldr r3,[r7,#4]
 2319 004a FA68     	 ldr r2,[r7,#12]
 2320 004c C3F88420 	 str r2,[r3,#132]
1050:../Libraries/XMCLib/src/xmc_vadc.c **** 
1051:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL = (uint32_t)(config->asctrl |(VADC_G_ASCTRL_XTWC_Msk) |(VADC_G_ASCTRL_GTWC_Msk)
 2321              	 .loc 2 1051 0
 2322 0050 3B68     	 ldr r3,[r7]
 2323 0052 5B68     	 ldr r3,[r3,#4]
 2324 0054 43F08023 	 orr r3,r3,#-2147450880
 2325 0058 43F40003 	 orr r3,r3,#8388608
 2326 005c 7A68     	 ldr r2,[r7,#4]
 2327 005e C2F82031 	 str r3,[r2,#288]
1052:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  (VADC_G_ASCTRL_TMWC_Msk));
1053:../Libraries/XMCLib/src/xmc_vadc.c **** 
1054:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR  = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VA
 2328              	 .loc 2 1054 0
 2329 0062 3B68     	 ldr r3,[r7]
 2330 0064 9B68     	 ldr r3,[r3,#8]
 2331 0066 43F00102 	 orr r2,r3,#1
 2332 006a 7B68     	 ldr r3,[r7,#4]
 2333 006c C3F82421 	 str r2,[r3,#292]
1055:../Libraries/XMCLib/src/xmc_vadc.c ****   
1056:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 2334              	 .loc 2 1056 0
 2335 0070 3B68     	 ldr r3,[r7]
 2336 0072 1B78     	 ldrb r3,[r3]
 2337 0074 03F00303 	 and r3,r3,#3
 2338 0078 DBB2     	 uxtb r3,r3
 2339 007a 022B     	 cmp r3,#2
 2340 007c 07D1     	 bne .L79
1057:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1058:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_RPTDIS_Msk;
 2341              	 .loc 2 1058 0
 2342 007e 7B68     	 ldr r3,[r7,#4]
 2343 0080 D3F82431 	 ldr r3,[r3,#292]
 2344 0084 43F48032 	 orr r2,r3,#65536
 2345 0088 7B68     	 ldr r3,[r7,#4]
 2346 008a C3F82421 	 str r2,[r3,#292]
 2347              	.L79:
1059:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1060:../Libraries/XMCLib/src/xmc_vadc.c ****   
1061:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable arbitration slot now */
1062:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanEnableArbitrationSlot(group_ptr);
 2348              	 .loc 2 1062 0
 2349 008e 7868     	 ldr r0,[r7,#4]
 2350 0090 FFF7FEFF 	 bl XMC_VADC_GROUP_ScanEnableArbitrationSlot
1063:../Libraries/XMCLib/src/xmc_vadc.c ****   
1064:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2351              	 .loc 2 1064 0
 2352 0094 1037     	 adds r7,r7,#16
 2353              	.LCFI197:
 2354              	 .cfi_def_cfa_offset 8
 2355 0096 BD46     	 mov sp,r7
 2356              	.LCFI198:
 2357              	 .cfi_def_cfa_register 13
 2358              	 
 2359 0098 80BD     	 pop {r7,pc}
 2360              	 .cfi_endproc
 2361              	.LFE248:
 2363 009a 00BF     	 .section .text.XMC_VADC_GROUP_ScanSelectTrigger,"ax",%progbits
 2364              	 .align 2
 2365              	 .global XMC_VADC_GROUP_ScanSelectTrigger
 2366              	 .thumb
 2367              	 .thumb_func
 2369              	XMC_VADC_GROUP_ScanSelectTrigger:
 2370              	.LFB249:
1065:../Libraries/XMCLib/src/xmc_vadc.c **** 
1066:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger input for Group Scan request source */
1067:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
1068:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2371              	 .loc 2 1068 0
 2372              	 .cfi_startproc
 2373              	 
 2374              	 
 2375              	 
 2376 0000 80B4     	 push {r7}
 2377              	.LCFI199:
 2378              	 .cfi_def_cfa_offset 4
 2379              	 .cfi_offset 7,-4
 2380 0002 85B0     	 sub sp,sp,#20
 2381              	.LCFI200:
 2382              	 .cfi_def_cfa_offset 24
 2383 0004 00AF     	 add r7,sp,#0
 2384              	.LCFI201:
 2385              	 .cfi_def_cfa_register 7
 2386 0006 7860     	 str r0,[r7,#4]
 2387 0008 0B46     	 mov r3,r1
 2388 000a FB70     	 strb r3,[r7,#3]
1069:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1070:../Libraries/XMCLib/src/xmc_vadc.c **** 
1071:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1072:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTrigger:Wrong Trigger Port", ((trigger_input)< XMC_VADC_NUM_
1073:../Libraries/XMCLib/src/xmc_vadc.c **** 
1074:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 2389              	 .loc 2 1074 0
 2390 000c 7B68     	 ldr r3,[r7,#4]
 2391 000e D3F82031 	 ldr r3,[r3,#288]
 2392 0012 FB60     	 str r3,[r7,#12]
1075:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
 2393              	 .loc 2 1075 0
 2394 0014 FB68     	 ldr r3,[r7,#12]
 2395 0016 43F40043 	 orr r3,r3,#32768
 2396 001a FB60     	 str r3,[r7,#12]
1076:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_XTSEL_Msk);
 2397              	 .loc 2 1076 0
 2398 001c FB68     	 ldr r3,[r7,#12]
 2399 001e 23F47063 	 bic r3,r3,#3840
 2400 0022 FB60     	 str r3,[r7,#12]
1077:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_input << VADC_G_ASCTRL_XTSEL_Pos);
 2401              	 .loc 2 1077 0
 2402 0024 FB78     	 ldrb r3,[r7,#3]
 2403 0026 1B02     	 lsls r3,r3,#8
 2404 0028 FA68     	 ldr r2,[r7,#12]
 2405 002a 1343     	 orrs r3,r3,r2
 2406 002c FB60     	 str r3,[r7,#12]
1078:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 2407              	 .loc 2 1078 0
 2408 002e 7B68     	 ldr r3,[r7,#4]
 2409 0030 FA68     	 ldr r2,[r7,#12]
 2410 0032 C3F82021 	 str r2,[r3,#288]
1079:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2411              	 .loc 2 1079 0
 2412 0036 1437     	 adds r7,r7,#20
 2413              	.LCFI202:
 2414              	 .cfi_def_cfa_offset 4
 2415 0038 BD46     	 mov sp,r7
 2416              	.LCFI203:
 2417              	 .cfi_def_cfa_register 13
 2418              	 
 2419 003a 5DF8047B 	 ldr r7,[sp],#4
 2420              	.LCFI204:
 2421              	 .cfi_restore 7
 2422              	 .cfi_def_cfa_offset 0
 2423 003e 7047     	 bx lr
 2424              	 .cfi_endproc
 2425              	.LFE249:
 2427              	 .section .text.XMC_VADC_GROUP_ScanSelectTriggerEdge,"ax",%progbits
 2428              	 .align 2
 2429              	 .global XMC_VADC_GROUP_ScanSelectTriggerEdge
 2430              	 .thumb
 2431              	 .thumb_func
 2433              	XMC_VADC_GROUP_ScanSelectTriggerEdge:
 2434              	.LFB250:
1080:../Libraries/XMCLib/src/xmc_vadc.c **** 
1081:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1082:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
1083:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2435              	 .loc 2 1083 0
 2436              	 .cfi_startproc
 2437              	 
 2438              	 
 2439              	 
 2440 0000 80B4     	 push {r7}
 2441              	.LCFI205:
 2442              	 .cfi_def_cfa_offset 4
 2443              	 .cfi_offset 7,-4
 2444 0002 85B0     	 sub sp,sp,#20
 2445              	.LCFI206:
 2446              	 .cfi_def_cfa_offset 24
 2447 0004 00AF     	 add r7,sp,#0
 2448              	.LCFI207:
 2449              	 .cfi_def_cfa_register 7
 2450 0006 7860     	 str r0,[r7,#4]
 2451 0008 0B46     	 mov r3,r1
 2452 000a FB70     	 strb r3,[r7,#3]
1084:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1085:../Libraries/XMCLib/src/xmc_vadc.c **** 
1086:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTriggerEdge:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
1087:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTriggerEdge:Wrong Trigger Port", ((trigger_edge)<= XMC_VADC_
1088:../Libraries/XMCLib/src/xmc_vadc.c **** 
1089:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 2453              	 .loc 2 1089 0
 2454 000c 7B68     	 ldr r3,[r7,#4]
 2455 000e D3F82031 	 ldr r3,[r3,#288]
 2456 0012 FB60     	 str r3,[r7,#12]
1090:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
 2457              	 .loc 2 1090 0
 2458 0014 FB68     	 ldr r3,[r7,#12]
 2459 0016 43F40043 	 orr r3,r3,#32768
 2460 001a FB60     	 str r3,[r7,#12]
1091:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_XTMODE_Msk);
 2461              	 .loc 2 1091 0
 2462 001c FB68     	 ldr r3,[r7,#12]
 2463 001e 23F4C043 	 bic r3,r3,#24576
 2464 0022 FB60     	 str r3,[r7,#12]
1092:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_G_ASCTRL_XTMODE_Pos);
 2465              	 .loc 2 1092 0
 2466 0024 FB78     	 ldrb r3,[r7,#3]
 2467 0026 5B03     	 lsls r3,r3,#13
 2468 0028 FA68     	 ldr r2,[r7,#12]
 2469 002a 1343     	 orrs r3,r3,r2
 2470 002c FB60     	 str r3,[r7,#12]
1093:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 2471              	 .loc 2 1093 0
 2472 002e 7B68     	 ldr r3,[r7,#4]
 2473 0030 FA68     	 ldr r2,[r7,#12]
 2474 0032 C3F82021 	 str r2,[r3,#288]
1094:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2475              	 .loc 2 1094 0
 2476 0036 1437     	 adds r7,r7,#20
 2477              	.LCFI208:
 2478              	 .cfi_def_cfa_offset 4
 2479 0038 BD46     	 mov sp,r7
 2480              	.LCFI209:
 2481              	 .cfi_def_cfa_register 13
 2482              	 
 2483 003a 5DF8047B 	 ldr r7,[sp],#4
 2484              	.LCFI210:
 2485              	 .cfi_restore 7
 2486              	 .cfi_def_cfa_offset 0
 2487 003e 7047     	 bx lr
 2488              	 .cfi_endproc
 2489              	.LFE250:
 2491              	 .section .text.XMC_VADC_GROUP_ScanSelectGating,"ax",%progbits
 2492              	 .align 2
 2493              	 .global XMC_VADC_GROUP_ScanSelectGating
 2494              	 .thumb
 2495              	 .thumb_func
 2497              	XMC_VADC_GROUP_ScanSelectGating:
 2498              	.LFB251:
1095:../Libraries/XMCLib/src/xmc_vadc.c **** 
1096:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger gating input for Group Scan request source */
1097:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
1098:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2499              	 .loc 2 1098 0
 2500              	 .cfi_startproc
 2501              	 
 2502              	 
 2503              	 
 2504 0000 80B4     	 push {r7}
 2505              	.LCFI211:
 2506              	 .cfi_def_cfa_offset 4
 2507              	 .cfi_offset 7,-4
 2508 0002 85B0     	 sub sp,sp,#20
 2509              	.LCFI212:
 2510              	 .cfi_def_cfa_offset 24
 2511 0004 00AF     	 add r7,sp,#0
 2512              	.LCFI213:
 2513              	 .cfi_def_cfa_register 7
 2514 0006 7860     	 str r0,[r7,#4]
 2515 0008 0B46     	 mov r3,r1
 2516 000a FB70     	 strb r3,[r7,#3]
1099:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1100:../Libraries/XMCLib/src/xmc_vadc.c **** 
1101:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectGating:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
1102:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectGating:Wrong Gating Port", ((gating_input)< XMC_VADC_NUM_POR
1103:../Libraries/XMCLib/src/xmc_vadc.c **** 
1104:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 2517              	 .loc 2 1104 0
 2518 000c 7B68     	 ldr r3,[r7,#4]
 2519 000e D3F82031 	 ldr r3,[r3,#288]
 2520 0012 FB60     	 str r3,[r7,#12]
1105:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)VADC_G_ASCTRL_GTWC_Msk;
 2521              	 .loc 2 1105 0
 2522 0014 FB68     	 ldr r3,[r7,#12]
 2523 0016 43F40003 	 orr r3,r3,#8388608
 2524 001a FB60     	 str r3,[r7,#12]
1106:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_GTSEL_Msk);
 2525              	 .loc 2 1106 0
 2526 001c FB68     	 ldr r3,[r7,#12]
 2527 001e 23F47023 	 bic r3,r3,#983040
 2528 0022 FB60     	 str r3,[r7,#12]
1107:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)gating_input << VADC_G_ASCTRL_GTSEL_Pos);
 2529              	 .loc 2 1107 0
 2530 0024 FB78     	 ldrb r3,[r7,#3]
 2531 0026 1B04     	 lsls r3,r3,#16
 2532 0028 FA68     	 ldr r2,[r7,#12]
 2533 002a 1343     	 orrs r3,r3,r2
 2534 002c FB60     	 str r3,[r7,#12]
1108:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 2535              	 .loc 2 1108 0
 2536 002e 7B68     	 ldr r3,[r7,#4]
 2537 0030 FA68     	 ldr r2,[r7,#12]
 2538 0032 C3F82021 	 str r2,[r3,#288]
1109:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2539              	 .loc 2 1109 0
 2540 0036 1437     	 adds r7,r7,#20
 2541              	.LCFI214:
 2542              	 .cfi_def_cfa_offset 4
 2543 0038 BD46     	 mov sp,r7
 2544              	.LCFI215:
 2545              	 .cfi_def_cfa_register 13
 2546              	 
 2547 003a 5DF8047B 	 ldr r7,[sp],#4
 2548              	.LCFI216:
 2549              	 .cfi_restore 7
 2550              	 .cfi_def_cfa_offset 0
 2551 003e 7047     	 bx lr
 2552              	 .cfi_endproc
 2553              	.LFE251:
 2555              	 .section .text.XMC_VADC_GROUP_ScanSequenceAbort,"ax",%progbits
 2556              	 .align 2
 2557              	 .global XMC_VADC_GROUP_ScanSequenceAbort
 2558              	 .thumb
 2559              	 .thumb_func
 2561              	XMC_VADC_GROUP_ScanSequenceAbort:
 2562              	.LFB252:
1110:../Libraries/XMCLib/src/xmc_vadc.c **** 
1111:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to stop an ongoing conversion of a sequence */
1112:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr)
1113:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2563              	 .loc 2 1113 0
 2564              	 .cfi_startproc
 2565              	 
 2566              	 
 2567 0000 80B5     	 push {r7,lr}
 2568              	.LCFI217:
 2569              	 .cfi_def_cfa_offset 8
 2570              	 .cfi_offset 7,-8
 2571              	 .cfi_offset 14,-4
 2572 0002 84B0     	 sub sp,sp,#16
 2573              	.LCFI218:
 2574              	 .cfi_def_cfa_offset 24
 2575 0004 00AF     	 add r7,sp,#0
 2576              	.LCFI219:
 2577              	 .cfi_def_cfa_register 7
 2578 0006 7860     	 str r0,[r7,#4]
1114:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t asctrl;
1115:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1116:../Libraries/XMCLib/src/xmc_vadc.c **** 
1117:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSequenceAbort:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1118:../Libraries/XMCLib/src/xmc_vadc.c **** 
1119:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable trigger and gating before abort*/
1120:../Libraries/XMCLib/src/xmc_vadc.c ****   asctrl = group_ptr->ASCTRL;
 2579              	 .loc 2 1120 0
 2580 0008 7B68     	 ldr r3,[r7,#4]
 2581 000a D3F82031 	 ldr r3,[r3,#288]
 2582 000e FB60     	 str r3,[r7,#12]
1121:../Libraries/XMCLib/src/xmc_vadc.c **** 
1122:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL =(0U | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
 2583              	 .loc 2 1122 0
 2584 0010 7B68     	 ldr r3,[r7,#4]
 2585 0012 1A4A     	 ldr r2,.L84
 2586 0014 C3F82021 	 str r2,[r3,#288]
1123:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
1124:../Libraries/XMCLib/src/xmc_vadc.c **** 
1125:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable Arbitration before abort*/
1126:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN1_Pos) & 1U);
 2587              	 .loc 2 1126 0
 2588 0018 7B68     	 ldr r3,[r7,#4]
 2589 001a D3F88430 	 ldr r3,[r3,#132]
 2590 001e 5B0E     	 lsrs r3,r3,#25
 2591 0020 03F00103 	 and r3,r3,#1
 2592 0024 002B     	 cmp r3,#0
 2593 0026 14BF     	 ite ne
 2594 0028 0123     	 movne r3,#1
 2595 002a 0023     	 moveq r3,#0
 2596 002c FB72     	 strb r3,[r7,#11]
1127:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 2597              	 .loc 2 1127 0
 2598 002e 7868     	 ldr r0,[r7,#4]
 2599 0030 FFF7FEFF 	 bl XMC_VADC_GROUP_ScanDisableArbitrationSlot
1128:../Libraries/XMCLib/src/xmc_vadc.c **** 
1129:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENGT_Msk);
 2600              	 .loc 2 1129 0
 2601 0034 7B68     	 ldr r3,[r7,#4]
 2602 0036 D3F82431 	 ldr r3,[r3,#292]
 2603 003a 23F00302 	 bic r2,r3,#3
 2604 003e 7B68     	 ldr r3,[r7,#4]
 2605 0040 C3F82421 	 str r2,[r3,#292]
1130:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_CLRPND_Msk;
 2606              	 .loc 2 1130 0
 2607 0044 7B68     	 ldr r3,[r7,#4]
 2608 0046 D3F82431 	 ldr r3,[r3,#292]
 2609 004a 43F48072 	 orr r2,r3,#256
 2610 004e 7B68     	 ldr r3,[r7,#4]
 2611 0050 C3F82421 	 str r2,[r3,#292]
1131:../Libraries/XMCLib/src/xmc_vadc.c **** 
1132:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Enable the arbitration slot 1*/
1133:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN1_Pos);
 2612              	 .loc 2 1133 0
 2613 0054 7B68     	 ldr r3,[r7,#4]
 2614 0056 D3F88420 	 ldr r2,[r3,#132]
 2615 005a FB7A     	 ldrb r3,[r7,#11]
 2616 005c 5B06     	 lsls r3,r3,#25
 2617 005e 1A43     	 orrs r2,r2,r3
 2618 0060 7B68     	 ldr r3,[r7,#4]
 2619 0062 C3F88420 	 str r2,[r3,#132]
1134:../Libraries/XMCLib/src/xmc_vadc.c **** 
1135:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1136:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL =(asctrl | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
1137:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
 2620              	 .loc 2 1137 0
 2621 0066 FB68     	 ldr r3,[r7,#12]
 2622 0068 43F08023 	 orr r3,r3,#-2147450880
 2623 006c 43F40003 	 orr r3,r3,#8388608
1136:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
 2624              	 .loc 2 1136 0
 2625 0070 7A68     	 ldr r2,[r7,#4]
 2626 0072 C2F82031 	 str r3,[r2,#288]
1138:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2627              	 .loc 2 1138 0
 2628 0076 1037     	 adds r7,r7,#16
 2629              	.LCFI220:
 2630              	 .cfi_def_cfa_offset 8
 2631 0078 BD46     	 mov sp,r7
 2632              	.LCFI221:
 2633              	 .cfi_def_cfa_register 13
 2634              	 
 2635 007a 80BD     	 pop {r7,pc}
 2636              	.L85:
 2637              	 .align 2
 2638              	.L84:
 2639 007c 00808080 	 .word -2139062272
 2640              	 .cfi_endproc
 2641              	.LFE252:
 2643              	 .section .text.XMC_VADC_GROUP_ScanGetNumChannelsPending,"ax",%progbits
 2644              	 .align 2
 2645              	 .global XMC_VADC_GROUP_ScanGetNumChannelsPending
 2646              	 .thumb
 2647              	 .thumb_func
 2649              	XMC_VADC_GROUP_ScanGetNumChannelsPending:
 2650              	.LFB253:
1139:../Libraries/XMCLib/src/xmc_vadc.c **** 
1140:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to find out number of channels awaiting conversion */
1141:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr)
1142:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2651              	 .loc 2 1142 0
 2652              	 .cfi_startproc
 2653              	 
 2654              	 
 2655              	 
 2656 0000 80B4     	 push {r7}
 2657              	.LCFI222:
 2658              	 .cfi_def_cfa_offset 4
 2659              	 .cfi_offset 7,-4
 2660 0002 87B0     	 sub sp,sp,#28
 2661              	.LCFI223:
 2662              	 .cfi_def_cfa_offset 32
 2663 0004 00AF     	 add r7,sp,#0
 2664              	.LCFI224:
 2665              	 .cfi_def_cfa_register 7
 2666 0006 7860     	 str r0,[r7,#4]
1143:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1144:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1145:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t count;
1146:../Libraries/XMCLib/src/xmc_vadc.c **** 
1147:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanGetNumChannelsPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1148:../Libraries/XMCLib/src/xmc_vadc.c **** 
1149:../Libraries/XMCLib/src/xmc_vadc.c **** 
1150:../Libraries/XMCLib/src/xmc_vadc.c ****   count = 0U;
 2667              	 .loc 2 1150 0
 2668 0008 0023     	 movs r3,#0
 2669 000a FB60     	 str r3,[r7,#12]
1151:../Libraries/XMCLib/src/xmc_vadc.c **** 
1152:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_ptr->ASPND)
 2670              	 .loc 2 1152 0
 2671 000c 7B68     	 ldr r3,[r7,#4]
 2672 000e D3F82C31 	 ldr r3,[r3,#300]
 2673 0012 002B     	 cmp r3,#0
 2674 0014 17D0     	 beq .L87
1153:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1154:../Libraries/XMCLib/src/xmc_vadc.c ****     reg = group_ptr->ASPND;
 2675              	 .loc 2 1154 0
 2676 0016 7B68     	 ldr r3,[r7,#4]
 2677 0018 D3F82C31 	 ldr r3,[r3,#300]
 2678 001c 7B61     	 str r3,[r7,#20]
1155:../Libraries/XMCLib/src/xmc_vadc.c **** 
1156:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i=0U;i<XMC_VADC_NUM_CHANNELS_PER_GROUP;i++)
 2679              	 .loc 2 1156 0
 2680 001e 0023     	 movs r3,#0
 2681 0020 3B61     	 str r3,[r7,#16]
 2682 0022 0DE0     	 b .L88
 2683              	.L90:
1157:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1158:../Libraries/XMCLib/src/xmc_vadc.c ****       if (reg & 1U)
 2684              	 .loc 2 1158 0
 2685 0024 7B69     	 ldr r3,[r7,#20]
 2686 0026 03F00103 	 and r3,r3,#1
 2687 002a 002B     	 cmp r3,#0
 2688 002c 02D0     	 beq .L89
1159:../Libraries/XMCLib/src/xmc_vadc.c ****       {
1160:../Libraries/XMCLib/src/xmc_vadc.c ****         count++;
 2689              	 .loc 2 1160 0
 2690 002e FB68     	 ldr r3,[r7,#12]
 2691 0030 0133     	 adds r3,r3,#1
 2692 0032 FB60     	 str r3,[r7,#12]
 2693              	.L89:
1161:../Libraries/XMCLib/src/xmc_vadc.c ****       }
1162:../Libraries/XMCLib/src/xmc_vadc.c ****       reg = (uint32_t)(reg >> (uint32_t)1);
 2694              	 .loc 2 1162 0 discriminator 2
 2695 0034 7B69     	 ldr r3,[r7,#20]
 2696 0036 5B08     	 lsrs r3,r3,#1
 2697 0038 7B61     	 str r3,[r7,#20]
1156:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 2698              	 .loc 2 1156 0 discriminator 2
 2699 003a 3B69     	 ldr r3,[r7,#16]
 2700 003c 0133     	 adds r3,r3,#1
 2701 003e 3B61     	 str r3,[r7,#16]
 2702              	.L88:
1156:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 2703              	 .loc 2 1156 0 is_stmt 0 discriminator 1
 2704 0040 3B69     	 ldr r3,[r7,#16]
 2705 0042 072B     	 cmp r3,#7
 2706 0044 EED9     	 bls .L90
 2707              	.L87:
1163:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1164:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1165:../Libraries/XMCLib/src/xmc_vadc.c **** 
1166:../Libraries/XMCLib/src/xmc_vadc.c ****   return count;
 2708              	 .loc 2 1166 0 is_stmt 1
 2709 0046 FB68     	 ldr r3,[r7,#12]
1167:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2710              	 .loc 2 1167 0
 2711 0048 1846     	 mov r0,r3
 2712 004a 1C37     	 adds r7,r7,#28
 2713              	.LCFI225:
 2714              	 .cfi_def_cfa_offset 4
 2715 004c BD46     	 mov sp,r7
 2716              	.LCFI226:
 2717              	 .cfi_def_cfa_register 13
 2718              	 
 2719 004e 5DF8047B 	 ldr r7,[sp],#4
 2720              	.LCFI227:
 2721              	 .cfi_restore 7
 2722              	 .cfi_def_cfa_offset 0
 2723 0052 7047     	 bx lr
 2724              	 .cfi_endproc
 2725              	.LFE253:
 2727              	 .section .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode,"ax",%progbits
 2728              	 .align 2
 2729              	 .global XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode
 2730              	 .thumb
 2731              	 .thumb_func
 2733              	XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:
 2734              	.LFB254:
1168:../Libraries/XMCLib/src/xmc_vadc.c **** 
1169:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select a service request line (NVIC Node) for request source event */
1170:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
1171:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2735              	 .loc 2 1171 0
 2736              	 .cfi_startproc
 2737              	 
 2738              	 
 2739              	 
 2740 0000 80B4     	 push {r7}
 2741              	.LCFI228:
 2742              	 .cfi_def_cfa_offset 4
 2743              	 .cfi_offset 7,-4
 2744 0002 85B0     	 sub sp,sp,#20
 2745              	.LCFI229:
 2746              	 .cfi_def_cfa_offset 24
 2747 0004 00AF     	 add r7,sp,#0
 2748              	.LCFI230:
 2749              	 .cfi_def_cfa_register 7
 2750 0006 7860     	 str r0,[r7,#4]
 2751 0008 0B46     	 mov r3,r1
 2752 000a FB70     	 strb r3,[r7,#3]
1172:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sevnp;
1173:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp = group_ptr->SEVNP;
 2753              	 .loc 2 1173 0
 2754 000c 7B68     	 ldr r3,[r7,#4]
 2755 000e D3F8C031 	 ldr r3,[r3,#448]
 2756 0012 FB60     	 str r3,[r7,#12]
1174:../Libraries/XMCLib/src/xmc_vadc.c **** 
1175:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_G
1176:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_
1177:../Libraries/XMCLib/src/xmc_vadc.c **** 
1178:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV1NP_Msk);
 2757              	 .loc 2 1178 0
 2758 0014 FB68     	 ldr r3,[r7,#12]
 2759 0016 23F0F003 	 bic r3,r3,#240
 2760 001a FB60     	 str r3,[r7,#12]
1179:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV1NP_Pos);
 2761              	 .loc 2 1179 0
 2762 001c FB78     	 ldrb r3,[r7,#3]
 2763 001e 1B01     	 lsls r3,r3,#4
 2764 0020 FA68     	 ldr r2,[r7,#12]
 2765 0022 1343     	 orrs r3,r3,r2
 2766 0024 FB60     	 str r3,[r7,#12]
1180:../Libraries/XMCLib/src/xmc_vadc.c **** 
1181:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SEVNP = sevnp;
 2767              	 .loc 2 1181 0
 2768 0026 7B68     	 ldr r3,[r7,#4]
 2769 0028 FA68     	 ldr r2,[r7,#12]
 2770 002a C3F8C021 	 str r2,[r3,#448]
1182:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2771              	 .loc 2 1182 0
 2772 002e 1437     	 adds r7,r7,#20
 2773              	.LCFI231:
 2774              	 .cfi_def_cfa_offset 4
 2775 0030 BD46     	 mov sp,r7
 2776              	.LCFI232:
 2777              	 .cfi_def_cfa_register 13
 2778              	 
 2779 0032 5DF8047B 	 ldr r7,[sp],#4
 2780              	.LCFI233:
 2781              	 .cfi_restore 7
 2782              	 .cfi_def_cfa_offset 0
 2783 0036 7047     	 bx lr
 2784              	 .cfi_endproc
 2785              	.LFE254:
 2787              	 .section .text.XMC_VADC_GROUP_ScanRemoveChannel,"ax",%progbits
 2788              	 .align 2
 2789              	 .global XMC_VADC_GROUP_ScanRemoveChannel
 2790              	 .thumb
 2791              	 .thumb_func
 2793              	XMC_VADC_GROUP_ScanRemoveChannel:
 2794              	.LFB255:
1183:../Libraries/XMCLib/src/xmc_vadc.c **** 
1184:../Libraries/XMCLib/src/xmc_vadc.c **** /* Removes the selected channel from conversion*/
1185:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
1186:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2795              	 .loc 2 1186 0
 2796              	 .cfi_startproc
 2797              	 
 2798              	 
 2799              	 
 2800 0000 80B4     	 push {r7}
 2801              	.LCFI234:
 2802              	 .cfi_def_cfa_offset 4
 2803              	 .cfi_offset 7,-4
 2804 0002 85B0     	 sub sp,sp,#20
 2805              	.LCFI235:
 2806              	 .cfi_def_cfa_offset 24
 2807 0004 00AF     	 add r7,sp,#0
 2808              	.LCFI236:
 2809              	 .cfi_def_cfa_register 7
 2810 0006 7860     	 str r0,[r7,#4]
 2811 0008 3960     	 str r1,[r7]
1187:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t assel;
1188:../Libraries/XMCLib/src/xmc_vadc.c **** 
1189:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanRemoveChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1190:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanRemoveChannel:Wrong channel number", ((channel_num)< XMC_VADC_NUM_
1191:../Libraries/XMCLib/src/xmc_vadc.c **** 
1192:../Libraries/XMCLib/src/xmc_vadc.c ****   assel = group_ptr->ASSEL; 
 2812              	 .loc 2 1192 0
 2813 000a 7B68     	 ldr r3,[r7,#4]
 2814 000c D3F82831 	 ldr r3,[r3,#296]
 2815 0010 FB60     	 str r3,[r7,#12]
1193:../Libraries/XMCLib/src/xmc_vadc.c ****   assel &= (~( 1 << channel_num));
 2816              	 .loc 2 1193 0
 2817 0012 3B68     	 ldr r3,[r7]
 2818 0014 0122     	 movs r2,#1
 2819 0016 02FA03F3 	 lsl r3,r2,r3
 2820 001a DB43     	 mvns r3,r3
 2821 001c 1A46     	 mov r2,r3
 2822 001e FB68     	 ldr r3,[r7,#12]
 2823 0020 1340     	 ands r3,r3,r2
 2824 0022 FB60     	 str r3,[r7,#12]
1194:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASSEL  = assel;
 2825              	 .loc 2 1194 0
 2826 0024 7B68     	 ldr r3,[r7,#4]
 2827 0026 FA68     	 ldr r2,[r7,#12]
 2828 0028 C3F82821 	 str r2,[r3,#296]
1195:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2829              	 .loc 2 1195 0
 2830 002c 1437     	 adds r7,r7,#20
 2831              	.LCFI237:
 2832              	 .cfi_def_cfa_offset 4
 2833 002e BD46     	 mov sp,r7
 2834              	.LCFI238:
 2835              	 .cfi_def_cfa_register 13
 2836              	 
 2837 0030 5DF8047B 	 ldr r7,[sp],#4
 2838              	.LCFI239:
 2839              	 .cfi_restore 7
 2840              	 .cfi_def_cfa_offset 0
 2841 0034 7047     	 bx lr
 2842              	 .cfi_endproc
 2843              	.LFE255:
 2845 0036 00BF     	 .section .text.XMC_VADC_GLOBAL_BackgroundInit,"ax",%progbits
 2846              	 .align 2
 2847              	 .global XMC_VADC_GLOBAL_BackgroundInit
 2848              	 .thumb
 2849              	 .thumb_func
 2851              	XMC_VADC_GLOBAL_BackgroundInit:
 2852              	.LFB256:
1196:../Libraries/XMCLib/src/xmc_vadc.c **** #endif /* XMC_VADC_GSCAN_AVAILABLE */
1197:../Libraries/XMCLib/src/xmc_vadc.c **** 
1198:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize background scan request source hardware */
1199:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
1200:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2853              	 .loc 2 1200 0
 2854              	 .cfi_startproc
 2855              	 
 2856              	 
 2857 0000 80B5     	 push {r7,lr}
 2858              	.LCFI240:
 2859              	 .cfi_def_cfa_offset 8
 2860              	 .cfi_offset 7,-8
 2861              	 .cfi_offset 14,-4
 2862 0002 86B0     	 sub sp,sp,#24
 2863              	.LCFI241:
 2864              	 .cfi_def_cfa_offset 32
 2865 0004 00AF     	 add r7,sp,#0
 2866              	.LCFI242:
 2867              	 .cfi_def_cfa_register 7
 2868 0006 7860     	 str r0,[r7,#4]
 2869 0008 3960     	 str r1,[r7]
1201:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1202:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t i;
1203:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1204:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t conv_start_mask;
1205:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1206:../Libraries/XMCLib/src/xmc_vadc.c ****   
1207:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))
1208:../Libraries/XMCLib/src/xmc_vadc.c **** 
1209:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1210:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 2870              	 .loc 2 1210 0
 2871 000a 0023     	 movs r3,#0
 2872 000c FB75     	 strb r3,[r7,#23]
 2873 000e 09E0     	 b .L95
 2874              	.L96:
1211:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1212:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 2875              	 .loc 2 1212 0 discriminator 3
 2876 0010 FB7D     	 ldrb r3,[r7,#23]
 2877 0012 394A     	 ldr r2,.L103
 2878 0014 52F82330 	 ldr r3,[r2,r3,lsl#2]
 2879 0018 1846     	 mov r0,r3
 2880 001a FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
1210:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 2881              	 .loc 2 1210 0 discriminator 3
 2882 001e FB7D     	 ldrb r3,[r7,#23]
 2883 0020 0133     	 adds r3,r3,#1
 2884 0022 FB75     	 strb r3,[r7,#23]
 2885              	.L95:
1210:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 2886              	 .loc 2 1210 0 is_stmt 0 discriminator 1
 2887 0024 FB7D     	 ldrb r3,[r7,#23]
 2888 0026 032B     	 cmp r3,#3
 2889 0028 F2D9     	 bls .L96
1213:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1214:../Libraries/XMCLib/src/xmc_vadc.c ****   
1215:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_start_mask = (uint32_t) 0;
 2890              	 .loc 2 1215 0 is_stmt 1
 2891 002a 0023     	 movs r3,#0
 2892 002c 3B61     	 str r3,[r7,#16]
1216:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 2893              	 .loc 2 1216 0
 2894 002e 3B68     	 ldr r3,[r7]
 2895 0030 1B78     	 ldrb r3,[r3]
 2896 0032 03F00303 	 and r3,r3,#3
 2897 0036 DBB2     	 uxtb r3,r3
 2898 0038 002B     	 cmp r3,#0
 2899 003a 02D0     	 beq .L97
1217:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1218:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 2900              	 .loc 2 1218 0
 2901 003c 4FF40063 	 mov r3,#2048
 2902 0040 3B61     	 str r3,[r7,#16]
 2903              	.L97:
1219:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1220:../Libraries/XMCLib/src/xmc_vadc.c ****   
1221:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 2904              	 .loc 2 1221 0
 2905 0042 0023     	 movs r3,#0
 2906 0044 FB75     	 strb r3,[r7,#23]
 2907 0046 21E0     	 b .L98
 2908              	.L99:
1222:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1223:../Libraries/XMCLib/src/xmc_vadc.c ****     reg = g_xmc_vadc_group_array[i]->ARBPR;
 2909              	 .loc 2 1223 0 discriminator 3
 2910 0048 FB7D     	 ldrb r3,[r7,#23]
 2911 004a 2B4A     	 ldr r2,.L103
 2912 004c 52F82330 	 ldr r3,[r2,r3,lsl#2]
 2913 0050 D3F88430 	 ldr r3,[r3,#132]
 2914 0054 FB60     	 str r3,[r7,#12]
1224:../Libraries/XMCLib/src/xmc_vadc.c **** 
1225:../Libraries/XMCLib/src/xmc_vadc.c ****     reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 2915              	 .loc 2 1225 0 discriminator 3
 2916 0056 FB68     	 ldr r3,[r7,#12]
 2917 0058 23F44073 	 bic r3,r3,#768
 2918 005c FB60     	 str r3,[r7,#12]
1226:../Libraries/XMCLib/src/xmc_vadc.c **** 
1227:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Program the priority of the request source */
1228:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 2919              	 .loc 2 1228 0 discriminator 3
 2920 005e 3B68     	 ldr r3,[r7]
 2921 0060 1B78     	 ldrb r3,[r3]
 2922 0062 C3F38103 	 ubfx r3,r3,#2,#2
 2923 0066 DBB2     	 uxtb r3,r3
 2924 0068 1B02     	 lsls r3,r3,#8
 2925 006a FA68     	 ldr r2,[r7,#12]
 2926 006c 1343     	 orrs r3,r3,r2
 2927 006e FB60     	 str r3,[r7,#12]
1229:../Libraries/XMCLib/src/xmc_vadc.c ****   
1230:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Program the start mode */
1231:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= conv_start_mask;
 2928              	 .loc 2 1231 0 discriminator 3
 2929 0070 FA68     	 ldr r2,[r7,#12]
 2930 0072 3B69     	 ldr r3,[r7,#16]
 2931 0074 1343     	 orrs r3,r3,r2
 2932 0076 FB60     	 str r3,[r7,#12]
1232:../Libraries/XMCLib/src/xmc_vadc.c **** 
1233:../Libraries/XMCLib/src/xmc_vadc.c ****     g_xmc_vadc_group_array[i]->ARBPR = reg;
 2933              	 .loc 2 1233 0 discriminator 3
 2934 0078 FB7D     	 ldrb r3,[r7,#23]
 2935 007a 1F4A     	 ldr r2,.L103
 2936 007c 52F82330 	 ldr r3,[r2,r3,lsl#2]
 2937 0080 FA68     	 ldr r2,[r7,#12]
 2938 0082 C3F88420 	 str r2,[r3,#132]
1221:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 2939              	 .loc 2 1221 0 discriminator 3
 2940 0086 FB7D     	 ldrb r3,[r7,#23]
 2941 0088 0133     	 adds r3,r3,#1
 2942 008a FB75     	 strb r3,[r7,#23]
 2943              	.L98:
1221:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 2944              	 .loc 2 1221 0 is_stmt 0 discriminator 1
 2945 008c FB7D     	 ldrb r3,[r7,#23]
 2946 008e 032B     	 cmp r3,#3
 2947 0090 DAD9     	 bls .L99
1234:../Libraries/XMCLib/src/xmc_vadc.c ****   
1235:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1236:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1237:../Libraries/XMCLib/src/xmc_vadc.c **** 
1238:../Libraries/XMCLib/src/xmc_vadc.c ****   /* program BRSCTRL register */
1239:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VAD
 2948              	 .loc 2 1239 0 is_stmt 1
 2949 0092 3B68     	 ldr r3,[r7]
 2950 0094 5B68     	 ldr r3,[r3,#4]
 2951 0096 43F40003 	 orr r3,r3,#8388608
 2952 009a 43F40043 	 orr r3,r3,#32768
 2953 009e 7A68     	 ldr r2,[r7,#4]
 2954 00a0 C2F80032 	 str r3,[r2,#512]
1240:../Libraries/XMCLib/src/xmc_vadc.c **** 
1241:../Libraries/XMCLib/src/xmc_vadc.c ****   /* program BRSMR register */
1242:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << V
 2955              	 .loc 2 1242 0
 2956 00a4 3B68     	 ldr r3,[r7]
 2957 00a6 9B68     	 ldr r3,[r3,#8]
 2958 00a8 43F00102 	 orr r2,r3,#1
 2959 00ac 7B68     	 ldr r3,[r7,#4]
 2960 00ae C3F80422 	 str r2,[r3,#516]
1243:../Libraries/XMCLib/src/xmc_vadc.c ****   
1244:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1245:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 2961              	 .loc 2 1245 0
 2962 00b2 3B68     	 ldr r3,[r7]
 2963 00b4 1B78     	 ldrb r3,[r3]
 2964 00b6 03F00303 	 and r3,r3,#3
 2965 00ba DBB2     	 uxtb r3,r3
 2966 00bc 022B     	 cmp r3,#2
 2967 00be 07D1     	 bne .L100
1246:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1247:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 2968              	 .loc 2 1247 0
 2969 00c0 7B68     	 ldr r3,[r7,#4]
 2970 00c2 D3F80432 	 ldr r3,[r3,#516]
 2971 00c6 43F48032 	 orr r2,r3,#65536
 2972 00ca 7B68     	 ldr r3,[r7,#4]
 2973 00cc C3F80422 	 str r2,[r3,#516]
 2974              	.L100:
1248:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1249:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1250:../Libraries/XMCLib/src/xmc_vadc.c ****   
1251:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1252:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 2975              	 .loc 2 1252 0
 2976 00d0 0023     	 movs r3,#0
 2977 00d2 FB75     	 strb r3,[r7,#23]
 2978 00d4 09E0     	 b .L101
 2979              	.L102:
1253:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1254:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 2980              	 .loc 2 1254 0 discriminator 3
 2981 00d6 FB7D     	 ldrb r3,[r7,#23]
 2982 00d8 074A     	 ldr r2,.L103
 2983 00da 52F82330 	 ldr r3,[r2,r3,lsl#2]
 2984 00de 1846     	 mov r0,r3
 2985 00e0 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
1252:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 2986              	 .loc 2 1252 0 discriminator 3
 2987 00e4 FB7D     	 ldrb r3,[r7,#23]
 2988 00e6 0133     	 adds r3,r3,#1
 2989 00e8 FB75     	 strb r3,[r7,#23]
 2990              	.L101:
1252:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 2991              	 .loc 2 1252 0 is_stmt 0 discriminator 1
 2992 00ea FB7D     	 ldrb r3,[r7,#23]
 2993 00ec 032B     	 cmp r3,#3
 2994 00ee F2D9     	 bls .L102
1255:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1256:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1257:../Libraries/XMCLib/src/xmc_vadc.c ****   
1258:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2995              	 .loc 2 1258 0 is_stmt 1
 2996 00f0 1837     	 adds r7,r7,#24
 2997              	.LCFI243:
 2998              	 .cfi_def_cfa_offset 8
 2999 00f2 BD46     	 mov sp,r7
 3000              	.LCFI244:
 3001              	 .cfi_def_cfa_register 13
 3002              	 
 3003 00f4 80BD     	 pop {r7,pc}
 3004              	.L104:
 3005 00f6 00BF     	 .align 2
 3006              	.L103:
 3007 00f8 00000000 	 .word g_xmc_vadc_group_array
 3008              	 .cfi_endproc
 3009              	.LFE256:
 3011              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger,"ax",%progbits
 3012              	 .align 2
 3013              	 .global XMC_VADC_GLOBAL_BackgroundSelectTrigger
 3014              	 .thumb
 3015              	 .thumb_func
 3017              	XMC_VADC_GLOBAL_BackgroundSelectTrigger:
 3018              	.LFB257:
1259:../Libraries/XMCLib/src/xmc_vadc.c **** 
1260:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger for background scan request source */
1261:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
1262:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3019              	 .loc 2 1262 0
 3020              	 .cfi_startproc
 3021              	 
 3022              	 
 3023              	 
 3024 0000 80B4     	 push {r7}
 3025              	.LCFI245:
 3026              	 .cfi_def_cfa_offset 4
 3027              	 .cfi_offset 7,-4
 3028 0002 85B0     	 sub sp,sp,#20
 3029              	.LCFI246:
 3030              	 .cfi_def_cfa_offset 24
 3031 0004 00AF     	 add r7,sp,#0
 3032              	.LCFI247:
 3033              	 .cfi_def_cfa_register 7
 3034 0006 7860     	 str r0,[r7,#4]
 3035 0008 3960     	 str r1,[r7]
1263:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1264:../Libraries/XMCLib/src/xmc_vadc.c **** 
1265:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("VADC_BCKGND_SelectTriggerInput:Wrong Module Pointer", (global_ptr == VADC))
1266:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTrigger:Wrong Trigger Port", ((input_num)< XMC_VADC_N
1267:../Libraries/XMCLib/src/xmc_vadc.c **** 
1268:../Libraries/XMCLib/src/xmc_vadc.c ****   
1269:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl       = global_ptr->BRSCTRL;
 3036              	 .loc 2 1269 0
 3037 000a 7B68     	 ldr r3,[r7,#4]
 3038 000c D3F80032 	 ldr r3,[r3,#512]
 3039 0010 FB60     	 str r3,[r7,#12]
1270:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)VADC_BRSCTRL_XTWC_Msk;
 3040              	 .loc 2 1270 0
 3041 0012 FB68     	 ldr r3,[r7,#12]
 3042 0014 43F40043 	 orr r3,r3,#32768
 3043 0018 FB60     	 str r3,[r7,#12]
1271:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      &= ~((uint32_t)VADC_BRSCTRL_XTSEL_Msk);
 3044              	 .loc 2 1271 0
 3045 001a FB68     	 ldr r3,[r7,#12]
 3046 001c 23F47063 	 bic r3,r3,#3840
 3047 0020 FB60     	 str r3,[r7,#12]
1272:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_XTSEL_Pos);
 3048              	 .loc 2 1272 0
 3049 0022 3B68     	 ldr r3,[r7]
 3050 0024 1B02     	 lsls r3,r3,#8
 3051 0026 FA68     	 ldr r2,[r7,#12]
 3052 0028 1343     	 orrs r3,r3,r2
 3053 002a FB60     	 str r3,[r7,#12]
1273:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 3054              	 .loc 2 1273 0
 3055 002c 7B68     	 ldr r3,[r7,#4]
 3056 002e FA68     	 ldr r2,[r7,#12]
 3057 0030 C3F80022 	 str r2,[r3,#512]
1274:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3058              	 .loc 2 1274 0
 3059 0034 1437     	 adds r7,r7,#20
 3060              	.LCFI248:
 3061              	 .cfi_def_cfa_offset 4
 3062 0036 BD46     	 mov sp,r7
 3063              	.LCFI249:
 3064              	 .cfi_def_cfa_register 13
 3065              	 
 3066 0038 5DF8047B 	 ldr r7,[sp],#4
 3067              	.LCFI250:
 3068              	 .cfi_restore 7
 3069              	 .cfi_def_cfa_offset 0
 3070 003c 7047     	 bx lr
 3071              	 .cfi_endproc
 3072              	.LFE257:
 3074 003e 00BF     	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge,"ax",%progbits
 3075              	 .align 2
 3076              	 .global XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge
 3077              	 .thumb
 3078              	 .thumb_func
 3080              	XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:
 3081              	.LFB258:
1275:../Libraries/XMCLib/src/xmc_vadc.c **** 
1276:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1277:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr,
1278:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const XMC_VADC_TRIGGER_EDGE_t trigger_edge)
1279:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3082              	 .loc 2 1279 0
 3083              	 .cfi_startproc
 3084              	 
 3085              	 
 3086              	 
 3087 0000 80B4     	 push {r7}
 3088              	.LCFI251:
 3089              	 .cfi_def_cfa_offset 4
 3090              	 .cfi_offset 7,-4
 3091 0002 85B0     	 sub sp,sp,#20
 3092              	.LCFI252:
 3093              	 .cfi_def_cfa_offset 24
 3094 0004 00AF     	 add r7,sp,#0
 3095              	.LCFI253:
 3096              	 .cfi_def_cfa_register 7
 3097 0006 7860     	 str r0,[r7,#4]
 3098 0008 0B46     	 mov r3,r1
 3099 000a FB70     	 strb r3,[r7,#3]
1280:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1281:../Libraries/XMCLib/src/xmc_vadc.c **** 
1282:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:Wrong Global Pointer", (global_ptr == VAD
1283:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:Wrong Trigger Port",
1284:../Libraries/XMCLib/src/xmc_vadc.c ****             ((trigger_edge)<= XMC_VADC_TRIGGER_EDGE_ANY))
1285:../Libraries/XMCLib/src/xmc_vadc.c **** 
1286:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = global_ptr->BRSCTRL;
 3100              	 .loc 2 1286 0
 3101 000c 7B68     	 ldr r3,[r7,#4]
 3102 000e D3F80032 	 ldr r3,[r3,#512]
 3103 0012 FB60     	 str r3,[r7,#12]
1287:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_BRSCTRL_XTWC_Msk;
 3104              	 .loc 2 1287 0
 3105 0014 FB68     	 ldr r3,[r7,#12]
 3106 0016 43F40043 	 orr r3,r3,#32768
 3107 001a FB60     	 str r3,[r7,#12]
1288:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_BRSCTRL_XTMODE_Msk);
 3108              	 .loc 2 1288 0
 3109 001c FB68     	 ldr r3,[r7,#12]
 3110 001e 23F4C043 	 bic r3,r3,#24576
 3111 0022 FB60     	 str r3,[r7,#12]
1289:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_BRSCTRL_XTMODE_Pos);
 3112              	 .loc 2 1289 0
 3113 0024 FB78     	 ldrb r3,[r7,#3]
 3114 0026 5B03     	 lsls r3,r3,#13
 3115 0028 FA68     	 ldr r2,[r7,#12]
 3116 002a 1343     	 orrs r3,r3,r2
 3117 002c FB60     	 str r3,[r7,#12]
1290:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 3118              	 .loc 2 1290 0
 3119 002e 7B68     	 ldr r3,[r7,#4]
 3120 0030 FA68     	 ldr r2,[r7,#12]
 3121 0032 C3F80022 	 str r2,[r3,#512]
1291:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3122              	 .loc 2 1291 0
 3123 0036 1437     	 adds r7,r7,#20
 3124              	.LCFI254:
 3125              	 .cfi_def_cfa_offset 4
 3126 0038 BD46     	 mov sp,r7
 3127              	.LCFI255:
 3128              	 .cfi_def_cfa_register 13
 3129              	 
 3130 003a 5DF8047B 	 ldr r7,[sp],#4
 3131              	.LCFI256:
 3132              	 .cfi_restore 7
 3133              	 .cfi_def_cfa_offset 0
 3134 003e 7047     	 bx lr
 3135              	 .cfi_endproc
 3136              	.LFE258:
 3138              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectGating,"ax",%progbits
 3139              	 .align 2
 3140              	 .global XMC_VADC_GLOBAL_BackgroundSelectGating
 3141              	 .thumb
 3142              	 .thumb_func
 3144              	XMC_VADC_GLOBAL_BackgroundSelectGating:
 3145              	.LFB259:
1292:../Libraries/XMCLib/src/xmc_vadc.c **** 
1293:../Libraries/XMCLib/src/xmc_vadc.c **** 
1294:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger gate for background scan request source */
1295:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
1296:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3146              	 .loc 2 1296 0
 3147              	 .cfi_startproc
 3148              	 
 3149              	 
 3150              	 
 3151 0000 80B4     	 push {r7}
 3152              	.LCFI257:
 3153              	 .cfi_def_cfa_offset 4
 3154              	 .cfi_offset 7,-4
 3155 0002 85B0     	 sub sp,sp,#20
 3156              	.LCFI258:
 3157              	 .cfi_def_cfa_offset 24
 3158 0004 00AF     	 add r7,sp,#0
 3159              	.LCFI259:
 3160              	 .cfi_def_cfa_register 7
 3161 0006 7860     	 str r0,[r7,#4]
 3162 0008 3960     	 str r1,[r7]
1297:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1298:../Libraries/XMCLib/src/xmc_vadc.c **** 
1299:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectGating:Wrong Module Pointer", (global_ptr == VADC))
1300:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectGating:Wrong Gating Port", ((input_num)< XMC_VADC_NUM
1301:../Libraries/XMCLib/src/xmc_vadc.c **** 
1302:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl       = global_ptr->BRSCTRL;
 3163              	 .loc 2 1302 0
 3164 000a 7B68     	 ldr r3,[r7,#4]
 3165 000c D3F80032 	 ldr r3,[r3,#512]
 3166 0010 FB60     	 str r3,[r7,#12]
1303:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)VADC_BRSCTRL_GTWC_Msk;
 3167              	 .loc 2 1303 0
 3168 0012 FB68     	 ldr r3,[r7,#12]
 3169 0014 43F40003 	 orr r3,r3,#8388608
 3170 0018 FB60     	 str r3,[r7,#12]
1304:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      &= ~((uint32_t)VADC_BRSCTRL_GTSEL_Msk);
 3171              	 .loc 2 1304 0
 3172 001a FB68     	 ldr r3,[r7,#12]
 3173 001c 23F47023 	 bic r3,r3,#983040
 3174 0020 FB60     	 str r3,[r7,#12]
1305:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_GTSEL_Pos);
 3175              	 .loc 2 1305 0
 3176 0022 3B68     	 ldr r3,[r7]
 3177 0024 1B04     	 lsls r3,r3,#16
 3178 0026 FA68     	 ldr r2,[r7,#12]
 3179 0028 1343     	 orrs r3,r3,r2
 3180 002a FB60     	 str r3,[r7,#12]
1306:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 3181              	 .loc 2 1306 0
 3182 002c 7B68     	 ldr r3,[r7,#4]
 3183 002e FA68     	 ldr r2,[r7,#12]
 3184 0030 C3F80022 	 str r2,[r3,#512]
1307:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3185              	 .loc 2 1307 0
 3186 0034 1437     	 adds r7,r7,#20
 3187              	.LCFI260:
 3188              	 .cfi_def_cfa_offset 4
 3189 0036 BD46     	 mov sp,r7
 3190              	.LCFI261:
 3191              	 .cfi_def_cfa_register 13
 3192              	 
 3193 0038 5DF8047B 	 ldr r7,[sp],#4
 3194              	.LCFI262:
 3195              	 .cfi_restore 7
 3196              	 .cfi_def_cfa_offset 0
 3197 003c 7047     	 bx lr
 3198              	 .cfi_endproc
 3199              	.LFE259:
 3201 003e 00BF     	 .section .text.XMC_VADC_GLOBAL_BackgroundAbortSequence,"ax",%progbits
 3202              	 .align 2
 3203              	 .global XMC_VADC_GLOBAL_BackgroundAbortSequence
 3204              	 .thumb
 3205              	 .thumb_func
 3207              	XMC_VADC_GLOBAL_BackgroundAbortSequence:
 3208              	.LFB260:
1308:../Libraries/XMCLib/src/xmc_vadc.c **** 
1309:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort ongoing conversion of a sequence */
1310:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr)
1311:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3209              	 .loc 2 1311 0
 3210              	 .cfi_startproc
 3211              	 
 3212              	 
 3213 0000 80B5     	 push {r7,lr}
 3214              	.LCFI263:
 3215              	 .cfi_def_cfa_offset 8
 3216              	 .cfi_offset 7,-8
 3217              	 .cfi_offset 14,-4
 3218 0002 86B0     	 sub sp,sp,#24
 3219              	.LCFI264:
 3220              	 .cfi_def_cfa_offset 32
 3221 0004 00AF     	 add r7,sp,#0
 3222              	.LCFI265:
 3223              	 .cfi_def_cfa_register 7
 3224 0006 7860     	 str r0,[r7,#4]
1312:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t brsctrl;
1313:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1314:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1315:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t grp_asen2_flag[XMC_VADC_MAXIMUM_NUM_GROUPS];
1316:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1317:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAbortSequence:Wrong Module Pointer", (global_ptr == VADC))
1318:../Libraries/XMCLib/src/xmc_vadc.c **** 
1319:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable trigger and gating before abort*/
1320:../Libraries/XMCLib/src/xmc_vadc.c ****   brsctrl = global_ptr->BRSCTRL;
 3225              	 .loc 2 1320 0
 3226 0008 7B68     	 ldr r3,[r7,#4]
 3227 000a D3F80032 	 ldr r3,[r3,#512]
 3228 000e 3B61     	 str r3,[r7,#16]
1321:../Libraries/XMCLib/src/xmc_vadc.c **** 
1322:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL =(0U | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 3229              	 .loc 2 1322 0
 3230 0010 7B68     	 ldr r3,[r7,#4]
 3231 0012 254A     	 ldr r2,.L114
 3232 0014 C3F80022 	 str r2,[r3,#512]
1323:../Libraries/XMCLib/src/xmc_vadc.c **** 
1324:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable Background Request source */
1325:../Libraries/XMCLib/src/xmc_vadc.c **** 
1326:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1327:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3233              	 .loc 2 1327 0
 3234 0018 0023     	 movs r3,#0
 3235 001a 7B61     	 str r3,[r7,#20]
 3236 001c 17E0     	 b .L109
 3237              	.L110:
1328:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1329:../Libraries/XMCLib/src/xmc_vadc.c ****     grp_asen2_flag[i] = (uint8_t)(g_xmc_vadc_group_array[i]->ARBPR >> VADC_G_ARBPR_ASEN2_Pos);
 3238              	 .loc 2 1329 0 discriminator 3
 3239 001e 234A     	 ldr r2,.L114+4
 3240 0020 7B69     	 ldr r3,[r7,#20]
 3241 0022 52F82330 	 ldr r3,[r2,r3,lsl#2]
 3242 0026 D3F88430 	 ldr r3,[r3,#132]
 3243 002a 9B0E     	 lsrs r3,r3,#26
 3244 002c D9B2     	 uxtb r1,r3
 3245 002e 07F10C02 	 add r2,r7,#12
 3246 0032 7B69     	 ldr r3,[r7,#20]
 3247 0034 1344     	 add r3,r3,r2
 3248 0036 0A46     	 mov r2,r1
 3249 0038 1A70     	 strb r2,[r3]
1330:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 3250              	 .loc 2 1330 0 discriminator 3
 3251 003a 1C4A     	 ldr r2,.L114+4
 3252 003c 7B69     	 ldr r3,[r7,#20]
 3253 003e 52F82330 	 ldr r3,[r2,r3,lsl#2]
 3254 0042 1846     	 mov r0,r3
 3255 0044 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
1327:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3256              	 .loc 2 1327 0 discriminator 3
 3257 0048 7B69     	 ldr r3,[r7,#20]
 3258 004a 0133     	 adds r3,r3,#1
 3259 004c 7B61     	 str r3,[r7,#20]
 3260              	.L109:
1327:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3261              	 .loc 2 1327 0 is_stmt 0 discriminator 1
 3262 004e 7B69     	 ldr r3,[r7,#20]
 3263 0050 032B     	 cmp r3,#3
 3264 0052 E4D9     	 bls .L110
1331:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1332:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1333:../Libraries/XMCLib/src/xmc_vadc.c **** 
1334:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Abort the ongoing sequence */
1335:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_CLRPND_Msk;
 3265              	 .loc 2 1335 0 is_stmt 1
 3266 0054 7B68     	 ldr r3,[r7,#4]
 3267 0056 D3F80432 	 ldr r3,[r3,#516]
 3268 005a 43F48072 	 orr r2,r3,#256
 3269 005e 7B68     	 ldr r3,[r7,#4]
 3270 0060 C3F80422 	 str r2,[r3,#516]
1336:../Libraries/XMCLib/src/xmc_vadc.c **** 
1337:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1338:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable Background Request source */
1339:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3271              	 .loc 2 1339 0
 3272 0064 0023     	 movs r3,#0
 3273 0066 7B61     	 str r3,[r7,#20]
 3274 0068 10E0     	 b .L111
 3275              	.L113:
1340:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1341:../Libraries/XMCLib/src/xmc_vadc.c ****     if ((uint8_t)1 == grp_asen2_flag[i])
 3276              	 .loc 2 1341 0
 3277 006a 07F10C02 	 add r2,r7,#12
 3278 006e 7B69     	 ldr r3,[r7,#20]
 3279 0070 1344     	 add r3,r3,r2
 3280 0072 1B78     	 ldrb r3,[r3]
 3281 0074 012B     	 cmp r3,#1
 3282 0076 06D1     	 bne .L112
1342:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1343:../Libraries/XMCLib/src/xmc_vadc.c ****       XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t*)g_xmc_vadc_group_array[i]);
 3283              	 .loc 2 1343 0
 3284 0078 0C4A     	 ldr r2,.L114+4
 3285 007a 7B69     	 ldr r3,[r7,#20]
 3286 007c 52F82330 	 ldr r3,[r2,r3,lsl#2]
 3287 0080 1846     	 mov r0,r3
 3288 0082 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
 3289              	.L112:
1339:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3290              	 .loc 2 1339 0 discriminator 2
 3291 0086 7B69     	 ldr r3,[r7,#20]
 3292 0088 0133     	 adds r3,r3,#1
 3293 008a 7B61     	 str r3,[r7,#20]
 3294              	.L111:
1339:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3295              	 .loc 2 1339 0 is_stmt 0 discriminator 1
 3296 008c 7B69     	 ldr r3,[r7,#20]
 3297 008e 032B     	 cmp r3,#3
 3298 0090 EBD9     	 bls .L113
1344:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1345:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1346:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1347:../Libraries/XMCLib/src/xmc_vadc.c **** 
1348:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Re-enable any disabled trigger and gating*/
1349:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL =(brsctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk
 3299              	 .loc 2 1349 0 is_stmt 1
 3300 0092 3B69     	 ldr r3,[r7,#16]
 3301 0094 43F40003 	 orr r3,r3,#8388608
 3302 0098 43F40043 	 orr r3,r3,#32768
 3303 009c 7A68     	 ldr r2,[r7,#4]
 3304 009e C2F80032 	 str r3,[r2,#512]
1350:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3305              	 .loc 2 1350 0
 3306 00a2 1837     	 adds r7,r7,#24
 3307              	.LCFI266:
 3308              	 .cfi_def_cfa_offset 8
 3309 00a4 BD46     	 mov sp,r7
 3310              	.LCFI267:
 3311              	 .cfi_def_cfa_register 13
 3312              	 
 3313 00a6 80BD     	 pop {r7,pc}
 3314              	.L115:
 3315              	 .align 2
 3316              	.L114:
 3317 00a8 00808000 	 .word 8421376
 3318 00ac 00000000 	 .word g_xmc_vadc_group_array
 3319              	 .cfi_endproc
 3320              	.LFE260:
 3322              	 .section .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending,"ax",%progbits
 3323              	 .align 2
 3324              	 .global XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending
 3325              	 .thumb
 3326              	 .thumb_func
 3328              	XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:
 3329              	.LFB261:
1351:../Libraries/XMCLib/src/xmc_vadc.c **** 
1352:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine how many channels are awaiting conversion */
1353:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr)
1354:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3330              	 .loc 2 1354 0
 3331              	 .cfi_startproc
 3332              	 
 3333              	 
 3334              	 
 3335 0000 80B4     	 push {r7}
 3336              	.LCFI268:
 3337              	 .cfi_def_cfa_offset 4
 3338              	 .cfi_offset 7,-4
 3339 0002 87B0     	 sub sp,sp,#28
 3340              	.LCFI269:
 3341              	 .cfi_def_cfa_offset 32
 3342 0004 00AF     	 add r7,sp,#0
 3343              	.LCFI270:
 3344              	 .cfi_def_cfa_register 7
 3345 0006 7860     	 str r0,[r7,#4]
1355:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1356:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1357:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t j;
1358:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t count;
1359:../Libraries/XMCLib/src/xmc_vadc.c **** 
1360:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:Wrong Module Pointer", (global_ptr ==
1361:../Libraries/XMCLib/src/xmc_vadc.c **** 
1362:../Libraries/XMCLib/src/xmc_vadc.c ****   count = 0U;
 3346              	 .loc 2 1362 0
 3347 0008 0023     	 movs r3,#0
 3348 000a BB60     	 str r3,[r7,#8]
1363:../Libraries/XMCLib/src/xmc_vadc.c ****   
1364:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop through all groups and find out who is awaiting conversion */
1365:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3349              	 .loc 2 1365 0
 3350 000c 0023     	 movs r3,#0
 3351 000e 3B61     	 str r3,[r7,#16]
 3352 0010 23E0     	 b .L117
 3353              	.L122:
1366:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1367:../Libraries/XMCLib/src/xmc_vadc.c ****     if (global_ptr->BRSSEL[i])
 3354              	 .loc 2 1367 0
 3355 0012 7B68     	 ldr r3,[r7,#4]
 3356 0014 3A69     	 ldr r2,[r7,#16]
 3357 0016 6032     	 adds r2,r2,#96
 3358 0018 53F82230 	 ldr r3,[r3,r2,lsl#2]
 3359 001c 002B     	 cmp r3,#0
 3360 001e 19D0     	 beq .L118
1368:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1369:../Libraries/XMCLib/src/xmc_vadc.c ****       reg = global_ptr->BRSPND[i];
 3361              	 .loc 2 1369 0
 3362 0020 7B68     	 ldr r3,[r7,#4]
 3363 0022 3A69     	 ldr r2,[r7,#16]
 3364 0024 7032     	 adds r2,r2,#112
 3365 0026 53F82230 	 ldr r3,[r3,r2,lsl#2]
 3366 002a 7B61     	 str r3,[r7,#20]
1370:../Libraries/XMCLib/src/xmc_vadc.c **** 
1371:../Libraries/XMCLib/src/xmc_vadc.c ****       for(j=0U;j<XMC_VADC_NUM_CHANNELS_PER_GROUP;j++)
 3367              	 .loc 2 1371 0
 3368 002c 0023     	 movs r3,#0
 3369 002e FB60     	 str r3,[r7,#12]
 3370 0030 0DE0     	 b .L119
 3371              	.L121:
1372:../Libraries/XMCLib/src/xmc_vadc.c ****       {
1373:../Libraries/XMCLib/src/xmc_vadc.c ****         if (reg & 1U)
 3372              	 .loc 2 1373 0
 3373 0032 7B69     	 ldr r3,[r7,#20]
 3374 0034 03F00103 	 and r3,r3,#1
 3375 0038 002B     	 cmp r3,#0
 3376 003a 02D0     	 beq .L120
1374:../Libraries/XMCLib/src/xmc_vadc.c ****         {
1375:../Libraries/XMCLib/src/xmc_vadc.c ****           count++;
 3377              	 .loc 2 1375 0
 3378 003c BB68     	 ldr r3,[r7,#8]
 3379 003e 0133     	 adds r3,r3,#1
 3380 0040 BB60     	 str r3,[r7,#8]
 3381              	.L120:
1376:../Libraries/XMCLib/src/xmc_vadc.c ****         }
1377:../Libraries/XMCLib/src/xmc_vadc.c **** 
1378:../Libraries/XMCLib/src/xmc_vadc.c ****         reg = reg >> 1U;
 3382              	 .loc 2 1378 0 discriminator 2
 3383 0042 7B69     	 ldr r3,[r7,#20]
 3384 0044 5B08     	 lsrs r3,r3,#1
 3385 0046 7B61     	 str r3,[r7,#20]
1371:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 3386              	 .loc 2 1371 0 discriminator 2
 3387 0048 FB68     	 ldr r3,[r7,#12]
 3388 004a 0133     	 adds r3,r3,#1
 3389 004c FB60     	 str r3,[r7,#12]
 3390              	.L119:
1371:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 3391              	 .loc 2 1371 0 is_stmt 0 discriminator 1
 3392 004e FB68     	 ldr r3,[r7,#12]
 3393 0050 072B     	 cmp r3,#7
 3394 0052 EED9     	 bls .L121
 3395              	.L118:
1365:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3396              	 .loc 2 1365 0 is_stmt 1 discriminator 2
 3397 0054 3B69     	 ldr r3,[r7,#16]
 3398 0056 0133     	 adds r3,r3,#1
 3399 0058 3B61     	 str r3,[r7,#16]
 3400              	.L117:
1365:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3401              	 .loc 2 1365 0 is_stmt 0 discriminator 1
 3402 005a 3B69     	 ldr r3,[r7,#16]
 3403 005c 032B     	 cmp r3,#3
 3404 005e D8D9     	 bls .L122
1379:../Libraries/XMCLib/src/xmc_vadc.c ****       }
1380:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1381:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1382:../Libraries/XMCLib/src/xmc_vadc.c **** 
1383:../Libraries/XMCLib/src/xmc_vadc.c ****   return count;
 3405              	 .loc 2 1383 0 is_stmt 1
 3406 0060 BB68     	 ldr r3,[r7,#8]
1384:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3407              	 .loc 2 1384 0
 3408 0062 1846     	 mov r0,r3
 3409 0064 1C37     	 adds r7,r7,#28
 3410              	.LCFI271:
 3411              	 .cfi_def_cfa_offset 4
 3412 0066 BD46     	 mov sp,r7
 3413              	.LCFI272:
 3414              	 .cfi_def_cfa_register 13
 3415              	 
 3416 0068 5DF8047B 	 ldr r7,[sp],#4
 3417              	.LCFI273:
 3418              	 .cfi_restore 7
 3419              	 .cfi_def_cfa_offset 0
 3420 006c 7047     	 bx lr
 3421              	 .cfi_endproc
 3422              	.LFE261:
 3424 006e 00BF     	 .section .text.XMC_VADC_GROUP_QueueInit,"ax",%progbits
 3425              	 .align 2
 3426              	 .global XMC_VADC_GROUP_QueueInit
 3427              	 .thumb
 3428              	 .thumb_func
 3430              	XMC_VADC_GROUP_QueueInit:
 3431              	.LFB262:
1385:../Libraries/XMCLib/src/xmc_vadc.c **** 
1386:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)  
1387:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize queue request source */
1388:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
1389:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3432              	 .loc 2 1389 0
 3433              	 .cfi_startproc
 3434              	 
 3435              	 
 3436 0000 80B5     	 push {r7,lr}
 3437              	.LCFI274:
 3438              	 .cfi_def_cfa_offset 8
 3439              	 .cfi_offset 7,-8
 3440              	 .cfi_offset 14,-4
 3441 0002 84B0     	 sub sp,sp,#16
 3442              	.LCFI275:
 3443              	 .cfi_def_cfa_offset 24
 3444 0004 00AF     	 add r7,sp,#0
 3445              	.LCFI276:
 3446              	 .cfi_def_cfa_register 7
 3447 0006 7860     	 str r0,[r7,#4]
 3448 0008 3960     	 str r1,[r7]
1390:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t          reg;
1391:../Libraries/XMCLib/src/xmc_vadc.c **** 
1392:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1393:../Libraries/XMCLib/src/xmc_vadc.c **** 
1394:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable arbitration slot of the queue request source */
1395:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 3449              	 .loc 2 1395 0
 3450 000a 7868     	 ldr r0,[r7,#4]
 3451 000c FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1396:../Libraries/XMCLib/src/xmc_vadc.c ****   
1397:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = group_ptr->ARBPR;
 3452              	 .loc 2 1397 0
 3453 0010 7B68     	 ldr r3,[r7,#4]
 3454 0012 D3F88430 	 ldr r3,[r3,#132]
 3455 0016 FB60     	 str r3,[r7,#12]
1398:../Libraries/XMCLib/src/xmc_vadc.c **** 
1399:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Request Source priority */
1400:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~((uint32_t)VADC_G_ARBPR_PRIO0_Msk);
 3456              	 .loc 2 1400 0
 3457 0018 FB68     	 ldr r3,[r7,#12]
 3458 001a 23F00303 	 bic r3,r3,#3
 3459 001e FB60     	 str r3,[r7,#12]
1401:../Libraries/XMCLib/src/xmc_vadc.c ****   reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
 3460              	 .loc 2 1401 0
 3461 0020 3B68     	 ldr r3,[r7]
 3462 0022 1B78     	 ldrb r3,[r3]
 3463 0024 C3F38103 	 ubfx r3,r3,#2,#2
 3464 0028 DBB2     	 uxtb r3,r3
 3465 002a 1A46     	 mov r2,r3
 3466 002c FB68     	 ldr r3,[r7,#12]
 3467 002e 1343     	 orrs r3,r3,r2
 3468 0030 FB60     	 str r3,[r7,#12]
1402:../Libraries/XMCLib/src/xmc_vadc.c **** 
1403:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Conversion Start mode */
1404:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 3469              	 .loc 2 1404 0
 3470 0032 3B68     	 ldr r3,[r7]
 3471 0034 1B78     	 ldrb r3,[r3]
 3472 0036 03F00303 	 and r3,r3,#3
 3473 003a DBB2     	 uxtb r3,r3
 3474 003c 002B     	 cmp r3,#0
 3475 003e 03D0     	 beq .L125
1405:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1406:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)(VADC_G_ARBPR_CSM0_Msk);
 3476              	 .loc 2 1406 0
 3477 0040 FB68     	 ldr r3,[r7,#12]
 3478 0042 43F00803 	 orr r3,r3,#8
 3479 0046 FB60     	 str r3,[r7,#12]
 3480              	.L125:
1407:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1408:../Libraries/XMCLib/src/xmc_vadc.c **** 
1409:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR = reg;
 3481              	 .loc 2 1409 0
 3482 0048 7B68     	 ldr r3,[r7,#4]
 3483 004a FA68     	 ldr r2,[r7,#12]
 3484 004c C3F88420 	 str r2,[r3,#132]
1410:../Libraries/XMCLib/src/xmc_vadc.c **** 
1411:../Libraries/XMCLib/src/xmc_vadc.c **** 
1412:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (uint32_t)((config->qctrl0)|(uint32_t)(VADC_G_QCTRL0_XTWC_Msk)|
 3485              	 .loc 2 1412 0
 3486 0050 3B68     	 ldr r3,[r7]
 3487 0052 5B68     	 ldr r3,[r3,#4]
 3488 0054 43F08023 	 orr r3,r3,#-2147450880
 3489 0058 43F40003 	 orr r3,r3,#8388608
 3490 005c 7A68     	 ldr r2,[r7,#4]
 3491 005e C2F80031 	 str r3,[r2,#256]
1413:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     (uint32_t)(VADC_G_QCTRL0_TMWC_Msk)|
1414:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     (uint32_t)(VADC_G_QCTRL0_GTWC_Msk));
1415:../Libraries/XMCLib/src/xmc_vadc.c **** 
1416:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Gating mode */
1417:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QMR0 = ((uint32_t)(config->qmr0) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VA
 3492              	 .loc 2 1417 0
 3493 0062 3B68     	 ldr r3,[r7]
 3494 0064 9B68     	 ldr r3,[r3,#8]
 3495 0066 43F00102 	 orr r2,r3,#1
 3496 006a 7B68     	 ldr r3,[r7,#4]
 3497 006c C3F80421 	 str r2,[r3,#260]
1418:../Libraries/XMCLib/src/xmc_vadc.c **** 
1419:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode) )
 3498              	 .loc 2 1419 0
 3499 0070 3B68     	 ldr r3,[r7]
 3500 0072 1B78     	 ldrb r3,[r3]
 3501 0074 03F00303 	 and r3,r3,#3
 3502 0078 DBB2     	 uxtb r3,r3
 3503 007a 022B     	 cmp r3,#2
 3504 007c 07D1     	 bne .L126
1420:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1421:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_RPTDIS_Pos);
 3505              	 .loc 2 1421 0
 3506 007e 7B68     	 ldr r3,[r7,#4]
 3507 0080 D3F80431 	 ldr r3,[r3,#260]
 3508 0084 43F48032 	 orr r2,r3,#65536
 3509 0088 7B68     	 ldr r3,[r7,#4]
 3510 008a C3F80421 	 str r2,[r3,#260]
 3511              	.L126:
1422:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1423:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable arbitration slot for the queue request source */
1424:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptr);
 3512              	 .loc 2 1424 0
 3513 008e 7868     	 ldr r0,[r7,#4]
 3514 0090 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueEnableArbitrationSlot
1425:../Libraries/XMCLib/src/xmc_vadc.c **** 
1426:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3515              	 .loc 2 1426 0
 3516 0094 1037     	 adds r7,r7,#16
 3517              	.LCFI277:
 3518              	 .cfi_def_cfa_offset 8
 3519 0096 BD46     	 mov sp,r7
 3520              	.LCFI278:
 3521              	 .cfi_def_cfa_register 13
 3522              	 
 3523 0098 80BD     	 pop {r7,pc}
 3524              	 .cfi_endproc
 3525              	.LFE262:
 3527 009a 00BF     	 .section .text.XMC_VADC_GROUP_QueueSelectTrigger,"ax",%progbits
 3528              	 .align 2
 3529              	 .global XMC_VADC_GROUP_QueueSelectTrigger
 3530              	 .thumb
 3531              	 .thumb_func
 3533              	XMC_VADC_GROUP_QueueSelectTrigger:
 3534              	.LFB263:
1427:../Libraries/XMCLib/src/xmc_vadc.c **** 
1428:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 possible triggers as a conversion trigger for queue request source *
1429:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr,
1430:../Libraries/XMCLib/src/xmc_vadc.c ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num)
1431:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3535              	 .loc 2 1431 0
 3536              	 .cfi_startproc
 3537              	 
 3538              	 
 3539              	 
 3540 0000 80B4     	 push {r7}
 3541              	.LCFI279:
 3542              	 .cfi_def_cfa_offset 4
 3543              	 .cfi_offset 7,-4
 3544 0002 85B0     	 sub sp,sp,#20
 3545              	.LCFI280:
 3546              	 .cfi_def_cfa_offset 24
 3547 0004 00AF     	 add r7,sp,#0
 3548              	.LCFI281:
 3549              	 .cfi_def_cfa_register 7
 3550 0006 7860     	 str r0,[r7,#4]
 3551 0008 0B46     	 mov r3,r1
 3552 000a FB70     	 strb r3,[r7,#3]
1432:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    qctrl;
1433:../Libraries/XMCLib/src/xmc_vadc.c ****   
1434:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1435:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTrigger:Wrong Trigger Port", ((input_num)< XMC_VADC_NUM_POR
1436:../Libraries/XMCLib/src/xmc_vadc.c **** 
1437:../Libraries/XMCLib/src/xmc_vadc.c ****   
1438:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the conversion trigger */
1439:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 3553              	 .loc 2 1439 0
 3554 000c 7B68     	 ldr r3,[r7,#4]
 3555 000e D3F80031 	 ldr r3,[r3,#256]
 3556 0012 FB60     	 str r3,[r7,#12]
1440:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
 3557              	 .loc 2 1440 0
 3558 0014 FB68     	 ldr r3,[r7,#12]
 3559 0016 43F40043 	 orr r3,r3,#32768
 3560 001a FB60     	 str r3,[r7,#12]
1441:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_XTSEL_Msk);
 3561              	 .loc 2 1441 0
 3562 001c FB68     	 ldr r3,[r7,#12]
 3563 001e 23F47063 	 bic r3,r3,#3840
 3564 0022 FB60     	 str r3,[r7,#12]
1442:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_XTSEL_Pos);
 3565              	 .loc 2 1442 0
 3566 0024 FB78     	 ldrb r3,[r7,#3]
 3567 0026 1B02     	 lsls r3,r3,#8
 3568 0028 FA68     	 ldr r2,[r7,#12]
 3569 002a 1343     	 orrs r3,r3,r2
 3570 002c FB60     	 str r3,[r7,#12]
1443:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 3571              	 .loc 2 1443 0
 3572 002e 7B68     	 ldr r3,[r7,#4]
 3573 0030 FA68     	 ldr r2,[r7,#12]
 3574 0032 C3F80021 	 str r2,[r3,#256]
1444:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3575              	 .loc 2 1444 0
 3576 0036 1437     	 adds r7,r7,#20
 3577              	.LCFI282:
 3578              	 .cfi_def_cfa_offset 4
 3579 0038 BD46     	 mov sp,r7
 3580              	.LCFI283:
 3581              	 .cfi_def_cfa_register 13
 3582              	 
 3583 003a 5DF8047B 	 ldr r7,[sp],#4
 3584              	.LCFI284:
 3585              	 .cfi_restore 7
 3586              	 .cfi_def_cfa_offset 0
 3587 003e 7047     	 bx lr
 3588              	 .cfi_endproc
 3589              	.LFE263:
 3591              	 .section .text.XMC_VADC_GROUP_QueueSelectTriggerEdge,"ax",%progbits
 3592              	 .align 2
 3593              	 .global XMC_VADC_GROUP_QueueSelectTriggerEdge
 3594              	 .thumb
 3595              	 .thumb_func
 3597              	XMC_VADC_GROUP_QueueSelectTriggerEdge:
 3598              	.LFB264:
1445:../Libraries/XMCLib/src/xmc_vadc.c **** 
1446:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1447:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
1448:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3599              	 .loc 2 1448 0
 3600              	 .cfi_startproc
 3601              	 
 3602              	 
 3603              	 
 3604 0000 80B4     	 push {r7}
 3605              	.LCFI285:
 3606              	 .cfi_def_cfa_offset 4
 3607              	 .cfi_offset 7,-4
 3608 0002 85B0     	 sub sp,sp,#20
 3609              	.LCFI286:
 3610              	 .cfi_def_cfa_offset 24
 3611 0004 00AF     	 add r7,sp,#0
 3612              	.LCFI287:
 3613              	 .cfi_def_cfa_register 7
 3614 0006 7860     	 str r0,[r7,#4]
 3615 0008 0B46     	 mov r3,r1
 3616 000a FB70     	 strb r3,[r7,#3]
1449:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl;
1450:../Libraries/XMCLib/src/xmc_vadc.c **** 
1451:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTriggerEdge:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
1452:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTriggerEdge:Wrong Gating Port", ((trigger_edge)<= XMC_VADC_
1453:../Libraries/XMCLib/src/xmc_vadc.c **** 
1454:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the gating input */
1455:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 3617              	 .loc 2 1455 0
 3618 000c 7B68     	 ldr r3,[r7,#4]
 3619 000e D3F80031 	 ldr r3,[r3,#256]
 3620 0012 FB60     	 str r3,[r7,#12]
1456:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
 3621              	 .loc 2 1456 0
 3622 0014 FB68     	 ldr r3,[r7,#12]
 3623 0016 43F40043 	 orr r3,r3,#32768
 3624 001a FB60     	 str r3,[r7,#12]
1457:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_XTMODE_Msk);
 3625              	 .loc 2 1457 0
 3626 001c FB68     	 ldr r3,[r7,#12]
 3627 001e 23F4C043 	 bic r3,r3,#24576
 3628 0022 FB60     	 str r3,[r7,#12]
1458:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)trigger_edge << VADC_G_QCTRL0_XTMODE_Pos);
 3629              	 .loc 2 1458 0
 3630 0024 FB78     	 ldrb r3,[r7,#3]
 3631 0026 5B03     	 lsls r3,r3,#13
 3632 0028 FA68     	 ldr r2,[r7,#12]
 3633 002a 1343     	 orrs r3,r3,r2
 3634 002c FB60     	 str r3,[r7,#12]
1459:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 3635              	 .loc 2 1459 0
 3636 002e 7B68     	 ldr r3,[r7,#4]
 3637 0030 FA68     	 ldr r2,[r7,#12]
 3638 0032 C3F80021 	 str r2,[r3,#256]
1460:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3639              	 .loc 2 1460 0
 3640 0036 1437     	 adds r7,r7,#20
 3641              	.LCFI288:
 3642              	 .cfi_def_cfa_offset 4
 3643 0038 BD46     	 mov sp,r7
 3644              	.LCFI289:
 3645              	 .cfi_def_cfa_register 13
 3646              	 
 3647 003a 5DF8047B 	 ldr r7,[sp],#4
 3648              	.LCFI290:
 3649              	 .cfi_restore 7
 3650              	 .cfi_def_cfa_offset 0
 3651 003e 7047     	 bx lr
 3652              	 .cfi_endproc
 3653              	.LFE264:
 3655              	 .section .text.XMC_VADC_GROUP_QueueSelectGating,"ax",%progbits
 3656              	 .align 2
 3657              	 .global XMC_VADC_GROUP_QueueSelectGating
 3658              	 .thumb
 3659              	 .thumb_func
 3661              	XMC_VADC_GROUP_QueueSelectGating:
 3662              	.LFB265:
1461:../Libraries/XMCLib/src/xmc_vadc.c **** 
1462:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 possible trigger gates as a trigger gating signal for queue request 
1463:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
1464:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3663              	 .loc 2 1464 0
 3664              	 .cfi_startproc
 3665              	 
 3666              	 
 3667              	 
 3668 0000 80B4     	 push {r7}
 3669              	.LCFI291:
 3670              	 .cfi_def_cfa_offset 4
 3671              	 .cfi_offset 7,-4
 3672 0002 85B0     	 sub sp,sp,#20
 3673              	.LCFI292:
 3674              	 .cfi_def_cfa_offset 24
 3675 0004 00AF     	 add r7,sp,#0
 3676              	.LCFI293:
 3677              	 .cfi_def_cfa_register 7
 3678 0006 7860     	 str r0,[r7,#4]
 3679 0008 0B46     	 mov r3,r1
 3680 000a FB70     	 strb r3,[r7,#3]
1465:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl;
1466:../Libraries/XMCLib/src/xmc_vadc.c **** 
1467:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectGating:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1468:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectGating:Wrong Gating Port", ((input_num)< XMC_VADC_NUM_PORTS
1469:../Libraries/XMCLib/src/xmc_vadc.c ****   
1470:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the gating input */
1471:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 3681              	 .loc 2 1471 0
 3682 000c 7B68     	 ldr r3,[r7,#4]
 3683 000e D3F80031 	 ldr r3,[r3,#256]
 3684 0012 FB60     	 str r3,[r7,#12]
1472:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)VADC_G_QCTRL0_GTWC_Msk;
 3685              	 .loc 2 1472 0
 3686 0014 FB68     	 ldr r3,[r7,#12]
 3687 0016 43F40003 	 orr r3,r3,#8388608
 3688 001a FB60     	 str r3,[r7,#12]
1473:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_GTSEL_Msk);
 3689              	 .loc 2 1473 0
 3690 001c FB68     	 ldr r3,[r7,#12]
 3691 001e 23F47023 	 bic r3,r3,#983040
 3692 0022 FB60     	 str r3,[r7,#12]
1474:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_GTSEL_Pos);
 3693              	 .loc 2 1474 0
 3694 0024 FB78     	 ldrb r3,[r7,#3]
 3695 0026 1B04     	 lsls r3,r3,#16
 3696 0028 FA68     	 ldr r2,[r7,#12]
 3697 002a 1343     	 orrs r3,r3,r2
 3698 002c FB60     	 str r3,[r7,#12]
1475:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 3699              	 .loc 2 1475 0
 3700 002e 7B68     	 ldr r3,[r7,#4]
 3701 0030 FA68     	 ldr r2,[r7,#12]
 3702 0032 C3F80021 	 str r2,[r3,#256]
1476:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3703              	 .loc 2 1476 0
 3704 0036 1437     	 adds r7,r7,#20
 3705              	.LCFI294:
 3706              	 .cfi_def_cfa_offset 4
 3707 0038 BD46     	 mov sp,r7
 3708              	.LCFI295:
 3709              	 .cfi_def_cfa_register 13
 3710              	 
 3711 003a 5DF8047B 	 ldr r7,[sp],#4
 3712              	.LCFI296:
 3713              	 .cfi_restore 7
 3714              	 .cfi_def_cfa_offset 0
 3715 003e 7047     	 bx lr
 3716              	 .cfi_endproc
 3717              	.LFE265:
 3719              	 .section .text.XMC_VADC_GROUP_QueueGetLength,"ax",%progbits
 3720              	 .align 2
 3721              	 .global XMC_VADC_GROUP_QueueGetLength
 3722              	 .thumb
 3723              	 .thumb_func
 3725              	XMC_VADC_GROUP_QueueGetLength:
 3726              	.LFB266:
1477:../Libraries/XMCLib/src/xmc_vadc.c **** 
1478:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine the number of channels in the queue (length includes the valid channel in the B
1479:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr)
1480:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3727              	 .loc 2 1480 0
 3728              	 .cfi_startproc
 3729              	 
 3730              	 
 3731              	 
 3732 0000 80B4     	 push {r7}
 3733              	.LCFI297:
 3734              	 .cfi_def_cfa_offset 4
 3735              	 .cfi_offset 7,-4
 3736 0002 87B0     	 sub sp,sp,#28
 3737              	.LCFI298:
 3738              	 .cfi_def_cfa_offset 32
 3739 0004 00AF     	 add r7,sp,#0
 3740              	.LCFI299:
 3741              	 .cfi_def_cfa_register 7
 3742 0006 7860     	 str r0,[r7,#4]
1481:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        qsr;
1482:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        qbur0;
1483:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        length;
1484:../Libraries/XMCLib/src/xmc_vadc.c **** 
1485:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetLength:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_pt
1486:../Libraries/XMCLib/src/xmc_vadc.c **** 
1487:../Libraries/XMCLib/src/xmc_vadc.c ****   qsr = group_ptr->QSR0;
 3743              	 .loc 2 1487 0
 3744 0008 7B68     	 ldr r3,[r7,#4]
 3745 000a D3F80831 	 ldr r3,[r3,#264]
 3746 000e 3B61     	 str r3,[r7,#16]
1488:../Libraries/XMCLib/src/xmc_vadc.c ****   qbur0 = group_ptr->QBUR0;
 3747              	 .loc 2 1488 0
 3748 0010 7B68     	 ldr r3,[r7,#4]
 3749 0012 D3F81031 	 ldr r3,[r3,#272]
 3750 0016 FB60     	 str r3,[r7,#12]
1489:../Libraries/XMCLib/src/xmc_vadc.c **** 
1490:../Libraries/XMCLib/src/xmc_vadc.c ****   if (qsr & (uint32_t)VADC_G_QSR0_EMPTY_Msk)
 3751              	 .loc 2 1490 0
 3752 0018 3B69     	 ldr r3,[r7,#16]
 3753 001a 03F02003 	 and r3,r3,#32
 3754 001e 002B     	 cmp r3,#0
 3755 0020 02D0     	 beq .L131
1491:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1492:../Libraries/XMCLib/src/xmc_vadc.c ****     length = 0U;
 3756              	 .loc 2 1492 0
 3757 0022 0023     	 movs r3,#0
 3758 0024 7B61     	 str r3,[r7,#20]
 3759 0026 04E0     	 b .L132
 3760              	.L131:
1493:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1494:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1495:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1496:../Libraries/XMCLib/src/xmc_vadc.c ****     length = (qsr & (uint32_t)VADC_G_QSR0_FILL_Msk) + 1U;
 3761              	 .loc 2 1496 0
 3762 0028 3B69     	 ldr r3,[r7,#16]
 3763 002a 03F00F03 	 and r3,r3,#15
 3764 002e 0133     	 adds r3,r3,#1
 3765 0030 7B61     	 str r3,[r7,#20]
 3766              	.L132:
1497:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1498:../Libraries/XMCLib/src/xmc_vadc.c ****   
1499:../Libraries/XMCLib/src/xmc_vadc.c ****   if (qbur0 & (uint32_t)VADC_G_QBUR0_V_Msk )
 3767              	 .loc 2 1499 0
 3768 0032 FB68     	 ldr r3,[r7,#12]
 3769 0034 03F48073 	 and r3,r3,#256
 3770 0038 002B     	 cmp r3,#0
 3771 003a 02D0     	 beq .L133
1500:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1501:../Libraries/XMCLib/src/xmc_vadc.c ****     length++;
 3772              	 .loc 2 1501 0
 3773 003c 7B69     	 ldr r3,[r7,#20]
 3774 003e 0133     	 adds r3,r3,#1
 3775 0040 7B61     	 str r3,[r7,#20]
 3776              	.L133:
1502:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1503:../Libraries/XMCLib/src/xmc_vadc.c **** 
1504:../Libraries/XMCLib/src/xmc_vadc.c ****   return length;
 3777              	 .loc 2 1504 0
 3778 0042 7B69     	 ldr r3,[r7,#20]
1505:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3779              	 .loc 2 1505 0
 3780 0044 1846     	 mov r0,r3
 3781 0046 1C37     	 adds r7,r7,#28
 3782              	.LCFI300:
 3783              	 .cfi_def_cfa_offset 4
 3784 0048 BD46     	 mov sp,r7
 3785              	.LCFI301:
 3786              	 .cfi_def_cfa_register 13
 3787              	 
 3788 004a 5DF8047B 	 ldr r7,[sp],#4
 3789              	.LCFI302:
 3790              	 .cfi_restore 7
 3791              	 .cfi_def_cfa_offset 0
 3792 004e 7047     	 bx lr
 3793              	 .cfi_endproc
 3794              	.LFE266:
 3796              	 .section .text.XMC_VADC_GROUP_QueueAbortSequence,"ax",%progbits
 3797              	 .align 2
 3798              	 .global XMC_VADC_GROUP_QueueAbortSequence
 3799              	 .thumb
 3800              	 .thumb_func
 3802              	XMC_VADC_GROUP_QueueAbortSequence:
 3803              	.LFB267:
1506:../Libraries/XMCLib/src/xmc_vadc.c **** 
1507:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort ongoing conversion of a channel sequence */
1508:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr)
1509:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3804              	 .loc 2 1509 0
 3805              	 .cfi_startproc
 3806              	 
 3807              	 
 3808 0000 80B5     	 push {r7,lr}
 3809              	.LCFI303:
 3810              	 .cfi_def_cfa_offset 8
 3811              	 .cfi_offset 7,-8
 3812              	 .cfi_offset 14,-4
 3813 0002 84B0     	 sub sp,sp,#16
 3814              	.LCFI304:
 3815              	 .cfi_def_cfa_offset 24
 3816 0004 00AF     	 add r7,sp,#0
 3817              	.LCFI305:
 3818              	 .cfi_def_cfa_register 7
 3819 0006 7860     	 str r0,[r7,#4]
1510:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl0;
1511:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1512:../Libraries/XMCLib/src/xmc_vadc.c **** 
1513:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueAbortSequence:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1514:../Libraries/XMCLib/src/xmc_vadc.c **** 
1515:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable any gating if present*/
1516:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl0 = group_ptr->QCTRL0;
 3820              	 .loc 2 1516 0
 3821 0008 7B68     	 ldr r3,[r7,#4]
 3822 000a D3F80031 	 ldr r3,[r3,#256]
 3823 000e FB60     	 str r3,[r7,#12]
1517:../Libraries/XMCLib/src/xmc_vadc.c **** 
1518:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 =(0U | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 3824              	 .loc 2 1518 0
 3825 0010 7B68     	 ldr r3,[r7,#4]
 3826 0012 144A     	 ldr r2,.L136
 3827 0014 C3F80021 	 str r2,[r3,#256]
1519:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_M
1520:../Libraries/XMCLib/src/xmc_vadc.c ****   
1521:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable the Arbitration 0 in the group before abort*/
1522:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN0_Pos) & 1U);
 3828              	 .loc 2 1522 0
 3829 0018 7B68     	 ldr r3,[r7,#4]
 3830 001a D3F88430 	 ldr r3,[r3,#132]
 3831 001e 1B0E     	 lsrs r3,r3,#24
 3832 0020 03F00103 	 and r3,r3,#1
 3833 0024 002B     	 cmp r3,#0
 3834 0026 14BF     	 ite ne
 3835 0028 0123     	 movne r3,#1
 3836 002a 0023     	 moveq r3,#0
 3837 002c FB72     	 strb r3,[r7,#11]
1523:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 3838              	 .loc 2 1523 0
 3839 002e 7868     	 ldr r0,[r7,#4]
 3840 0030 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1524:../Libraries/XMCLib/src/xmc_vadc.c ****    
1525:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Flush the Entries from queue*/
1526:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueFlushEntries(group_ptr);
 3841              	 .loc 2 1526 0
 3842 0034 7868     	 ldr r0,[r7,#4]
 3843 0036 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueFlushEntries
1527:../Libraries/XMCLib/src/xmc_vadc.c ****   
1528:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the arbitration slot 0*/
1529:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
 3844              	 .loc 2 1529 0
 3845 003a 7B68     	 ldr r3,[r7,#4]
 3846 003c D3F88420 	 ldr r2,[r3,#132]
 3847 0040 FB7A     	 ldrb r3,[r7,#11]
 3848 0042 1B06     	 lsls r3,r3,#24
 3849 0044 1A43     	 orrs r2,r2,r3
 3850 0046 7B68     	 ldr r3,[r7,#4]
 3851 0048 C3F88420 	 str r2,[r3,#132]
1530:../Libraries/XMCLib/src/xmc_vadc.c ****   
1531:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1532:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
1533:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 3852              	 .loc 2 1533 0
 3853 004c FB68     	 ldr r3,[r7,#12]
 3854 004e 43F08023 	 orr r3,r3,#-2147450880
 3855 0052 43F40003 	 orr r3,r3,#8388608
1532:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 3856              	 .loc 2 1532 0
 3857 0056 7A68     	 ldr r2,[r7,#4]
 3858 0058 C2F80031 	 str r3,[r2,#256]
1534:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3859              	 .loc 2 1534 0
 3860 005c 1037     	 adds r7,r7,#16
 3861              	.LCFI306:
 3862              	 .cfi_def_cfa_offset 8
 3863 005e BD46     	 mov sp,r7
 3864              	.LCFI307:
 3865              	 .cfi_def_cfa_register 13
 3866              	 
 3867 0060 80BD     	 pop {r7,pc}
 3868              	.L137:
 3869 0062 00BF     	 .align 2
 3870              	.L136:
 3871 0064 00808080 	 .word -2139062272
 3872              	 .cfi_endproc
 3873              	.LFE267:
 3875              	 .section .text.XMC_VADC_GROUP_QueueRemoveChannel,"ax",%progbits
 3876              	 .align 2
 3877              	 .global XMC_VADC_GROUP_QueueRemoveChannel
 3878              	 .thumb
 3879              	 .thumb_func
 3881              	XMC_VADC_GROUP_QueueRemoveChannel:
 3882              	.LFB268:
1535:../Libraries/XMCLib/src/xmc_vadc.c **** 
1536:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort conversion of the channel queued up next */
1537:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueRemoveChannel(XMC_VADC_GROUP_t *const group_ptr)
1538:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3883              	 .loc 2 1538 0
 3884              	 .cfi_startproc
 3885              	 
 3886              	 
 3887 0000 80B5     	 push {r7,lr}
 3888              	.LCFI308:
 3889              	 .cfi_def_cfa_offset 8
 3890              	 .cfi_offset 7,-8
 3891              	 .cfi_offset 14,-4
 3892 0002 86B0     	 sub sp,sp,#24
 3893              	.LCFI309:
 3894              	 .cfi_def_cfa_offset 32
 3895 0004 00AF     	 add r7,sp,#0
 3896              	.LCFI310:
 3897              	 .cfi_def_cfa_register 7
 3898 0006 7860     	 str r0,[r7,#4]
1539:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t length_before_abort;
1540:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t length_after_abort;
1541:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl0;
1542:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1543:../Libraries/XMCLib/src/xmc_vadc.c **** 
1544:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueRemoveChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1545:../Libraries/XMCLib/src/xmc_vadc.c ****   
1546:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable any gating if present*/
1547:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl0= group_ptr->QCTRL0;
 3899              	 .loc 2 1547 0
 3900 0008 7B68     	 ldr r3,[r7,#4]
 3901 000a D3F80031 	 ldr r3,[r3,#256]
 3902 000e 3B61     	 str r3,[r7,#16]
1548:../Libraries/XMCLib/src/xmc_vadc.c **** 
1549:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 =(0U | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 3903              	 .loc 2 1549 0
 3904 0010 7B68     	 ldr r3,[r7,#4]
 3905 0012 204A     	 ldr r2,.L142
 3906 0014 C3F80021 	 str r2,[r3,#256]
1550:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_M
1551:../Libraries/XMCLib/src/xmc_vadc.c ****   
1552:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable the Arbitration 0 in the group before abort*/
1553:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN0_Pos) & 1U);
 3907              	 .loc 2 1553 0
 3908 0018 7B68     	 ldr r3,[r7,#4]
 3909 001a D3F88430 	 ldr r3,[r3,#132]
 3910 001e 1B0E     	 lsrs r3,r3,#24
 3911 0020 03F00103 	 and r3,r3,#1
 3912 0024 002B     	 cmp r3,#0
 3913 0026 14BF     	 ite ne
 3914 0028 0123     	 movne r3,#1
 3915 002a 0023     	 moveq r3,#0
 3916 002c FB73     	 strb r3,[r7,#15]
1554:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 3917              	 .loc 2 1554 0
 3918 002e 7868     	 ldr r0,[r7,#4]
 3919 0030 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1555:../Libraries/XMCLib/src/xmc_vadc.c **** 
1556:../Libraries/XMCLib/src/xmc_vadc.c ****   length_before_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 3920              	 .loc 2 1556 0
 3921 0034 7868     	 ldr r0,[r7,#4]
 3922 0036 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 3923 003a B860     	 str r0,[r7,#8]
1557:../Libraries/XMCLib/src/xmc_vadc.c **** 
1558:../Libraries/XMCLib/src/xmc_vadc.c ****   if (length_before_abort)
 3924              	 .loc 2 1558 0
 3925 003c BB68     	 ldr r3,[r7,#8]
 3926 003e 002B     	 cmp r3,#0
 3927 0040 14D0     	 beq .L139
1559:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1560:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Remove the first entry of the queue */
1561:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_CLRV_Msk;
 3928              	 .loc 2 1561 0
 3929 0042 7B68     	 ldr r3,[r7,#4]
 3930 0044 D3F80431 	 ldr r3,[r3,#260]
 3931 0048 43F48072 	 orr r2,r3,#256
 3932 004c 7B68     	 ldr r3,[r7,#4]
 3933 004e C3F80421 	 str r2,[r3,#260]
1562:../Libraries/XMCLib/src/xmc_vadc.c **** 
1563:../Libraries/XMCLib/src/xmc_vadc.c ****     length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 3934              	 .loc 2 1563 0
 3935 0052 7868     	 ldr r0,[r7,#4]
 3936 0054 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 3937 0058 7861     	 str r0,[r7,#20]
1564:../Libraries/XMCLib/src/xmc_vadc.c **** 
1565:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Loop until a reduction in queue length is assessed */
1566:../Libraries/XMCLib/src/xmc_vadc.c ****     while(length_after_abort == length_before_abort)
 3938              	 .loc 2 1566 0
 3939 005a 03E0     	 b .L140
 3940              	.L141:
1567:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1568:../Libraries/XMCLib/src/xmc_vadc.c ****       length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 3941              	 .loc 2 1568 0
 3942 005c 7868     	 ldr r0,[r7,#4]
 3943 005e FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 3944 0062 7861     	 str r0,[r7,#20]
 3945              	.L140:
1566:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 3946              	 .loc 2 1566 0
 3947 0064 7A69     	 ldr r2,[r7,#20]
 3948 0066 BB68     	 ldr r3,[r7,#8]
 3949 0068 9A42     	 cmp r2,r3
 3950 006a F7D0     	 beq .L141
 3951              	.L139:
1569:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1570:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1571:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the arbitration slot 0*/
1572:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
 3952              	 .loc 2 1572 0
 3953 006c 7B68     	 ldr r3,[r7,#4]
 3954 006e D3F88420 	 ldr r2,[r3,#132]
 3955 0072 FB7B     	 ldrb r3,[r7,#15]
 3956 0074 1B06     	 lsls r3,r3,#24
 3957 0076 1A43     	 orrs r2,r2,r3
 3958 0078 7B68     	 ldr r3,[r7,#4]
 3959 007a C3F88420 	 str r2,[r3,#132]
1573:../Libraries/XMCLib/src/xmc_vadc.c ****   
1574:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1575:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
1576:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 3960              	 .loc 2 1576 0
 3961 007e 3B69     	 ldr r3,[r7,#16]
 3962 0080 43F08023 	 orr r3,r3,#-2147450880
 3963 0084 43F40003 	 orr r3,r3,#8388608
1575:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 3964              	 .loc 2 1575 0
 3965 0088 7A68     	 ldr r2,[r7,#4]
 3966 008a C2F80031 	 str r3,[r2,#256]
1577:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3967              	 .loc 2 1577 0
 3968 008e 1837     	 adds r7,r7,#24
 3969              	.LCFI311:
 3970              	 .cfi_def_cfa_offset 8
 3971 0090 BD46     	 mov sp,r7
 3972              	.LCFI312:
 3973              	 .cfi_def_cfa_register 13
 3974              	 
 3975 0092 80BD     	 pop {r7,pc}
 3976              	.L143:
 3977              	 .align 2
 3978              	.L142:
 3979 0094 00808080 	 .word -2139062272
 3980              	 .cfi_endproc
 3981              	.LFE268:
 3983              	 .section .text.XMC_VADC_GROUP_QueueGetNextChannel,"ax",%progbits
 3984              	 .align 2
 3985              	 .global XMC_VADC_GROUP_QueueGetNextChannel
 3986              	 .thumb
 3987              	 .thumb_func
 3989              	XMC_VADC_GROUP_QueueGetNextChannel:
 3990              	.LFB269:
1578:../Libraries/XMCLib/src/xmc_vadc.c **** 
1579:../Libraries/XMCLib/src/xmc_vadc.c **** /* Get details of channel meant to be converted right after the ongoing conversion */
1580:../Libraries/XMCLib/src/xmc_vadc.c **** int32_t XMC_VADC_GROUP_QueueGetNextChannel(XMC_VADC_GROUP_t *const group_ptr)
1581:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3991              	 .loc 2 1581 0
 3992              	 .cfi_startproc
 3993              	 
 3994              	 
 3995              	 
 3996 0000 80B4     	 push {r7}
 3997              	.LCFI313:
 3998              	 .cfi_def_cfa_offset 4
 3999              	 .cfi_offset 7,-4
 4000 0002 85B0     	 sub sp,sp,#20
 4001              	.LCFI314:
 4002              	 .cfi_def_cfa_offset 24
 4003 0004 00AF     	 add r7,sp,#0
 4004              	.LCFI315:
 4005              	 .cfi_def_cfa_register 7
 4006 0006 7860     	 str r0,[r7,#4]
1582:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t ch_num;
1583:../Libraries/XMCLib/src/xmc_vadc.c **** 
1584:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetNextChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
1585:../Libraries/XMCLib/src/xmc_vadc.c ****   
1586:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
1587:../Libraries/XMCLib/src/xmc_vadc.c ****    * Check if there is something in the backup stage. If not, read queue-0
1588:../Libraries/XMCLib/src/xmc_vadc.c ****    * entry.
1589:../Libraries/XMCLib/src/xmc_vadc.c ****    */
1590:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( (group_ptr->QBUR0) & (uint32_t)VADC_G_QBUR0_V_Msk)
 4007              	 .loc 2 1590 0
 4008 0008 7B68     	 ldr r3,[r7,#4]
 4009 000a D3F81031 	 ldr r3,[r3,#272]
 4010 000e 03F48073 	 and r3,r3,#256
 4011 0012 002B     	 cmp r3,#0
 4012 0014 06D0     	 beq .L145
1591:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1592:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->QBUR0 & (uint32_t)VADC_G_QBUR0_REQCHNR_Msk);
 4013              	 .loc 2 1592 0
 4014 0016 7B68     	 ldr r3,[r7,#4]
 4015 0018 D3F81031 	 ldr r3,[r3,#272]
 4016 001c 03F01F03 	 and r3,r3,#31
 4017 0020 FB60     	 str r3,[r7,#12]
 4018 0022 10E0     	 b .L146
 4019              	.L145:
1593:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1594:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( (group_ptr->Q0R0) & (uint32_t)VADC_G_Q0R0_V_Msk)
 4020              	 .loc 2 1594 0
 4021 0024 7B68     	 ldr r3,[r7,#4]
 4022 0026 D3F80C31 	 ldr r3,[r3,#268]
 4023 002a 03F48073 	 and r3,r3,#256
 4024 002e 002B     	 cmp r3,#0
 4025 0030 06D0     	 beq .L147
1595:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1596:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->Q0R0 & (uint32_t)VADC_G_Q0R0_REQCHNR_Msk);
 4026              	 .loc 2 1596 0
 4027 0032 7B68     	 ldr r3,[r7,#4]
 4028 0034 D3F80C31 	 ldr r3,[r3,#268]
 4029 0038 03F01F03 	 and r3,r3,#31
 4030 003c FB60     	 str r3,[r7,#12]
 4031 003e 02E0     	 b .L146
 4032              	.L147:
1597:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1598:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1599:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1600:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Nothing is pending */
1601:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = -1;
 4033              	 .loc 2 1601 0
 4034 0040 4FF0FF33 	 mov r3,#-1
 4035 0044 FB60     	 str r3,[r7,#12]
 4036              	.L146:
1602:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1603:../Libraries/XMCLib/src/xmc_vadc.c **** 
1604:../Libraries/XMCLib/src/xmc_vadc.c ****   return ch_num;
 4037              	 .loc 2 1604 0
 4038 0046 FB68     	 ldr r3,[r7,#12]
1605:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4039              	 .loc 2 1605 0
 4040 0048 1846     	 mov r0,r3
 4041 004a 1437     	 adds r7,r7,#20
 4042              	.LCFI316:
 4043              	 .cfi_def_cfa_offset 4
 4044 004c BD46     	 mov sp,r7
 4045              	.LCFI317:
 4046              	 .cfi_def_cfa_register 13
 4047              	 
 4048 004e 5DF8047B 	 ldr r7,[sp],#4
 4049              	.LCFI318:
 4050              	 .cfi_restore 7
 4051              	 .cfi_def_cfa_offset 0
 4052 0052 7047     	 bx lr
 4053              	 .cfi_endproc
 4054              	.LFE269:
 4056              	 .section .text.XMC_VADC_GROUP_QueueGetInterruptedChannel,"ax",%progbits
 4057              	 .align 2
 4058              	 .global XMC_VADC_GROUP_QueueGetInterruptedChannel
 4059              	 .thumb
 4060              	 .thumb_func
 4062              	XMC_VADC_GROUP_QueueGetInterruptedChannel:
 4063              	.LFB270:
1606:../Libraries/XMCLib/src/xmc_vadc.c **** 
1607:../Libraries/XMCLib/src/xmc_vadc.c **** /* Get the channel number of the channel whose conversion had been interrupted */
1608:../Libraries/XMCLib/src/xmc_vadc.c **** int32_t XMC_VADC_GROUP_QueueGetInterruptedChannel(XMC_VADC_GROUP_t *const group_ptr)
1609:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4064              	 .loc 2 1609 0
 4065              	 .cfi_startproc
 4066              	 
 4067              	 
 4068              	 
 4069 0000 80B4     	 push {r7}
 4070              	.LCFI319:
 4071              	 .cfi_def_cfa_offset 4
 4072              	 .cfi_offset 7,-4
 4073 0002 85B0     	 sub sp,sp,#20
 4074              	.LCFI320:
 4075              	 .cfi_def_cfa_offset 24
 4076 0004 00AF     	 add r7,sp,#0
 4077              	.LCFI321:
 4078              	 .cfi_def_cfa_register 7
 4079 0006 7860     	 str r0,[r7,#4]
1610:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t ch_num;
1611:../Libraries/XMCLib/src/xmc_vadc.c **** 
1612:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetInterruptedChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
1613:../Libraries/XMCLib/src/xmc_vadc.c ****   
1614:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((group_ptr->QBUR0) & (uint32_t)VADC_G_QBUR0_V_Msk)
 4080              	 .loc 2 1614 0
 4081 0008 7B68     	 ldr r3,[r7,#4]
 4082 000a D3F81031 	 ldr r3,[r3,#272]
 4083 000e 03F48073 	 and r3,r3,#256
 4084 0012 002B     	 cmp r3,#0
 4085 0014 06D0     	 beq .L150
1615:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1616:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->QBUR0 & (uint32_t)VADC_G_QBUR0_REQCHNR_Msk);
 4086              	 .loc 2 1616 0
 4087 0016 7B68     	 ldr r3,[r7,#4]
 4088 0018 D3F81031 	 ldr r3,[r3,#272]
 4089 001c 03F01F03 	 and r3,r3,#31
 4090 0020 FB60     	 str r3,[r7,#12]
 4091 0022 02E0     	 b .L151
 4092              	.L150:
1617:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1618:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1619:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1620:../Libraries/XMCLib/src/xmc_vadc.c ****     /* No such channel */
1621:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = -1;
 4093              	 .loc 2 1621 0
 4094 0024 4FF0FF33 	 mov r3,#-1
 4095 0028 FB60     	 str r3,[r7,#12]
 4096              	.L151:
1622:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1623:../Libraries/XMCLib/src/xmc_vadc.c **** 
1624:../Libraries/XMCLib/src/xmc_vadc.c ****   return ch_num;
 4097              	 .loc 2 1624 0
 4098 002a FB68     	 ldr r3,[r7,#12]
1625:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4099              	 .loc 2 1625 0
 4100 002c 1846     	 mov r0,r3
 4101 002e 1437     	 adds r7,r7,#20
 4102              	.LCFI322:
 4103              	 .cfi_def_cfa_offset 4
 4104 0030 BD46     	 mov sp,r7
 4105              	.LCFI323:
 4106              	 .cfi_def_cfa_register 13
 4107              	 
 4108 0032 5DF8047B 	 ldr r7,[sp],#4
 4109              	.LCFI324:
 4110              	 .cfi_restore 7
 4111              	 .cfi_def_cfa_offset 0
 4112 0036 7047     	 bx lr
 4113              	 .cfi_endproc
 4114              	.LFE270:
 4116              	 .section .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode,"ax",%progbits
 4117              	 .align 2
 4118              	 .global XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode
 4119              	 .thumb
 4120              	 .thumb_func
 4122              	XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:
 4123              	.LFB271:
1626:../Libraries/XMCLib/src/xmc_vadc.c **** 
1627:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a Service Request line for the request source event */
1628:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_V
1629:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4124              	 .loc 2 1629 0
 4125              	 .cfi_startproc
 4126              	 
 4127              	 
 4128              	 
 4129 0000 80B4     	 push {r7}
 4130              	.LCFI325:
 4131              	 .cfi_def_cfa_offset 4
 4132              	 .cfi_offset 7,-4
 4133 0002 85B0     	 sub sp,sp,#20
 4134              	.LCFI326:
 4135              	 .cfi_def_cfa_offset 24
 4136 0004 00AF     	 add r7,sp,#0
 4137              	.LCFI327:
 4138              	 .cfi_def_cfa_register 7
 4139 0006 7860     	 str r0,[r7,#4]
 4140 0008 0B46     	 mov r3,r1
 4141 000a FB70     	 strb r3,[r7,#3]
1630:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sevnp;
1631:../Libraries/XMCLib/src/xmc_vadc.c **** 
1632:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_
1633:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC
1634:../Libraries/XMCLib/src/xmc_vadc.c **** 
1635:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp = group_ptr->SEVNP;
 4142              	 .loc 2 1635 0
 4143 000c 7B68     	 ldr r3,[r7,#4]
 4144 000e D3F8C031 	 ldr r3,[r3,#448]
 4145 0012 FB60     	 str r3,[r7,#12]
1636:../Libraries/XMCLib/src/xmc_vadc.c **** 
1637:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV0NP_Msk);
 4146              	 .loc 2 1637 0
 4147 0014 FB68     	 ldr r3,[r7,#12]
 4148 0016 23F00F03 	 bic r3,r3,#15
 4149 001a FB60     	 str r3,[r7,#12]
1638:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV0NP_Pos);
 4150              	 .loc 2 1638 0
 4151 001c FB78     	 ldrb r3,[r7,#3]
 4152 001e FA68     	 ldr r2,[r7,#12]
 4153 0020 1343     	 orrs r3,r3,r2
 4154 0022 FB60     	 str r3,[r7,#12]
1639:../Libraries/XMCLib/src/xmc_vadc.c **** 
1640:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SEVNP = sevnp;
 4155              	 .loc 2 1640 0
 4156 0024 7B68     	 ldr r3,[r7,#4]
 4157 0026 FA68     	 ldr r2,[r7,#12]
 4158 0028 C3F8C021 	 str r2,[r3,#448]
1641:../Libraries/XMCLib/src/xmc_vadc.c **** 
1642:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4159              	 .loc 2 1642 0
 4160 002c 1437     	 adds r7,r7,#20
 4161              	.LCFI328:
 4162              	 .cfi_def_cfa_offset 4
 4163 002e BD46     	 mov sp,r7
 4164              	.LCFI329:
 4165              	 .cfi_def_cfa_register 13
 4166              	 
 4167 0030 5DF8047B 	 ldr r7,[sp],#4
 4168              	.LCFI330:
 4169              	 .cfi_restore 7
 4170              	 .cfi_def_cfa_offset 0
 4171 0034 7047     	 bx lr
 4172              	 .cfi_endproc
 4173              	.LFE271:
 4175 0036 00BF     	 .section .text.XMC_VADC_GROUP_ChannelInit,"ax",%progbits
 4176              	 .align 2
 4177              	 .global XMC_VADC_GROUP_ChannelInit
 4178              	 .thumb
 4179              	 .thumb_func
 4181              	XMC_VADC_GROUP_ChannelInit:
 4182              	.LFB272:
1643:../Libraries/XMCLib/src/xmc_vadc.c **** #endif /* XMC_VADC_QUEUE_AVAILABLE*/
1644:../Libraries/XMCLib/src/xmc_vadc.c **** 
1645:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1646:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize a channel unit */
1647:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
1648:../Libraries/XMCLib/src/xmc_vadc.c ****                                         const XMC_VADC_CHANNEL_CONFIG_t *config)
1649:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4183              	 .loc 2 1649 0
 4184              	 .cfi_startproc
 4185              	 
 4186              	 
 4187              	 
 4188 0000 80B4     	 push {r7}
 4189              	.LCFI331:
 4190              	 .cfi_def_cfa_offset 4
 4191              	 .cfi_offset 7,-4
 4192 0002 89B0     	 sub sp,sp,#36
 4193              	.LCFI332:
 4194              	 .cfi_def_cfa_offset 40
 4195 0004 00AF     	 add r7,sp,#0
 4196              	.LCFI333:
 4197              	 .cfi_def_cfa_register 7
 4198 0006 F860     	 str r0,[r7,#12]
 4199 0008 B960     	 str r1,[r7,#8]
 4200 000a 7A60     	 str r2,[r7,#4]
1650:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t prio;
1651:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ch_assign;
1652:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
1653:../Libraries/XMCLib/src/xmc_vadc.c **** 
1654:../Libraries/XMCLib/src/xmc_vadc.c **** 
1655:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1656:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_P
1657:../Libraries/XMCLib/src/xmc_vadc.c ****   
1658:../Libraries/XMCLib/src/xmc_vadc.c ****   prio  = (uint32_t)config->channel_priority;
 4201              	 .loc 2 1658 0
 4202 000c 7B68     	 ldr r3,[r7,#4]
 4203 000e 1B7B     	 ldrb r3,[r3,#12]
 4204 0010 BB61     	 str r3,[r7,#24]
1659:../Libraries/XMCLib/src/xmc_vadc.c **** 
1660:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Priority channel */
1661:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign  = group_ptr->CHASS;
 4205              	 .loc 2 1661 0
 4206 0012 FB68     	 ldr r3,[r7,#12]
 4207 0014 D3F88830 	 ldr r3,[r3,#136]
 4208 0018 7B61     	 str r3,[r7,#20]
1662:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 4209              	 .loc 2 1662 0
 4210 001a BB68     	 ldr r3,[r7,#8]
 4211 001c 0122     	 movs r2,#1
 4212 001e 02FA03F3 	 lsl r3,r2,r3
 4213 0022 DB43     	 mvns r3,r3
 4214 0024 7A69     	 ldr r2,[r7,#20]
 4215 0026 1340     	 ands r3,r3,r2
 4216 0028 7B61     	 str r3,[r7,#20]
1663:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign |= (uint32_t)(prio << ch_num);
 4217              	 .loc 2 1663 0
 4218 002a BB68     	 ldr r3,[r7,#8]
 4219 002c BA69     	 ldr r2,[r7,#24]
 4220 002e 02FA03F3 	 lsl r3,r2,r3
 4221 0032 7A69     	 ldr r2,[r7,#20]
 4222 0034 1343     	 orrs r3,r3,r2
 4223 0036 7B61     	 str r3,[r7,#20]
1664:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHASS = ch_assign;
 4224              	 .loc 2 1664 0
 4225 0038 FB68     	 ldr r3,[r7,#12]
 4226 003a 7A69     	 ldr r2,[r7,#20]
 4227 003c C3F88820 	 str r2,[r3,#136]
1665:../Libraries/XMCLib/src/xmc_vadc.c **** 
1666:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Alias channel */
1667:../Libraries/XMCLib/src/xmc_vadc.c ****   if (config->alias_channel >= (int32_t)0)
 4228              	 .loc 2 1667 0
 4229 0040 7B68     	 ldr r3,[r7,#4]
 4230 0042 5B7B     	 ldrb r3,[r3,#13]
 4231 0044 5BB2     	 sxtb r3,r3
 4232 0046 002B     	 cmp r3,#0
 4233 0048 29DB     	 blt .L155
1668:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1669:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)0;
 4234              	 .loc 2 1669 0
 4235 004a 0023     	 movs r3,#0
 4236 004c FB61     	 str r3,[r7,#28]
1670:../Libraries/XMCLib/src/xmc_vadc.c ****     if ((uint32_t)1 == ch_num)
 4237              	 .loc 2 1670 0
 4238 004e BB68     	 ldr r3,[r7,#8]
 4239 0050 012B     	 cmp r3,#1
 4240 0052 0AD1     	 bne .L156
1671:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1672:../Libraries/XMCLib/src/xmc_vadc.c ****       mask = VADC_G_ALIAS_ALIAS1_Pos;
 4241              	 .loc 2 1672 0
 4242 0054 0823     	 movs r3,#8
 4243 0056 FB61     	 str r3,[r7,#28]
1673:../Libraries/XMCLib/src/xmc_vadc.c ****       group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 4244              	 .loc 2 1673 0
 4245 0058 FB68     	 ldr r3,[r7,#12]
 4246 005a D3F8B030 	 ldr r3,[r3,#176]
 4247 005e 23F4F852 	 bic r2,r3,#7936
 4248 0062 FB68     	 ldr r3,[r7,#12]
 4249 0064 C3F8B020 	 str r2,[r3,#176]
 4250 0068 0CE0     	 b .L157
 4251              	.L156:
1674:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1675:../Libraries/XMCLib/src/xmc_vadc.c ****     else if ((uint32_t)0 == ch_num)
 4252              	 .loc 2 1675 0
 4253 006a BB68     	 ldr r3,[r7,#8]
 4254 006c 002B     	 cmp r3,#0
 4255 006e 09D1     	 bne .L157
1676:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1677:../Libraries/XMCLib/src/xmc_vadc.c ****       mask = VADC_G_ALIAS_ALIAS0_Pos;
 4256              	 .loc 2 1677 0
 4257 0070 0023     	 movs r3,#0
 4258 0072 FB61     	 str r3,[r7,#28]
1678:../Libraries/XMCLib/src/xmc_vadc.c ****       group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 4259              	 .loc 2 1678 0
 4260 0074 FB68     	 ldr r3,[r7,#12]
 4261 0076 D3F8B030 	 ldr r3,[r3,#176]
 4262 007a 23F01F02 	 bic r2,r3,#31
 4263 007e FB68     	 ldr r3,[r7,#12]
 4264 0080 C3F8B020 	 str r2,[r3,#176]
 4265              	.L157:
1679:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1680:../Libraries/XMCLib/src/xmc_vadc.c **** 
1681:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 4266              	 .loc 2 1681 0
 4267 0084 FB68     	 ldr r3,[r7,#12]
 4268 0086 D3F8B030 	 ldr r3,[r3,#176]
 4269 008a 7A68     	 ldr r2,[r7,#4]
 4270 008c 527B     	 ldrb r2,[r2,#13]
 4271 008e 51B2     	 sxtb r1,r2
 4272 0090 FA69     	 ldr r2,[r7,#28]
 4273 0092 01FA02F2 	 lsl r2,r1,r2
 4274 0096 1A43     	 orrs r2,r2,r3
 4275 0098 FB68     	 ldr r3,[r7,#12]
 4276 009a C3F8B020 	 str r2,[r3,#176]
 4277              	.L155:
1682:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1683:../Libraries/XMCLib/src/xmc_vadc.c **** 
1684:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFL |= config->bfl;
 4278              	 .loc 2 1684 0
 4279 009e FB68     	 ldr r3,[r7,#12]
 4280 00a0 D3F8C820 	 ldr r2,[r3,#200]
 4281 00a4 7B68     	 ldr r3,[r7,#4]
 4282 00a6 5B68     	 ldr r3,[r3,#4]
 4283 00a8 1A43     	 orrs r2,r2,r3
 4284 00aa FB68     	 ldr r3,[r7,#12]
 4285 00ac C3F8C820 	 str r2,[r3,#200]
1685:../Libraries/XMCLib/src/xmc_vadc.c **** 
1686:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
1687:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLC |= config->bflc;
 4286              	 .loc 2 1687 0
 4287 00b0 FB68     	 ldr r3,[r7,#12]
 4288 00b2 D3F8D020 	 ldr r2,[r3,#208]
 4289 00b6 7B68     	 ldr r3,[r7,#4]
 4290 00b8 9B68     	 ldr r3,[r3,#8]
 4291 00ba 1A43     	 orrs r2,r2,r3
 4292 00bc FB68     	 ldr r3,[r7,#12]
 4293 00be C3F8D020 	 str r2,[r3,#208]
1688:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1689:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the CHCTR register */
1690:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = config->chctr;
 4294              	 .loc 2 1690 0
 4295 00c2 7B68     	 ldr r3,[r7,#4]
 4296 00c4 1968     	 ldr r1,[r3]
 4297 00c6 FB68     	 ldr r3,[r7,#12]
 4298 00c8 BA68     	 ldr r2,[r7,#8]
 4299 00ca 8032     	 adds r2,r2,#128
 4300 00cc 43F82210 	 str r1,[r3,r2,lsl#2]
1691:../Libraries/XMCLib/src/xmc_vadc.c **** 
1692:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4301              	 .loc 2 1692 0
 4302 00d0 2437     	 adds r7,r7,#36
 4303              	.LCFI334:
 4304              	 .cfi_def_cfa_offset 4
 4305 00d2 BD46     	 mov sp,r7
 4306              	.LCFI335:
 4307              	 .cfi_def_cfa_register 13
 4308              	 
 4309 00d4 5DF8047B 	 ldr r7,[sp],#4
 4310              	.LCFI336:
 4311              	 .cfi_restore 7
 4312              	 .cfi_def_cfa_offset 0
 4313 00d8 7047     	 bx lr
 4314              	 .cfi_endproc
 4315              	.LFE272:
 4317 00da 00BF     	 .section .text.XMC_VADC_GROUP_SetChannelAlias,"ax",%progbits
 4318              	 .align 2
 4319              	 .global XMC_VADC_GROUP_SetChannelAlias
 4320              	 .thumb
 4321              	 .thumb_func
 4323              	XMC_VADC_GROUP_SetChannelAlias:
 4324              	.LFB273:
1693:../Libraries/XMCLib/src/xmc_vadc.c **** 
1694:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an alias channel for channels numbered 2 through 7 */
1695:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetChannelAlias(XMC_VADC_GROUP_t *const group_ptr,
1696:../Libraries/XMCLib/src/xmc_vadc.c ****                                     const uint32_t src_ch_num,
1697:../Libraries/XMCLib/src/xmc_vadc.c ****                                     const uint32_t alias_ch_num)
1698:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4325              	 .loc 2 1698 0
 4326              	 .cfi_startproc
 4327              	 
 4328              	 
 4329              	 
 4330 0000 80B4     	 push {r7}
 4331              	.LCFI337:
 4332              	 .cfi_def_cfa_offset 4
 4333              	 .cfi_offset 7,-4
 4334 0002 89B0     	 sub sp,sp,#36
 4335              	.LCFI338:
 4336              	 .cfi_def_cfa_offset 40
 4337 0004 00AF     	 add r7,sp,#0
 4338              	.LCFI339:
 4339              	 .cfi_def_cfa_register 7
 4340 0006 F860     	 str r0,[r7,#12]
 4341 0008 B960     	 str r1,[r7,#8]
 4342 000a 7A60     	 str r2,[r7,#4]
1699:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t alias;
1700:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
1701:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t pos;
1702:../Libraries/XMCLib/src/xmc_vadc.c **** 
1703:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
1704:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Alias Channel", ((alias_ch_num == 0)|| (alias_ch
1705:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Aliased Channel", ((src_ch_num < 8U)))
1706:../Libraries/XMCLib/src/xmc_vadc.c **** 
1707:../Libraries/XMCLib/src/xmc_vadc.c ****   alias = group_ptr->ALIAS;
 4343              	 .loc 2 1707 0
 4344 000c FB68     	 ldr r3,[r7,#12]
 4345 000e D3F8B030 	 ldr r3,[r3,#176]
 4346 0012 7B61     	 str r3,[r7,#20]
1708:../Libraries/XMCLib/src/xmc_vadc.c **** 
1709:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == alias_ch_num)
 4347              	 .loc 2 1709 0
 4348 0014 7B68     	 ldr r3,[r7,#4]
 4349 0016 002B     	 cmp r3,#0
 4350 0018 04D1     	 bne .L159
1710:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1711:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t) VADC_G_ALIAS_ALIAS0_Msk;
 4351              	 .loc 2 1711 0
 4352 001a 1F23     	 movs r3,#31
 4353 001c FB61     	 str r3,[r7,#28]
1712:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t) VADC_G_ALIAS_ALIAS0_Pos;
 4354              	 .loc 2 1712 0
 4355 001e 0023     	 movs r3,#0
 4356 0020 BB61     	 str r3,[r7,#24]
 4357 0022 04E0     	 b .L160
 4358              	.L159:
1713:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1714:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1715:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1716:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t) VADC_G_ALIAS_ALIAS1_Msk;
 4359              	 .loc 2 1716 0
 4360 0024 4FF4F853 	 mov r3,#7936
 4361 0028 FB61     	 str r3,[r7,#28]
1717:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t) VADC_G_ALIAS_ALIAS1_Pos;
 4362              	 .loc 2 1717 0
 4363 002a 0823     	 movs r3,#8
 4364 002c BB61     	 str r3,[r7,#24]
 4365              	.L160:
1718:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1719:../Libraries/XMCLib/src/xmc_vadc.c ****   alias &= ~mask;
 4366              	 .loc 2 1719 0
 4367 002e FB69     	 ldr r3,[r7,#28]
 4368 0030 DB43     	 mvns r3,r3
 4369 0032 7A69     	 ldr r2,[r7,#20]
 4370 0034 1340     	 ands r3,r3,r2
 4371 0036 7B61     	 str r3,[r7,#20]
1720:../Libraries/XMCLib/src/xmc_vadc.c ****   alias |= (uint32_t)(src_ch_num << pos);
 4372              	 .loc 2 1720 0
 4373 0038 BB69     	 ldr r3,[r7,#24]
 4374 003a BA68     	 ldr r2,[r7,#8]
 4375 003c 02FA03F3 	 lsl r3,r2,r3
 4376 0040 7A69     	 ldr r2,[r7,#20]
 4377 0042 1343     	 orrs r3,r3,r2
 4378 0044 7B61     	 str r3,[r7,#20]
1721:../Libraries/XMCLib/src/xmc_vadc.c **** 
1722:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ALIAS = alias;
 4379              	 .loc 2 1722 0
 4380 0046 FB68     	 ldr r3,[r7,#12]
 4381 0048 7A69     	 ldr r2,[r7,#20]
 4382 004a C3F8B020 	 str r2,[r3,#176]
1723:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4383              	 .loc 2 1723 0
 4384 004e 2437     	 adds r7,r7,#36
 4385              	.LCFI340:
 4386              	 .cfi_def_cfa_offset 4
 4387 0050 BD46     	 mov sp,r7
 4388              	.LCFI341:
 4389              	 .cfi_def_cfa_register 13
 4390              	 
 4391 0052 5DF8047B 	 ldr r7,[sp],#4
 4392              	.LCFI342:
 4393              	 .cfi_restore 7
 4394              	 .cfi_def_cfa_offset 0
 4395 0056 7047     	 bx lr
 4396              	 .cfi_endproc
 4397              	.LFE273:
 4399              	 .section .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds,"ax",%progbits
 4400              	 .align 2
 4401              	 .global XMC_VADC_GROUP_ChannelIsResultOutOfBounds
 4402              	 .thumb
 4403              	 .thumb_func
 4405              	XMC_VADC_GROUP_ChannelIsResultOutOfBounds:
 4406              	.LFB274:
1724:../Libraries/XMCLib/src/xmc_vadc.c **** 
1725:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine whether input to a channel has violated boundary conditions */
1726:../Libraries/XMCLib/src/xmc_vadc.c **** bool XMC_VADC_GROUP_ChannelIsResultOutOfBounds(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch
1727:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4407              	 .loc 2 1727 0
 4408              	 .cfi_startproc
 4409              	 
 4410              	 
 4411              	 
 4412 0000 80B4     	 push {r7}
 4413              	.LCFI343:
 4414              	 .cfi_def_cfa_offset 4
 4415              	 .cfi_offset 7,-4
 4416 0002 87B0     	 sub sp,sp,#28
 4417              	.LCFI344:
 4418              	 .cfi_def_cfa_offset 32
 4419 0004 00AF     	 add r7,sp,#0
 4420              	.LCFI345:
 4421              	 .cfi_def_cfa_register 7
 4422 0006 7860     	 str r0,[r7,#4]
 4423 0008 3960     	 str r1,[r7]
1728:../Libraries/XMCLib/src/xmc_vadc.c ****   bool retval;
1729:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    chctr;
1730:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    ceflag;
1731:../Libraries/XMCLib/src/xmc_vadc.c **** 
1732:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelIsResultOutOfBounds:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
1733:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelIsResultOutOfBounds:Wrong Channel Number",
1734:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1735:../Libraries/XMCLib/src/xmc_vadc.c **** 
1736:../Libraries/XMCLib/src/xmc_vadc.c ****   retval = (bool)false;
 4424              	 .loc 2 1736 0
 4425 000a 0023     	 movs r3,#0
 4426 000c FB75     	 strb r3,[r7,#23]
1737:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
1738:../Libraries/XMCLib/src/xmc_vadc.c ****     Check if the Channel event is configured to be generated in the event of
1739:../Libraries/XMCLib/src/xmc_vadc.c ****     boundary violation and if affirmative, check if the channel event is set.
1740:../Libraries/XMCLib/src/xmc_vadc.c ****   */
1741:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract CHEVMODE for requested channel */
1742:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = group_ptr->CHCTR[ch_num];
 4427              	 .loc 2 1742 0
 4428 000e 7B68     	 ldr r3,[r7,#4]
 4429 0010 3A68     	 ldr r2,[r7]
 4430 0012 8032     	 adds r2,r2,#128
 4431 0014 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4432 0018 3B61     	 str r3,[r7,#16]
1743:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = (uint32_t)(chctr >> (uint32_t)VADC_G_CHCTR_CHEVMODE_Pos)& (uint32_t)0x3;
 4433              	 .loc 2 1743 0
 4434 001a 3B69     	 ldr r3,[r7,#16]
 4435 001c 1B0A     	 lsrs r3,r3,#8
 4436 001e 03F00303 	 and r3,r3,#3
 4437 0022 3B61     	 str r3,[r7,#16]
1744:../Libraries/XMCLib/src/xmc_vadc.c **** 
1745:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract CEFLAG for the requested channel */
1746:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag = group_ptr->CEFLAG;
 4438              	 .loc 2 1746 0
 4439 0024 7B68     	 ldr r3,[r7,#4]
 4440 0026 D3F88031 	 ldr r3,[r3,#384]
 4441 002a FB60     	 str r3,[r7,#12]
1747:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag = ceflag & ((uint32_t)((uint32_t)1 << ch_num) );
 4442              	 .loc 2 1747 0
 4443 002c 3B68     	 ldr r3,[r7]
 4444 002e 0122     	 movs r2,#1
 4445 0030 02FA03F3 	 lsl r3,r2,r3
 4446 0034 FA68     	 ldr r2,[r7,#12]
 4447 0036 1340     	 ands r3,r3,r2
 4448 0038 FB60     	 str r3,[r7,#12]
1748:../Libraries/XMCLib/src/xmc_vadc.c **** 
1749:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Check what was the channel event generation criteria */
1750:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( (( (uint32_t)XMC_VADC_CHANNEL_EVGEN_INBOUND == chctr) \
 4449              	 .loc 2 1750 0
 4450 003a 3B69     	 ldr r3,[r7,#16]
 4451 003c 012B     	 cmp r3,#1
 4452 003e 02D0     	 beq .L162
1751:../Libraries/XMCLib/src/xmc_vadc.c ****       || ((uint32_t) XMC_VADC_CHANNEL_EVGEN_OUTBOUND == chctr)) && (ceflag) )
 4453              	 .loc 2 1751 0
 4454 0040 3B69     	 ldr r3,[r7,#16]
 4455 0042 022B     	 cmp r3,#2
 4456 0044 04D1     	 bne .L163
 4457              	.L162:
 4458              	 .loc 2 1751 0 is_stmt 0 discriminator 1
 4459 0046 FB68     	 ldr r3,[r7,#12]
 4460 0048 002B     	 cmp r3,#0
 4461 004a 01D0     	 beq .L163
1752:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1753:../Libraries/XMCLib/src/xmc_vadc.c ****     retval = (bool)true;
 4462              	 .loc 2 1753 0 is_stmt 1
 4463 004c 0123     	 movs r3,#1
 4464 004e FB75     	 strb r3,[r7,#23]
 4465              	.L163:
1754:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1755:../Libraries/XMCLib/src/xmc_vadc.c **** 
1756:../Libraries/XMCLib/src/xmc_vadc.c ****   return retval;
 4466              	 .loc 2 1756 0
 4467 0050 FB7D     	 ldrb r3,[r7,#23]
1757:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4468              	 .loc 2 1757 0
 4469 0052 1846     	 mov r0,r3
 4470 0054 1C37     	 adds r7,r7,#28
 4471              	.LCFI346:
 4472              	 .cfi_def_cfa_offset 4
 4473 0056 BD46     	 mov sp,r7
 4474              	.LCFI347:
 4475              	 .cfi_def_cfa_register 13
 4476              	 
 4477 0058 5DF8047B 	 ldr r7,[sp],#4
 4478              	.LCFI348:
 4479              	 .cfi_restore 7
 4480              	 .cfi_def_cfa_offset 0
 4481 005c 7047     	 bx lr
 4482              	 .cfi_endproc
 4483              	.LFE274:
 4485 005e 00BF     	 .section .text.XMC_VADC_GROUP_ChannelSetInputReference,"ax",%progbits
 4486              	 .align 2
 4487              	 .global XMC_VADC_GROUP_ChannelSetInputReference
 4488              	 .thumb
 4489              	 .thumb_func
 4491              	XMC_VADC_GROUP_ChannelSetInputReference:
 4492              	.LFB275:
1758:../Libraries/XMCLib/src/xmc_vadc.c **** 
1759:../Libraries/XMCLib/src/xmc_vadc.c **** /* Set a reference voltage for conversion */
1760:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetInputReference(XMC_VADC_GROUP_t *const group_ptr,
1761:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t ch_num,
1762:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const XMC_VADC_CHANNEL_REF_t ref)
1763:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4493              	 .loc 2 1763 0
 4494              	 .cfi_startproc
 4495              	 
 4496              	 
 4497              	 
 4498 0000 80B4     	 push {r7}
 4499              	.LCFI349:
 4500              	 .cfi_def_cfa_offset 4
 4501              	 .cfi_offset 7,-4
 4502 0002 87B0     	 sub sp,sp,#28
 4503              	.LCFI350:
 4504              	 .cfi_def_cfa_offset 32
 4505 0004 00AF     	 add r7,sp,#0
 4506              	.LCFI351:
 4507              	 .cfi_def_cfa_register 7
 4508 0006 F860     	 str r0,[r7,#12]
 4509 0008 B960     	 str r1,[r7,#8]
 4510 000a 1346     	 mov r3,r2
 4511 000c FB71     	 strb r3,[r7,#7]
1764:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1765:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1766:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Channel Number", ((ch_num) < XMC_VADC_N
1767:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Voltage Reference", ((ref)<= XMC_VADC_C
1768:../Libraries/XMCLib/src/xmc_vadc.c **** 
1769:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 4512              	 .loc 2 1769 0
 4513 000e FB68     	 ldr r3,[r7,#12]
 4514 0010 BA68     	 ldr r2,[r7,#8]
 4515 0012 8032     	 adds r2,r2,#128
 4516 0014 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4517 0018 7B61     	 str r3,[r7,#20]
1770:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_REFSEL_Msk);
 4518              	 .loc 2 1770 0
 4519 001a 7B69     	 ldr r3,[r7,#20]
 4520 001c 23F40063 	 bic r3,r3,#2048
 4521 0020 7B61     	 str r3,[r7,#20]
1771:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)ref <<  VADC_G_CHCTR_REFSEL_Pos);
 4522              	 .loc 2 1771 0
 4523 0022 FB79     	 ldrb r3,[r7,#7]
 4524 0024 DB02     	 lsls r3,r3,#11
 4525 0026 7A69     	 ldr r2,[r7,#20]
 4526 0028 1343     	 orrs r3,r3,r2
 4527 002a 7B61     	 str r3,[r7,#20]
1772:../Libraries/XMCLib/src/xmc_vadc.c **** 
1773:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 4528              	 .loc 2 1773 0
 4529 002c FB68     	 ldr r3,[r7,#12]
 4530 002e BA68     	 ldr r2,[r7,#8]
 4531 0030 8032     	 adds r2,r2,#128
 4532 0032 7969     	 ldr r1,[r7,#20]
 4533 0034 43F82210 	 str r1,[r3,r2,lsl#2]
1774:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4534              	 .loc 2 1774 0
 4535 0038 1C37     	 adds r7,r7,#28
 4536              	.LCFI352:
 4537              	 .cfi_def_cfa_offset 4
 4538 003a BD46     	 mov sp,r7
 4539              	.LCFI353:
 4540              	 .cfi_def_cfa_register 13
 4541              	 
 4542 003c 5DF8047B 	 ldr r7,[sp],#4
 4543              	.LCFI354:
 4544              	 .cfi_restore 7
 4545              	 .cfi_def_cfa_offset 0
 4546 0040 7047     	 bx lr
 4547              	 .cfi_endproc
 4548              	.LFE275:
 4550 0042 00BF     	 .section .text.XMC_VADC_GROUP_ChannelSetResultRegister,"ax",%progbits
 4551              	 .align 2
 4552              	 .global XMC_VADC_GROUP_ChannelSetResultRegister
 4553              	 .thumb
 4554              	 .thumb_func
 4556              	XMC_VADC_GROUP_ChannelSetResultRegister:
 4557              	.LFB276:
1775:../Libraries/XMCLib/src/xmc_vadc.c **** 
1776:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the available 16 registers for storing the channel result */
1777:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetResultRegister(XMC_VADC_GROUP_t *const group_ptr,
1778:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t ch_num,
1779:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t result_reg_num)
1780:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4558              	 .loc 2 1780 0
 4559              	 .cfi_startproc
 4560              	 
 4561              	 
 4562              	 
 4563 0000 80B4     	 push {r7}
 4564              	.LCFI355:
 4565              	 .cfi_def_cfa_offset 4
 4566              	 .cfi_offset 7,-4
 4567 0002 87B0     	 sub sp,sp,#28
 4568              	.LCFI356:
 4569              	 .cfi_def_cfa_offset 32
 4570 0004 00AF     	 add r7,sp,#0
 4571              	.LCFI357:
 4572              	 .cfi_def_cfa_register 7
 4573 0006 F860     	 str r0,[r7,#12]
 4574 0008 B960     	 str r1,[r7,#8]
 4575 000a 7A60     	 str r2,[r7,#4]
1781:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1782:../Libraries/XMCLib/src/xmc_vadc.c **** 
1783:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1784:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Channel Number",
1785:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1786:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Result Register",
1787:../Libraries/XMCLib/src/xmc_vadc.c ****              ((result_reg_num) < XMC_VADC_NUM_RESULT_REGISTERS))
1788:../Libraries/XMCLib/src/xmc_vadc.c **** 
1789:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 4576              	 .loc 2 1789 0
 4577 000c FB68     	 ldr r3,[r7,#12]
 4578 000e BA68     	 ldr r2,[r7,#8]
 4579 0010 8032     	 adds r2,r2,#128
 4580 0012 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4581 0016 7B61     	 str r3,[r7,#20]
1790:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_RESREG_Msk);
 4582              	 .loc 2 1790 0
 4583 0018 7B69     	 ldr r3,[r7,#20]
 4584 001a 23F47023 	 bic r3,r3,#983040
 4585 001e 7B61     	 str r3,[r7,#20]
1791:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)(result_reg_num <<  VADC_G_CHCTR_RESREG_Pos);
 4586              	 .loc 2 1791 0
 4587 0020 7B68     	 ldr r3,[r7,#4]
 4588 0022 1B04     	 lsls r3,r3,#16
 4589 0024 7A69     	 ldr r2,[r7,#20]
 4590 0026 1343     	 orrs r3,r3,r2
 4591 0028 7B61     	 str r3,[r7,#20]
1792:../Libraries/XMCLib/src/xmc_vadc.c **** 
1793:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 4592              	 .loc 2 1793 0
 4593 002a FB68     	 ldr r3,[r7,#12]
 4594 002c BA68     	 ldr r2,[r7,#8]
 4595 002e 8032     	 adds r2,r2,#128
 4596 0030 7969     	 ldr r1,[r7,#20]
 4597 0032 43F82210 	 str r1,[r3,r2,lsl#2]
1794:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4598              	 .loc 2 1794 0
 4599 0036 1C37     	 adds r7,r7,#28
 4600              	.LCFI358:
 4601              	 .cfi_def_cfa_offset 4
 4602 0038 BD46     	 mov sp,r7
 4603              	.LCFI359:
 4604              	 .cfi_def_cfa_register 13
 4605              	 
 4606 003a 5DF8047B 	 ldr r7,[sp],#4
 4607              	.LCFI360:
 4608              	 .cfi_restore 7
 4609              	 .cfi_def_cfa_offset 0
 4610 003e 7047     	 bx lr
 4611              	 .cfi_endproc
 4612              	.LFE276:
 4614              	 .section .text.XMC_VADC_GROUP_ChannelSetIclass,"ax",%progbits
 4615              	 .align 2
 4616              	 .global XMC_VADC_GROUP_ChannelSetIclass
 4617              	 .thumb
 4618              	 .thumb_func
 4620              	XMC_VADC_GROUP_ChannelSetIclass:
 4621              	.LFB277:
1795:../Libraries/XMCLib/src/xmc_vadc.c **** 
1796:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the available 4 class conversion */
1797:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetIclass(XMC_VADC_GROUP_t *const group_ptr,
1798:../Libraries/XMCLib/src/xmc_vadc.c ****                                      const uint32_t ch_num,
1799:../Libraries/XMCLib/src/xmc_vadc.c ****                                      const XMC_VADC_CHANNEL_CONV_t conversion_class)
1800:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4622              	 .loc 2 1800 0
 4623              	 .cfi_startproc
 4624              	 
 4625              	 
 4626              	 
 4627 0000 80B4     	 push {r7}
 4628              	.LCFI361:
 4629              	 .cfi_def_cfa_offset 4
 4630              	 .cfi_offset 7,-4
 4631 0002 87B0     	 sub sp,sp,#28
 4632              	.LCFI362:
 4633              	 .cfi_def_cfa_offset 32
 4634 0004 00AF     	 add r7,sp,#0
 4635              	.LCFI363:
 4636              	 .cfi_def_cfa_register 7
 4637 0006 F860     	 str r0,[r7,#12]
 4638 0008 B960     	 str r1,[r7,#8]
 4639 000a 1346     	 mov r3,r2
 4640 000c FB71     	 strb r3,[r7,#7]
1801:../Libraries/XMCLib/src/xmc_vadc.c **** 
1802:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1803:../Libraries/XMCLib/src/xmc_vadc.c **** 
1804:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
1805:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong Channel Number",
1806:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1807:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong input class ",
1808:../Libraries/XMCLib/src/xmc_vadc.c ****              (XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1 >= conversion_class))
1809:../Libraries/XMCLib/src/xmc_vadc.c **** 
1810:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 4641              	 .loc 2 1810 0
 4642 000e FB68     	 ldr r3,[r7,#12]
 4643 0010 BA68     	 ldr r2,[r7,#8]
 4644 0012 8032     	 adds r2,r2,#128
 4645 0014 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4646 0018 7B61     	 str r3,[r7,#20]
1811:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_ICLSEL_Msk);
 4647              	 .loc 2 1811 0
 4648 001a 7B69     	 ldr r3,[r7,#20]
 4649 001c 23F00303 	 bic r3,r3,#3
 4650 0020 7B61     	 str r3,[r7,#20]
1812:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)conversion_class <<  (uint32_t)VADC_G_CHCTR_ICLSEL_Pos);
 4651              	 .loc 2 1812 0
 4652 0022 FB79     	 ldrb r3,[r7,#7]
 4653 0024 7A69     	 ldr r2,[r7,#20]
 4654 0026 1343     	 orrs r3,r3,r2
 4655 0028 7B61     	 str r3,[r7,#20]
1813:../Libraries/XMCLib/src/xmc_vadc.c **** 
1814:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 4656              	 .loc 2 1814 0
 4657 002a FB68     	 ldr r3,[r7,#12]
 4658 002c BA68     	 ldr r2,[r7,#8]
 4659 002e 8032     	 adds r2,r2,#128
 4660 0030 7969     	 ldr r1,[r7,#20]
 4661 0032 43F82210 	 str r1,[r3,r2,lsl#2]
1815:../Libraries/XMCLib/src/xmc_vadc.c **** 
1816:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4662              	 .loc 2 1816 0
 4663 0036 1C37     	 adds r7,r7,#28
 4664              	.LCFI364:
 4665              	 .cfi_def_cfa_offset 4
 4666 0038 BD46     	 mov sp,r7
 4667              	.LCFI365:
 4668              	 .cfi_def_cfa_register 13
 4669              	 
 4670 003a 5DF8047B 	 ldr r7,[sp],#4
 4671              	.LCFI366:
 4672              	 .cfi_restore 7
 4673              	 .cfi_def_cfa_offset 0
 4674 003e 7047     	 bx lr
 4675              	 .cfi_endproc
 4676              	.LFE277:
 4678              	 .section .text.XMC_VADC_GROUP_ChannelGetResultRegister,"ax",%progbits
 4679              	 .align 2
 4680              	 .global XMC_VADC_GROUP_ChannelGetResultRegister
 4681              	 .thumb
 4682              	 .thumb_func
 4684              	XMC_VADC_GROUP_ChannelGetResultRegister:
 4685              	.LFB278:
1817:../Libraries/XMCLib/src/xmc_vadc.c **** 
1818:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result register bound with specified channel */
1819:../Libraries/XMCLib/src/xmc_vadc.c **** uint8_t XMC_VADC_GROUP_ChannelGetResultRegister(XMC_VADC_GROUP_t *const group_ptr, const uint32_t c
1820:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4686              	 .loc 2 1820 0
 4687              	 .cfi_startproc
 4688              	 
 4689              	 
 4690              	 
 4691 0000 80B4     	 push {r7}
 4692              	.LCFI367:
 4693              	 .cfi_def_cfa_offset 4
 4694              	 .cfi_offset 7,-4
 4695 0002 85B0     	 sub sp,sp,#20
 4696              	.LCFI368:
 4697              	 .cfi_def_cfa_offset 24
 4698 0004 00AF     	 add r7,sp,#0
 4699              	.LCFI369:
 4700              	 .cfi_def_cfa_register 7
 4701 0006 7860     	 str r0,[r7,#4]
 4702 0008 3960     	 str r1,[r7]
1821:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t resreg;
1822:../Libraries/XMCLib/src/xmc_vadc.c **** 
1823:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1824:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Channel Number",
1825:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1826:../Libraries/XMCLib/src/xmc_vadc.c **** 
1827:../Libraries/XMCLib/src/xmc_vadc.c ****   resreg = (uint8_t)((group_ptr->CHCTR[ch_num] & (uint32_t)VADC_G_CHCTR_RESREG_Msk) >> VADC_G_CHCTR
 4703              	 .loc 2 1827 0
 4704 000a 7B68     	 ldr r3,[r7,#4]
 4705 000c 3A68     	 ldr r2,[r7]
 4706 000e 8032     	 adds r2,r2,#128
 4707 0010 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4708 0014 03F47023 	 and r3,r3,#983040
 4709 0018 1B0C     	 lsrs r3,r3,#16
 4710 001a FB73     	 strb r3,[r7,#15]
1828:../Libraries/XMCLib/src/xmc_vadc.c **** 
1829:../Libraries/XMCLib/src/xmc_vadc.c ****   return resreg;
 4711              	 .loc 2 1829 0
 4712 001c FB7B     	 ldrb r3,[r7,#15]
1830:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4713              	 .loc 2 1830 0
 4714 001e 1846     	 mov r0,r3
 4715 0020 1437     	 adds r7,r7,#20
 4716              	.LCFI370:
 4717              	 .cfi_def_cfa_offset 4
 4718 0022 BD46     	 mov sp,r7
 4719              	.LCFI371:
 4720              	 .cfi_def_cfa_register 13
 4721              	 
 4722 0024 5DF8047B 	 ldr r7,[sp],#4
 4723              	.LCFI372:
 4724              	 .cfi_restore 7
 4725              	 .cfi_def_cfa_offset 0
 4726 0028 7047     	 bx lr
 4727              	 .cfi_endproc
 4728              	.LFE278:
 4730 002a 00BF     	 .section .text.XMC_VADC_GROUP_ChannelTriggerEvent,"ax",%progbits
 4731              	 .align 2
 4732              	 .global XMC_VADC_GROUP_ChannelTriggerEvent
 4733              	 .thumb
 4734              	 .thumb_func
 4736              	XMC_VADC_GROUP_ChannelTriggerEvent:
 4737              	.LFB279:
1831:../Libraries/XMCLib/src/xmc_vadc.c **** 
1832:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to manually assert channel event */
1833:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelTriggerEvent(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)
1834:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4738              	 .loc 2 1834 0
 4739              	 .cfi_startproc
 4740              	 
 4741              	 
 4742              	 
 4743 0000 80B4     	 push {r7}
 4744              	.LCFI373:
 4745              	 .cfi_def_cfa_offset 4
 4746              	 .cfi_offset 7,-4
 4747 0002 85B0     	 sub sp,sp,#20
 4748              	.LCFI374:
 4749              	 .cfi_def_cfa_offset 24
 4750 0004 00AF     	 add r7,sp,#0
 4751              	.LCFI375:
 4752              	 .cfi_def_cfa_register 7
 4753 0006 7860     	 str r0,[r7,#4]
 4754 0008 3960     	 str r1,[r7]
1835:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ceflag;
1836:../Libraries/XMCLib/src/xmc_vadc.c **** 
1837:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
1838:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEvent:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CH
1839:../Libraries/XMCLib/src/xmc_vadc.c **** 
1840:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag  = group_ptr->CEFLAG;
 4755              	 .loc 2 1840 0
 4756 000a 7B68     	 ldr r3,[r7,#4]
 4757 000c D3F88031 	 ldr r3,[r3,#384]
 4758 0010 FB60     	 str r3,[r7,#12]
1841:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag |= (uint32_t)((uint32_t)1 << ch_num);
 4759              	 .loc 2 1841 0
 4760 0012 3B68     	 ldr r3,[r7]
 4761 0014 0122     	 movs r2,#1
 4762 0016 02FA03F3 	 lsl r3,r2,r3
 4763 001a FA68     	 ldr r2,[r7,#12]
 4764 001c 1343     	 orrs r3,r3,r2
 4765 001e FB60     	 str r3,[r7,#12]
1842:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CEFLAG = ceflag;
 4766              	 .loc 2 1842 0
 4767 0020 7B68     	 ldr r3,[r7,#4]
 4768 0022 FA68     	 ldr r2,[r7,#12]
 4769 0024 C3F88021 	 str r2,[r3,#384]
1843:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4770              	 .loc 2 1843 0
 4771 0028 1437     	 adds r7,r7,#20
 4772              	.LCFI376:
 4773              	 .cfi_def_cfa_offset 4
 4774 002a BD46     	 mov sp,r7
 4775              	.LCFI377:
 4776              	 .cfi_def_cfa_register 13
 4777              	 
 4778 002c 5DF8047B 	 ldr r7,[sp],#4
 4779              	.LCFI378:
 4780              	 .cfi_restore 7
 4781              	 .cfi_def_cfa_offset 0
 4782 0030 7047     	 bx lr
 4783              	 .cfi_endproc
 4784              	.LFE279:
 4786 0032 00BF     	 .section .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode,"ax",%progbits
 4787              	 .align 2
 4788              	 .global XMC_VADC_GROUP_ChannelSetEventInterruptNode
 4789              	 .thumb
 4790              	 .thumb_func
 4792              	XMC_VADC_GROUP_ChannelSetEventInterruptNode:
 4793              	.LFB280:
1844:../Libraries/XMCLib/src/xmc_vadc.c **** 
1845:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind channel event with a service request (NVIC Node) */
1846:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
1847:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const uint32_t ch_num,
1848:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const XMC_VADC_SR_t sr)
1849:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4794              	 .loc 2 1849 0
 4795              	 .cfi_startproc
 4796              	 
 4797              	 
 4798              	 
 4799 0000 80B4     	 push {r7}
 4800              	.LCFI379:
 4801              	 .cfi_def_cfa_offset 4
 4802              	 .cfi_offset 7,-4
 4803 0002 87B0     	 sub sp,sp,#28
 4804              	.LCFI380:
 4805              	 .cfi_def_cfa_offset 32
 4806 0004 00AF     	 add r7,sp,#0
 4807              	.LCFI381:
 4808              	 .cfi_def_cfa_register 7
 4809 0006 F860     	 str r0,[r7,#12]
 4810 0008 B960     	 str r1,[r7,#8]
 4811 000a 1346     	 mov r3,r2
 4812 000c FB71     	 strb r3,[r7,#7]
1850:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t route_mask;
1851:../Libraries/XMCLib/src/xmc_vadc.c **** 
1852:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROU
1853:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Channel Number",
1854:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1855:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VAD
1856:../Libraries/XMCLib/src/xmc_vadc.c **** 
1857:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask  = group_ptr->CEVNP0;
 4813              	 .loc 2 1857 0
 4814 000e FB68     	 ldr r3,[r7,#12]
 4815 0010 D3F8A031 	 ldr r3,[r3,#416]
 4816 0014 7B61     	 str r3,[r7,#20]
1858:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask &= ~((uint32_t)15 << (ch_num * (uint32_t)4));
 4817              	 .loc 2 1858 0
 4818 0016 BB68     	 ldr r3,[r7,#8]
 4819 0018 9B00     	 lsls r3,r3,#2
 4820 001a 1A46     	 mov r2,r3
 4821 001c 0F23     	 movs r3,#15
 4822 001e 9340     	 lsls r3,r3,r2
 4823 0020 DB43     	 mvns r3,r3
 4824 0022 7A69     	 ldr r2,[r7,#20]
 4825 0024 1340     	 ands r3,r3,r2
 4826 0026 7B61     	 str r3,[r7,#20]
1859:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask |= (uint32_t)( (uint32_t)sr << (ch_num * (uint32_t)4));
 4827              	 .loc 2 1859 0
 4828 0028 FB79     	 ldrb r3,[r7,#7]
 4829 002a BA68     	 ldr r2,[r7,#8]
 4830 002c 9200     	 lsls r2,r2,#2
 4831 002e 9340     	 lsls r3,r3,r2
 4832 0030 7A69     	 ldr r2,[r7,#20]
 4833 0032 1343     	 orrs r3,r3,r2
 4834 0034 7B61     	 str r3,[r7,#20]
1860:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CEVNP0 = route_mask;
 4835              	 .loc 2 1860 0
 4836 0036 FB68     	 ldr r3,[r7,#12]
 4837 0038 7A69     	 ldr r2,[r7,#20]
 4838 003a C3F8A021 	 str r2,[r3,#416]
1861:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4839              	 .loc 2 1861 0
 4840 003e 1C37     	 adds r7,r7,#28
 4841              	.LCFI382:
 4842              	 .cfi_def_cfa_offset 4
 4843 0040 BD46     	 mov sp,r7
 4844              	.LCFI383:
 4845              	 .cfi_def_cfa_register 13
 4846              	 
 4847 0042 5DF8047B 	 ldr r7,[sp],#4
 4848              	.LCFI384:
 4849              	 .cfi_restore 7
 4850              	 .cfi_def_cfa_offset 0
 4851 0046 7047     	 bx lr
 4852              	 .cfi_endproc
 4853              	.LFE280:
 4855              	 .section .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria,"ax",%progbits
 4856              	 .align 2
 4857              	 .global XMC_VADC_GROUP_ChannelTriggerEventGenCriteria
 4858              	 .thumb
 4859              	 .thumb_func
 4861              	XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:
 4862              	.LFB281:
1862:../Libraries/XMCLib/src/xmc_vadc.c **** 
1863:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure conditions for generation of channel event */
1864:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelTriggerEventGenCriteria( XMC_VADC_GROUP_t *const group_ptr,
1865:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    const uint32_t ch_num,
1866:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    const XMC_VADC_CHANNEL_EVGEN_t criteria)
1867:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4863              	 .loc 2 1867 0
 4864              	 .cfi_startproc
 4865              	 
 4866              	 
 4867              	 
 4868 0000 80B4     	 push {r7}
 4869              	.LCFI385:
 4870              	 .cfi_def_cfa_offset 4
 4871              	 .cfi_offset 7,-4
 4872 0002 87B0     	 sub sp,sp,#28
 4873              	.LCFI386:
 4874              	 .cfi_def_cfa_offset 32
 4875 0004 00AF     	 add r7,sp,#0
 4876              	.LCFI387:
 4877              	 .cfi_def_cfa_register 7
 4878 0006 F860     	 str r0,[r7,#12]
 4879 0008 B960     	 str r1,[r7,#8]
 4880 000a 1346     	 mov r3,r2
 4881 000c FB71     	 strb r3,[r7,#7]
1868:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1869:../Libraries/XMCLib/src/xmc_vadc.c **** 
1870:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Group Pointer", XMC_VADC_CHECK_GR
1871:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Channel Number",
1872:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1873:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Event Generation Criteria",
1874:../Libraries/XMCLib/src/xmc_vadc.c ****              ((criteria) <= XMC_VADC_CHANNEL_EVGEN_ALWAYS))
1875:../Libraries/XMCLib/src/xmc_vadc.c **** 
1876:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = group_ptr->CHCTR[ch_num];
 4882              	 .loc 2 1876 0
 4883 000e FB68     	 ldr r3,[r7,#12]
 4884 0010 BA68     	 ldr r2,[r7,#8]
 4885 0012 8032     	 adds r2,r2,#128
 4886 0014 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4887 0018 7B61     	 str r3,[r7,#20]
1877:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_CHEVMODE_Msk);
 4888              	 .loc 2 1877 0
 4889 001a 7B69     	 ldr r3,[r7,#20]
 4890 001c 23F44073 	 bic r3,r3,#768
 4891 0020 7B61     	 str r3,[r7,#20]
1878:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)criteria << VADC_G_CHCTR_CHEVMODE_Pos);
 4892              	 .loc 2 1878 0
 4893 0022 FB79     	 ldrb r3,[r7,#7]
 4894 0024 1B02     	 lsls r3,r3,#8
 4895 0026 7A69     	 ldr r2,[r7,#20]
 4896 0028 1343     	 orrs r3,r3,r2
 4897 002a 7B61     	 str r3,[r7,#20]
1879:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 4898              	 .loc 2 1879 0
 4899 002c FB68     	 ldr r3,[r7,#12]
 4900 002e BA68     	 ldr r2,[r7,#8]
 4901 0030 8032     	 adds r2,r2,#128
 4902 0032 7969     	 ldr r1,[r7,#20]
 4903 0034 43F82210 	 str r1,[r3,r2,lsl#2]
1880:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4904              	 .loc 2 1880 0
 4905 0038 1C37     	 adds r7,r7,#28
 4906              	.LCFI388:
 4907              	 .cfi_def_cfa_offset 4
 4908 003a BD46     	 mov sp,r7
 4909              	.LCFI389:
 4910              	 .cfi_def_cfa_register 13
 4911              	 
 4912 003c 5DF8047B 	 ldr r7,[sp],#4
 4913              	.LCFI390:
 4914              	 .cfi_restore 7
 4915              	 .cfi_def_cfa_offset 0
 4916 0040 7047     	 bx lr
 4917              	 .cfi_endproc
 4918              	.LFE281:
 4920 0042 00BF     	 .section .text.XMC_VADC_GROUP_ChannelSetBoundarySelection,"ax",%progbits
 4921              	 .align 2
 4922              	 .global XMC_VADC_GROUP_ChannelSetBoundarySelection
 4923              	 .thumb
 4924              	 .thumb_func
 4926              	XMC_VADC_GROUP_ChannelSetBoundarySelection:
 4927              	.LFB282:
1881:../Libraries/XMCLib/src/xmc_vadc.c **** 
1882:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure the boundary selection */
1883:../Libraries/XMCLib/src/xmc_vadc.c **** void  XMC_VADC_GROUP_ChannelSetBoundarySelection(XMC_VADC_GROUP_t *const group_ptr,
1884:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const uint32_t ch_num,
1885:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  XMC_VADC_BOUNDARY_SELECT_t boundary_sel,
1886:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  XMC_VADC_CHANNEL_BOUNDARY_t selection)
1887:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4928              	 .loc 2 1887 0
 4929              	 .cfi_startproc
 4930              	 
 4931              	 
 4932              	 
 4933 0000 80B4     	 push {r7}
 4934              	.LCFI391:
 4935              	 .cfi_def_cfa_offset 4
 4936              	 .cfi_offset 7,-4
 4937 0002 85B0     	 sub sp,sp,#20
 4938              	.LCFI392:
 4939              	 .cfi_def_cfa_offset 24
 4940 0004 00AF     	 add r7,sp,#0
 4941              	.LCFI393:
 4942              	 .cfi_def_cfa_register 7
 4943 0006 F860     	 str r0,[r7,#12]
 4944 0008 B960     	 str r1,[r7,#8]
 4945 000a 1146     	 mov r1,r2
 4946 000c 1A46     	 mov r2,r3
 4947 000e 0B46     	 mov r3,r1
 4948 0010 FB71     	 strb r3,[r7,#7]
 4949 0012 1346     	 mov r3,r2
 4950 0014 BB71     	 strb r3,[r7,#6]
1888:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetBoundarySelection:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
1889:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetBoundarySelection:Wrong Channel Number",
1890:../Libraries/XMCLib/src/xmc_vadc.c ****               ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1891:../Libraries/XMCLib/src/xmc_vadc.c **** 
1892:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] &= ~((uint32_t)VADC_G_CHCTR_BNDSELL_Msk << boundary_sel);
 4951              	 .loc 2 1892 0
 4952 0016 FB68     	 ldr r3,[r7,#12]
 4953 0018 BA68     	 ldr r2,[r7,#8]
 4954 001a 8032     	 adds r2,r2,#128
 4955 001c 53F82220 	 ldr r2,[r3,r2,lsl#2]
 4956 0020 FB79     	 ldrb r3,[r7,#7]
 4957 0022 3021     	 movs r1,#48
 4958 0024 01FA03F3 	 lsl r3,r1,r3
 4959 0028 DB43     	 mvns r3,r3
 4960 002a 02EA0301 	 and r1,r2,r3
 4961 002e FB68     	 ldr r3,[r7,#12]
 4962 0030 BA68     	 ldr r2,[r7,#8]
 4963 0032 8032     	 adds r2,r2,#128
 4964 0034 43F82210 	 str r1,[r3,r2,lsl#2]
1893:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] |= (selection<< ((uint32_t)VADC_G_CHCTR_BNDSELL_Pos + (uint32_t)boundary
 4965              	 .loc 2 1893 0
 4966 0038 FB68     	 ldr r3,[r7,#12]
 4967 003a BA68     	 ldr r2,[r7,#8]
 4968 003c 8032     	 adds r2,r2,#128
 4969 003e 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4970 0042 BA79     	 ldrb r2,[r7,#6]
 4971 0044 F979     	 ldrb r1,[r7,#7]
 4972 0046 0431     	 adds r1,r1,#4
 4973 0048 8A40     	 lsls r2,r2,r1
 4974 004a 43EA0201 	 orr r1,r3,r2
 4975 004e FB68     	 ldr r3,[r7,#12]
 4976 0050 BA68     	 ldr r2,[r7,#8]
 4977 0052 8032     	 adds r2,r2,#128
 4978 0054 43F82210 	 str r1,[r3,r2,lsl#2]
1894:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4979              	 .loc 2 1894 0
 4980 0058 1437     	 adds r7,r7,#20
 4981              	.LCFI394:
 4982              	 .cfi_def_cfa_offset 4
 4983 005a BD46     	 mov sp,r7
 4984              	.LCFI395:
 4985              	 .cfi_def_cfa_register 13
 4986              	 
 4987 005c 5DF8047B 	 ldr r7,[sp],#4
 4988              	.LCFI396:
 4989              	 .cfi_restore 7
 4990              	 .cfi_def_cfa_offset 0
 4991 0060 7047     	 bx lr
 4992              	 .cfi_endproc
 4993              	.LFE282:
 4995 0062 00BF     	 .section .text.XMC_VADC_GROUP_AddResultToFifo,"ax",%progbits
 4996              	 .align 2
 4997              	 .global XMC_VADC_GROUP_AddResultToFifo
 4998              	 .thumb
 4999              	 .thumb_func
 5001              	XMC_VADC_GROUP_AddResultToFifo:
 5002              	.LFB283:
1895:../Libraries/XMCLib/src/xmc_vadc.c **** 
1896:../Libraries/XMCLib/src/xmc_vadc.c **** /* Make the specified result register part of Result FIFO */ 
1897:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_AddResultToFifo(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)
1898:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5003              	 .loc 2 1898 0
 5004              	 .cfi_startproc
 5005              	 
 5006              	 
 5007              	 
 5008 0000 80B4     	 push {r7}
 5009              	.LCFI397:
 5010              	 .cfi_def_cfa_offset 4
 5011              	 .cfi_offset 7,-4
 5012 0002 85B0     	 sub sp,sp,#20
 5013              	.LCFI398:
 5014              	 .cfi_def_cfa_offset 24
 5015 0004 00AF     	 add r7,sp,#0
 5016              	.LCFI399:
 5017              	 .cfi_def_cfa_register 7
 5018 0006 7860     	 str r0,[r7,#4]
 5019 0008 3960     	 str r1,[r7]
1899:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t fen;
1900:../Libraries/XMCLib/src/xmc_vadc.c **** 
1901:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_AddResultToFifo:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
1902:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_AddResultToFifo:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESU
1903:../Libraries/XMCLib/src/xmc_vadc.c **** 
1904:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract and clear the FIFO enable field */
1905:../Libraries/XMCLib/src/xmc_vadc.c ****   fen = group_ptr->RCR[res_reg];
 5020              	 .loc 2 1905 0
 5021 000a 7B68     	 ldr r3,[r7,#4]
 5022 000c 3A68     	 ldr r2,[r7]
 5023 000e A032     	 adds r2,r2,#160
 5024 0010 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5025 0014 FB60     	 str r3,[r7,#12]
1906:../Libraries/XMCLib/src/xmc_vadc.c ****   fen &= ~((uint32_t)VADC_G_RCR_FEN_Msk);
 5026              	 .loc 2 1906 0
 5027 0016 FB68     	 ldr r3,[r7,#12]
 5028 0018 23F0C063 	 bic r3,r3,#100663296
 5029 001c FB60     	 str r3,[r7,#12]
1907:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set this register up as a FIFO member */
1908:../Libraries/XMCLib/src/xmc_vadc.c ****   fen |= (uint32_t)((uint32_t)1 << VADC_G_RCR_FEN_Pos);
 5030              	 .loc 2 1908 0
 5031 001e FB68     	 ldr r3,[r7,#12]
 5032 0020 43F00073 	 orr r3,r3,#33554432
 5033 0024 FB60     	 str r3,[r7,#12]
1909:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RCR[res_reg] = fen;
 5034              	 .loc 2 1909 0
 5035 0026 7B68     	 ldr r3,[r7,#4]
 5036 0028 3A68     	 ldr r2,[r7]
 5037 002a A032     	 adds r2,r2,#160
 5038 002c F968     	 ldr r1,[r7,#12]
 5039 002e 43F82210 	 str r1,[r3,r2,lsl#2]
1910:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5040              	 .loc 2 1910 0
 5041 0032 1437     	 adds r7,r7,#20
 5042              	.LCFI400:
 5043              	 .cfi_def_cfa_offset 4
 5044 0034 BD46     	 mov sp,r7
 5045              	.LCFI401:
 5046              	 .cfi_def_cfa_register 13
 5047              	 
 5048 0036 5DF8047B 	 ldr r7,[sp],#4
 5049              	.LCFI402:
 5050              	 .cfi_restore 7
 5051              	 .cfi_def_cfa_offset 0
 5052 003a 7047     	 bx lr
 5053              	 .cfi_endproc
 5054              	.LFE283:
 5056              	 .section .text.XMC_VADC_GROUP_SetResultFastCompareValue,"ax",%progbits
 5057              	 .align 2
 5058              	 .global XMC_VADC_GROUP_SetResultFastCompareValue
 5059              	 .thumb
 5060              	 .thumb_func
 5062              	XMC_VADC_GROUP_SetResultFastCompareValue:
 5063              	.LFB284:
1911:../Libraries/XMCLib/src/xmc_vadc.c **** 
1912:../Libraries/XMCLib/src/xmc_vadc.c **** 
1913:../Libraries/XMCLib/src/xmc_vadc.c **** /* Applicable to fast compare mode, this API sets up the value which is to be compared against conv
1914:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultFastCompareValue(XMC_VADC_GROUP_t *const group_ptr,
1915:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const uint32_t res_reg,
1916:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const XMC_VADC_RESULT_SIZE_t compare_val)
1917:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5064              	 .loc 2 1917 0
 5065              	 .cfi_startproc
 5066              	 
 5067              	 
 5068              	 
 5069 0000 80B4     	 push {r7}
 5070              	.LCFI403:
 5071              	 .cfi_def_cfa_offset 4
 5072              	 .cfi_offset 7,-4
 5073 0002 87B0     	 sub sp,sp,#28
 5074              	.LCFI404:
 5075              	 .cfi_def_cfa_offset 32
 5076 0004 00AF     	 add r7,sp,#0
 5077              	.LCFI405:
 5078              	 .cfi_def_cfa_register 7
 5079 0006 F860     	 str r0,[r7,#12]
 5080 0008 B960     	 str r1,[r7,#8]
 5081 000a 1346     	 mov r3,r2
 5082 000c FB80     	 strh r3,[r7,#6]
1918:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res = group_ptr->RES[res_reg];
 5083              	 .loc 2 1918 0
 5084 000e FB68     	 ldr r3,[r7,#12]
 5085 0010 BA68     	 ldr r2,[r7,#8]
 5086 0012 C032     	 adds r2,r2,#192
 5087 0014 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5088 0018 7B61     	 str r3,[r7,#20]
1919:../Libraries/XMCLib/src/xmc_vadc.c **** 
1920:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultFastCompareValue:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1921:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultFastCompareValue:Wrong Result Register",
1922:../Libraries/XMCLib/src/xmc_vadc.c ****             ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
1923:../Libraries/XMCLib/src/xmc_vadc.c **** 
1924:../Libraries/XMCLib/src/xmc_vadc.c ****   res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
 5089              	 .loc 2 1924 0
 5090 001a 7B69     	 ldr r3,[r7,#20]
 5091 001c 1B0C     	 lsrs r3,r3,#16
 5092 001e 1B04     	 lsls r3,r3,#16
 5093 0020 7B61     	 str r3,[r7,#20]
1925:../Libraries/XMCLib/src/xmc_vadc.c ****   res |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 5094              	 .loc 2 1925 0
 5095 0022 FB88     	 ldrh r3,[r7,#6]
 5096 0024 9B00     	 lsls r3,r3,#2
 5097 0026 7A69     	 ldr r2,[r7,#20]
 5098 0028 1343     	 orrs r3,r3,r2
 5099 002a 7B61     	 str r3,[r7,#20]
1926:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RES[res_reg] = res;
 5100              	 .loc 2 1926 0
 5101 002c FB68     	 ldr r3,[r7,#12]
 5102 002e BA68     	 ldr r2,[r7,#8]
 5103 0030 C032     	 adds r2,r2,#192
 5104 0032 7969     	 ldr r1,[r7,#20]
 5105 0034 43F82210 	 str r1,[r3,r2,lsl#2]
1927:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5106              	 .loc 2 1927 0
 5107 0038 1C37     	 adds r7,r7,#28
 5108              	.LCFI406:
 5109              	 .cfi_def_cfa_offset 4
 5110 003a BD46     	 mov sp,r7
 5111              	.LCFI407:
 5112              	 .cfi_def_cfa_register 13
 5113              	 
 5114 003c 5DF8047B 	 ldr r7,[sp],#4
 5115              	.LCFI408:
 5116              	 .cfi_restore 7
 5117              	 .cfi_def_cfa_offset 0
 5118 0040 7047     	 bx lr
 5119              	 .cfi_endproc
 5120              	.LFE284:
 5122 0042 00BF     	 .section .text.XMC_VADC_GROUP_GetFastCompareResult,"ax",%progbits
 5123              	 .align 2
 5124              	 .global XMC_VADC_GROUP_GetFastCompareResult
 5125              	 .thumb
 5126              	 .thumb_func
 5128              	XMC_VADC_GROUP_GetFastCompareResult:
 5129              	.LFB285:
1928:../Libraries/XMCLib/src/xmc_vadc.c **** 
1929:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result of fast mode comparison */
1930:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GROUP_GetFastCompareResult(XMC_VADC_GROUP_t *const group_ptr, cons
1931:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5130              	 .loc 2 1931 0
 5131              	 .cfi_startproc
 5132              	 
 5133              	 
 5134              	 
 5135 0000 80B4     	 push {r7}
 5136              	.LCFI409:
 5137              	 .cfi_def_cfa_offset 4
 5138              	 .cfi_offset 7,-4
 5139 0002 85B0     	 sub sp,sp,#20
 5140              	.LCFI410:
 5141              	 .cfi_def_cfa_offset 24
 5142 0004 00AF     	 add r7,sp,#0
 5143              	.LCFI411:
 5144              	 .cfi_def_cfa_register 7
 5145 0006 7860     	 str r0,[r7,#4]
 5146 0008 3960     	 str r1,[r7]
1932:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_FAST_COMPARE_t result;
1933:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
1934:../Libraries/XMCLib/src/xmc_vadc.c **** 
1935:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetFastCompareResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
1936:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetFastCompareResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM
1937:../Libraries/XMCLib/src/xmc_vadc.c **** 
1938:../Libraries/XMCLib/src/xmc_vadc.c ****   res = group_ptr->RES[res_reg];
 5147              	 .loc 2 1938 0
 5148 000a 7B68     	 ldr r3,[r7,#4]
 5149 000c 3A68     	 ldr r2,[r7]
 5150 000e C032     	 adds r2,r2,#192
 5151 0010 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5152 0014 BB60     	 str r3,[r7,#8]
1939:../Libraries/XMCLib/src/xmc_vadc.c **** 
1940:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res & (uint32_t)VADC_G_RES_VF_Msk)
 5153              	 .loc 2 1940 0
 5154 0016 BB68     	 ldr r3,[r7,#8]
 5155 0018 002B     	 cmp r3,#0
 5156 001a 06DA     	 bge .L177
1941:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1942:../Libraries/XMCLib/src/xmc_vadc.c ****     result = (XMC_VADC_FAST_COMPARE_t)((uint32_t)(res >> (uint32_t)VADC_G_RES_FCR_Pos) & (uint32_t)
 5157              	 .loc 2 1942 0
 5158 001c BB68     	 ldr r3,[r7,#8]
 5159 001e 9B0F     	 lsrs r3,r3,#30
 5160 0020 DBB2     	 uxtb r3,r3
 5161 0022 03F00103 	 and r3,r3,#1
 5162 0026 FB73     	 strb r3,[r7,#15]
 5163 0028 01E0     	 b .L178
 5164              	.L177:
1943:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1944:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1945:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1946:../Libraries/XMCLib/src/xmc_vadc.c ****     result = XMC_VADC_FAST_COMPARE_UNKNOWN;
 5165              	 .loc 2 1946 0
 5166 002a 0223     	 movs r3,#2
 5167 002c FB73     	 strb r3,[r7,#15]
 5168              	.L178:
1947:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1948:../Libraries/XMCLib/src/xmc_vadc.c **** 
1949:../Libraries/XMCLib/src/xmc_vadc.c ****   return result;
 5169              	 .loc 2 1949 0
 5170 002e FB7B     	 ldrb r3,[r7,#15]
1950:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5171              	 .loc 2 1950 0
 5172 0030 1846     	 mov r0,r3
 5173 0032 1437     	 adds r7,r7,#20
 5174              	.LCFI412:
 5175              	 .cfi_def_cfa_offset 4
 5176 0034 BD46     	 mov sp,r7
 5177              	.LCFI413:
 5178              	 .cfi_def_cfa_register 13
 5179              	 
 5180 0036 5DF8047B 	 ldr r7,[sp],#4
 5181              	.LCFI414:
 5182              	 .cfi_restore 7
 5183              	 .cfi_def_cfa_offset 0
 5184 003a 7047     	 bx lr
 5185              	 .cfi_endproc
 5186              	.LFE285:
 5188              	 .section .text.XMC_VADC_GROUP_SetResultSubtractionValue,"ax",%progbits
 5189              	 .align 2
 5190              	 .global XMC_VADC_GROUP_SetResultSubtractionValue
 5191              	 .thumb
 5192              	 .thumb_func
 5194              	XMC_VADC_GROUP_SetResultSubtractionValue:
 5195              	.LFB286:
1951:../Libraries/XMCLib/src/xmc_vadc.c **** 
1952:../Libraries/XMCLib/src/xmc_vadc.c **** /* Applicable to fast compare mode, this API sets up the value which is to be compared against conv
1953:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultSubtractionValue(XMC_VADC_GROUP_t *const group_ptr,
1954:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const uint16_t subtraction_val)
1955:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5196              	 .loc 2 1955 0
 5197              	 .cfi_startproc
 5198              	 
 5199              	 
 5200              	 
 5201 0000 80B4     	 push {r7}
 5202              	.LCFI415:
 5203              	 .cfi_def_cfa_offset 4
 5204              	 .cfi_offset 7,-4
 5205 0002 85B0     	 sub sp,sp,#20
 5206              	.LCFI416:
 5207              	 .cfi_def_cfa_offset 24
 5208 0004 00AF     	 add r7,sp,#0
 5209              	.LCFI417:
 5210              	 .cfi_def_cfa_register 7
 5211 0006 7860     	 str r0,[r7,#4]
 5212 0008 0B46     	 mov r3,r1
 5213 000a 7B80     	 strh r3,[r7,#2]
1956:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
1957:../Libraries/XMCLib/src/xmc_vadc.c **** 
1958:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultSubtractionValue:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1959:../Libraries/XMCLib/src/xmc_vadc.c **** 
1960:../Libraries/XMCLib/src/xmc_vadc.c ****   res = group_ptr->RES[0];
 5214              	 .loc 2 1960 0
 5215 000c 7B68     	 ldr r3,[r7,#4]
 5216 000e D3F80033 	 ldr r3,[r3,#768]
 5217 0012 FB60     	 str r3,[r7,#12]
1961:../Libraries/XMCLib/src/xmc_vadc.c ****   res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
 5218              	 .loc 2 1961 0
 5219 0014 FB68     	 ldr r3,[r7,#12]
 5220 0016 1B0C     	 lsrs r3,r3,#16
 5221 0018 1B04     	 lsls r3,r3,#16
 5222 001a FB60     	 str r3,[r7,#12]
1962:../Libraries/XMCLib/src/xmc_vadc.c ****   res |= (uint32_t)subtraction_val;
 5223              	 .loc 2 1962 0
 5224 001c 7B88     	 ldrh r3,[r7,#2]
 5225 001e FA68     	 ldr r2,[r7,#12]
 5226 0020 1343     	 orrs r3,r3,r2
 5227 0022 FB60     	 str r3,[r7,#12]
1963:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RES[0] = res;
 5228              	 .loc 2 1963 0
 5229 0024 7B68     	 ldr r3,[r7,#4]
 5230 0026 FA68     	 ldr r2,[r7,#12]
 5231 0028 C3F80023 	 str r2,[r3,#768]
1964:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5232              	 .loc 2 1964 0
 5233 002c 1437     	 adds r7,r7,#20
 5234              	.LCFI418:
 5235              	 .cfi_def_cfa_offset 4
 5236 002e BD46     	 mov sp,r7
 5237              	.LCFI419:
 5238              	 .cfi_def_cfa_register 13
 5239              	 
 5240 0030 5DF8047B 	 ldr r7,[sp],#4
 5241              	.LCFI420:
 5242              	 .cfi_restore 7
 5243              	 .cfi_def_cfa_offset 0
 5244 0034 7047     	 bx lr
 5245              	 .cfi_endproc
 5246              	.LFE286:
 5248 0036 00BF     	 .section .text.XMC_VADC_GROUP_SetResultInterruptNode,"ax",%progbits
 5249              	 .align 2
 5250              	 .global XMC_VADC_GROUP_SetResultInterruptNode
 5251              	 .thumb
 5252              	 .thumb_func
 5254              	XMC_VADC_GROUP_SetResultInterruptNode:
 5255              	.LFB287:
1965:../Libraries/XMCLib/src/xmc_vadc.c **** 
1966:../Libraries/XMCLib/src/xmc_vadc.c **** 
1967:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select a service request line (NVIC Node) for result event of specified unit of result ha
1968:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
1969:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const uint32_t res_reg,
1970:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const XMC_VADC_SR_t sr)
1971:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5256              	 .loc 2 1971 0
 5257              	 .cfi_startproc
 5258              	 
 5259              	 
 5260              	 
 5261 0000 80B4     	 push {r7}
 5262              	.LCFI421:
 5263              	 .cfi_def_cfa_offset 4
 5264              	 .cfi_offset 7,-4
 5265 0002 87B0     	 sub sp,sp,#28
 5266              	.LCFI422:
 5267              	 .cfi_def_cfa_offset 32
 5268 0004 00AF     	 add r7,sp,#0
 5269              	.LCFI423:
 5270              	 .cfi_def_cfa_register 7
 5271 0006 F860     	 str r0,[r7,#12]
 5272 0008 B960     	 str r1,[r7,#8]
 5273 000a 1346     	 mov r3,r2
 5274 000c FB71     	 strb r3,[r7,#7]
1972:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t route_mask;
1973:../Libraries/XMCLib/src/xmc_vadc.c **** 
1974:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
1975:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Result Register", ((res_reg) < XMC_VADC_N
1976:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_S
1977:../Libraries/XMCLib/src/xmc_vadc.c **** 
1978:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res_reg <= 7U)
 5275              	 .loc 2 1978 0
 5276 000e BB68     	 ldr r3,[r7,#8]
 5277 0010 072B     	 cmp r3,#7
 5278 0012 18D8     	 bhi .L182
1979:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1980:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask  = group_ptr->REVNP0;
 5279              	 .loc 2 1980 0
 5280 0014 FB68     	 ldr r3,[r7,#12]
 5281 0016 D3F8B031 	 ldr r3,[r3,#432]
 5282 001a 7B61     	 str r3,[r7,#20]
1981:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (res_reg * (uint32_t)4) ));
 5283              	 .loc 2 1981 0
 5284 001c BB68     	 ldr r3,[r7,#8]
 5285 001e 9B00     	 lsls r3,r3,#2
 5286 0020 1A46     	 mov r2,r3
 5287 0022 0F23     	 movs r3,#15
 5288 0024 9340     	 lsls r3,r3,r2
 5289 0026 DB43     	 mvns r3,r3
 5290 0028 7A69     	 ldr r2,[r7,#20]
 5291 002a 1340     	 ands r3,r3,r2
 5292 002c 7B61     	 str r3,[r7,#20]
1982:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
 5293              	 .loc 2 1982 0
 5294 002e FB79     	 ldrb r3,[r7,#7]
 5295 0030 BA68     	 ldr r2,[r7,#8]
 5296 0032 9200     	 lsls r2,r2,#2
 5297 0034 9340     	 lsls r3,r3,r2
 5298 0036 7A69     	 ldr r2,[r7,#20]
 5299 0038 1343     	 orrs r3,r3,r2
 5300 003a 7B61     	 str r3,[r7,#20]
1983:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP0 = route_mask;
 5301              	 .loc 2 1983 0
 5302 003c FB68     	 ldr r3,[r7,#12]
 5303 003e 7A69     	 ldr r2,[r7,#20]
 5304 0040 C3F8B021 	 str r2,[r3,#432]
 5305 0044 1EE0     	 b .L181
 5306              	.L182:
1984:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1985:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1986:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1987:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask = group_ptr->REVNP1;
 5307              	 .loc 2 1987 0
 5308 0046 FB68     	 ldr r3,[r7,#12]
 5309 0048 D3F8B431 	 ldr r3,[r3,#436]
 5310 004c 7B61     	 str r3,[r7,#20]
1988:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
 5311              	 .loc 2 1988 0
 5312 004e BB68     	 ldr r3,[r7,#8]
 5313 0050 03F18043 	 add r3,r3,#1073741824
 5314 0054 083B     	 subs r3,r3,#8
 5315 0056 9B00     	 lsls r3,r3,#2
 5316 0058 1A46     	 mov r2,r3
 5317 005a 0F23     	 movs r3,#15
 5318 005c 9340     	 lsls r3,r3,r2
 5319 005e DB43     	 mvns r3,r3
 5320 0060 7A69     	 ldr r2,[r7,#20]
 5321 0062 1340     	 ands r3,r3,r2
 5322 0064 7B61     	 str r3,[r7,#20]
1989:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
 5323              	 .loc 2 1989 0
 5324 0066 FA79     	 ldrb r2,[r7,#7]
 5325 0068 BB68     	 ldr r3,[r7,#8]
 5326 006a 03F18043 	 add r3,r3,#1073741824
 5327 006e 083B     	 subs r3,r3,#8
 5328 0070 9B00     	 lsls r3,r3,#2
 5329 0072 02FA03F3 	 lsl r3,r2,r3
 5330 0076 7A69     	 ldr r2,[r7,#20]
 5331 0078 1343     	 orrs r3,r3,r2
 5332 007a 7B61     	 str r3,[r7,#20]
1990:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP1 = route_mask;
 5333              	 .loc 2 1990 0
 5334 007c FB68     	 ldr r3,[r7,#12]
 5335 007e 7A69     	 ldr r2,[r7,#20]
 5336 0080 C3F8B421 	 str r2,[r3,#436]
 5337              	.L181:
1991:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1992:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5338              	 .loc 2 1992 0
 5339 0084 1C37     	 adds r7,r7,#28
 5340              	.LCFI424:
 5341              	 .cfi_def_cfa_offset 4
 5342 0086 BD46     	 mov sp,r7
 5343              	.LCFI425:
 5344              	 .cfi_def_cfa_register 13
 5345              	 
 5346 0088 5DF8047B 	 ldr r7,[sp],#4
 5347              	.LCFI426:
 5348              	 .cfi_restore 7
 5349              	 .cfi_def_cfa_offset 0
 5350 008c 7047     	 bx lr
 5351              	 .cfi_endproc
 5352              	.LFE287:
 5354 008e 00BF     	 .section .text.XMC_VADC_GROUP_GetResultFifoTail,"ax",%progbits
 5355              	 .align 2
 5356              	 .global XMC_VADC_GROUP_GetResultFifoTail
 5357              	 .thumb
 5358              	 .thumb_func
 5360              	XMC_VADC_GROUP_GetResultFifoTail:
 5361              	.LFB288:
1993:../Libraries/XMCLib/src/xmc_vadc.c **** 
1994:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the tail of the fifo which the specified result register is a part of */
1995:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_GetResultFifoTail(XMC_VADC_GROUP_t *const group_ptr, uint32_t res_reg)
1996:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5362              	 .loc 2 1996 0
 5363              	 .cfi_startproc
 5364              	 
 5365              	 
 5366 0000 80B5     	 push {r7,lr}
 5367              	.LCFI427:
 5368              	 .cfi_def_cfa_offset 8
 5369              	 .cfi_offset 7,-8
 5370              	 .cfi_offset 14,-4
 5371 0002 86B0     	 sub sp,sp,#24
 5372              	.LCFI428:
 5373              	 .cfi_def_cfa_offset 32
 5374 0004 00AF     	 add r7,sp,#0
 5375              	.LCFI429:
 5376              	 .cfi_def_cfa_register 7
 5377 0006 7860     	 str r0,[r7,#4]
 5378 0008 3960     	 str r1,[r7]
1997:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t tail;
1998:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr;
1999:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t i;
2000:../Libraries/XMCLib/src/xmc_vadc.c ****   bool exit_flag;
2001:../Libraries/XMCLib/src/xmc_vadc.c **** 
2002:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoTail:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2003:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoTail:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
2004:../Libraries/XMCLib/src/xmc_vadc.c **** 
2005:../Libraries/XMCLib/src/xmc_vadc.c ****   tail = 0U;
 5379              	 .loc 2 2005 0
 5380 000a 0023     	 movs r3,#0
 5381 000c 7B61     	 str r3,[r7,#20]
2006:../Libraries/XMCLib/src/xmc_vadc.c ****   exit_flag= (bool)false;
 5382              	 .loc 2 2006 0
 5383 000e 0023     	 movs r3,#0
 5384 0010 FB73     	 strb r3,[r7,#15]
2007:../Libraries/XMCLib/src/xmc_vadc.c **** 
2008:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((bool)true == XMC_VADC_GROUP_IsResultRegisterFifoHead(group_ptr, res_reg))
 5385              	 .loc 2 2008 0
 5386 0012 7868     	 ldr r0,[r7,#4]
 5387 0014 3968     	 ldr r1,[r7]
 5388 0016 FFF7FEFF 	 bl XMC_VADC_GROUP_IsResultRegisterFifoHead
 5389 001a 0346     	 mov r3,r0
 5390 001c 002B     	 cmp r3,#0
 5391 001e 02D0     	 beq .L185
2009:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2010:../Libraries/XMCLib/src/xmc_vadc.c ****     res_reg = res_reg - 1U;
 5392              	 .loc 2 2010 0
 5393 0020 3B68     	 ldr r3,[r7]
 5394 0022 013B     	 subs r3,r3,#1
 5395 0024 3B60     	 str r3,[r7]
 5396              	.L185:
2011:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2012:../Libraries/XMCLib/src/xmc_vadc.c **** 
2013:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Border condition */
2014:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == res_reg)
 5397              	 .loc 2 2014 0
 5398 0026 3B68     	 ldr r3,[r7]
 5399 0028 002B     	 cmp r3,#0
 5400 002a 02D1     	 bne .L186
2015:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2016:../Libraries/XMCLib/src/xmc_vadc.c ****     tail = 0U;
 5401              	 .loc 2 2016 0
 5402 002c 0023     	 movs r3,#0
 5403 002e 7B61     	 str r3,[r7,#20]
 5404 0030 26E0     	 b .L187
 5405              	.L186:
2017:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2018:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2019:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2020:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Stop either at a node that does not have FEN set or at Node-0 */
2021:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i = (int32_t)res_reg; i >= (int32_t)0; i--)
 5406              	 .loc 2 2021 0
 5407 0032 3B68     	 ldr r3,[r7]
 5408 0034 3B61     	 str r3,[r7,#16]
 5409 0036 20E0     	 b .L188
 5410              	.L193:
2022:../Libraries/XMCLib/src/xmc_vadc.c ****     {
2023:../Libraries/XMCLib/src/xmc_vadc.c ****        rcr = group_ptr->RCR[i];
 5411              	 .loc 2 2023 0
 5412 0038 7B68     	 ldr r3,[r7,#4]
 5413 003a 3A69     	 ldr r2,[r7,#16]
 5414 003c A032     	 adds r2,r2,#160
 5415 003e 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5416 0042 BB60     	 str r3,[r7,#8]
2024:../Libraries/XMCLib/src/xmc_vadc.c ****        rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5417              	 .loc 2 2024 0
 5418 0044 BB68     	 ldr r3,[r7,#8]
 5419 0046 03F0C063 	 and r3,r3,#100663296
 5420 004a BB60     	 str r3,[r7,#8]
2025:../Libraries/XMCLib/src/xmc_vadc.c **** 
2026:../Libraries/XMCLib/src/xmc_vadc.c ****        if (rcr)
 5421              	 .loc 2 2026 0
 5422 004c BB68     	 ldr r3,[r7,#8]
 5423 004e 002B     	 cmp r3,#0
 5424 0050 07D0     	 beq .L189
2027:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2028:../Libraries/XMCLib/src/xmc_vadc.c ****          if ((int32_t)0 == i)
 5425              	 .loc 2 2028 0
 5426 0052 3B69     	 ldr r3,[r7,#16]
 5427 0054 002B     	 cmp r3,#0
 5428 0056 09D1     	 bne .L191
2029:../Libraries/XMCLib/src/xmc_vadc.c ****          {
2030:../Libraries/XMCLib/src/xmc_vadc.c ****           /* No more nodes. Stop here */
2031:../Libraries/XMCLib/src/xmc_vadc.c ****           tail = (uint32_t)0;
 5429              	 .loc 2 2031 0
 5430 0058 0023     	 movs r3,#0
 5431 005a 7B61     	 str r3,[r7,#20]
2032:../Libraries/XMCLib/src/xmc_vadc.c ****           exit_flag = (bool)true;
 5432              	 .loc 2 2032 0
 5433 005c 0123     	 movs r3,#1
 5434 005e FB73     	 strb r3,[r7,#15]
 5435 0060 04E0     	 b .L191
 5436              	.L189:
2033:../Libraries/XMCLib/src/xmc_vadc.c ****          }
2034:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2035:../Libraries/XMCLib/src/xmc_vadc.c ****        else
2036:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2037:../Libraries/XMCLib/src/xmc_vadc.c ****          /* The preceding register forms the tail of the FIFO */
2038:../Libraries/XMCLib/src/xmc_vadc.c ****          tail = (uint32_t)i + (uint32_t)1;
 5437              	 .loc 2 2038 0
 5438 0062 3B69     	 ldr r3,[r7,#16]
 5439 0064 0133     	 adds r3,r3,#1
 5440 0066 7B61     	 str r3,[r7,#20]
2039:../Libraries/XMCLib/src/xmc_vadc.c ****          exit_flag = (bool)true;
 5441              	 .loc 2 2039 0
 5442 0068 0123     	 movs r3,#1
 5443 006a FB73     	 strb r3,[r7,#15]
 5444              	.L191:
2040:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2041:../Libraries/XMCLib/src/xmc_vadc.c ****        if (exit_flag)
 5445              	 .loc 2 2041 0
 5446 006c FB7B     	 ldrb r3,[r7,#15]
 5447 006e 002B     	 cmp r3,#0
 5448 0070 00D0     	 beq .L192
2042:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2043:../Libraries/XMCLib/src/xmc_vadc.c ****          break;
 5449              	 .loc 2 2043 0
 5450 0072 05E0     	 b .L187
 5451              	.L192:
2021:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5452              	 .loc 2 2021 0 discriminator 2
 5453 0074 3B69     	 ldr r3,[r7,#16]
 5454 0076 013B     	 subs r3,r3,#1
 5455 0078 3B61     	 str r3,[r7,#16]
 5456              	.L188:
2021:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5457              	 .loc 2 2021 0 is_stmt 0 discriminator 1
 5458 007a 3B69     	 ldr r3,[r7,#16]
 5459 007c 002B     	 cmp r3,#0
 5460 007e DBDA     	 bge .L193
 5461              	.L187:
2044:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2045:../Libraries/XMCLib/src/xmc_vadc.c ****     }
2046:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2047:../Libraries/XMCLib/src/xmc_vadc.c ****   return tail;
 5462              	 .loc 2 2047 0 is_stmt 1
 5463 0080 7B69     	 ldr r3,[r7,#20]
2048:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5464              	 .loc 2 2048 0
 5465 0082 1846     	 mov r0,r3
 5466 0084 1837     	 adds r7,r7,#24
 5467              	.LCFI430:
 5468              	 .cfi_def_cfa_offset 8
 5469 0086 BD46     	 mov sp,r7
 5470              	.LCFI431:
 5471              	 .cfi_def_cfa_register 13
 5472              	 
 5473 0088 80BD     	 pop {r7,pc}
 5474              	 .cfi_endproc
 5475              	.LFE288:
 5477              	 .section .text.XMC_VADC_GROUP_GetResultFifoHead,"ax",%progbits
 5478              	 .align 2
 5479              	 .global XMC_VADC_GROUP_GetResultFifoHead
 5480              	 .thumb
 5481              	 .thumb_func
 5483              	XMC_VADC_GROUP_GetResultFifoHead:
 5484              	.LFB289:
2049:../Libraries/XMCLib/src/xmc_vadc.c **** 
2050:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the head of the fifo which the specified result register is a part of */
2051:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_GetResultFifoHead(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg
2052:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5485              	 .loc 2 2052 0
 5486              	 .cfi_startproc
 5487              	 
 5488              	 
 5489 0000 80B5     	 push {r7,lr}
 5490              	.LCFI432:
 5491              	 .cfi_def_cfa_offset 8
 5492              	 .cfi_offset 7,-8
 5493              	 .cfi_offset 14,-4
 5494 0002 86B0     	 sub sp,sp,#24
 5495              	.LCFI433:
 5496              	 .cfi_def_cfa_offset 32
 5497 0004 00AF     	 add r7,sp,#0
 5498              	.LCFI434:
 5499              	 .cfi_def_cfa_register 7
 5500 0006 7860     	 str r0,[r7,#4]
 5501 0008 3960     	 str r1,[r7]
2053:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t head;
2054:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr;
2055:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
2056:../Libraries/XMCLib/src/xmc_vadc.c **** 
2057:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoHead:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2058:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoHead:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
2059:../Libraries/XMCLib/src/xmc_vadc.c **** 
2060:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((bool)true == XMC_VADC_GROUP_IsResultRegisterFifoHead(group_ptr, res_reg))
 5502              	 .loc 2 2060 0
 5503 000a 7868     	 ldr r0,[r7,#4]
 5504 000c 3968     	 ldr r1,[r7]
 5505 000e FFF7FEFF 	 bl XMC_VADC_GROUP_IsResultRegisterFifoHead
 5506 0012 0346     	 mov r3,r0
 5507 0014 002B     	 cmp r3,#0
 5508 0016 02D0     	 beq .L196
2061:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2062:../Libraries/XMCLib/src/xmc_vadc.c ****       head = res_reg;
 5509              	 .loc 2 2062 0
 5510 0018 3B68     	 ldr r3,[r7]
 5511 001a 7B61     	 str r3,[r7,#20]
 5512 001c 1AE0     	 b .L197
 5513              	.L196:
2063:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2064:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2065:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2066:../Libraries/XMCLib/src/xmc_vadc.c ****     head = XMC_VADC_NUM_RESULT_REGISTERS - (uint32_t)1;
 5514              	 .loc 2 2066 0
 5515 001e 0F23     	 movs r3,#15
 5516 0020 7B61     	 str r3,[r7,#20]
2067:../Libraries/XMCLib/src/xmc_vadc.c **** 
2068:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i = res_reg; i < XMC_VADC_NUM_RESULT_REGISTERS ; i++)
 5517              	 .loc 2 2068 0
 5518 0022 3B68     	 ldr r3,[r7]
 5519 0024 3B61     	 str r3,[r7,#16]
 5520 0026 12E0     	 b .L198
 5521              	.L200:
2069:../Libraries/XMCLib/src/xmc_vadc.c ****     {
2070:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr = group_ptr->RCR[i];
 5522              	 .loc 2 2070 0
 5523 0028 7B68     	 ldr r3,[r7,#4]
 5524 002a 3A69     	 ldr r2,[r7,#16]
 5525 002c A032     	 adds r2,r2,#160
 5526 002e 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5527 0032 FB60     	 str r3,[r7,#12]
2071:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5528              	 .loc 2 2071 0
 5529 0034 FB68     	 ldr r3,[r7,#12]
 5530 0036 03F0C063 	 and r3,r3,#100663296
 5531 003a FB60     	 str r3,[r7,#12]
2072:../Libraries/XMCLib/src/xmc_vadc.c **** 
2073:../Libraries/XMCLib/src/xmc_vadc.c ****       if (!rcr)
 5532              	 .loc 2 2073 0
 5533 003c FB68     	 ldr r3,[r7,#12]
 5534 003e 002B     	 cmp r3,#0
 5535 0040 02D1     	 bne .L199
2074:../Libraries/XMCLib/src/xmc_vadc.c ****       {
2075:../Libraries/XMCLib/src/xmc_vadc.c ****         /* This node forms the head of the FIFO */
2076:../Libraries/XMCLib/src/xmc_vadc.c ****         head = i ;
 5536              	 .loc 2 2076 0
 5537 0042 3B69     	 ldr r3,[r7,#16]
 5538 0044 7B61     	 str r3,[r7,#20]
2077:../Libraries/XMCLib/src/xmc_vadc.c ****         break;
 5539              	 .loc 2 2077 0
 5540 0046 05E0     	 b .L197
 5541              	.L199:
2068:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5542              	 .loc 2 2068 0 discriminator 2
 5543 0048 3B69     	 ldr r3,[r7,#16]
 5544 004a 0133     	 adds r3,r3,#1
 5545 004c 3B61     	 str r3,[r7,#16]
 5546              	.L198:
2068:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5547              	 .loc 2 2068 0 is_stmt 0 discriminator 1
 5548 004e 3B69     	 ldr r3,[r7,#16]
 5549 0050 0F2B     	 cmp r3,#15
 5550 0052 E9D9     	 bls .L200
 5551              	.L197:
2078:../Libraries/XMCLib/src/xmc_vadc.c ****       }
2079:../Libraries/XMCLib/src/xmc_vadc.c ****     }
2080:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2081:../Libraries/XMCLib/src/xmc_vadc.c ****   return head;
 5552              	 .loc 2 2081 0 is_stmt 1
 5553 0054 7B69     	 ldr r3,[r7,#20]
2082:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5554              	 .loc 2 2082 0
 5555 0056 1846     	 mov r0,r3
 5556 0058 1837     	 adds r7,r7,#24
 5557              	.LCFI435:
 5558              	 .cfi_def_cfa_offset 8
 5559 005a BD46     	 mov sp,r7
 5560              	.LCFI436:
 5561              	 .cfi_def_cfa_register 13
 5562              	 
 5563 005c 80BD     	 pop {r7,pc}
 5564              	 .cfi_endproc
 5565              	.LFE289:
 5567 005e 00BF     	 .section .text.XMC_VADC_GROUP_IsResultRegisterFifoHead,"ax",%progbits
 5568              	 .align 2
 5569              	 .global XMC_VADC_GROUP_IsResultRegisterFifoHead
 5570              	 .thumb
 5571              	 .thumb_func
 5573              	XMC_VADC_GROUP_IsResultRegisterFifoHead:
 5574              	.LFB290:
2083:../Libraries/XMCLib/src/xmc_vadc.c **** 
2084:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine if the specified result register is the head of a result fifo */
2085:../Libraries/XMCLib/src/xmc_vadc.c **** bool XMC_VADC_GROUP_IsResultRegisterFifoHead(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_
2086:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5575              	 .loc 2 2086 0
 5576              	 .cfi_startproc
 5577              	 
 5578              	 
 5579              	 
 5580 0000 80B4     	 push {r7}
 5581              	.LCFI437:
 5582              	 .cfi_def_cfa_offset 4
 5583              	 .cfi_offset 7,-4
 5584 0002 87B0     	 sub sp,sp,#28
 5585              	.LCFI438:
 5586              	 .cfi_def_cfa_offset 32
 5587 0004 00AF     	 add r7,sp,#0
 5588              	.LCFI439:
 5589              	 .cfi_def_cfa_register 7
 5590 0006 7860     	 str r0,[r7,#4]
 5591 0008 3960     	 str r1,[r7]
2087:../Libraries/XMCLib/src/xmc_vadc.c ****   bool ret_val;
2088:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr_head;
2089:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr_next;
2090:../Libraries/XMCLib/src/xmc_vadc.c **** 
2091:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsResultRegisterFifoHead:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2092:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsResultRegisterFifoHead:Wrong Result Register",
2093:../Libraries/XMCLib/src/xmc_vadc.c ****              ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
2094:../Libraries/XMCLib/src/xmc_vadc.c **** 
2095:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head = group_ptr->RCR[res_reg];
 5592              	 .loc 2 2095 0
 5593 000a 7B68     	 ldr r3,[r7,#4]
 5594 000c 3A68     	 ldr r2,[r7]
 5595 000e A032     	 adds r2,r2,#160
 5596 0010 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5597 0014 3B61     	 str r3,[r7,#16]
2096:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5598              	 .loc 2 2096 0
 5599 0016 3B69     	 ldr r3,[r7,#16]
 5600 0018 03F0C063 	 and r3,r3,#100663296
 5601 001c 3B61     	 str r3,[r7,#16]
2097:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next = group_ptr->RCR[res_reg - (uint32_t)1];
 5602              	 .loc 2 2097 0
 5603 001e 3B68     	 ldr r3,[r7]
 5604 0020 5A1E     	 subs r2,r3,#1
 5605 0022 7B68     	 ldr r3,[r7,#4]
 5606 0024 A032     	 adds r2,r2,#160
 5607 0026 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5608 002a FB60     	 str r3,[r7,#12]
2098:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5609              	 .loc 2 2098 0
 5610 002c FB68     	 ldr r3,[r7,#12]
 5611 002e 03F0C063 	 and r3,r3,#100663296
 5612 0032 FB60     	 str r3,[r7,#12]
2099:../Libraries/XMCLib/src/xmc_vadc.c **** 
2100:../Libraries/XMCLib/src/xmc_vadc.c ****   if (rcr_head)
 5613              	 .loc 2 2100 0
 5614 0034 3B69     	 ldr r3,[r7,#16]
 5615 0036 002B     	 cmp r3,#0
 5616 0038 02D0     	 beq .L203
2101:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2102:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)false;
 5617              	 .loc 2 2102 0
 5618 003a 0023     	 movs r3,#0
 5619 003c FB75     	 strb r3,[r7,#23]
 5620 003e 07E0     	 b .L204
 5621              	.L203:
2103:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2104:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (rcr_next)
 5622              	 .loc 2 2104 0
 5623 0040 FB68     	 ldr r3,[r7,#12]
 5624 0042 002B     	 cmp r3,#0
 5625 0044 02D0     	 beq .L205
2105:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2106:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)true;
 5626              	 .loc 2 2106 0
 5627 0046 0123     	 movs r3,#1
 5628 0048 FB75     	 strb r3,[r7,#23]
 5629 004a 01E0     	 b .L204
 5630              	.L205:
2107:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2108:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2109:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2110:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)false;
 5631              	 .loc 2 2110 0
 5632 004c 0023     	 movs r3,#0
 5633 004e FB75     	 strb r3,[r7,#23]
 5634              	.L204:
2111:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2112:../Libraries/XMCLib/src/xmc_vadc.c **** 
2113:../Libraries/XMCLib/src/xmc_vadc.c ****   return ret_val;
 5635              	 .loc 2 2113 0
 5636 0050 FB7D     	 ldrb r3,[r7,#23]
2114:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5637              	 .loc 2 2114 0
 5638 0052 1846     	 mov r0,r3
 5639 0054 1C37     	 adds r7,r7,#28
 5640              	.LCFI440:
 5641              	 .cfi_def_cfa_offset 4
 5642 0056 BD46     	 mov sp,r7
 5643              	.LCFI441:
 5644              	 .cfi_def_cfa_register 13
 5645              	 
 5646 0058 5DF8047B 	 ldr r7,[sp],#4
 5647              	.LCFI442:
 5648              	 .cfi_restore 7
 5649              	 .cfi_def_cfa_offset 0
 5650 005c 7047     	 bx lr
 5651              	 .cfi_endproc
 5652              	.LFE290:
 5654 005e 00BF     	 .text
 5655              	.Letext0:
 5656              	 .file 3 "e:\\davev4\\dave-4.1.4\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 5657              	 .file 4 "e:\\davev4\\dave-4.1.4\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 5658              	 .file 5 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest/Libraries/CMSIS/Infineon/XMC4700_series/Include/XMC4700.h"
 5659              	 .file 6 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest\\Libraries\\XMCLib\\inc/xmc4_scu.h"
 5660              	 .file 7 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest/Libraries/CMSIS/Include/core_cm4.h"
 5661              	 .file 8 "D:\\dholler\\Dokumente\\uni\\bus\\xmc\\priotest/Libraries/CMSIS/Infineon/XMC4700_series/Include/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_vadc.c
    {standard input}:20     .text.XMC_VADC_GROUP_ExternalMuxControlInit:00000000 $t
    {standard input}:24     .text.XMC_VADC_GROUP_ExternalMuxControlInit:00000000 XMC_VADC_GROUP_ExternalMuxControlInit
    {standard input}:114    .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot:00000000 $t
    {standard input}:118    .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot:00000000 XMC_VADC_GROUP_ScanEnableArbitrationSlot
    {standard input}:159    .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot:00000000 $t
    {standard input}:163    .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot:00000000 XMC_VADC_GROUP_ScanDisableArbitrationSlot
    {standard input}:204    .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:00000000 $t
    {standard input}:208    .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:00000000 XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
    {standard input}:249    .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:00000000 $t
    {standard input}:253    .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:00000000 XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
    {standard input}:294    .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot:00000000 $t
    {standard input}:298    .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot:00000000 XMC_VADC_GROUP_QueueEnableArbitrationSlot
    {standard input}:339    .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot:00000000 $t
    {standard input}:343    .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot:00000000 XMC_VADC_GROUP_QueueDisableArbitrationSlot
    {standard input}:384    .text.XMC_VADC_GROUP_QueueFlushEntries:00000000 $t
    {standard input}:388    .text.XMC_VADC_GROUP_QueueFlushEntries:00000000 XMC_VADC_GROUP_QueueFlushEntries
    {standard input}:438    .rodata.g_xmc_vadc_group_array:00000000 $d
    {standard input}:441    .rodata.g_xmc_vadc_group_array:00000000 g_xmc_vadc_group_array
    {standard input}:447    .text.XMC_VADC_GLOBAL_EnableModule:00000000 $t
    {standard input}:452    .text.XMC_VADC_GLOBAL_EnableModule:00000000 XMC_VADC_GLOBAL_EnableModule
    {standard input}:479    .text.XMC_VADC_GLOBAL_DisableModule:00000000 $t
    {standard input}:484    .text.XMC_VADC_GLOBAL_DisableModule:00000000 XMC_VADC_GLOBAL_DisableModule
    {standard input}:510    .text.XMC_VADC_GLOBAL_Init:00000000 $t
    {standard input}:515    .text.XMC_VADC_GLOBAL_Init:00000000 XMC_VADC_GLOBAL_Init
    {standard input}:580    .text.XMC_VADC_GLOBAL_InputClassInit:00000000 $t
    {standard input}:585    .text.XMC_VADC_GLOBAL_InputClassInit:00000000 XMC_VADC_GLOBAL_InputClassInit
    {standard input}:646    .text.XMC_VADC_GLOBAL_InputClassInit:00000044 $d
    {standard input}:651    .text.XMC_VADC_GLOBAL_StartupCalibration:00000000 $t
    {standard input}:656    .text.XMC_VADC_GLOBAL_StartupCalibration:00000000 XMC_VADC_GLOBAL_StartupCalibration
    {standard input}:731    .text.XMC_VADC_GLOBAL_StartupCalibration:0000005c $d
    {standard input}:736    .text.XMC_VADC_GLOBAL_SetBoundaries:00000000 $t
    {standard input}:741    .text.XMC_VADC_GLOBAL_SetBoundaries:00000000 XMC_VADC_GLOBAL_SetBoundaries
    {standard input}:796    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000000 $t
    {standard input}:801    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000000 XMC_VADC_GLOBAL_SetIndividualBoundary
    {standard input}:880    .text.XMC_VADC_GLOBAL_SetCompareValue:00000000 $t
    {standard input}:885    .text.XMC_VADC_GLOBAL_SetCompareValue:00000000 XMC_VADC_GLOBAL_SetCompareValue
    {standard input}:937    .text.XMC_VADC_GLOBAL_GetCompareResult:00000000 $t
    {standard input}:942    .text.XMC_VADC_GLOBAL_GetCompareResult:00000000 XMC_VADC_GLOBAL_GetCompareResult
    {standard input}:1000   .text.XMC_VADC_GLOBAL_BindGroupToEMux:00000000 $t
    {standard input}:1005   .text.XMC_VADC_GLOBAL_BindGroupToEMux:00000000 XMC_VADC_GLOBAL_BindGroupToEMux
    {standard input}:1078   .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:00000000 $t
    {standard input}:1083   .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:00000000 XMC_VADC_GLOBAL_SetResultEventInterruptNode
    {standard input}:1148   .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:1153   .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:00000000 XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
    {standard input}:1217   .text.XMC_VADC_GROUP_Init:00000000 $t
    {standard input}:1222   .text.XMC_VADC_GROUP_Init:00000000 XMC_VADC_GROUP_Init
    {standard input}:1302   .text.XMC_VADC_GROUP_InputClassInit:00000000 XMC_VADC_GROUP_InputClassInit
    {standard input}:1297   .text.XMC_VADC_GROUP_InputClassInit:00000000 $t
    {standard input}:1430   .text.XMC_VADC_GROUP_SetPowerMode:00000000 $t
    {standard input}:1435   .text.XMC_VADC_GROUP_SetPowerMode:00000000 XMC_VADC_GROUP_SetPowerMode
    {standard input}:1489   .text.XMC_VADC_GROUP_SetSyncSlave:00000000 $t
    {standard input}:1494   .text.XMC_VADC_GROUP_SetSyncSlave:00000000 XMC_VADC_GROUP_SetSyncSlave
    {standard input}:1558   .text.XMC_VADC_GROUP_SetSyncMaster:00000000 $t
    {standard input}:1563   .text.XMC_VADC_GROUP_SetSyncMaster:00000000 XMC_VADC_GROUP_SetSyncMaster
    {standard input}:1610   .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000000 $t
    {standard input}:1615   .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000000 XMC_VADC_GROUP_CheckSlaveReadiness
    {standard input}:1698   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000000 $t
    {standard input}:1703   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000000 XMC_VADC_GROUP_IgnoreSlaveReadiness
    {standard input}:1787   .text.XMC_VADC_GROUP_EnableChannelSyncRequest:00000000 $t
    {standard input}:1792   .text.XMC_VADC_GROUP_EnableChannelSyncRequest:00000000 XMC_VADC_GROUP_EnableChannelSyncRequest
    {standard input}:1848   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:00000000 $t
    {standard input}:1853   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:00000000 XMC_VADC_GROUP_DisableChannelSyncRequest
    {standard input}:1909   .text.XMC_VADC_GROUP_IsConverterBusy:00000000 $t
    {standard input}:1914   .text.XMC_VADC_GROUP_IsConverterBusy:00000000 XMC_VADC_GROUP_IsConverterBusy
    {standard input}:1965   .text.XMC_VADC_GROUP_SetBoundaries:00000000 $t
    {standard input}:1970   .text.XMC_VADC_GROUP_SetBoundaries:00000000 XMC_VADC_GROUP_SetBoundaries
    {standard input}:2036   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000000 $t
    {standard input}:2041   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000000 XMC_VADC_GROUP_SetIndividualBoundary
    {standard input}:2120   .text.XMC_VADC_GROUP_TriggerServiceRequest:00000000 $t
    {standard input}:2125   .text.XMC_VADC_GROUP_TriggerServiceRequest:00000000 XMC_VADC_GROUP_TriggerServiceRequest
    {standard input}:2194   .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode:00000000 $t
    {standard input}:2199   .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode:00000000 XMC_VADC_GROUP_SetBoundaryEventInterruptNode
    {standard input}:2261   .text.XMC_VADC_GROUP_ScanInit:00000000 $t
    {standard input}:2266   .text.XMC_VADC_GROUP_ScanInit:00000000 XMC_VADC_GROUP_ScanInit
    {standard input}:2364   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000000 $t
    {standard input}:2369   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000000 XMC_VADC_GROUP_ScanSelectTrigger
    {standard input}:2428   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000000 $t
    {standard input}:2433   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000000 XMC_VADC_GROUP_ScanSelectTriggerEdge
    {standard input}:2492   .text.XMC_VADC_GROUP_ScanSelectGating:00000000 $t
    {standard input}:2497   .text.XMC_VADC_GROUP_ScanSelectGating:00000000 XMC_VADC_GROUP_ScanSelectGating
    {standard input}:2556   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000000 $t
    {standard input}:2561   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000000 XMC_VADC_GROUP_ScanSequenceAbort
    {standard input}:2639   .text.XMC_VADC_GROUP_ScanSequenceAbort:0000007c $d
    {standard input}:2644   .text.XMC_VADC_GROUP_ScanGetNumChannelsPending:00000000 $t
    {standard input}:2649   .text.XMC_VADC_GROUP_ScanGetNumChannelsPending:00000000 XMC_VADC_GROUP_ScanGetNumChannelsPending
    {standard input}:2728   .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:2733   .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:00000000 XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode
    {standard input}:2788   .text.XMC_VADC_GROUP_ScanRemoveChannel:00000000 $t
    {standard input}:2793   .text.XMC_VADC_GROUP_ScanRemoveChannel:00000000 XMC_VADC_GROUP_ScanRemoveChannel
    {standard input}:2846   .text.XMC_VADC_GLOBAL_BackgroundInit:00000000 $t
    {standard input}:2851   .text.XMC_VADC_GLOBAL_BackgroundInit:00000000 XMC_VADC_GLOBAL_BackgroundInit
    {standard input}:3007   .text.XMC_VADC_GLOBAL_BackgroundInit:000000f8 $d
    {standard input}:3012   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000000 $t
    {standard input}:3017   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000000 XMC_VADC_GLOBAL_BackgroundSelectTrigger
    {standard input}:3075   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000000 $t
    {standard input}:3080   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000000 XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge
    {standard input}:3139   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000000 $t
    {standard input}:3144   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000000 XMC_VADC_GLOBAL_BackgroundSelectGating
    {standard input}:3202   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:00000000 $t
    {standard input}:3207   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:00000000 XMC_VADC_GLOBAL_BackgroundAbortSequence
    {standard input}:3317   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:000000a8 $d
    {standard input}:3323   .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:00000000 $t
    {standard input}:3328   .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:00000000 XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending
    {standard input}:3425   .text.XMC_VADC_GROUP_QueueInit:00000000 $t
    {standard input}:3430   .text.XMC_VADC_GROUP_QueueInit:00000000 XMC_VADC_GROUP_QueueInit
    {standard input}:3528   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000000 $t
    {standard input}:3533   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000000 XMC_VADC_GROUP_QueueSelectTrigger
    {standard input}:3592   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000000 $t
    {standard input}:3597   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000000 XMC_VADC_GROUP_QueueSelectTriggerEdge
    {standard input}:3656   .text.XMC_VADC_GROUP_QueueSelectGating:00000000 $t
    {standard input}:3661   .text.XMC_VADC_GROUP_QueueSelectGating:00000000 XMC_VADC_GROUP_QueueSelectGating
    {standard input}:3720   .text.XMC_VADC_GROUP_QueueGetLength:00000000 $t
    {standard input}:3725   .text.XMC_VADC_GROUP_QueueGetLength:00000000 XMC_VADC_GROUP_QueueGetLength
    {standard input}:3797   .text.XMC_VADC_GROUP_QueueAbortSequence:00000000 $t
    {standard input}:3802   .text.XMC_VADC_GROUP_QueueAbortSequence:00000000 XMC_VADC_GROUP_QueueAbortSequence
    {standard input}:3871   .text.XMC_VADC_GROUP_QueueAbortSequence:00000064 $d
    {standard input}:3876   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000000 $t
    {standard input}:3881   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000000 XMC_VADC_GROUP_QueueRemoveChannel
    {standard input}:3979   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000094 $d
    {standard input}:3984   .text.XMC_VADC_GROUP_QueueGetNextChannel:00000000 $t
    {standard input}:3989   .text.XMC_VADC_GROUP_QueueGetNextChannel:00000000 XMC_VADC_GROUP_QueueGetNextChannel
    {standard input}:4057   .text.XMC_VADC_GROUP_QueueGetInterruptedChannel:00000000 $t
    {standard input}:4062   .text.XMC_VADC_GROUP_QueueGetInterruptedChannel:00000000 XMC_VADC_GROUP_QueueGetInterruptedChannel
    {standard input}:4117   .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:4122   .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:00000000 XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode
    {standard input}:4176   .text.XMC_VADC_GROUP_ChannelInit:00000000 $t
    {standard input}:4181   .text.XMC_VADC_GROUP_ChannelInit:00000000 XMC_VADC_GROUP_ChannelInit
    {standard input}:4318   .text.XMC_VADC_GROUP_SetChannelAlias:00000000 $t
    {standard input}:4323   .text.XMC_VADC_GROUP_SetChannelAlias:00000000 XMC_VADC_GROUP_SetChannelAlias
    {standard input}:4400   .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds:00000000 $t
    {standard input}:4405   .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds:00000000 XMC_VADC_GROUP_ChannelIsResultOutOfBounds
    {standard input}:4486   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000000 $t
    {standard input}:4491   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000000 XMC_VADC_GROUP_ChannelSetInputReference
    {standard input}:4551   .text.XMC_VADC_GROUP_ChannelSetResultRegister:00000000 $t
    {standard input}:4556   .text.XMC_VADC_GROUP_ChannelSetResultRegister:00000000 XMC_VADC_GROUP_ChannelSetResultRegister
    {standard input}:4615   .text.XMC_VADC_GROUP_ChannelSetIclass:00000000 $t
    {standard input}:4620   .text.XMC_VADC_GROUP_ChannelSetIclass:00000000 XMC_VADC_GROUP_ChannelSetIclass
    {standard input}:4679   .text.XMC_VADC_GROUP_ChannelGetResultRegister:00000000 $t
    {standard input}:4684   .text.XMC_VADC_GROUP_ChannelGetResultRegister:00000000 XMC_VADC_GROUP_ChannelGetResultRegister
    {standard input}:4731   .text.XMC_VADC_GROUP_ChannelTriggerEvent:00000000 $t
    {standard input}:4736   .text.XMC_VADC_GROUP_ChannelTriggerEvent:00000000 XMC_VADC_GROUP_ChannelTriggerEvent
    {standard input}:4787   .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode:00000000 $t
    {standard input}:4792   .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode:00000000 XMC_VADC_GROUP_ChannelSetEventInterruptNode
    {standard input}:4856   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000000 $t
    {standard input}:4861   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000000 XMC_VADC_GROUP_ChannelTriggerEventGenCriteria
    {standard input}:4921   .text.XMC_VADC_GROUP_ChannelSetBoundarySelection:00000000 $t
    {standard input}:4926   .text.XMC_VADC_GROUP_ChannelSetBoundarySelection:00000000 XMC_VADC_GROUP_ChannelSetBoundarySelection
    {standard input}:4996   .text.XMC_VADC_GROUP_AddResultToFifo:00000000 $t
    {standard input}:5001   .text.XMC_VADC_GROUP_AddResultToFifo:00000000 XMC_VADC_GROUP_AddResultToFifo
    {standard input}:5057   .text.XMC_VADC_GROUP_SetResultFastCompareValue:00000000 $t
    {standard input}:5062   .text.XMC_VADC_GROUP_SetResultFastCompareValue:00000000 XMC_VADC_GROUP_SetResultFastCompareValue
    {standard input}:5123   .text.XMC_VADC_GROUP_GetFastCompareResult:00000000 $t
    {standard input}:5128   .text.XMC_VADC_GROUP_GetFastCompareResult:00000000 XMC_VADC_GROUP_GetFastCompareResult
    {standard input}:5189   .text.XMC_VADC_GROUP_SetResultSubtractionValue:00000000 $t
    {standard input}:5194   .text.XMC_VADC_GROUP_SetResultSubtractionValue:00000000 XMC_VADC_GROUP_SetResultSubtractionValue
    {standard input}:5249   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000000 $t
    {standard input}:5254   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000000 XMC_VADC_GROUP_SetResultInterruptNode
    {standard input}:5355   .text.XMC_VADC_GROUP_GetResultFifoTail:00000000 $t
    {standard input}:5360   .text.XMC_VADC_GROUP_GetResultFifoTail:00000000 XMC_VADC_GROUP_GetResultFifoTail
    {standard input}:5573   .text.XMC_VADC_GROUP_IsResultRegisterFifoHead:00000000 XMC_VADC_GROUP_IsResultRegisterFifoHead
    {standard input}:5478   .text.XMC_VADC_GROUP_GetResultFifoHead:00000000 $t
    {standard input}:5483   .text.XMC_VADC_GROUP_GetResultFifoHead:00000000 XMC_VADC_GROUP_GetResultFifoHead
    {standard input}:5568   .text.XMC_VADC_GROUP_IsResultRegisterFifoHead:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_CLOCK_GatePeripheralClock
